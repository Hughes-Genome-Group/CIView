/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/indexes/index_ciview.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/ciview.js":
/*!***********************!*\
  !*** ./src/ciview.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.CIView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _graphs = __webpack_require__(/*! ./graphs.js */ \"./src/graphs.js\");\n\nvar _dc = __webpack_require__(/*! ./vendor/dc.js */ \"./src/vendor/dc.js\");\n\nvar _image_table = __webpack_require__(/*! ./image_table.js */ \"./src/image_table.js\");\n\nvar _slickDataview = __webpack_require__(/*! ./vendor/slick.dataview.js */ \"./src/vendor/slick.dataview.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CIView = function () {\n\tfunction CIView(config) {\n\t\t_classCallCheck(this, CIView);\n\n\t\tvar self = this;\n\n\t\tthis.filters = {};\n\n\t\tthis.data_view = new _slickDataview.DataView();\n\t\tvar div = $(\"#\" + config.table_div);\n\t\tthis.control_div = $(\"<div>\").css({ width: \"100%\", height: \"26px\" }).attr(\"id\", \"civ-control\").appendTo(div);\n\t\tvar table_div = $(\"<div>\").css({ top: \"25px\", height: \"calc(100% - 26px)\" }).attr(\"id\", \"civ-table\").appendTo(div);\n\t\tthis.filter_panel = new _graphs.FilterPanel(config.filter_div, config.data, function (info) {\n\t\t\tself._filterChanged(info);\n\t\t\tif (self.listener) {\n\t\t\t\tself.listener(info);\n\t\t\t}\n\t\t});\n\t\tthis.image_table = new _image_table.MLVImageTable(table_div, this.data_view, config.image_base_url);\n\t\tthis.data = config.data;\n\n\t\tnew _image_table.MLVImageTableControls(this.image_table, this.control_div);\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = config.graph_groups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar item = _step.value;\n\n\t\t\t\tthis.filter_panel.addFilterSet(item.name, item.height_weight);\n\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator2 = item.graphs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\tvar graph = _step2.value;\n\n\t\t\t\t\t\tthis.filter_panel.addChart(item.name, graph.type, graph.params, graph.name);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.filter_panel.refresh();\n\t\tthis.data_view.setItems(config.data);\n\n\t\tthis.image_table.addListener(\"data_changed\", function (field, data) {\n\t\t\tself.filter_panel.dataChanged(field, true);\n\t\t});\n\t}\n\n\t_createClass(CIView, [{\n\t\tkey: \"addFilterSet\",\n\t\tvalue: function addFilterSet(name, config, div) {\n\t\t\tthis.filter_panel.addFilterSet(name, null, div);\n\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\tvar _didIteratorError3 = false;\n\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator3 = config[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\tvar graph = _step3.value;\n\n\t\t\t\t\tthis.filter_panel.addChart(name, graph.type, graph.params, graph.name);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t_iteratorError3 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"removeFilterSet\",\n\t\tvalue: function removeFilterSet(name) {\n\t\t\tthis.filter_panel.removeFilterSet(name);\n\t\t}\n\t}, {\n\t\tkey: \"addFilter\",\n\t\tvalue: function addFilter(param, filter, name) {\n\t\t\tvar dim = this.filter_panel.ndx.dimension(function (d) {\n\t\t\t\treturn d[param];\n\t\t\t});\n\t\t\tdim.filter(function (d) {\n\t\t\t\treturn filter(d);\n\t\t\t});\n\t\t\tthis.filters[name] = dim;\n\t\t\t_dc.dc.redrawAll();\n\t\t\tthis.filter_panel._chartFiltered(dim.top(1000000));\n\t\t}\n\t}, {\n\t\tkey: \"removeFilter\",\n\t\tvalue: function removeFilter(name) {\n\t\t\tvar dim = this.filters[name];\n\t\t\tif (!dim) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdim.filter(null);\n\t\t\t_dc.dc.redrawAll();\n\t\t\tthis.filter_panel._chartFiltered(dim.top(1000000));\n\t\t\tdim.remove();\n\t\t\tdelete this.filters[name];\n\t\t}\n\t}, {\n\t\tkey: \"addButton\",\n\t\tvalue: function addButton(text, func) {\n\t\t\tvar self = this;\n\t\t\tthis.control_div.append($(\"<button>\").attr(\"class\", \"btn btn-sm btn-primary\").css({ \"margin-left\": \"5px\", \"height\": \"24px\", \"padding\": \"0px 5px\" }).text(text).click(function (e) {\n\t\t\t\tfunc(self.data);\n\t\t\t}));\n\t\t}\n\t}, {\n\t\tkey: \"_filterChanged\",\n\t\tvalue: function _filterChanged(data) {\n\t\t\tthis.data_view.setItems(data);\n\t\t\tthis.image_table.show(1);\n\t\t}\n\t}, {\n\t\tkey: \"setListener\",\n\t\tvalue: function setListener(func) {\n\t\t\tthis.listener = func;\n\t\t}\n\t}]);\n\n\treturn CIView;\n}();\n\nexports.CIView = CIView;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2l2aWV3LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9jaXZpZXcuanM/NmQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZpbHRlclBhbmVsfSAgZnJvbSBcIi4vZ3JhcGhzLmpzXCI7XHJcbmltcG9ydCB7ZGN9IGZyb20gXCIuL3ZlbmRvci9kYy5qc1wiO1xyXG5pbXBvcnQge01MVkltYWdlVGFibGUsTUxWSW1hZ2VUYWJsZUNvbnRyb2xzfSBmcm9tIFwiLi9pbWFnZV90YWJsZS5qc1wiO1xyXG5pbXBvcnQge0RhdGFWaWV3fSBmcm9tIFwiLi92ZW5kb3Ivc2xpY2suZGF0YXZpZXcuanNcIjtcclxuXHJcbmNsYXNzIENJVmlld3tcclxuXHJcblx0XHJcblxyXG5cdGNvbnN0cnVjdG9yKGNvbmZpZyl7XHJcblx0XHRsZXQgc2VsZj10aGlzO1xyXG5cclxuXHRcdHRoaXMuZmlsdGVycz17fTtcclxuXHJcblx0XHR0aGlzLmRhdGFfdmlldyA9ICBuZXcgRGF0YVZpZXcoKTtcclxuXHRcdGxldCBkaXYgPSAkKFwiI1wiK2NvbmZpZy50YWJsZV9kaXYpO1xyXG5cdFx0dGhpcy5jb250cm9sX2Rpdj0kKFwiPGRpdj5cIikuY3NzKHt3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIyNnB4XCJ9KS5hdHRyKFwiaWRcIixcImNpdi1jb250cm9sXCIpLmFwcGVuZFRvKGRpdik7XHJcblx0XHRsZXQgdGFibGVfZGl2PSAkKFwiPGRpdj5cIikuY3NzKHt0b3A6XCIyNXB4XCIsaGVpZ2h0OlwiY2FsYygxMDAlIC0gMjZweClcIn0pLmF0dHIoXCJpZFwiLFwiY2l2LXRhYmxlXCIpLmFwcGVuZFRvKGRpdik7XHJcblx0XHR0aGlzLmZpbHRlcl9wYW5lbCA9IG5ldyBGaWx0ZXJQYW5lbChjb25maWcuZmlsdGVyX2Rpdixjb25maWcuZGF0YSxmdW5jdGlvbihpbmZvKXtcclxuXHRcdFx0c2VsZi5fZmlsdGVyQ2hhbmdlZChpbmZvKTtcclxuXHRcdFx0aWYgKHNlbGYubGlzdGVuZXIpe1xyXG5cdFx0XHRcdHNlbGYubGlzdGVuZXIoaW5mbyk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5pbWFnZV90YWJsZSA9ICBuZXcgTUxWSW1hZ2VUYWJsZSh0YWJsZV9kaXYsdGhpcy5kYXRhX3ZpZXcsY29uZmlnLmltYWdlX2Jhc2VfdXJsKTtcclxuXHRcdHRoaXMuZGF0YSA9IGNvbmZpZy5kYXRhO1xyXG5cclxuXHRcdG5ldyBNTFZJbWFnZVRhYmxlQ29udHJvbHModGhpcy5pbWFnZV90YWJsZSx0aGlzLmNvbnRyb2xfZGl2KTtcclxuXHJcblx0XHRcclxuXHRcdGZvciAobGV0IGl0ZW0gb2YgY29uZmlnLmdyYXBoX2dyb3Vwcyl7XHJcblx0XHRcdHRoaXMuZmlsdGVyX3BhbmVsLmFkZEZpbHRlclNldChpdGVtLm5hbWUsaXRlbS5oZWlnaHRfd2VpZ2h0KTtcclxuXHRcdFx0Zm9yIChsZXQgZ3JhcGggb2YgaXRlbS5ncmFwaHMpe1xyXG5cdFx0XHRcdHRoaXMuZmlsdGVyX3BhbmVsLmFkZENoYXJ0KGl0ZW0ubmFtZSxncmFwaC50eXBlLGdyYXBoLnBhcmFtcyxncmFwaC5uYW1lKTtcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0dGhpcy5maWx0ZXJfcGFuZWwucmVmcmVzaCgpO1xyXG5cdFx0dGhpcy5kYXRhX3ZpZXcuc2V0SXRlbXMoY29uZmlnLmRhdGEpO1xyXG5cclxuXHRcdHRoaXMuaW1hZ2VfdGFibGUuYWRkTGlzdGVuZXIoXCJkYXRhX2NoYW5nZWRcIixmdW5jdGlvbihmaWVsZCxkYXRhKXtcclxuXHRcdFx0c2VsZi5maWx0ZXJfcGFuZWwuZGF0YUNoYW5nZWQoZmllbGQsdHJ1ZSk7XHJcblx0XHR9KVxyXG5cclxuXHR9XHJcblxyXG5cdGFkZEZpbHRlclNldChuYW1lLGNvbmZpZyxkaXYpe1xyXG5cdFx0XHR0aGlzLmZpbHRlcl9wYW5lbC5hZGRGaWx0ZXJTZXQobmFtZSxudWxsLGRpdik7XHJcblx0XHRcdGZvciAobGV0IGdyYXBoIG9mIGNvbmZpZyl7XHJcblx0XHRcdFx0dGhpcy5maWx0ZXJfcGFuZWwuYWRkQ2hhcnQobmFtZSxncmFwaC50eXBlLGdyYXBoLnBhcmFtcyxncmFwaC5uYW1lKVxyXG5cdFx0XHR9XHJcblxyXG5cdH1cclxuXHJcblxyXG5cdHJlbW92ZUZpbHRlclNldChuYW1lKXtcclxuXHRcdHRoaXMuZmlsdGVyX3BhbmVsLnJlbW92ZUZpbHRlclNldChuYW1lKTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0YWRkRmlsdGVyKHBhcmFtLGZpbHRlcixuYW1lKXtcclxuXHRcdGxldCBkaW0gPSB0aGlzLmZpbHRlcl9wYW5lbC5uZHguZGltZW5zaW9uKGZ1bmN0aW9uKGQpe1xyXG5cdFx0XHRyZXR1cm4gZFtwYXJhbV07XHJcblx0XHR9KTtcclxuXHRcdGRpbS5maWx0ZXIoZnVuY3Rpb24oZCl7XHJcblx0XHRcdHJldHVybiBmaWx0ZXIoZCk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZmlsdGVyc1tuYW1lXT1kaW07XHJcblx0XHRkYy5yZWRyYXdBbGwoKTtcclxuXHRcdHRoaXMuZmlsdGVyX3BhbmVsLl9jaGFydEZpbHRlcmVkKGRpbS50b3AoMTAwMDAwMCkpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJlbW92ZUZpbHRlcihuYW1lKXtcclxuXHRcdGxldCBkaW0gPSB0aGlzLmZpbHRlcnNbbmFtZV07XHJcblx0XHRpZiAoIWRpbSl7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGRpbS5maWx0ZXIobnVsbClcclxuXHRcdGRjLnJlZHJhd0FsbCgpO1xyXG5cdFx0dGhpcy5maWx0ZXJfcGFuZWwuX2NoYXJ0RmlsdGVyZWQoZGltLnRvcCgxMDAwMDAwKSk7XHJcblx0XHRkaW0ucmVtb3ZlKCk7XHJcblx0XHRkZWxldGUgdGhpcy5maWx0ZXJzW25hbWVdO1xyXG5cclxuXHR9XHJcblxyXG5cdGFkZEJ1dHRvbih0ZXh0LGZ1bmMpe1xyXG5cdFx0bGV0IHNlbGY9dGhpcztcclxuXHRcdHRoaXMuY29udHJvbF9kaXYuYXBwZW5kKCQoXCI8YnV0dG9uPlwiKS5hdHRyKFwiY2xhc3NcIixcImJ0biBidG4tc20gYnRuLXByaW1hcnlcIikuY3NzKHtcIm1hcmdpbi1sZWZ0XCI6XCI1cHhcIixcImhlaWdodFwiOlwiMjRweFwiLFwicGFkZGluZ1wiOlwiMHB4IDVweFwifSkudGV4dCh0ZXh0KS5jbGljayhmdW5jdGlvbihlKXtcclxuXHRcdFx0ZnVuYyhzZWxmLmRhdGEpO1xyXG5cdFx0fSkpO1xyXG5cclxuXHR9XHJcblxyXG5cdF9maWx0ZXJDaGFuZ2VkKGRhdGEpe1xyXG5cdFx0dGhpcy5kYXRhX3ZpZXcuc2V0SXRlbXMoZGF0YSk7XHJcblx0XHR0aGlzLmltYWdlX3RhYmxlLnNob3coMSk7XHJcblxyXG5cdH1cclxuXHJcblx0c2V0TGlzdGVuZXIoZnVuYyl7XHJcblx0XHR0aGlzLmxpc3RlbmVyPWZ1bmM7XHJcblx0fVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQge0NJVmlld307Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFDQTtBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFxQkE7QUFBQTtBQUNBO0FBQUE7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLQTtBQTFCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBSkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBTUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ciview.js\n");

/***/ }),

/***/ "./src/graphs.js":
/*!***********************!*\
  !*** ./src/graphs.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FilterPanel = exports.MLVChart = exports.MLVBarChart = exports.MLVScatterPlot = exports.MLVRingChart = undefined;\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _d = __webpack_require__(/*! ./vendor/d3.js */ \"./src/vendor/d3.js\");\n\nvar _dc = __webpack_require__(/*! ./vendor/dc.js */ \"./src/vendor/dc.js\");\n\nvar _crossfilter = __webpack_require__(/*! ./vendor/crossfilter.js */ \"./src/vendor/crossfilter.js\");\n\nvar _wgl2di = __webpack_require__(/*! ./webgl/wgl2di.js */ \"./src/webgl/wgl2di.js\");\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n$('html > head').append($('<style>.div-bar_chart svg {padding-left:5px; }</style>'));\n\nvar FilterPanel = function () {\n    function FilterPanel(div_id, data, listener) {\n        _classCallCheck(this, FilterPanel);\n\n        var self = this;\n        this.div = $(\"#\" + div_id);\n        this.extra_divs = {};\n        this.ndx = (0, _crossfilter.crossfilter)(data);\n        this.filtered_ids;\n        this.filter_sets = {};\n        this.filter_sets_length = 0;\n        this.charts = {};\n        this.listener = listener;\n        this.total_height_weight = 0;\n        this.set_margin = 30;\n        this.param_to_graph = {};\n        $(window).on(\"resize\", function (e) {\n            self.resize();\n        });\n    }\n\n    _createClass(FilterPanel, [{\n        key: \"resize\",\n        value: function resize() {\n            var n = this.filter_sets_length;\n            var t_height = this.div.height() - n * this.set_margin;\n            for (var name in this.filter_sets) {\n\n                var fs = this.filter_sets[name];\n                var width = fs.div.width() / fs.charts.length;\n                if (width > fs.dimensions[0][0]) {\n                    width = fs.dimensions[0][0];\n                } else if (width < fs.dimensions[0][1]) {\n                    width = fs.dimensions[0][0];\n                }\n\n                var height = t_height * (fs.height_weight / this.total_height_weight);\n                if (this.extra_divs[name]) {\n                    height = fs.div.parent().height() - this.set_margin;\n                }\n                if (height > fs.dimensions[1][0]) {\n                    height = fs.dimensions[1][0];\n                } else if (height < fs.dimensions[1][1]) {\n                    height = fs.dimensions[1][1];\n                }\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = fs.charts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var chart = _step.value;\n\n                        chart.setSize(width, height);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n            _dc.dc.redrawAll();\n        }\n    }, {\n        key: \"dataChanged\",\n        value: function dataChanged(field, not_broadcast) {\n            var chart = this.param_to_graph[field];\n            if (chart) {\n                chart.dataChanged(not_broadcast);\n                chart.chart.redraw();\n            }\n        }\n    }, {\n        key: \"addFilterSet\",\n        value: function addFilterSet(name, height_weight, custom_div) {\n            var div = $(\"<div style='display:flex'></div>\");\n            if (!custom_div) {\n                div.appendTo(this.div);\n                this.filter_sets_length++;\n            } else {\n                div.appendTo(custom_div);\n                this.extra_divs[name] = custom_div;\n            }\n\n            this.filter_sets[name] = { div: div, dimensions: [[2000, 80], [2000, 80]], charts: [] };\n\n            if (!height_weight) {\n                height_weight = 1;\n            }\n            if (!custom_div) {\n                this.filter_sets[name].height_weight = height_weight;\n                this.total_height_weight += height_weight;\n            }\n        }\n    }, {\n        key: \"removeFilterSet\",\n        value: function removeFilterSet(name) {\n            var fs = this.filter_sets[name];\n            if (!fs) {\n                return false;\n            }\n            var left = null;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = fs.charts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var chart = _step2.value;\n\n                    left = chart.remove();\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            if (!this.extra_divs[name]) {\n                this.filter_sets_length--;\n                this.total_height_weight -= fs.height_weight;\n            } else {\n                delete this.extra_divs[name];\n            }\n\n            fs.div.remove();\n            delete this.filter_sets[name];\n            this._chartFiltered(left);\n            this.resize();\n        }\n    }, {\n        key: \"addChart\",\n        value: function addChart(set, type, params, label, size, cap) {\n            var self = this;\n\n            var id = \"filter-chart-\" + FilterPanel.count++;\n            var div = $(\"<div>\").attr(\"id\", id);\n            div.appendTo(this.filter_sets[set].div);\n            var chart = new FilterPanel.chart_types[type](this.ndx, params, id, label, size, cap);\n            this.charts[label] = chart;\n            this.filter_sets[set].charts.push(chart);\n            chart.setUpdateListener(function (filtered_items, name) {\n                self._chartFiltered(filtered_items, name);\n            });\n            if (typeof params !== \"string\") {\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = params[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var param = _step3.value;\n\n                        this.param_to_graph[param] = chart;\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            } else {\n                this.param_to_graph[params] = chart;\n            }\n        }\n    }, {\n        key: \"_chartFiltered\",\n        value: function _chartFiltered(filtered_items, chart_exclude) {\n            this.filtered_ids = {};\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = filtered_items[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var item = _step4.value;\n\n                    this.filtered_ids[item.id] = true;\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            for (var name in this.charts) {\n                var chart = this.charts[name];\n                if (chart._hide) {\n                    if (name == chart_exclude) {\n                        chart._filter(this.filtered_ids);\n                    } else {\n                        chart._hide(this.filtered_ids);\n                    }\n                }\n            }\n            this.listener(filtered_items, this.filtered_ids);\n        }\n    }, {\n        key: \"setListener\",\n        value: function setListener(func) {\n            this.listener = func;\n        }\n    }, {\n        key: \"refresh\",\n        value: function refresh() {\n\n            _dc.dc.renderAll();\n            this.resize();\n        }\n    }]);\n\n    return FilterPanel;\n}();\n\nvar MLVChart = function () {\n    function MLVChart(ndx, div_id, chart_type, title) {\n        _classCallCheck(this, MLVChart);\n\n        var self = this;\n        this.ndx = ndx;\n        this.div = $(\"#\" + div_id).css({ \"display\": \"inline-block\" });\n        var ti = $(\"<span>\").text(title).appendTo(this.div).css({ \"display\": \"flex\", \"white-space\": \"nowrap\" });\n        this.chart = chart_type(\"#\" + div_id);\n        this.chart.on(\"filtered\", function () {\n            if (self.not_broadcast) {\n                self.not_broadcast = false;\n            } else {\n                self.updateListener(self.dim.top(100000));\n            }\n        });\n\n        this.title = title;\n\n        this.chart.controlsUseVisibility(true);\n\n        //let inner_div=$(\"<div>\");\n        //inner_div.append(\"<span style='font-weight:bold'>\"+this.title+\"</span>\");\n        //inner_div.appendTo(this.div);\n        var reset_but = $(\"<button>\").text(\"reset\").attr(\"class\", \"pull-right reset btn btn-sm btn-primary\").css({ height: \"20px\", \"padding\": \"2px\", \"margin-left\": \"5px\", \"visibility\": \"hidden\" }).click(function (e) {\n            self.chart.filterAll();\n            _dc.dc.redrawAll();\n        }).appendTo(ti);\n\n        this.updateListener = function () {};\n    }\n\n    _createClass(MLVChart, [{\n        key: \"setUpdateListener\",\n        value: function setUpdateListener(func) {\n            this.updateListener = func;\n        }\n    }, {\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            this.chart.width(x).height(y);\n            this.width = x;\n            this.height = y;\n        }\n    }, {\n        key: \"remove\",\n        value: function remove() {\n\n            this.dim.filter(null);\n            var left = this.dim.top(1000000);\n            this.dim.dispose();\n            this.chart.resetSvg();\n            this.div.remove();\n            return left;\n        }\n    }, {\n        key: \"dataChanged\",\n        value: function dataChanged() {}\n    }]);\n\n    return MLVChart;\n}();\n\nvar MLVBarChart = function (_MLVChart) {\n    _inherits(MLVBarChart, _MLVChart);\n\n    function MLVBarChart(ndx, param, div_id, title, size) {\n        _classCallCheck(this, MLVBarChart);\n\n        var _this = _possibleConstructorReturn(this, (MLVBarChart.__proto__ || Object.getPrototypeOf(MLVBarChart)).call(this, ndx, div_id, _dc.dc.barChart, title));\n\n        var self = _this;\n        _this.div.addClass(\"class\", \"div-bar_chart\");\n\n        _this.default_bin_number = 10;\n        _this.param = param;\n\n        //work out \n        _this.dim = ndx.dimension(function (d) {\n            return d[self.param];\n        });\n        _this.max = _this.dim.top(1)[0][param];\n        _this.min = _this.dim.bottom(1)[0][param];\n        if (!size) {\n            size = [300, 200];\n        }\n        _this.setSize(size[0], size[1]);\n\n        _this.setParameters({ max: _this.max, min: _this.min, bin_number: _this.default_bin_number });\n        return _this;\n    }\n\n    _createClass(MLVBarChart, [{\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            this.chart.x(_d.d3.scaleLinear().domain([this.display_min - this.bin_width, this.display_max + this.bin_width]));\n            _get(MLVBarChart.prototype.__proto__ || Object.getPrototypeOf(MLVBarChart.prototype), \"setSize\", this).call(this, x, y);\n        }\n    }, {\n        key: \"setParameters\",\n        value: function setParameters(params) {\n            var self = this;\n            if (!params) {\n                this.display_max = this.max;\n                this.display_min = this.min;\n                this.bin_number = this.default_bin_number;\n            } else {\n                if (params.max || params.max === 0) {\n                    this.display_max = params.max;\n                }\n                if (params.min || params.min === 0) {\n                    this.display_min = params.min;\n                }\n                if (params.bin_number) {\n                    this.bin_number = params.bin_number;\n                }\n            }\n            this.dim.dispose();\n            this.range = this.display_max - this.display_min;\n\n            this.bin_width = this.range / this.bin_number;\n            this.dim = this.ndx.dimension(function (d) {\n                if (d[self.param] > self.display_max) {\n                    return self.display_max;\n                }\n                if (d[self.param] < self.display_min) {\n                    return self.display_min;\n                }\n\n                return d[self.param];\n            });\n            if (this.group) {\n                this.group.dispose();\n            }\n            this.group = this.dim.group(function (d) {\n                return self.bin_width * Math.floor(d / self.bin_width);\n            });\n            this.chart.dimension(this.dim).xUnits(_dc.dc.units.fp.precision(this.bin_width)).group(this.group).x(_d.d3.scaleLinear().domain([this.display_min - this.bin_width, this.display_max + this.bin_width])).elasticY(true);\n            this.chart.render();\n        }\n    }]);\n\n    return MLVBarChart;\n}(MLVChart);\n\nvar WGLScatterPlot = function () {\n    function WGLScatterPlot(ndx, params, div_id, title, size) {\n        _classCallCheck(this, WGLScatterPlot);\n\n        this.name = title;\n        if (!size) {\n            size = [200, 200];\n        }\n        this.x = params[0];\n        this.y = params[1];\n        var self = this;\n        this.dim = ndx.dimension(function (d) {\n            return [d[self.x], d[self.y]];\n        }), this.group = this.dim.group();\n\n        var y_dim = ndx.dimension(function (d) {\n            return d[self.y];\n        });\n        this.max_y = y_dim.top(1)[0][self.y];\n        this.min_y = y_dim.bottom(1)[0][self.y];\n        y_dim.dispose();\n        var x_dim = ndx.dimension(function (d) {\n            return d[self.x];\n        });\n        this.max_x = x_dim.top(1)[0][self.x];\n        this.min_x = x_dim.bottom(1)[0][self.x];\n        x_dim.dispose();\n        var x_margin = Math.round((this.max_x - this.min_x) / 10);\n        var y_margin = Math.round((this.max_y - this.min_y) / 10);\n\n        var x_range = this.max_x - this.min_x;\n        this.x_scale = 1000 / x_range;\n        this.x_scale = this.x_scale > 1 ? 1 : this.x_scale;\n\n        var y_range = this.max_y - this.min_y;\n        this.y_scale = 1000 / y_range;\n        this.y_scale = this.y_scale > 1 ? 1 : this.y_scale;\n\n        var div = $(\"#\" + div_id);\n        this.div = div;\n        var title_div = $(\"<div>\").css({ \"display\": \"flex\", \"white-space\": \"no-wrap\" }).text(title);\n        this.reset_but = $(\"<button>\").attr(\"class\", \"pull-right btn btn-sm btn-primary\").text(\"reset\").css({ height: \"20px\", \"padding\": \"2px\", \"margin-left\": \"5px\", \"visibility\": \"hidden\" }).click(function (e) {\n            self.app.clearBrush();\n            self._createFilter(null);\n            self.reset_but.css(\"visibility\", \"hidden\");\n        }).appendTo(title_div);\n        title_div.appendTo(div);\n        var id = \"wg-graph-\" + WGLScatterPlot.count++;\n        var graph_div = $(\"<div>\").css(\"position\", \"relative\").attr(\"id\", id).appendTo(div);\n        $(\"#\" + div_id).css(\"position\", \"relative\");\n\n        this.radius = y_range / 50;\n        this.app = new _wgl2di.WGL2DI(id, 200, 200);\n        var data = this.dim.top(10000000);\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n            for (var _iterator5 = data[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var item = _step5.value;\n\n                this.app.addCircle([item[params[0]], -item[params[1]]], this.radius, [123, 45, 67], item.id);\n            }\n        } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                    _iterator5.return();\n                }\n            } finally {\n                if (_didIteratorError5) {\n                    throw _iteratorError5;\n                }\n            }\n        }\n\n        this.app.initialise();\n        this.app.addHandler(\"brush_stopped\", function (range) {\n            self.reset_but.css(\"visibility\", \"visible\");\n            range.y_max = -range.y_max;\n            range.y_min = -range.y_min;\n            self._createFilter(range);\n        });\n    }\n\n    _createClass(WGLScatterPlot, [{\n        key: \"setUpdateListener\",\n        value: function setUpdateListener(func) {\n            this.updateListener = func;\n        }\n    }, {\n        key: \"remove\",\n        value: function remove() {\n            this.dim.filter(null);\n            var left = this.dim.top(1000000);\n            this.dim.dispose();\n            this.div.remove();\n            return left;\n        }\n    }, {\n        key: \"_createFilter\",\n        value: function _createFilter(range) {\n            if (range == null) {\n                this.dim.filter(null);\n            } else {\n\n                this.dim.filter(function (d) {\n                    if (d[0] > range.x_max || d[0] < range.x_min) {\n                        return false;\n                    }\n                    if (d[1] < range.y_max || d[1] > range.y_min) {\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            _dc.dc.redrawAll();\n            var name = this.name;\n            if (range == null) {\n                name = null;\n            }\n            this.updateListener(this.dim.top(1000000), name);\n        }\n    }, {\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            this.app.setSize(x, y);\n\n            var x_margin = Math.round((this.max_x - this.min_x) / 10);\n            var y_margin = Math.round((this.max_y - this.min_y) / 10);\n            var x_range = this.max_x - this.min_x + 2 * x_margin;\n            var y_range = this.max_y - this.min_y + 2 * y_margin;\n\n            var x_scale = x / x_range;\n            var y_scale = y / y_range;\n\n            this.app.x_scale = x / x_range;\n            this.app.y_scale = y / y_range;\n            this.app.offset[0] = -(this.min_x - x_margin);\n            this.app.offset[1] = this.max_y + y_margin;\n            this.app.refresh();\n        }\n    }, {\n        key: \"_hide\",\n        value: function _hide(ids) {\n            this.app.hideObjects(ids);\n            this.app.refresh();\n        }\n    }, {\n        key: \"_filter\",\n        value: function _filter(ids) {\n            this.app.filterObjects(ids);\n            this.app.refresh();\n        }\n    }]);\n\n    return WGLScatterPlot;\n}();\n\nWGLScatterPlot.count = 0;\n\nvar MLVScatterPlot = function (_MLVChart2) {\n    _inherits(MLVScatterPlot, _MLVChart2);\n\n    function MLVScatterPlot(ndx, params, div_id, title, width, size) {\n        _classCallCheck(this, MLVScatterPlot);\n\n        var _this2 = _possibleConstructorReturn(this, (MLVScatterPlot.__proto__ || Object.getPrototypeOf(MLVScatterPlot)).call(this, ndx, div_id, _dc.dc.scatterPlot, title));\n\n        _this2.x = params[0];\n        _this2.y = params[1];\n        var self = _this2;\n        _this2.dim = ndx.dimension(function (d) {\n            return [d[self.x], d[self.y]];\n        }), _this2.group = _this2.dim.group();\n\n        var y_dim = ndx.dimension(function (d) {\n            return d[self.y];\n        });\n        _this2.max_y = y_dim.top(1)[0][self.y];\n        _this2.min_y = y_dim.bottom(1)[0][self.y];\n        y_dim.dispose();\n        var x_dim = ndx.dimension(function (d) {\n            return d[self.x];\n        });\n        _this2.max_x = x_dim.top(1)[0][self.x];\n        _this2.min_x = x_dim.bottom(1)[0][self.x];\n        x_dim.dispose();\n        var x_margin = Math.round((_this2.max_x - _this2.min_x) / 10);\n        var y_margin = Math.round((_this2.max_y - _this2.min_y) / 10);\n\n        _this2.chart.x(_d.d3.scaleLinear().domain([_this2.min_x - x_margin, _this2.max_x + x_margin])).y(_d.d3.scaleLinear().domain([_this2.min_y - y_margin, _this2.max_y + y_margin])).yAxisLabel(\"y\").xAxisLabel(\"x\").clipPadding(10).dimension(_this2.dim).excludedOpacity(0.5).group(_this2.group).colorAccessor(function (d) {\n            return \"red\";\n        });\n\n        if (!size) {\n            size = [300, 300];\n        }\n        _this2.setSize(size[0], size[1]);\n        return _this2;\n    }\n\n    _createClass(MLVScatterPlot, [{\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            var x_margin = Math.round((this.max_x - this.min_x) / 10);\n            var y_margin = Math.round((this.max_y - this.min_y) / 10);\n\n            this.chart.x(_d.d3.scaleLinear().domain([this.min_x - x_margin, this.max_x + x_margin])).y(_d.d3.scaleLinear().domain([this.min_y - y_margin, this.max_y + y_margin]));\n            _get(MLVScatterPlot.prototype.__proto__ || Object.getPrototypeOf(MLVScatterPlot.prototype), \"setSize\", this).call(this, x, y);\n        }\n    }]);\n\n    return MLVScatterPlot;\n}(MLVChart);\n\nvar MLVRowChart = function (_MLVChart3) {\n    _inherits(MLVRowChart, _MLVChart3);\n\n    function MLVRowChart(ndx, param, div_id, title, size, cap) {\n        _classCallCheck(this, MLVRowChart);\n\n        var _this3 = _possibleConstructorReturn(this, (MLVRowChart.__proto__ || Object.getPrototypeOf(MLVRowChart)).call(this, ndx, div_id, _dc.dc.rowChart, title));\n\n        var self = _this3;\n        _this3.param = param;\n\n        _this3.dim = ndx.dimension(function (d) {\n            if (!d[self.param]) {\n                return \"none\";\n            }\n            return d[self.param];\n        });\n        _this3.group = _this3.dim.group().reduceCount();\n        if (!size) {\n            size = [100, 100];\n        }\n        _this3.setSize(size[0], size[1]);\n        _this3.chart.dimension(_this3.dim).group(_this3.group).elasticX(true);\n\n        if (cap) {\n            _this3.chart.cap(5);\n        }\n        _this3.chart.render();\n\n        return _this3;\n    }\n\n    _createClass(MLVRowChart, [{\n        key: \"dataChanged\",\n        value: function dataChanged(not_broadcast) {\n            var self = this;\n            this.not_broadcast = not_broadcast;\n\n            var filter = this.chart.filters();\n            if (filter.length > 0) {\n                this.chart.filter(null);\n            }\n\n            this.dim.dispose();\n\n            this.dim = this.ndx.dimension(function (d) {\n                if (!d[self.param]) {\n                    return \"none\";\n                }\n                return d[self.param];\n            });\n            this.group = this.dim.group().reduceCount();\n            this.chart.dimension(this.dim).group(this.group);\n\n            if (filter.length > 0) {\n                this.not_broadcast = not_broadcast;\n\n                this.chart.filter(filter);\n            }\n        }\n    }, {\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            _get(MLVRowChart.prototype.__proto__ || Object.getPrototypeOf(MLVRowChart.prototype), \"setSize\", this).call(this, x, y);\n            //this.resetDimension()\n        }\n    }]);\n\n    return MLVRowChart;\n}(MLVChart);\n\nvar MLVRingChart = function (_MLVChart4) {\n    _inherits(MLVRingChart, _MLVChart4);\n\n    function MLVRingChart(ndx, param, div_id, title, size) {\n        _classCallCheck(this, MLVRingChart);\n\n        var _this4 = _possibleConstructorReturn(this, (MLVRingChart.__proto__ || Object.getPrototypeOf(MLVRingChart)).call(this, ndx, div_id, _dc.dc.pieChart, title));\n\n        var self = _this4;\n        _this4.param = param;\n        _this4.dim = ndx.dimension(function (d) {\n            return d[self.param];\n        });\n        _this4.group = _this4.dim.group().reduceCount();\n\n        if (!size) {\n            size = [100, 100];\n        }\n        _this4.setSize(size[0], size[1]);\n        _this4.chart.dimension(_this4.dim).group(_this4.group).innerRadius(0.1 * _this4.height);\n\n        return _this4;\n    }\n\n    _createClass(MLVRingChart, [{\n        key: \"setSize\",\n        value: function setSize(x, y) {\n            if (x > y) {\n                x = y;\n            } else if (y > x) {\n                y = x;\n            }\n            _get(MLVRingChart.prototype.__proto__ || Object.getPrototypeOf(MLVRingChart.prototype), \"setSize\", this).call(this, x, y);\n        }\n    }]);\n\n    return MLVRingChart;\n}(MLVChart);\n\nFilterPanel.chart_types = {\n    \"scatter_plot\": MLVScatterPlot,\n    \"bar_chart\": MLVBarChart,\n    \"ring_chart\": MLVRingChart,\n    \"row_chart\": MLVRowChart,\n    \"wgl_scatter_plot\": WGLScatterPlot\n};\n\nFilterPanel.count = 0;\n\nexports.MLVRingChart = MLVRingChart;\nexports.MLVScatterPlot = MLVScatterPlot;\nexports.MLVBarChart = MLVBarChart;\nexports.MLVChart = MLVChart;\nexports.FilterPanel = FilterPanel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/graphs.js\n");

/***/ }),

/***/ "./src/image_table.js":
/*!****************************!*\
  !*** ./src/image_table.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MLVImageTable = function () {\n    function MLVImageTable(parent_div, data_view, base_url) {\n        _classCallCheck(this, MLVImageTable);\n\n        this.row_first = 0;\n        this.row_last = 139;\n        this.tile_height = 205;\n        this.tile_width = 205;\n        var self = this;\n\n        var im = new Image();\n        im.src = base_url + \"1.png\";\n        im.onload = function (e) {\n            self.img_width = im.width;\n            self.img_height = im.height;\n            self.setImageDimensions([im.width, im.height]);\n            self.show();\n        };\n        this.base_url = base_url;\n        this.parent = parent_div;\n        this.selected_tiles = {};\n        this.margin = 10;\n\n        this.cache_size = 5;\n\n        this.view_port = $(\"<div>\").height(this.parent.height()).width(this.parent.width()).css({ \"overflow\": \"auto\", \"display\": \"none\" });\n        this.canvas = $(\"<div>\");\n        this.data_view = data_view;\n        parent_div.append(this.view_port);\n        this.width = this.view_port.width();\n        this.height = this.view_port.height();\n\n        this.num_per_row = Math.floor((this.width - 10) / this.tile_width);\n\n        //work out canvas height\n\n        this.canvas.css({ \"position\": \"relative\", \"background-color\": \" LightGray\" }).click(function (e) {\n            var img = $(e.originalEvent.srcElement);\n            var id = img.attr(\"id\");\n            if (!id) {\n                return;\n            }\n            var arr = id.split(\"-\");\n            if (arr[1] === \"tile\") {\n                var range = null;\n                var item = self.data_view.getItemById(arr[2]);\n                var index = self.data_view.getRowById(arr[2]);\n                if (e.shiftKey && (self.last_index_clicked || self.last_index_clicked === 0)) {\n                    range = [];\n                    var diff = index - self.last_index_clicked < 0 ? -1 : 1;\n                    var st = self.last_index_clicked + 1;\n                    var en = index + 1;\n                    if (diff === -1) {\n                        st = index;\n                        en = self.last_index_clicked;\n                    }\n                    for (var i = st; i < en; i++) {\n                        range.push(self.data_view.getItem(i));\n                    }\n                }\n                self.listeners.image_clicked.forEach(function (func) {\n                    func(e, item, img, range);\n                });\n                self.last_index_clicked = index;\n            }\n            //self.mlv_iv.goToLocation(id);\n        });\n        this._setCanvasHeight();\n\n        this.view_port.append(this.canvas).scroll(function (e) {\n            self._hasScrolled();\n        });\n        this.parent.append(this.view_port);\n        var end_row = Math.floor((this.height + this.cache_size * this.tile_height) / this.tile_height);\n        this.max_difference = end_row + this.cache_size;\n        this._addListeners();\n        //this.render(0,end_row,true);\n        this.resize_timeout = null;\n        this.resize_timeout_length = 50;\n\n        this.listeners = {\n            \"image_clicked\": new Map(),\n            \"data_changed\": new Map()\n        };\n\n        this.highlight_colors = null;\n    }\n\n    _createClass(MLVImageTable, [{\n        key: \"addListener\",\n        value: function addListener(type, func, id) {\n            var listener = this.listeners[type];\n            if (!listener) {\n                return null;\n            }\n            if (!id) {\n                id = type + \"_\" + listener.size;\n            }\n            listener.set(id, func);\n            return id;\n        }\n    }, {\n        key: \"removeListener\",\n        value: function removeListener(type, id) {\n            var listener = this.listeners[type];\n            if (!listener) {\n                return false;\n            }\n            return listener.delete(id);\n        }\n    }, {\n        key: \"setImageDimensions\",\n        value: function setImageDimensions(dim) {\n            this.tile_width = parseInt(dim[0]) + this.margin;\n            this.tile_height = parseInt(dim[1]) + this.margin;\n            this.t_width = parseInt(dim[0]);\n            this.t_height = parseInt(dim[1]);\n        }\n    }, {\n        key: \"_addListeners\",\n        value: function _addListeners() {\n            var self = this;\n            clearTimeout(this.resize_timeout);\n            $(window).on(\"resize\", function () {\n                if (self.view_port.css(\"display\") === \"none\") {\n                    return;\n                }\n                self.resize_timeout = setTimeout(function () {\n\n                    self.show();\n                }, self.resize_timeout_length);\n            });\n        }\n    }, {\n        key: \"resize\",\n        value: function resize() {\n            var self = this;\n            clearTimeout(this.resize_timeout);\n            self.resize_timeout = setTimeout(function () {\n                self._resize();\n                self.show();\n            }, self.resize_timeout_length);\n        }\n    }, {\n        key: \"getFirstTileInView\",\n        value: function getFirstTileInView() {\n            var top = this.view_port.scrollTop();\n            return Math.floor(top / this.tile_height) * this.num_per_row;\n        }\n    }, {\n        key: \"_setCanvasHeight\",\n        value: function _setCanvasHeight() {\n            var h = Math.ceil(this.data_view.getLength() / this.num_per_row) * this.tile_height;\n            this.canvas.height(h);\n        }\n    }, {\n        key: \"_hasScrolled\",\n        value: function _hasScrolled() {\n            var _this = this;\n\n            clearTimeout(this.scroll_timeout);\n            var height = this.view_port.height();\n            var s_top = this.view_port.scrollTop();\n            var begin_row = Math.floor((s_top - this.cache_size * this.tile_height) / this.tile_height);\n            var end_row = Math.floor((s_top + height + this.cache_size * this.tile_height) / this.tile_height);\n            if (begin_row < 0) {\n                begin_row = 0;\n            }\n            var elapse = 10;\n            if (Math.abs(begin_row - this.row_displayed_first) > this.max_difference) {\n                elapse = 50;\n            }\n            this.scroll_timeout = setTimeout(function () {\n\n                if (Math.abs(begin_row - _this.row_displayed_first) > _this.max_difference) {\n                    _this.render(begin_row, end_row, true);\n                } else {\n                    _this.render(begin_row, end_row);\n                }\n            }, elapse);\n        }\n    }, {\n        key: \"render\",\n        value: function render(begin_row, end_row, all) {\n\n            if (all) {\n                $(\".mlv-tile\").remove();\n                for (var n = begin_row; n < end_row; n++) {\n                    this._addRow(n);\n                }\n            } else if (begin_row === this.row_displayed_first) {\n                return;\n            } else {\n                if (begin_row < this.row_displayed_first) {\n                    for (var _n = begin_row; _n < this.row_displayed_first; _n++) {\n                        this._addRow(_n);\n                    }\n                    for (var _n2 = end_row; _n2 < this.row_displayed_last; _n2++) {\n                        $(\".mlv-tile-row-\" + _n2).remove();\n                    }\n                } else {\n                    for (var _n3 = this.row_displayed_last; _n3 < end_row; _n3++) {\n                        this._addRow(_n3);\n                    }\n\n                    for (var _n4 = this.row_displayed_first; _n4 < begin_row; _n4++) {\n                        $(\".mlv-tile-row-\" + _n4).remove();\n                    }\n                }\n            }\n\n            for (var id in this.selected_tiles) {\n                $(\"#mlv-tile-\" + id).addClass(\"mlv-tile-selected\");\n            }\n            /*$(\".mlv-tile\").bstooltip({\r\n                 title:function(){\r\n                     return $(this).attr(\"id\");\r\n                 },\r\n                 html:true,\r\n                 container:'body'\r\n            }); \r\n            */\n            this.row_displayed_first = begin_row;\n            this.row_displayed_last = end_row;\n        }\n    }, {\n        key: \"_resize\",\n        value: function _resize() {\n            this.width = this.parent.width();\n            this.height = this.parent.height();\n            this.view_port.height(this.height).width(this.width);\n            this.num_per_row = Math.floor((this.width - 10) / this.tile_width);\n        }\n    }, {\n        key: \"_calculateTopBottomRow\",\n        value: function _calculateTopBottomRow(first_tile_index) {\n            var s_top = 0;\n            if (first_tile_index || first_tile_index === 0) {\n                s_top = Math.floor(first_tile_index / (this.num_per_row + 1)) * this.tile_height;\n            } else {\n                s_top = this.view_port.scrollTop();\n            }\n            var height = this.view_port.height();\n            var begin_row = Math.floor((s_top - this.cache_size * this.tile_height) / this.tile_height);\n            var end_row = Math.floor((s_top + height + this.cache_size * this.tile_height) / this.tile_height);\n            if (begin_row < 0) {\n                begin_row = 0;\n            }\n            return { top: begin_row, bottom: end_row, scroll_top: s_top };\n        }\n    }, {\n        key: \"clearHighlights\",\n        value: function clearHighlights() {\n            this.highlight_colors = null;\n            $(\".mlv-tile\").css(\"border\", \"none\");\n        }\n    }, {\n        key: \"setSelectedTiles\",\n        value: function setSelectedTiles(ids, append) {\n            if (!append) {\n                $(\".mlv-highlight-tile-div\").remove();\n                this.selected_tiles = {};\n            }\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var id = _step.value;\n\n                    var tile = $(\"#mlv-tile-\" + id);\n                    var highlight_div = $(\"<div>\").css({\n                        position: \"absolute\",\n                        top: tile.css(\"top\"),\n                        left: tile.css(\"left\")\n                    }).attr(\"class\", \"mlv-highlight-tile-div\").height(tile.height()).width(tile.width());\n                    this.canvas.append(highlight_div);\n                    this.selected_tiles[id] = true;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"scrollToTile\",\n        value: function scrollToTile(image_index, select) {\n            var item = this.data_view.getItem(image_index);\n            var obj = this._calculateTopBottomRow(image_index);\n            if (Math.abs(obj.top - this.row_displayed_first) > this.max_difference) {\n                this.render(obj.top, obj.bottom, true);\n            } else {\n                this.render(obj.top, obj.bottom);\n            }\n            this.view_port.scrollTop(obj.scroll_top);\n            if (select) {\n                this.setSelectedTiles([item.id]);\n            }\n        }\n    }, {\n        key: \"show\",\n        value: function show(first_tile_id) {\n            this._resize();\n            this._setCanvasHeight();\n            var obj = this._calculateTopBottomRow(first_tile_id);\n            this.view_port.show();\n            this.view_port.scrollTop(obj.scroll_top);\n            this.render(obj.top, obj.bottom, true);\n        }\n    }, {\n        key: \"hide\",\n        value: function hide() {\n            $(\".mlv-tile\").remove();\n            this.view_port.hide();\n        }\n    }, {\n        key: \"_addRow\",\n        value: function _addRow(row) {\n            var st = row * this.num_per_row;\n            var en = st + this.num_per_row;\n            var top = row * this.tile_height + this.margin;\n            var x = 0;\n            for (var i = st; i < en; i++) {\n                var left = x * this.tile_width + this.margin;\n                x++;\n                var item = this.data_view.getItem(i);\n                if (!item) {\n                    return;\n                }\n                var border = \"\";\n                if (this.highlight_colors) {\n                    var val = item[this.highlight_colors['field']];\n                    var color = this.highlight_colors.colors[val];\n                    if (color) {\n                        border = \"border:4px solid \" + color + \";\";\n                    }\n                }\n                var url = this.base_url + item.id + \".png\";\n                var img = $(\"<img src='\" + url + \"' style='\" + border + \"height:\" + this.t_height + \"px;width:\" + this.t_width + \"px;position:absolute;box-sizing:border-box;left:\" + left + \"px\" + \";top:\" + top + \"px' class='mlv-tile mlv-tile-row-\" + row + \"' id='mlv-tile-\" + item.id + \"'>\");\n\n                this.canvas.append(img);\n            }\n        }\n    }]);\n\n    return MLVImageTable;\n}();\n\nvar MLVImageTableControls = function () {\n    function MLVImageTableControls(app, div) {\n        _classCallCheck(this, MLVImageTableControls);\n\n        this.div = div;\n        this.app = app;\n        var self = this;\n        div.append($(\"<i class='fas fa-tags'></i>\").css({ \"cursor\": \"pointer\" }).click(function () {\n            new TaggingDialog(self.app, { name: \"tags\", label: \"Tags\" }, [\"Peak\", \"Noise\"]);\n        }));\n        var slider = $(\"<div>\").css({ width: \"250px\", display: \"inline-block\" }).slider({\n            max: 200,\n            min: 0,\n            value: 100,\n            stop: function stop(e, ui) {\n                var val = ui.value / 100;\n                var width = parseInt(self.app.img_width * val);\n                var height = parseInt(self.app.img_height * val);\n                self.app.setImageDimensions([width, height]);\n                self.app.show();\n            }\n        }).appendTo(this.div);\n        self.total_row_text = $(\"<span>\").css({ \"font-weight\": \"bold\", \"float\": \"right\" }).appendTo(this.div);\n        this._setUpListeners();\n        this.div.children().css({ \"margin-left\": \"5px\" });\n    }\n\n    _createClass(MLVImageTableControls, [{\n        key: \"_setUpListeners\",\n        value: function _setUpListeners() {\n            var self = this;\n            this.app.data_view.onRowCountChanged.subscribe(function (e, args) {\n                self.total_row_text.text(args.current);\n            });\n        }\n    }]);\n\n    return MLVImageTableControls;\n}();\n\nvar TaggingDialog = function () {\n    function TaggingDialog(app, field, options) {\n        _classCallCheck(this, TaggingDialog);\n\n        var self = this;\n        this.field = field;\n        this.options = options;\n        this.color_pallete = [\"#7FFF00\", \"#DC143C\", \"blue\"];\n        this.app = app;\n        this.div = $(\"<div>\");\n        this.div.dialog({\n            autoOpen: true,\n            close: function close() {\n                self.app.removeListener(\"image_clicked\", self.listener);\n                self.app.clearHighlights();\n                $(this).dialog('destroy').remove();\n            },\n            title: \"Tagging\",\n            width: 250\n        });\n        this.init();\n    }\n\n    _createClass(TaggingDialog, [{\n        key: \"imageClicked\",\n        value: function imageClicked(event, data, img, range) {\n            if (!range) {\n                range = [data];\n            }\n            var radio_button = $(\"input[name='tag-option-radio']:checked\");\n            var option = radio_button.val();\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = range[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var item = _step2.value;\n\n                    var im = $(\"#mlv-tile-\" + item.id);\n                    if (option === \"None\") {\n                        im.css(\"border\", \"none\");\n                        delete item[this.field.name];\n                    } else {\n                        item[this.field.name] = option;\n                        var color = this.app.highlight_colors.colors[option];\n                        im.css(\"border\", \"4px solid \" + color);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            var field = this.field.name;\n            this.app.listeners.data_changed.forEach(function (func) {\n                func(field, range);\n            });\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var self = this;\n            this.options.push(\"None\");\n            var option_grouo_id = \"sc-ra-name-\" + this.id;\n            var count = 0;\n            var colors = {};\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var option = _step3.value;\n\n                    var checked = count === 0;\n                    var div = $(\"<div>\").height(40);\n                    div.append($(\"<input>\").attr({ type: \"radio\", value: option, checked: checked, name: \"tag-option-radio\" }));\n                    div.append(\"<span>\" + option + \"</span>\");\n\n                    this.div.append(div);\n                    if (option !== \"None\") {\n                        var color_input = $(\"<input>\").attr({ type: \"color\", \"class\": \"tag-option-color\" }).css({ \"display\": \"inline\", \"width\": \"40px\", \"float\": \"right\" }).height(20).val(this.color_pallete[count]).appendTo(div);\n                        colors[option] = this.color_pallete[count];\n                    }\n                    count++;\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            this.app.highlight_colors = { \"field\": this.field.name, \"colors\": colors };\n            this.app.show();\n\n            this.listener = this.app.addListener(\"image_clicked\", function (event, data, img, range) {\n                self.imageClicked(event, data, img, range);\n            });\n        }\n    }]);\n\n    return TaggingDialog;\n}();\n\nexports.MLVImageTable = MLVImageTable;\nexports.MLVImageTableControls = MLVImageTableControls;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/image_table.js\n");

/***/ }),

/***/ "./src/indexes/index_ciview.js":
/*!*************************************!*\
  !*** ./src/indexes/index_ciview.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _ciview = __webpack_require__(/*! ../ciview.js */ \"./src/ciview.js\");\n\nvar _d = __webpack_require__(/*! ../vendor/d3.js */ \"./src/vendor/d3.js\");\n\nwindow.CIView = _ciview.CIView;\nwindow.d3 = _d.d3;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXhlcy9pbmRleF9jaXZpZXcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luZGV4ZXMvaW5kZXhfY2l2aWV3LmpzP2M2NjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDSVZpZXd9IGZyb20gXCIuLi9jaXZpZXcuanNcIjtcclxuaW1wb3J0IHtkM30gZnJvbSBcIi4uL3ZlbmRvci9kMy5qc1wiO1xyXG53aW5kb3cuQ0lWaWV3ID0gQ0lWaWV3O1xyXG53aW5kb3cuZDM9ZDM7Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/indexes/index_ciview.js\n");

/***/ }),

/***/ "./src/vendor/crossfilter.js":
/*!***********************************!*\
  !*** ./src/vendor/crossfilter.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [],\n      // the records\n  n = 0,\n      // the number of records; data.length\n  m = 0,\n      // a bit mask representing which dimensions are in use\n  M = 8,\n      // number of dimensions that can fit in `filters`\n  filters = crossfilter_array8(0),\n      // M bits per record; 1 is filtered out\n  filterListeners = [],\n      // when the filters change\n  dataListeners = [],\n      // when data is added\n  removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function (l) {\n        l(newData, n0, n1);\n      });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function (l) {\n      l(0, [], removed);\n    });\n\n    // Update indexes.\n    removeDataListeners.forEach(function (l) {\n      l(newIndex);\n    });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) {\n      filters[--n] = 0;\n    }\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m,\n        // lowest unset bit as mask, e.g., 00001000\n    zero = ~one,\n        // inverted one, e.g., 11110111\n    values,\n        // sorted, cached array\n    index,\n        // value rank ↦ object id\n    newValues,\n        // temporary array storing newly-added values\n    newIndex,\n        // temporary array storing newly-added index\n    sort = quicksort_by(function (i) {\n      return newValues[i];\n    }),\n        refilter = crossfilter_filterAll,\n        // for recomputing filter\n    refilterFunction,\n        // the custom filter function in use\n    indexListeners = [],\n        // when data is added\n    dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues),\n          lo1 = bounds[0],\n          hi1 = bounds[1],\n          i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) {\n          filters[newIndex[i] + n0] |= one;\n        }for (i = hi1; i < n1; ++i) {\n          filters[newIndex[i] + n0] |= one;\n        }\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function (l) {\n        l(newValues, newIndex, n0, n1);\n      });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) {\n        index[j++] = 0;\n      } // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function (d, i) {\n          return lo1 <= i && i < hi1;\n        });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function (l) {\n        l(one, added, removed);\n      });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null ? filterAll() : Array.isArray(range) ? filterRange(range) : typeof range === \"function\" ? filterFunction(range) : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function (l) {\n        l(one, added, removed);\n      });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups,\n          // array of {key, value}\n      groupIndex,\n          // object id ↦ group id\n      groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0,\n          // cardinality\n      select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k,\n            // old cardinality\n        i0 = 0,\n            // index of old group\n        i1 = 0,\n            // index of new record\n        j,\n            // object id\n        g0,\n            // old group\n        x0,\n            // old key\n        x1,\n            // new key\n        g,\n            // group to add\n        x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) {\n          ++i1;\n        } // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = { key: x1, value: initial() }, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{ key: null, value: initial() }];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) {\n              groupIndex[i] = seenGroups[groupIndex[i]];\n            }\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1 ? (reset = resetMany, update = updateMany) : k === 1 ? (reset = resetOne, update = updateOne) : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) {\n            if (filters[i]) return;\n          }groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] = update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i, k, n, g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i, g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) {\n          return value(d.value);\n        }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null),\n          all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function () {\n        return all()[0].value;\n      };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function (group) {\n        group.dispose();\n      });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i, k, n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length ? add(arguments[0]) : crossfilter;\n}\n\ncrossfilter.version = \"1.3.12\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) {\n      sift(a, i, n, lo);\n    }return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) {\n      t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    }return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) {\n      queue[i] = a[lo++];\n    }heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold ? insertionsort : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,\n        // The midpoint.\n    i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1],\n        x1 = f(e1),\n        e2 = a[i2],\n        x2 = f(e2),\n        e3 = a[i3],\n        x3 = f(e3),\n        e4 = a[i4],\n        x4 = f(e4),\n        e5 = a[i5],\n        x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2,\n        pivotValue1 = x2,\n        pivot2 = e4,\n        pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,\n        // First element in the middle partition.\n    great = hi - 2; // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k],\n            xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k],\n            xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) {\n        ++less;\n      }while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) {\n        --great;\n      } // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k],\n            xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function crossfilter_array8(n) {\n    return new Uint8Array(n);\n  };\n  crossfilter_array16 = function crossfilter_array16(n) {\n    return new Uint16Array(n);\n  };\n  crossfilter_array32 = function crossfilter_array32(n) {\n    return new Uint32Array(n);\n  };\n\n  crossfilter_arrayLengthen = function crossfilter_arrayLengthen(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function crossfilter_arrayWiden(array, width) {\n    var copy;\n    switch (width) {\n      case 16:\n        copy = crossfilter_array16(array.length);break;\n      case 32:\n        copy = crossfilter_array32(array.length);break;\n      default:\n        throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n),\n      i = -1;\n  while (++i < n) {\n    array[i] = 0;\n  }return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) {\n    array[n++] = 0;\n  }return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function (values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function (values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function (p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function (p, v) {\n    return p - f(v);\n  };\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101 ? crossfilter_array8 : m < 0x10001 ? crossfilter_array16 : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) {\n    range[i] = i;\n  }return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8 ? 0x100 : w === 16 ? 0x10000 : 0x100000000;\n}\nexports.crossfilter = crossfilter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/crossfilter.js\n");

/***/ }),

/***/ "./src/vendor/d3.js":
/*!**************************!*\
  !*** ./src/vendor/d3.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports,\"__esModule\",{value:true});var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};var d3={};var version=\"5.4.0\";function ascending(a,b){return a<b?-1:a>b?1:a>=b?0:NaN;}function bisector(compare){if(compare.length===1)compare=ascendingComparator(compare);return{left:function left(a,x,lo,hi){if(lo==null)lo=0;if(hi==null)hi=a.length;while(lo<hi){var mid=lo+hi>>>1;if(compare(a[mid],x)<0)lo=mid+1;else hi=mid;}return lo;},right:function right(a,x,lo,hi){if(lo==null)lo=0;if(hi==null)hi=a.length;while(lo<hi){var mid=lo+hi>>>1;if(compare(a[mid],x)>0)hi=mid;else lo=mid+1;}return lo;}};}function ascendingComparator(f){return function(d,x){return ascending(f(d),x);};}var ascendingBisect=bisector(ascending);var bisectRight=ascendingBisect.right;var bisectLeft=ascendingBisect.left;function pairs(array,f){if(f==null)f=pair;var i=0,n=array.length-1,p=array[0],pairs=new Array(n<0?0:n);while(i<n){pairs[i]=f(p,p=array[++i]);}return pairs;}function pair(a,b){return[a,b];}function cross(values0,values1,reduce){var n0=values0.length,n1=values1.length,values=new Array(n0*n1),i0,i1,i,value0;if(reduce==null)reduce=pair;for(i0=i=0;i0<n0;++i0){for(value0=values0[i0],i1=0;i1<n1;++i1,++i){values[i]=reduce(value0,values1[i1]);}}return values;}function descending(a,b){return b<a?-1:b>a?1:b>=a?0:NaN;}function number(x){return x===null?NaN:+x;}function variance(values,valueof){var n=values.length,m=0,i=-1,mean=0,value,delta,sum=0;if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i]))){delta=value-mean;mean+=delta/++m;sum+=delta*(value-mean);}}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values)))){delta=value-mean;mean+=delta/++m;sum+=delta*(value-mean);}}}if(m>1)return sum/(m-1);}function deviation(array,f){var v=variance(array,f);return v?Math.sqrt(v):v;}function extent(values,valueof){var n=values.length,i=-1,value,min,max;if(valueof==null){while(++i<n){// Find the first comparable value.\nif((value=values[i])!=null&&value>=value){min=max=value;while(++i<n){// Compare the remaining values.\nif((value=values[i])!=null){if(min>value)min=value;if(max<value)max=value;}}}}}else{while(++i<n){// Find the first comparable value.\nif((value=valueof(values[i],i,values))!=null&&value>=value){min=max=value;while(++i<n){// Compare the remaining values.\nif((value=valueof(values[i],i,values))!=null){if(min>value)min=value;if(max<value)max=value;}}}}}return[min,max];}var array=Array.prototype;var slice=array.slice;var map=array.map;function constant(x){return function(){return x;};}function identity(x){return x;}function sequence(start,stop,step){start=+start,stop=+stop,step=(n=arguments.length)<2?(stop=start,start=0,1):n<3?1:+step;var i=-1,n=Math.max(0,Math.ceil((stop-start)/step))|0,range=new Array(n);while(++i<n){range[i]=start+i*step;}return range;}var e10=Math.sqrt(50),e5=Math.sqrt(10),e2=Math.sqrt(2);function ticks(start,stop,count){var reverse,i=-1,n,ticks,step;stop=+stop,start=+start,count=+count;if(start===stop&&count>0)return[start];if(reverse=stop<start)n=start,start=stop,stop=n;if((step=tickIncrement(start,stop,count))===0||!isFinite(step))return[];if(step>0){start=Math.ceil(start/step);stop=Math.floor(stop/step);ticks=new Array(n=Math.ceil(stop-start+1));while(++i<n){ticks[i]=(start+i)*step;}}else{start=Math.floor(start*step);stop=Math.ceil(stop*step);ticks=new Array(n=Math.ceil(start-stop+1));while(++i<n){ticks[i]=(start-i)/step;}}if(reverse)ticks.reverse();return ticks;}function tickIncrement(start,stop,count){var step=(stop-start)/Math.max(0,count),power=Math.floor(Math.log(step)/Math.LN10),error=step/Math.pow(10,power);return power>=0?(error>=e10?10:error>=e5?5:error>=e2?2:1)*Math.pow(10,power):-Math.pow(10,-power)/(error>=e10?10:error>=e5?5:error>=e2?2:1);}function tickStep(start,stop,count){var step0=Math.abs(stop-start)/Math.max(0,count),step1=Math.pow(10,Math.floor(Math.log(step0)/Math.LN10)),error=step0/step1;if(error>=e10)step1*=10;else if(error>=e5)step1*=5;else if(error>=e2)step1*=2;return stop<start?-step1:step1;}function thresholdSturges(values){return Math.ceil(Math.log(values.length)/Math.LN2)+1;}function histogram(){var value=identity,domain=extent,threshold=thresholdSturges;function histogram(data){var i,n=data.length,x,values=new Array(n);for(i=0;i<n;++i){values[i]=value(data[i],i,data);}var xz=domain(values),x0=xz[0],x1=xz[1],tz=threshold(values,x0,x1);// Convert number of thresholds into uniform thresholds.\nif(!Array.isArray(tz)){tz=tickStep(x0,x1,tz);tz=sequence(Math.ceil(x0/tz)*tz,Math.floor(x1/tz)*tz,tz);// exclusive\n}// Remove any thresholds outside the domain.\nvar m=tz.length;while(tz[0]<=x0){tz.shift(),--m;}while(tz[m-1]>x1){tz.pop(),--m;}var bins=new Array(m+1),bin;// Initialize bins.\nfor(i=0;i<=m;++i){bin=bins[i]=[];bin.x0=i>0?tz[i-1]:x0;bin.x1=i<m?tz[i]:x1;}// Assign data to bins by value, ignoring any outside the domain.\nfor(i=0;i<n;++i){x=values[i];if(x0<=x&&x<=x1){bins[bisectRight(tz,x,0,m)].push(data[i]);}}return bins;}histogram.value=function(_){return arguments.length?(value=typeof _===\"function\"?_:constant(_),histogram):value;};histogram.domain=function(_){return arguments.length?(domain=typeof _===\"function\"?_:constant([_[0],_[1]]),histogram):domain;};histogram.thresholds=function(_){return arguments.length?(threshold=typeof _===\"function\"?_:Array.isArray(_)?constant(slice.call(_)):constant(_),histogram):threshold;};return histogram;}function threshold(values,p,valueof){if(valueof==null)valueof=number;if(!(n=values.length))return;if((p=+p)<=0||n<2)return+valueof(values[0],0,values);if(p>=1)return+valueof(values[n-1],n-1,values);var n,i=(n-1)*p,i0=Math.floor(i),value0=+valueof(values[i0],i0,values),value1=+valueof(values[i0+1],i0+1,values);return value0+(value1-value0)*(i-i0);}function freedmanDiaconis(values,min,max){values=map.call(values,number).sort(ascending);return Math.ceil((max-min)/(2*(threshold(values,0.75)-threshold(values,0.25))*Math.pow(values.length,-1/3)));}function scott(values,min,max){return Math.ceil((max-min)/(3.5*deviation(values)*Math.pow(values.length,-1/3)));}function max(values,valueof){var n=values.length,i=-1,value,max;if(valueof==null){while(++i<n){// Find the first comparable value.\nif((value=values[i])!=null&&value>=value){max=value;while(++i<n){// Compare the remaining values.\nif((value=values[i])!=null&&value>max){max=value;}}}}}else{while(++i<n){// Find the first comparable value.\nif((value=valueof(values[i],i,values))!=null&&value>=value){max=value;while(++i<n){// Compare the remaining values.\nif((value=valueof(values[i],i,values))!=null&&value>max){max=value;}}}}}return max;}function mean(values,valueof){var n=values.length,m=n,i=-1,value,sum=0;if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i])))sum+=value;else--m;}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values))))sum+=value;else--m;}}if(m)return sum/m;}function median(values,valueof){var n=values.length,i=-1,value,numbers=[];if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i]))){numbers.push(value);}}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values)))){numbers.push(value);}}}return threshold(numbers.sort(ascending),0.5);}function merge(arrays){var n=arrays.length,m,i=-1,j=0,merged,array;while(++i<n){j+=arrays[i].length;}merged=new Array(j);while(--n>=0){array=arrays[n];m=array.length;while(--m>=0){merged[--j]=array[m];}}return merged;}function min(values,valueof){var n=values.length,i=-1,value,min;if(valueof==null){while(++i<n){// Find the first comparable value.\nif((value=values[i])!=null&&value>=value){min=value;while(++i<n){// Compare the remaining values.\nif((value=values[i])!=null&&min>value){min=value;}}}}}else{while(++i<n){// Find the first comparable value.\nif((value=valueof(values[i],i,values))!=null&&value>=value){min=value;while(++i<n){// Compare the remaining values.\nif((value=valueof(values[i],i,values))!=null&&min>value){min=value;}}}}}return min;}function permute(array,indexes){var i=indexes.length,permutes=new Array(i);while(i--){permutes[i]=array[indexes[i]];}return permutes;}function scan(values,compare){if(!(n=values.length))return;var n,i=0,j=0,xi,xj=values[j];if(compare==null)compare=ascending;while(++i<n){if(compare(xi=values[i],xj)<0||compare(xj,xj)!==0){xj=xi,j=i;}}if(compare(xj,xj)===0)return j;}function shuffle(array,i0,i1){var m=(i1==null?array.length:i1)-(i0=i0==null?0:+i0),t,i;while(m){i=Math.random()*m--|0;t=array[m+i0];array[m+i0]=array[i+i0];array[i+i0]=t;}return array;}function sum(values,valueof){var n=values.length,i=-1,value,sum=0;if(valueof==null){while(++i<n){if(value=+values[i])sum+=value;// Note: zero and null are equivalent.\n}}else{while(++i<n){if(value=+valueof(values[i],i,values))sum+=value;}}return sum;}function transpose(matrix){if(!(n=matrix.length))return[];for(var i=-1,m=min(matrix,length),transpose=new Array(m);++i<m;){for(var j=-1,n,row=transpose[i]=new Array(n);++j<n;){row[j]=matrix[j][i];}}return transpose;}function length(d){return d.length;}function zip(){return transpose(arguments);}var slice$1=Array.prototype.slice;function identity$1(x){return x;}var top=1,right=2,bottom=3,left=4,epsilon=1e-6;function translateX(x){return\"translate(\"+(x+0.5)+\",0)\";}function translateY(y){return\"translate(0,\"+(y+0.5)+\")\";}function number$1(scale){return function(d){return+scale(d);};}function center(scale){var offset=Math.max(0,scale.bandwidth()-1)/2;// Adjust for 0.5px offset.\nif(scale.round())offset=Math.round(offset);return function(d){return+scale(d)+offset;};}function entering(){return!this.__axis;}function axis(orient,scale){var tickArguments=[],tickValues=null,tickFormat=null,tickSizeInner=6,tickSizeOuter=6,tickPadding=3,k=orient===top||orient===left?-1:1,x=orient===left||orient===right?\"x\":\"y\",transform=orient===top||orient===bottom?translateX:translateY;function axis(context){var values=tickValues==null?scale.ticks?scale.ticks.apply(scale,tickArguments):scale.domain():tickValues,format=tickFormat==null?scale.tickFormat?scale.tickFormat.apply(scale,tickArguments):identity$1:tickFormat,spacing=Math.max(tickSizeInner,0)+tickPadding,range=scale.range(),range0=+range[0]+0.5,range1=+range[range.length-1]+0.5,position=(scale.bandwidth?center:number$1)(scale.copy()),selection=context.selection?context.selection():context,path=selection.selectAll(\".domain\").data([null]),tick=selection.selectAll(\".tick\").data(values,scale).order(),tickExit=tick.exit(),tickEnter=tick.enter().append(\"g\").attr(\"class\",\"tick\"),line=tick.select(\"line\"),text=tick.select(\"text\");path=path.merge(path.enter().insert(\"path\",\".tick\").attr(\"class\",\"domain\").attr(\"stroke\",\"#000\"));tick=tick.merge(tickEnter);line=line.merge(tickEnter.append(\"line\").attr(\"stroke\",\"#000\").attr(x+\"2\",k*tickSizeInner));text=text.merge(tickEnter.append(\"text\").attr(\"fill\",\"#000\").attr(x,k*spacing).attr(\"dy\",orient===top?\"0em\":orient===bottom?\"0.71em\":\"0.32em\"));if(context!==selection){path=path.transition(context);tick=tick.transition(context);line=line.transition(context);text=text.transition(context);tickExit=tickExit.transition(context).attr(\"opacity\",epsilon).attr(\"transform\",function(d){return isFinite(d=position(d))?transform(d):this.getAttribute(\"transform\");});tickEnter.attr(\"opacity\",epsilon).attr(\"transform\",function(d){var p=this.parentNode.__axis;return transform(p&&isFinite(p=p(d))?p:position(d));});}tickExit.remove();path.attr(\"d\",orient===left||orient==right?\"M\"+k*tickSizeOuter+\",\"+range0+\"H0.5V\"+range1+\"H\"+k*tickSizeOuter:\"M\"+range0+\",\"+k*tickSizeOuter+\"V0.5H\"+range1+\"V\"+k*tickSizeOuter);tick.attr(\"opacity\",1).attr(\"transform\",function(d){return transform(position(d));});line.attr(x+\"2\",k*tickSizeInner);text.attr(x,k*spacing).text(format);selection.filter(entering).attr(\"fill\",\"none\").attr(\"font-size\",10).attr(\"font-family\",\"sans-serif\").attr(\"text-anchor\",orient===right?\"start\":orient===left?\"end\":\"middle\");selection.each(function(){this.__axis=position;});}axis.scale=function(_){return arguments.length?(scale=_,axis):scale;};axis.ticks=function(){return tickArguments=slice$1.call(arguments),axis;};axis.tickArguments=function(_){return arguments.length?(tickArguments=_==null?[]:slice$1.call(_),axis):tickArguments.slice();};axis.tickValues=function(_){return arguments.length?(tickValues=_==null?null:slice$1.call(_),axis):tickValues&&tickValues.slice();};axis.tickFormat=function(_){return arguments.length?(tickFormat=_,axis):tickFormat;};axis.tickSize=function(_){return arguments.length?(tickSizeInner=tickSizeOuter=+_,axis):tickSizeInner;};axis.tickSizeInner=function(_){return arguments.length?(tickSizeInner=+_,axis):tickSizeInner;};axis.tickSizeOuter=function(_){return arguments.length?(tickSizeOuter=+_,axis):tickSizeOuter;};axis.tickPadding=function(_){return arguments.length?(tickPadding=+_,axis):tickPadding;};return axis;}function axisTop(scale){return axis(top,scale);}function axisRight(scale){return axis(right,scale);}function axisBottom(scale){return axis(bottom,scale);}function axisLeft(scale){return axis(left,scale);}var noop={value:function value(){}};function dispatch(){for(var i=0,n=arguments.length,_={},t;i<n;++i){if(!(t=arguments[i]+\"\")||t in _)throw new Error(\"illegal type: \"+t);_[t]=[];}return new Dispatch(_);}function Dispatch(_){this._=_;}function parseTypenames(typenames,types){return typenames.trim().split(/^|\\s+/).map(function(t){var name=\"\",i=t.indexOf(\".\");if(i>=0)name=t.slice(i+1),t=t.slice(0,i);if(t&&!types.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);return{type:t,name:name};});}Dispatch.prototype=dispatch.prototype={constructor:Dispatch,on:function on(typename,callback){var _=this._,T=parseTypenames(typename+\"\",_),t,i=-1,n=T.length;// If no callback was specified, return the callback of the given type and name.\nif(arguments.length<2){while(++i<n){if((t=(typename=T[i]).type)&&(t=get(_[t],typename.name)))return t;}return;}// If a type was specified, set the callback for the given type and name.\n// Otherwise, if a null callback was specified, remove callbacks of the given name.\nif(callback!=null&&typeof callback!==\"function\")throw new Error(\"invalid callback: \"+callback);while(++i<n){if(t=(typename=T[i]).type)_[t]=set(_[t],typename.name,callback);else if(callback==null)for(t in _){_[t]=set(_[t],typename.name,null);}}return this;},copy:function copy(){var copy={},_=this._;for(var t in _){copy[t]=_[t].slice();}return new Dispatch(copy);},call:function call(type,that){if((n=arguments.length-2)>0)for(var args=new Array(n),i=0,n,t;i<n;++i){args[i]=arguments[i+2];}if(!this._.hasOwnProperty(type))throw new Error(\"unknown type: \"+type);for(t=this._[type],i=0,n=t.length;i<n;++i){t[i].value.apply(that,args);}},apply:function apply(type,that,args){if(!this._.hasOwnProperty(type))throw new Error(\"unknown type: \"+type);for(var t=this._[type],i=0,n=t.length;i<n;++i){t[i].value.apply(that,args);}}};function get(type,name){for(var i=0,n=type.length,c;i<n;++i){if((c=type[i]).name===name){return c.value;}}}function set(type,name,callback){for(var i=0,n=type.length;i<n;++i){if(type[i].name===name){type[i]=noop,type=type.slice(0,i).concat(type.slice(i+1));break;}}if(callback!=null)type.push({name:name,value:callback});return type;}var xhtml=\"http://www.w3.org/1999/xhtml\";var namespaces={svg:\"http://www.w3.org/2000/svg\",xhtml:xhtml,xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\"};function namespace(name){var prefix=name+=\"\",i=prefix.indexOf(\":\");if(i>=0&&(prefix=name.slice(0,i))!==\"xmlns\")name=name.slice(i+1);return namespaces.hasOwnProperty(prefix)?{space:namespaces[prefix],local:name}:name;}function creatorInherit(name){return function(){var document=this.ownerDocument,uri=this.namespaceURI;return uri===xhtml&&document.documentElement.namespaceURI===xhtml?document.createElement(name):document.createElementNS(uri,name);};}function creatorFixed(fullname){return function(){return this.ownerDocument.createElementNS(fullname.space,fullname.local);};}function creator(name){var fullname=namespace(name);return(fullname.local?creatorFixed:creatorInherit)(fullname);}function none(){}function selector(selector){return selector==null?none:function(){return this.querySelector(selector);};}function selection_select(select){if(typeof select!==\"function\")select=selector(select);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),node,subnode,i=0;i<n;++i){if((node=group[i])&&(subnode=select.call(node,node.__data__,i,group))){if(\"__data__\"in node)subnode.__data__=node.__data__;subgroup[i]=subnode;}}}return new Selection(subgroups,this._parents);}function empty(){return[];}function selectorAll(selector){return selector==null?empty:function(){return this.querySelectorAll(selector);};}function selection_selectAll(select){if(typeof select!==\"function\")select=selectorAll(select);for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){subgroups.push(select.call(node,node.__data__,i,group));parents.push(node);}}}return new Selection(subgroups,parents);}var matcher=function matcher(selector){return function(){return this.matches(selector);};};if(typeof document!==\"undefined\"){var element=document.documentElement;if(!element.matches){var vendorMatches=element.webkitMatchesSelector||element.msMatchesSelector||element.mozMatchesSelector||element.oMatchesSelector;matcher=function matcher(selector){return function(){return vendorMatches.call(this,selector);};};}}var matcher$1=matcher;function selection_filter(match){if(typeof match!==\"function\")match=matcher$1(match);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=[],node,i=0;i<n;++i){if((node=group[i])&&match.call(node,node.__data__,i,group)){subgroup.push(node);}}}return new Selection(subgroups,this._parents);}function sparse(update){return new Array(update.length);}function selection_enter(){return new Selection(this._enter||this._groups.map(sparse),this._parents);}function EnterNode(parent,datum){this.ownerDocument=parent.ownerDocument;this.namespaceURI=parent.namespaceURI;this._next=null;this._parent=parent;this.__data__=datum;}EnterNode.prototype={constructor:EnterNode,appendChild:function appendChild(child){return this._parent.insertBefore(child,this._next);},insertBefore:function insertBefore(child,next){return this._parent.insertBefore(child,next);},querySelector:function querySelector(selector){return this._parent.querySelector(selector);},querySelectorAll:function querySelectorAll(selector){return this._parent.querySelectorAll(selector);}};function constant$1(x){return function(){return x;};}var keyPrefix=\"$\";// Protect against keys like “__proto__”.\nfunction bindIndex(parent,group,enter,update,exit,data){var i=0,node,groupLength=group.length,dataLength=data.length;// Put any non-null nodes that fit into update.\n// Put any null nodes into enter.\n// Put any remaining data into enter.\nfor(;i<dataLength;++i){if(node=group[i]){node.__data__=data[i];update[i]=node;}else{enter[i]=new EnterNode(parent,data[i]);}}// Put any non-null nodes that don’t fit into exit.\nfor(;i<groupLength;++i){if(node=group[i]){exit[i]=node;}}}function bindKey(parent,group,enter,update,exit,data,key){var i,node,nodeByKeyValue={},groupLength=group.length,dataLength=data.length,keyValues=new Array(groupLength),keyValue;// Compute the key for each node.\n// If multiple nodes have the same key, the duplicates are added to exit.\nfor(i=0;i<groupLength;++i){if(node=group[i]){keyValues[i]=keyValue=keyPrefix+key.call(node,node.__data__,i,group);if(keyValue in nodeByKeyValue){exit[i]=node;}else{nodeByKeyValue[keyValue]=node;}}}// Compute the key for each datum.\n// If there a node associated with this key, join and add it to update.\n// If there is not (or the key is a duplicate), add it to enter.\nfor(i=0;i<dataLength;++i){keyValue=keyPrefix+key.call(parent,data[i],i,data);if(node=nodeByKeyValue[keyValue]){update[i]=node;node.__data__=data[i];nodeByKeyValue[keyValue]=null;}else{enter[i]=new EnterNode(parent,data[i]);}}// Add any remaining nodes that were not bound to data to exit.\nfor(i=0;i<groupLength;++i){if((node=group[i])&&nodeByKeyValue[keyValues[i]]===node){exit[i]=node;}}}function selection_data(value,key){if(!value){data=new Array(this.size()),j=-1;this.each(function(d){data[++j]=d;});return data;}var bind=key?bindKey:bindIndex,parents=this._parents,groups=this._groups;if(typeof value!==\"function\")value=constant$1(value);for(var m=groups.length,update=new Array(m),enter=new Array(m),exit=new Array(m),j=0;j<m;++j){var parent=parents[j],group=groups[j],groupLength=group.length,data=value.call(parent,parent&&parent.__data__,j,parents),dataLength=data.length,enterGroup=enter[j]=new Array(dataLength),updateGroup=update[j]=new Array(dataLength),exitGroup=exit[j]=new Array(groupLength);bind(parent,group,enterGroup,updateGroup,exitGroup,data,key);// Now connect the enter nodes to their following update node, such that\n// appendChild can insert the materialized enter node before this node,\n// rather than at the end of the parent node.\nfor(var i0=0,i1=0,previous,next;i0<dataLength;++i0){if(previous=enterGroup[i0]){if(i0>=i1)i1=i0+1;while(!(next=updateGroup[i1])&&++i1<dataLength){}previous._next=next||null;}}}update=new Selection(update,parents);update._enter=enter;update._exit=exit;return update;}function selection_exit(){return new Selection(this._exit||this._groups.map(sparse),this._parents);}function selection_merge(selection$$1){for(var groups0=this._groups,groups1=selection$$1._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j){for(var group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),node,i=0;i<n;++i){if(node=group0[i]||group1[i]){merge[i]=node;}}}for(;j<m0;++j){merges[j]=groups0[j];}return new Selection(merges,this._parents);}function selection_order(){for(var groups=this._groups,j=-1,m=groups.length;++j<m;){for(var group=groups[j],i=group.length-1,next=group[i],node;--i>=0;){if(node=group[i]){if(next&&next!==node.nextSibling)next.parentNode.insertBefore(node,next);next=node;}}}return this;}function selection_sort(compare){if(!compare)compare=ascending$1;function compareNode(a,b){return a&&b?compare(a.__data__,b.__data__):!a-!b;}for(var groups=this._groups,m=groups.length,sortgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,sortgroup=sortgroups[j]=new Array(n),node,i=0;i<n;++i){if(node=group[i]){sortgroup[i]=node;}}sortgroup.sort(compareNode);}return new Selection(sortgroups,this._parents).order();}function ascending$1(a,b){return a<b?-1:a>b?1:a>=b?0:NaN;}function selection_call(){var callback=arguments[0];arguments[0]=this;callback.apply(null,arguments);return this;}function selection_nodes(){var nodes=new Array(this.size()),i=-1;this.each(function(){nodes[++i]=this;});return nodes;}function selection_node(){for(var groups=this._groups,j=0,m=groups.length;j<m;++j){for(var group=groups[j],i=0,n=group.length;i<n;++i){var node=group[i];if(node)return node;}}return null;}function selection_size(){var size=0;this.each(function(){++size;});return size;}function selection_empty(){return!this.node();}function selection_each(callback){for(var groups=this._groups,j=0,m=groups.length;j<m;++j){for(var group=groups[j],i=0,n=group.length,node;i<n;++i){if(node=group[i])callback.call(node,node.__data__,i,group);}}return this;}function attrRemove(name){return function(){this.removeAttribute(name);};}function attrRemoveNS(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local);};}function attrConstant(name,value){return function(){this.setAttribute(name,value);};}function attrConstantNS(fullname,value){return function(){this.setAttributeNS(fullname.space,fullname.local,value);};}function attrFunction(name,value){return function(){var v=value.apply(this,arguments);if(v==null)this.removeAttribute(name);else this.setAttribute(name,v);};}function attrFunctionNS(fullname,value){return function(){var v=value.apply(this,arguments);if(v==null)this.removeAttributeNS(fullname.space,fullname.local);else this.setAttributeNS(fullname.space,fullname.local,v);};}function selection_attr(name,value){var fullname=namespace(name);if(arguments.length<2){var node=this.node();return fullname.local?node.getAttributeNS(fullname.space,fullname.local):node.getAttribute(fullname);}return this.each((value==null?fullname.local?attrRemoveNS:attrRemove:typeof value===\"function\"?fullname.local?attrFunctionNS:attrFunction:fullname.local?attrConstantNS:attrConstant)(fullname,value));}function defaultView(node){return node.ownerDocument&&node.ownerDocument.defaultView||// node is a Node\nnode.document&&node// node is a Window\n||node.defaultView;// node is a Document\n}function styleRemove(name){return function(){this.style.removeProperty(name);};}function styleConstant(name,value,priority){return function(){this.style.setProperty(name,value,priority);};}function styleFunction(name,value,priority){return function(){var v=value.apply(this,arguments);if(v==null)this.style.removeProperty(name);else this.style.setProperty(name,v,priority);};}function selection_style(name,value,priority){return arguments.length>1?this.each((value==null?styleRemove:typeof value===\"function\"?styleFunction:styleConstant)(name,value,priority==null?\"\":priority)):styleValue(this.node(),name);}function styleValue(node,name){return node.style.getPropertyValue(name)||defaultView(node).getComputedStyle(node,null).getPropertyValue(name);}function propertyRemove(name){return function(){delete this[name];};}function propertyConstant(name,value){return function(){this[name]=value;};}function propertyFunction(name,value){return function(){var v=value.apply(this,arguments);if(v==null)delete this[name];else this[name]=v;};}function selection_property(name,value){return arguments.length>1?this.each((value==null?propertyRemove:typeof value===\"function\"?propertyFunction:propertyConstant)(name,value)):this.node()[name];}function classArray(string){return string.trim().split(/^|\\s+/);}function classList(node){return node.classList||new ClassList(node);}function ClassList(node){this._node=node;this._names=classArray(node.getAttribute(\"class\")||\"\");}ClassList.prototype={add:function add(name){var i=this._names.indexOf(name);if(i<0){this._names.push(name);this._node.setAttribute(\"class\",this._names.join(\" \"));}},remove:function remove(name){var i=this._names.indexOf(name);if(i>=0){this._names.splice(i,1);this._node.setAttribute(\"class\",this._names.join(\" \"));}},contains:function contains(name){return this._names.indexOf(name)>=0;}};function classedAdd(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n){list.add(names[i]);}}function classedRemove(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n){list.remove(names[i]);}}function classedTrue(names){return function(){classedAdd(this,names);};}function classedFalse(names){return function(){classedRemove(this,names);};}function classedFunction(names,value){return function(){(value.apply(this,arguments)?classedAdd:classedRemove)(this,names);};}function selection_classed(name,value){var names=classArray(name+\"\");if(arguments.length<2){var list=classList(this.node()),i=-1,n=names.length;while(++i<n){if(!list.contains(names[i]))return false;}return true;}return this.each((typeof value===\"function\"?classedFunction:value?classedTrue:classedFalse)(names,value));}function textRemove(){this.textContent=\"\";}function textConstant(value){return function(){this.textContent=value;};}function textFunction(value){return function(){var v=value.apply(this,arguments);this.textContent=v==null?\"\":v;};}function selection_text(value){return arguments.length?this.each(value==null?textRemove:(typeof value===\"function\"?textFunction:textConstant)(value)):this.node().textContent;}function htmlRemove(){this.innerHTML=\"\";}function htmlConstant(value){return function(){this.innerHTML=value;};}function htmlFunction(value){return function(){var v=value.apply(this,arguments);this.innerHTML=v==null?\"\":v;};}function selection_html(value){return arguments.length?this.each(value==null?htmlRemove:(typeof value===\"function\"?htmlFunction:htmlConstant)(value)):this.node().innerHTML;}function raise(){if(this.nextSibling)this.parentNode.appendChild(this);}function selection_raise(){return this.each(raise);}function lower(){if(this.previousSibling)this.parentNode.insertBefore(this,this.parentNode.firstChild);}function selection_lower(){return this.each(lower);}function selection_append(name){var create=typeof name===\"function\"?name:creator(name);return this.select(function(){return this.appendChild(create.apply(this,arguments));});}function constantNull(){return null;}function selection_insert(name,before){var create=typeof name===\"function\"?name:creator(name),select=before==null?constantNull:typeof before===\"function\"?before:selector(before);return this.select(function(){return this.insertBefore(create.apply(this,arguments),select.apply(this,arguments)||null);});}function remove(){var parent=this.parentNode;if(parent)parent.removeChild(this);}function selection_remove(){return this.each(remove);}function selection_cloneShallow(){return this.parentNode.insertBefore(this.cloneNode(false),this.nextSibling);}function selection_cloneDeep(){return this.parentNode.insertBefore(this.cloneNode(true),this.nextSibling);}function selection_clone(deep){return this.select(deep?selection_cloneDeep:selection_cloneShallow);}function selection_datum(value){return arguments.length?this.property(\"__data__\",value):this.node().__data__;}var filterEvents={};d3.event=null;if(typeof document!==\"undefined\"){var element$1=document.documentElement;if(!(\"onmouseenter\"in element$1)){filterEvents={mouseenter:\"mouseover\",mouseleave:\"mouseout\"};}}function filterContextListener(listener,index,group){listener=contextListener(listener,index,group);return function(event){var related=event.relatedTarget;if(!related||related!==this&&!(related.compareDocumentPosition(this)&8)){listener.call(this,event);}};}function contextListener(listener,index,group){return function(event1){var event0=d3.event;// Events can be reentrant (e.g., focus).\nd3.event=event1;try{listener.call(this,this.__data__,index,group);}finally{d3.event=event0;}};}function parseTypenames$1(typenames){return typenames.trim().split(/^|\\s+/).map(function(t){var name=\"\",i=t.indexOf(\".\");if(i>=0)name=t.slice(i+1),t=t.slice(0,i);return{type:t,name:name};});}function onRemove(typename){return function(){var on=this.__on;if(!on)return;for(var j=0,i=-1,m=on.length,o;j<m;++j){if(o=on[j],(!typename.type||o.type===typename.type)&&o.name===typename.name){this.removeEventListener(o.type,o.listener,o.capture);}else{on[++i]=o;}}if(++i)on.length=i;else delete this.__on;};}function onAdd(typename,value,capture){var wrap=filterEvents.hasOwnProperty(typename.type)?filterContextListener:contextListener;return function(d,i,group){var on=this.__on,o,listener=wrap(value,i,group);if(on)for(var j=0,m=on.length;j<m;++j){if((o=on[j]).type===typename.type&&o.name===typename.name){this.removeEventListener(o.type,o.listener,o.capture);this.addEventListener(o.type,o.listener=listener,o.capture=capture);o.value=value;return;}}this.addEventListener(typename.type,listener,capture);o={type:typename.type,name:typename.name,value:value,listener:listener,capture:capture};if(!on)this.__on=[o];else on.push(o);};}function selection_on(typename,value,capture){var typenames=parseTypenames$1(typename+\"\"),i,n=typenames.length,t;if(arguments.length<2){var on=this.node().__on;if(on)for(var j=0,m=on.length,o;j<m;++j){for(i=0,o=on[j];i<n;++i){if((t=typenames[i]).type===o.type&&t.name===o.name){return o.value;}}}return;}on=value?onAdd:onRemove;if(capture==null)capture=false;for(i=0;i<n;++i){this.each(on(typenames[i],value,capture));}return this;}function customEvent(event1,listener,that,args){var event0=d3.event;event1.sourceEvent=d3.event;d3.event=event1;try{return listener.apply(that,args);}finally{d3.event=event0;}}function dispatchEvent(node,type,params){var window=defaultView(node),event=window.CustomEvent;if(typeof event===\"function\"){event=new event(type,params);}else{event=window.document.createEvent(\"Event\");if(params)event.initEvent(type,params.bubbles,params.cancelable),event.detail=params.detail;else event.initEvent(type,false,false);}node.dispatchEvent(event);}function dispatchConstant(type,params){return function(){return dispatchEvent(this,type,params);};}function dispatchFunction(type,params){return function(){return dispatchEvent(this,type,params.apply(this,arguments));};}function selection_dispatch(type,params){return this.each((typeof params===\"function\"?dispatchFunction:dispatchConstant)(type,params));}var root=[null];function Selection(groups,parents){this._groups=groups;this._parents=parents;}function selection(){return new Selection([[document.documentElement]],root);}Selection.prototype=selection.prototype={constructor:Selection,select:selection_select,selectAll:selection_selectAll,filter:selection_filter,data:selection_data,enter:selection_enter,exit:selection_exit,merge:selection_merge,order:selection_order,sort:selection_sort,call:selection_call,nodes:selection_nodes,node:selection_node,size:selection_size,empty:selection_empty,each:selection_each,attr:selection_attr,style:selection_style,property:selection_property,classed:selection_classed,text:selection_text,html:selection_html,raise:selection_raise,lower:selection_lower,append:selection_append,insert:selection_insert,remove:selection_remove,clone:selection_clone,datum:selection_datum,on:selection_on,dispatch:selection_dispatch};function select(selector){return typeof selector===\"string\"?new Selection([[document.querySelector(selector)]],[document.documentElement]):new Selection([[selector]],root);}function create(name){return select(creator(name).call(document.documentElement));}var nextId=0;function local(){return new Local();}function Local(){this._=\"@\"+(++nextId).toString(36);}Local.prototype=local.prototype={constructor:Local,get:function get(node){var id=this._;while(!(id in node)){if(!(node=node.parentNode))return;}return node[id];},set:function set(node,value){return node[this._]=value;},remove:function remove(node){return this._ in node&&delete node[this._];},toString:function toString(){return this._;}};function sourceEvent(){var current=d3.event,source;while(source=current.sourceEvent){current=source;}return current;}function point(node,event){var svg=node.ownerSVGElement||node;if(svg.createSVGPoint){var point=svg.createSVGPoint();point.x=event.clientX,point.y=event.clientY;point=point.matrixTransform(node.getScreenCTM().inverse());return[point.x,point.y];}var rect=node.getBoundingClientRect();return[event.clientX-rect.left-node.clientLeft,event.clientY-rect.top-node.clientTop];}function mouse(node){var event=sourceEvent();if(event.changedTouches)event=event.changedTouches[0];return point(node,event);}function selectAll(selector){return typeof selector===\"string\"?new Selection([document.querySelectorAll(selector)],[document.documentElement]):new Selection([selector==null?[]:selector],root);}function touch(node,touches,identifier){if(arguments.length<3)identifier=touches,touches=sourceEvent().changedTouches;for(var i=0,n=touches?touches.length:0,touch;i<n;++i){if((touch=touches[i]).identifier===identifier){return point(node,touch);}}return null;}function touches(node,touches){if(touches==null)touches=sourceEvent().touches;for(var i=0,n=touches?touches.length:0,points=new Array(n);i<n;++i){points[i]=point(node,touches[i]);}return points;}function nopropagation(){d3.event.stopImmediatePropagation();}function noevent(){d3.event.preventDefault();d3.event.stopImmediatePropagation();}function dragDisable(view){var root=view.document.documentElement,selection$$1=select(view).on(\"dragstart.drag\",noevent,true);if(\"onselectstart\"in root){selection$$1.on(\"selectstart.drag\",noevent,true);}else{root.__noselect=root.style.MozUserSelect;root.style.MozUserSelect=\"none\";}}function yesdrag(view,noclick){var root=view.document.documentElement,selection$$1=select(view).on(\"dragstart.drag\",null);if(noclick){selection$$1.on(\"click.drag\",noevent,true);setTimeout(function(){selection$$1.on(\"click.drag\",null);},0);}if(\"onselectstart\"in root){selection$$1.on(\"selectstart.drag\",null);}else{root.style.MozUserSelect=root.__noselect;delete root.__noselect;}}function constant$2(x){return function(){return x;};}function DragEvent(target,type,subject,id,active,x,y,dx,dy,dispatch){this.target=target;this.type=type;this.subject=subject;this.identifier=id;this.active=active;this.x=x;this.y=y;this.dx=dx;this.dy=dy;this._=dispatch;}DragEvent.prototype.on=function(){var value=this._.on.apply(this._,arguments);return value===this._?this:value;};// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(){return!d3.event.button;}function defaultContainer(){return this.parentNode;}function defaultSubject(d){return d==null?{x:d3.event.x,y:d3.event.y}:d;}function defaultTouchable(){return\"ontouchstart\"in this;}function drag(){var filter=defaultFilter,container=defaultContainer,subject=defaultSubject,touchable=defaultTouchable,gestures={},listeners=dispatch(\"start\",\"drag\",\"end\"),active=0,mousedownx,mousedowny,mousemoving,touchending,clickDistance2=0;function drag(selection$$1){selection$$1.on(\"mousedown.drag\",mousedowned).filter(touchable).on(\"touchstart.drag\",touchstarted).on(\"touchmove.drag\",touchmoved).on(\"touchend.drag touchcancel.drag\",touchended).style(\"touch-action\",\"none\").style(\"-webkit-tap-highlight-color\",\"rgba(0,0,0,0)\");}function mousedowned(){if(touchending||!filter.apply(this,arguments))return;var gesture=beforestart(\"mouse\",container.apply(this,arguments),mouse,this,arguments);if(!gesture)return;select(d3.event.view).on(\"mousemove.drag\",mousemoved,true).on(\"mouseup.drag\",mouseupped,true);dragDisable(d3.event.view);nopropagation();mousemoving=false;mousedownx=d3.event.clientX;mousedowny=d3.event.clientY;gesture(\"start\");}function mousemoved(){noevent();if(!mousemoving){var dx=d3.event.clientX-mousedownx,dy=d3.event.clientY-mousedowny;mousemoving=dx*dx+dy*dy>clickDistance2;}gestures.mouse(\"drag\");}function mouseupped(){select(d3.event.view).on(\"mousemove.drag mouseup.drag\",null);yesdrag(d3.event.view,mousemoving);noevent();gestures.mouse(\"end\");}function touchstarted(){if(!filter.apply(this,arguments))return;var touches$$1=d3.event.changedTouches,c=container.apply(this,arguments),n=touches$$1.length,i,gesture;for(i=0;i<n;++i){if(gesture=beforestart(touches$$1[i].identifier,c,touch,this,arguments)){nopropagation();gesture(\"start\");}}}function touchmoved(){var touches$$1=d3.event.changedTouches,n=touches$$1.length,i,gesture;for(i=0;i<n;++i){if(gesture=gestures[touches$$1[i].identifier]){noevent();gesture(\"drag\");}}}function touchended(){var touches$$1=d3.event.changedTouches,n=touches$$1.length,i,gesture;if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},500);// Ghost clicks are delayed!\nfor(i=0;i<n;++i){if(gesture=gestures[touches$$1[i].identifier]){nopropagation();gesture(\"end\");}}}function beforestart(id,container,point$$1,that,args){var p=point$$1(container,id),s,dx,dy,sublisteners=listeners.copy();if(!customEvent(new DragEvent(drag,\"beforestart\",s,id,active,p[0],p[1],0,0,sublisteners),function(){if((d3.event.subject=s=subject.apply(that,args))==null)return false;dx=s.x-p[0]||0;dy=s.y-p[1]||0;return true;}))return;return function gesture(type){var p0=p,n;switch(type){case\"start\":gestures[id]=gesture,n=active++;break;case\"end\":delete gestures[id],--active;// nobreak\ncase\"drag\":p=point$$1(container,id),n=active;break;}customEvent(new DragEvent(drag,type,s,id,n,p[0]+dx,p[1]+dy,p[0]-p0[0],p[1]-p0[1],sublisteners),sublisteners.apply,sublisteners,[type,that,args]);};}drag.filter=function(_){return arguments.length?(filter=typeof _===\"function\"?_:constant$2(!!_),drag):filter;};drag.container=function(_){return arguments.length?(container=typeof _===\"function\"?_:constant$2(_),drag):container;};drag.subject=function(_){return arguments.length?(subject=typeof _===\"function\"?_:constant$2(_),drag):subject;};drag.touchable=function(_){return arguments.length?(touchable=typeof _===\"function\"?_:constant$2(!!_),drag):touchable;};drag.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?drag:value;};drag.clickDistance=function(_){return arguments.length?(clickDistance2=(_=+_)*_,drag):Math.sqrt(clickDistance2);};return drag;}function define(constructor,factory,prototype){constructor.prototype=factory.prototype=prototype;prototype.constructor=constructor;}function extend(parent,definition){var prototype=Object.create(parent.prototype);for(var key in definition){prototype[key]=definition[key];}return prototype;}function Color(){}var _darker=0.7;var _brighter=1/_darker;var reI=\"\\\\s*([+-]?\\\\d+)\\\\s*\",reN=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",reP=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",reHex3=/^#([0-9a-f]{3})$/,reHex6=/^#([0-9a-f]{6})$/,reRgbInteger=new RegExp(\"^rgb\\\\(\"+[reI,reI,reI]+\"\\\\)$\"),reRgbPercent=new RegExp(\"^rgb\\\\(\"+[reP,reP,reP]+\"\\\\)$\"),reRgbaInteger=new RegExp(\"^rgba\\\\(\"+[reI,reI,reI,reN]+\"\\\\)$\"),reRgbaPercent=new RegExp(\"^rgba\\\\(\"+[reP,reP,reP,reN]+\"\\\\)$\"),reHslPercent=new RegExp(\"^hsl\\\\(\"+[reN,reP,reP]+\"\\\\)$\"),reHslaPercent=new RegExp(\"^hsla\\\\(\"+[reN,reP,reP,reN]+\"\\\\)$\");var named={aliceblue:0xf0f8ff,antiquewhite:0xfaebd7,aqua:0x00ffff,aquamarine:0x7fffd4,azure:0xf0ffff,beige:0xf5f5dc,bisque:0xffe4c4,black:0x000000,blanchedalmond:0xffebcd,blue:0x0000ff,blueviolet:0x8a2be2,brown:0xa52a2a,burlywood:0xdeb887,cadetblue:0x5f9ea0,chartreuse:0x7fff00,chocolate:0xd2691e,coral:0xff7f50,cornflowerblue:0x6495ed,cornsilk:0xfff8dc,crimson:0xdc143c,cyan:0x00ffff,darkblue:0x00008b,darkcyan:0x008b8b,darkgoldenrod:0xb8860b,darkgray:0xa9a9a9,darkgreen:0x006400,darkgrey:0xa9a9a9,darkkhaki:0xbdb76b,darkmagenta:0x8b008b,darkolivegreen:0x556b2f,darkorange:0xff8c00,darkorchid:0x9932cc,darkred:0x8b0000,darksalmon:0xe9967a,darkseagreen:0x8fbc8f,darkslateblue:0x483d8b,darkslategray:0x2f4f4f,darkslategrey:0x2f4f4f,darkturquoise:0x00ced1,darkviolet:0x9400d3,deeppink:0xff1493,deepskyblue:0x00bfff,dimgray:0x696969,dimgrey:0x696969,dodgerblue:0x1e90ff,firebrick:0xb22222,floralwhite:0xfffaf0,forestgreen:0x228b22,fuchsia:0xff00ff,gainsboro:0xdcdcdc,ghostwhite:0xf8f8ff,gold:0xffd700,goldenrod:0xdaa520,gray:0x808080,green:0x008000,greenyellow:0xadff2f,grey:0x808080,honeydew:0xf0fff0,hotpink:0xff69b4,indianred:0xcd5c5c,indigo:0x4b0082,ivory:0xfffff0,khaki:0xf0e68c,lavender:0xe6e6fa,lavenderblush:0xfff0f5,lawngreen:0x7cfc00,lemonchiffon:0xfffacd,lightblue:0xadd8e6,lightcoral:0xf08080,lightcyan:0xe0ffff,lightgoldenrodyellow:0xfafad2,lightgray:0xd3d3d3,lightgreen:0x90ee90,lightgrey:0xd3d3d3,lightpink:0xffb6c1,lightsalmon:0xffa07a,lightseagreen:0x20b2aa,lightskyblue:0x87cefa,lightslategray:0x778899,lightslategrey:0x778899,lightsteelblue:0xb0c4de,lightyellow:0xffffe0,lime:0x00ff00,limegreen:0x32cd32,linen:0xfaf0e6,magenta:0xff00ff,maroon:0x800000,mediumaquamarine:0x66cdaa,mediumblue:0x0000cd,mediumorchid:0xba55d3,mediumpurple:0x9370db,mediumseagreen:0x3cb371,mediumslateblue:0x7b68ee,mediumspringgreen:0x00fa9a,mediumturquoise:0x48d1cc,mediumvioletred:0xc71585,midnightblue:0x191970,mintcream:0xf5fffa,mistyrose:0xffe4e1,moccasin:0xffe4b5,navajowhite:0xffdead,navy:0x000080,oldlace:0xfdf5e6,olive:0x808000,olivedrab:0x6b8e23,orange:0xffa500,orangered:0xff4500,orchid:0xda70d6,palegoldenrod:0xeee8aa,palegreen:0x98fb98,paleturquoise:0xafeeee,palevioletred:0xdb7093,papayawhip:0xffefd5,peachpuff:0xffdab9,peru:0xcd853f,pink:0xffc0cb,plum:0xdda0dd,powderblue:0xb0e0e6,purple:0x800080,rebeccapurple:0x663399,red:0xff0000,rosybrown:0xbc8f8f,royalblue:0x4169e1,saddlebrown:0x8b4513,salmon:0xfa8072,sandybrown:0xf4a460,seagreen:0x2e8b57,seashell:0xfff5ee,sienna:0xa0522d,silver:0xc0c0c0,skyblue:0x87ceeb,slateblue:0x6a5acd,slategray:0x708090,slategrey:0x708090,snow:0xfffafa,springgreen:0x00ff7f,steelblue:0x4682b4,tan:0xd2b48c,teal:0x008080,thistle:0xd8bfd8,tomato:0xff6347,turquoise:0x40e0d0,violet:0xee82ee,wheat:0xf5deb3,white:0xffffff,whitesmoke:0xf5f5f5,yellow:0xffff00,yellowgreen:0x9acd32};define(Color,color,{displayable:function displayable(){return this.rgb().displayable();},hex:function hex(){return this.rgb().hex();},toString:function toString(){return this.rgb()+\"\";}});function color(format){var m;format=(format+\"\").trim().toLowerCase();return(m=reHex3.exec(format))?(m=parseInt(m[1],16),new Rgb(m>>8&0xf|m>>4&0x0f0,m>>4&0xf|m&0xf0,(m&0xf)<<4|m&0xf,1)// #f00\n):(m=reHex6.exec(format))?rgbn(parseInt(m[1],16))// #ff0000\n:(m=reRgbInteger.exec(format))?new Rgb(m[1],m[2],m[3],1)// rgb(255, 0, 0)\n:(m=reRgbPercent.exec(format))?new Rgb(m[1]*255/100,m[2]*255/100,m[3]*255/100,1)// rgb(100%, 0%, 0%)\n:(m=reRgbaInteger.exec(format))?rgba(m[1],m[2],m[3],m[4])// rgba(255, 0, 0, 1)\n:(m=reRgbaPercent.exec(format))?rgba(m[1]*255/100,m[2]*255/100,m[3]*255/100,m[4])// rgb(100%, 0%, 0%, 1)\n:(m=reHslPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,1)// hsl(120, 50%, 50%)\n:(m=reHslaPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,m[4])// hsla(120, 50%, 50%, 1)\n:named.hasOwnProperty(format)?rgbn(named[format]):format===\"transparent\"?new Rgb(NaN,NaN,NaN,0):null;}function rgbn(n){return new Rgb(n>>16&0xff,n>>8&0xff,n&0xff,1);}function rgba(r,g,b,a){if(a<=0)r=g=b=NaN;return new Rgb(r,g,b,a);}function rgbConvert(o){if(!(o instanceof Color))o=color(o);if(!o)return new Rgb();o=o.rgb();return new Rgb(o.r,o.g,o.b,o.opacity);}function rgb(r,g,b,opacity){return arguments.length===1?rgbConvert(r):new Rgb(r,g,b,opacity==null?1:opacity);}function Rgb(r,g,b,opacity){this.r=+r;this.g=+g;this.b=+b;this.opacity=+opacity;}define(Rgb,rgb,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Rgb(this.r*k,this.g*k,this.b*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Rgb(this.r*k,this.g*k,this.b*k,this.opacity);},rgb:function rgb(){return this;},displayable:function displayable(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1;},hex:function hex(){return\"#\"+_hex(this.r)+_hex(this.g)+_hex(this.b);},toString:function toString(){var a=this.opacity;a=isNaN(a)?1:Math.max(0,Math.min(1,a));return(a===1?\"rgb(\":\"rgba(\")+Math.max(0,Math.min(255,Math.round(this.r)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.g)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.b)||0))+(a===1?\")\":\", \"+a+\")\");}}));function _hex(value){value=Math.max(0,Math.min(255,Math.round(value)||0));return(value<16?\"0\":\"\")+value.toString(16);}function hsla(h,s,l,a){if(a<=0)h=s=l=NaN;else if(l<=0||l>=1)h=s=NaN;else if(s<=0)h=NaN;return new Hsl(h,s,l,a);}function hslConvert(o){if(o instanceof Hsl)return new Hsl(o.h,o.s,o.l,o.opacity);if(!(o instanceof Color))o=color(o);if(!o)return new Hsl();if(o instanceof Hsl)return o;o=o.rgb();var r=o.r/255,g=o.g/255,b=o.b/255,min=Math.min(r,g,b),max=Math.max(r,g,b),h=NaN,s=max-min,l=(max+min)/2;if(s){if(r===max)h=(g-b)/s+(g<b)*6;else if(g===max)h=(b-r)/s+2;else h=(r-g)/s+4;s/=l<0.5?max+min:2-max-min;h*=60;}else{s=l>0&&l<1?0:h;}return new Hsl(h,s,l,o.opacity);}function hsl(h,s,l,opacity){return arguments.length===1?hslConvert(h):new Hsl(h,s,l,opacity==null?1:opacity);}function Hsl(h,s,l,opacity){this.h=+h;this.s=+s;this.l=+l;this.opacity=+opacity;}define(Hsl,hsl,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Hsl(this.h,this.s,this.l*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Hsl(this.h,this.s,this.l*k,this.opacity);},rgb:function rgb(){var h=this.h%360+(this.h<0)*360,s=isNaN(h)||isNaN(this.s)?0:this.s,l=this.l,m2=l+(l<0.5?l:1-l)*s,m1=2*l-m2;return new Rgb(hsl2rgb(h>=240?h-240:h+120,m1,m2),hsl2rgb(h,m1,m2),hsl2rgb(h<120?h+240:h-120,m1,m2),this.opacity);},displayable:function displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1;}}));/* From FvD 13.37, CSS Color Module Level 3 */function hsl2rgb(h,m1,m2){return(h<60?m1+(m2-m1)*h/60:h<180?m2:h<240?m1+(m2-m1)*(240-h)/60:m1)*255;}var deg2rad=Math.PI/180;var rad2deg=180/Math.PI;// https://beta.observablehq.com/@mbostock/lab-and-rgb\nvar K=18,Xn=0.96422,Yn=1,Zn=0.82521,t0=4/29,t1=6/29,t2=3*t1*t1,t3=t1*t1*t1;function labConvert(o){if(o instanceof Lab)return new Lab(o.l,o.a,o.b,o.opacity);if(o instanceof Hcl){if(isNaN(o.h))return new Lab(o.l,0,0,o.opacity);var h=o.h*deg2rad;return new Lab(o.l,Math.cos(h)*o.c,Math.sin(h)*o.c,o.opacity);}if(!(o instanceof Rgb))o=rgbConvert(o);var r=rgb2lrgb(o.r),g=rgb2lrgb(o.g),b=rgb2lrgb(o.b),y=xyz2lab((0.2225045*r+0.7168786*g+0.0606169*b)/Yn),x,z;if(r===g&&g===b)x=z=y;else{x=xyz2lab((0.4360747*r+0.3850649*g+0.1430804*b)/Xn);z=xyz2lab((0.0139322*r+0.0971045*g+0.7141733*b)/Zn);}return new Lab(116*y-16,500*(x-y),200*(y-z),o.opacity);}function gray(l,opacity){return new Lab(l,0,0,opacity==null?1:opacity);}function lab(l,a,b,opacity){return arguments.length===1?labConvert(l):new Lab(l,a,b,opacity==null?1:opacity);}function Lab(l,a,b,opacity){this.l=+l;this.a=+a;this.b=+b;this.opacity=+opacity;}define(Lab,lab,extend(Color,{brighter:function brighter(k){return new Lab(this.l+K*(k==null?1:k),this.a,this.b,this.opacity);},darker:function darker(k){return new Lab(this.l-K*(k==null?1:k),this.a,this.b,this.opacity);},rgb:function rgb(){var y=(this.l+16)/116,x=isNaN(this.a)?y:y+this.a/500,z=isNaN(this.b)?y:y-this.b/200;x=Xn*lab2xyz(x);y=Yn*lab2xyz(y);z=Zn*lab2xyz(z);return new Rgb(lrgb2rgb(3.1338561*x-1.6168667*y-0.4906146*z),lrgb2rgb(-0.9787684*x+1.9161415*y+0.0334540*z),lrgb2rgb(0.0719453*x-0.2289914*y+1.4052427*z),this.opacity);}}));function xyz2lab(t){return t>t3?Math.pow(t,1/3):t/t2+t0;}function lab2xyz(t){return t>t1?t*t*t:t2*(t-t0);}function lrgb2rgb(x){return 255*(x<=0.0031308?12.92*x:1.055*Math.pow(x,1/2.4)-0.055);}function rgb2lrgb(x){return(x/=255)<=0.04045?x/12.92:Math.pow((x+0.055)/1.055,2.4);}function hclConvert(o){if(o instanceof Hcl)return new Hcl(o.h,o.c,o.l,o.opacity);if(!(o instanceof Lab))o=labConvert(o);if(o.a===0&&o.b===0)return new Hcl(NaN,0,o.l,o.opacity);var h=Math.atan2(o.b,o.a)*rad2deg;return new Hcl(h<0?h+360:h,Math.sqrt(o.a*o.a+o.b*o.b),o.l,o.opacity);}function lch(l,c,h,opacity){return arguments.length===1?hclConvert(l):new Hcl(h,c,l,opacity==null?1:opacity);}function hcl(h,c,l,opacity){return arguments.length===1?hclConvert(h):new Hcl(h,c,l,opacity==null?1:opacity);}function Hcl(h,c,l,opacity){this.h=+h;this.c=+c;this.l=+l;this.opacity=+opacity;}define(Hcl,hcl,extend(Color,{brighter:function brighter(k){return new Hcl(this.h,this.c,this.l+K*(k==null?1:k),this.opacity);},darker:function darker(k){return new Hcl(this.h,this.c,this.l-K*(k==null?1:k),this.opacity);},rgb:function rgb(){return labConvert(this).rgb();}}));var A=-0.14861,B=+1.78277,C=-0.29227,D=-0.90649,E=+1.97294,ED=E*D,EB=E*B,BC_DA=B*C-D*A;function cubehelixConvert(o){if(o instanceof Cubehelix)return new Cubehelix(o.h,o.s,o.l,o.opacity);if(!(o instanceof Rgb))o=rgbConvert(o);var r=o.r/255,g=o.g/255,b=o.b/255,l=(BC_DA*b+ED*r-EB*g)/(BC_DA+ED-EB),bl=b-l,k=(E*(g-l)-C*bl)/D,s=Math.sqrt(k*k+bl*bl)/(E*l*(1-l)),// NaN if l=0 or l=1\nh=s?Math.atan2(k,bl)*rad2deg-120:NaN;return new Cubehelix(h<0?h+360:h,s,l,o.opacity);}function cubehelix(h,s,l,opacity){return arguments.length===1?cubehelixConvert(h):new Cubehelix(h,s,l,opacity==null?1:opacity);}function Cubehelix(h,s,l,opacity){this.h=+h;this.s=+s;this.l=+l;this.opacity=+opacity;}define(Cubehelix,cubehelix,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Cubehelix(this.h,this.s,this.l*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Cubehelix(this.h,this.s,this.l*k,this.opacity);},rgb:function rgb(){var h=isNaN(this.h)?0:(this.h+120)*deg2rad,l=+this.l,a=isNaN(this.s)?0:this.s*l*(1-l),cosh=Math.cos(h),sinh=Math.sin(h);return new Rgb(255*(l+a*(A*cosh+B*sinh)),255*(l+a*(C*cosh+D*sinh)),255*(l+a*(E*cosh)),this.opacity);}}));function basis(t1,v0,v1,v2,v3){var t2=t1*t1,t3=t2*t1;return((1-3*t1+3*t2-t3)*v0+(4-6*t2+3*t3)*v1+(1+3*t1+3*t2-3*t3)*v2+t3*v3)/6;}function basis$1(values){var n=values.length-1;return function(t){var i=t<=0?t=0:t>=1?(t=1,n-1):Math.floor(t*n),v1=values[i],v2=values[i+1],v0=i>0?values[i-1]:2*v1-v2,v3=i<n-1?values[i+2]:2*v2-v1;return basis((t-i/n)*n,v0,v1,v2,v3);};}function basisClosed(values){var n=values.length;return function(t){var i=Math.floor(((t%=1)<0?++t:t)*n),v0=values[(i+n-1)%n],v1=values[i%n],v2=values[(i+1)%n],v3=values[(i+2)%n];return basis((t-i/n)*n,v0,v1,v2,v3);};}function constant$3(x){return function(){return x;};}function linear(a,d){return function(t){return a+t*d;};}function exponential(a,b,y){return a=Math.pow(a,y),b=Math.pow(b,y)-a,y=1/y,function(t){return Math.pow(a+t*b,y);};}function hue(a,b){var d=b-a;return d?linear(a,d>180||d<-180?d-360*Math.round(d/360):d):constant$3(isNaN(a)?b:a);}function gamma(y){return(y=+y)===1?nogamma:function(a,b){return b-a?exponential(a,b,y):constant$3(isNaN(a)?b:a);};}function nogamma(a,b){var d=b-a;return d?linear(a,d):constant$3(isNaN(a)?b:a);}var interpolateRgb=function rgbGamma(y){var color$$1=gamma(y);function rgb$$1(start,end){var r=color$$1((start=rgb(start)).r,(end=rgb(end)).r),g=color$$1(start.g,end.g),b=color$$1(start.b,end.b),opacity=nogamma(start.opacity,end.opacity);return function(t){start.r=r(t);start.g=g(t);start.b=b(t);start.opacity=opacity(t);return start+\"\";};}rgb$$1.gamma=rgbGamma;return rgb$$1;}(1);function rgbSpline(spline){return function(colors){var n=colors.length,r=new Array(n),g=new Array(n),b=new Array(n),i,color$$1;for(i=0;i<n;++i){color$$1=rgb(colors[i]);r[i]=color$$1.r||0;g[i]=color$$1.g||0;b[i]=color$$1.b||0;}r=spline(r);g=spline(g);b=spline(b);color$$1.opacity=1;return function(t){color$$1.r=r(t);color$$1.g=g(t);color$$1.b=b(t);return color$$1+\"\";};};}var rgbBasis=rgbSpline(basis$1);var rgbBasisClosed=rgbSpline(basisClosed);function array$1(a,b){var nb=b?b.length:0,na=a?Math.min(nb,a.length):0,x=new Array(na),c=new Array(nb),i;for(i=0;i<na;++i){x[i]=interpolateValue(a[i],b[i]);}for(;i<nb;++i){c[i]=b[i];}return function(t){for(i=0;i<na;++i){c[i]=x[i](t);}return c;};}function date(a,b){var d=new Date();return a=+a,b-=a,function(t){return d.setTime(a+b*t),d;};}function reinterpolate(a,b){return a=+a,b-=a,function(t){return a+b*t;};}function object(a,b){var i={},c={},k;if(a===null||(typeof a===\"undefined\"?\"undefined\":_typeof(a))!==\"object\")a={};if(b===null||(typeof b===\"undefined\"?\"undefined\":_typeof(b))!==\"object\")b={};for(k in b){if(k in a){i[k]=interpolateValue(a[k],b[k]);}else{c[k]=b[k];}}return function(t){for(k in i){c[k]=i[k](t);}return c;};}var reA=/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,reB=new RegExp(reA.source,\"g\");function zero(b){return function(){return b;};}function one(b){return function(t){return b(t)+\"\";};}function interpolateString(a,b){var bi=reA.lastIndex=reB.lastIndex=0,// scan index for next number in b\nam,// current match in a\nbm,// current match in b\nbs,// string preceding current number in b, if any\ni=-1,// index in s\ns=[],// string constants and placeholders\nq=[];// number interpolators\n// Coerce inputs to strings.\na=a+\"\",b=b+\"\";// Interpolate pairs of numbers in a & b.\nwhile((am=reA.exec(a))&&(bm=reB.exec(b))){if((bs=bm.index)>bi){// a string precedes the next number in b\nbs=b.slice(bi,bs);if(s[i])s[i]+=bs;// coalesce with previous string\nelse s[++i]=bs;}if((am=am[0])===(bm=bm[0])){// numbers in a & b match\nif(s[i])s[i]+=bm;// coalesce with previous string\nelse s[++i]=bm;}else{// interpolate non-matching numbers\ns[++i]=null;q.push({i:i,x:reinterpolate(am,bm)});}bi=reB.lastIndex;}// Add remains of b.\nif(bi<b.length){bs=b.slice(bi);if(s[i])s[i]+=bs;// coalesce with previous string\nelse s[++i]=bs;}// Special optimization for only a single match.\n// Otherwise, interpolate each of the numbers and rejoin the string.\nreturn s.length<2?q[0]?one(q[0].x):zero(b):(b=q.length,function(t){for(var i=0,o;i<b;++i){s[(o=q[i]).i]=o.x(t);}return s.join(\"\");});}function interpolateValue(a,b){var t=typeof b===\"undefined\"?\"undefined\":_typeof(b),c;return b==null||t===\"boolean\"?constant$3(b):(t===\"number\"?reinterpolate:t===\"string\"?(c=color(b))?(b=c,interpolateRgb):interpolateString:b instanceof color?interpolateRgb:b instanceof Date?date:Array.isArray(b)?array$1:typeof b.valueOf!==\"function\"&&typeof b.toString!==\"function\"||isNaN(b)?object:reinterpolate)(a,b);}function interpolateRound(a,b){return a=+a,b-=a,function(t){return Math.round(a+b*t);};}var degrees=180/Math.PI;var identity$2={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function decompose(a,b,c,d,e,f){var scaleX,scaleY,skewX;if(scaleX=Math.sqrt(a*a+b*b))a/=scaleX,b/=scaleX;if(skewX=a*c+b*d)c-=a*skewX,d-=b*skewX;if(scaleY=Math.sqrt(c*c+d*d))c/=scaleY,d/=scaleY,skewX/=scaleY;if(a*d<b*c)a=-a,b=-b,skewX=-skewX,scaleX=-scaleX;return{translateX:e,translateY:f,rotate:Math.atan2(b,a)*degrees,skewX:Math.atan(skewX)*degrees,scaleX:scaleX,scaleY:scaleY};}var cssNode,cssRoot,cssView,svgNode;function parseCss(value){if(value===\"none\")return identity$2;if(!cssNode)cssNode=document.createElement(\"DIV\"),cssRoot=document.documentElement,cssView=document.defaultView;cssNode.style.transform=value;value=cssView.getComputedStyle(cssRoot.appendChild(cssNode),null).getPropertyValue(\"transform\");cssRoot.removeChild(cssNode);value=value.slice(7,-1).split(\",\");return decompose(+value[0],+value[1],+value[2],+value[3],+value[4],+value[5]);}function parseSvg(value){if(value==null)return identity$2;if(!svgNode)svgNode=document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\");svgNode.setAttribute(\"transform\",value);if(!(value=svgNode.transform.baseVal.consolidate()))return identity$2;value=value.matrix;return decompose(value.a,value.b,value.c,value.d,value.e,value.f);}function interpolateTransform(parse,pxComma,pxParen,degParen){function pop(s){return s.length?s.pop()+\" \":\"\";}function translate(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push(\"translate(\",null,pxComma,null,pxParen);q.push({i:i-4,x:reinterpolate(xa,xb)},{i:i-2,x:reinterpolate(ya,yb)});}else if(xb||yb){s.push(\"translate(\"+xb+pxComma+yb+pxParen);}}function rotate(a,b,s,q){if(a!==b){if(a-b>180)b+=360;else if(b-a>180)a+=360;// shortest path\nq.push({i:s.push(pop(s)+\"rotate(\",null,degParen)-2,x:reinterpolate(a,b)});}else if(b){s.push(pop(s)+\"rotate(\"+b+degParen);}}function skewX(a,b,s,q){if(a!==b){q.push({i:s.push(pop(s)+\"skewX(\",null,degParen)-2,x:reinterpolate(a,b)});}else if(b){s.push(pop(s)+\"skewX(\"+b+degParen);}}function scale(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push(pop(s)+\"scale(\",null,\",\",null,\")\");q.push({i:i-4,x:reinterpolate(xa,xb)},{i:i-2,x:reinterpolate(ya,yb)});}else if(xb!==1||yb!==1){s.push(pop(s)+\"scale(\"+xb+\",\"+yb+\")\");}}return function(a,b){var s=[],// string constants and placeholders\nq=[];// number interpolators\na=parse(a),b=parse(b);translate(a.translateX,a.translateY,b.translateX,b.translateY,s,q);rotate(a.rotate,b.rotate,s,q);skewX(a.skewX,b.skewX,s,q);scale(a.scaleX,a.scaleY,b.scaleX,b.scaleY,s,q);a=b=null;// gc\nreturn function(t){var i=-1,n=q.length,o;while(++i<n){s[(o=q[i]).i]=o.x(t);}return s.join(\"\");};};}var interpolateTransformCss=interpolateTransform(parseCss,\"px, \",\"px)\",\"deg)\");var interpolateTransformSvg=interpolateTransform(parseSvg,\", \",\")\",\")\");var rho=Math.SQRT2,rho2=2,rho4=4,epsilon2=1e-12;function cosh(x){return((x=Math.exp(x))+1/x)/2;}function sinh(x){return((x=Math.exp(x))-1/x)/2;}function tanh(x){return((x=Math.exp(2*x))-1)/(x+1);}// p0 = [ux0, uy0, w0]\n// p1 = [ux1, uy1, w1]\nfunction interpolateZoom(p0,p1){var ux0=p0[0],uy0=p0[1],w0=p0[2],ux1=p1[0],uy1=p1[1],w1=p1[2],dx=ux1-ux0,dy=uy1-uy0,d2=dx*dx+dy*dy,i,S;// Special case for u0 ≅ u1.\nif(d2<epsilon2){S=Math.log(w1/w0)/rho;i=function i(t){return[ux0+t*dx,uy0+t*dy,w0*Math.exp(rho*t*S)];};}// General case.\nelse{var d1=Math.sqrt(d2),b0=(w1*w1-w0*w0+rho4*d2)/(2*w0*rho2*d1),b1=(w1*w1-w0*w0-rho4*d2)/(2*w1*rho2*d1),r0=Math.log(Math.sqrt(b0*b0+1)-b0),r1=Math.log(Math.sqrt(b1*b1+1)-b1);S=(r1-r0)/rho;i=function i(t){var s=t*S,coshr0=cosh(r0),u=w0/(rho2*d1)*(coshr0*tanh(rho*s+r0)-sinh(r0));return[ux0+u*dx,uy0+u*dy,w0*coshr0/cosh(rho*s+r0)];};}i.duration=S*1000;return i;}function hsl$1(hue$$1){return function(start,end){var h=hue$$1((start=hsl(start)).h,(end=hsl(end)).h),s=nogamma(start.s,end.s),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.s=s(t);start.l=l(t);start.opacity=opacity(t);return start+\"\";};};}var hsl$2=hsl$1(hue);var hslLong=hsl$1(nogamma);function lab$1(start,end){var l=nogamma((start=lab(start)).l,(end=lab(end)).l),a=nogamma(start.a,end.a),b=nogamma(start.b,end.b),opacity=nogamma(start.opacity,end.opacity);return function(t){start.l=l(t);start.a=a(t);start.b=b(t);start.opacity=opacity(t);return start+\"\";};}function hcl$1(hue$$1){return function(start,end){var h=hue$$1((start=hcl(start)).h,(end=hcl(end)).h),c=nogamma(start.c,end.c),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.c=c(t);start.l=l(t);start.opacity=opacity(t);return start+\"\";};};}var hcl$2=hcl$1(hue);var hclLong=hcl$1(nogamma);function cubehelix$1(hue$$1){return function cubehelixGamma(y){y=+y;function cubehelix$$1(start,end){var h=hue$$1((start=cubehelix(start)).h,(end=cubehelix(end)).h),s=nogamma(start.s,end.s),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.s=s(t);start.l=l(Math.pow(t,y));start.opacity=opacity(t);return start+\"\";};}cubehelix$$1.gamma=cubehelixGamma;return cubehelix$$1;}(1);}var cubehelix$2=cubehelix$1(hue);var cubehelixLong=cubehelix$1(nogamma);function piecewise(interpolate,values){var i=0,n=values.length-1,v=values[0],I=new Array(n<0?0:n);while(i<n){I[i]=interpolate(v,v=values[++i]);}return function(t){var i=Math.max(0,Math.min(n-1,Math.floor(t*=n)));return I[i](t-i);};}function quantize(interpolator,n){var samples=new Array(n);for(var i=0;i<n;++i){samples[i]=interpolator(i/(n-1));}return samples;}var frame=0,// is an animation frame pending?\ntimeout=0,// is a timeout pending?\ninterval=0,// are any timers active?\npokeDelay=1000,// how frequently we check for clock skew\ntaskHead,taskTail,clockLast=0,clockNow=0,clockSkew=0,clock=(typeof performance===\"undefined\"?\"undefined\":_typeof(performance))===\"object\"&&performance.now?performance:Date,setFrame=(typeof window===\"undefined\"?\"undefined\":_typeof(window))===\"object\"&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(f){setTimeout(f,17);};function now(){return clockNow||(setFrame(clearNow),clockNow=clock.now()+clockSkew);}function clearNow(){clockNow=0;}function Timer(){this._call=this._time=this._next=null;}Timer.prototype=timer.prototype={constructor:Timer,restart:function restart(callback,delay,time){if(typeof callback!==\"function\")throw new TypeError(\"callback is not a function\");time=(time==null?now():+time)+(delay==null?0:+delay);if(!this._next&&taskTail!==this){if(taskTail)taskTail._next=this;else taskHead=this;taskTail=this;}this._call=callback;this._time=time;sleep();},stop:function stop(){if(this._call){this._call=null;this._time=Infinity;sleep();}}};function timer(callback,delay,time){var t=new Timer();t.restart(callback,delay,time);return t;}function timerFlush(){now();// Get the current time, if not already set.\n++frame;// Pretend we’ve set an alarm, if we haven’t already.\nvar t=taskHead,e;while(t){if((e=clockNow-t._time)>=0)t._call.call(null,e);t=t._next;}--frame;}function wake(){clockNow=(clockLast=clock.now())+clockSkew;frame=timeout=0;try{timerFlush();}finally{frame=0;nap();clockNow=0;}}function poke(){var now=clock.now(),delay=now-clockLast;if(delay>pokeDelay)clockSkew-=delay,clockLast=now;}function nap(){var t0,t1=taskHead,t2,time=Infinity;while(t1){if(t1._call){if(time>t1._time)time=t1._time;t0=t1,t1=t1._next;}else{t2=t1._next,t1._next=null;t1=t0?t0._next=t2:taskHead=t2;}}taskTail=t0;sleep(time);}function sleep(time){if(frame)return;// Soonest alarm already set, or will be.\nif(timeout)timeout=clearTimeout(timeout);var delay=time-clockNow;// Strictly less than if we recomputed clockNow.\nif(delay>24){if(time<Infinity)timeout=setTimeout(wake,time-clock.now()-clockSkew);if(interval)interval=clearInterval(interval);}else{if(!interval)clockLast=clock.now(),interval=setInterval(poke,pokeDelay);frame=1,setFrame(wake);}}function timeout$1(callback,delay,time){var t=new Timer();delay=delay==null?0:+delay;t.restart(function(elapsed){t.stop();callback(elapsed+delay);},delay,time);return t;}function interval$1(callback,delay,time){var t=new Timer(),total=delay;if(delay==null)return t.restart(callback,delay,time),t;delay=+delay,time=time==null?now():+time;t.restart(function tick(elapsed){elapsed+=total;t.restart(tick,total+=delay,time);callback(elapsed);},delay,time);return t;}var emptyOn=dispatch(\"start\",\"end\",\"interrupt\");var emptyTween=[];var CREATED=0;var SCHEDULED=1;var STARTING=2;var STARTED=3;var RUNNING=4;var ENDING=5;var ENDED=6;function schedule(node,name,id,index,group,timing){var schedules=node.__transition;if(!schedules)node.__transition={};else if(id in schedules)return;create$1(node,id,{name:name,index:index,// For context during callback.\ngroup:group,// For context during callback.\non:emptyOn,tween:emptyTween,time:timing.time,delay:timing.delay,duration:timing.duration,ease:timing.ease,timer:null,state:CREATED});}function init(node,id){var schedule=get$1(node,id);if(schedule.state>CREATED)throw new Error(\"too late; already scheduled\");return schedule;}function set$1(node,id){var schedule=get$1(node,id);if(schedule.state>STARTING)throw new Error(\"too late; already started\");return schedule;}function get$1(node,id){var schedule=node.__transition;if(!schedule||!(schedule=schedule[id]))throw new Error(\"transition not found\");return schedule;}function create$1(node,id,self){var schedules=node.__transition,tween;// Initialize the self timer when the transition is created.\n// Note the actual delay is not known until the first callback!\nschedules[id]=self;self.timer=timer(schedule,0,self.time);function schedule(elapsed){self.state=SCHEDULED;self.timer.restart(start,self.delay,self.time);// If the elapsed delay is less than our first sleep, start immediately.\nif(self.delay<=elapsed)start(elapsed-self.delay);}function start(elapsed){var i,j,n,o;// If the state is not SCHEDULED, then we previously errored on start.\nif(self.state!==SCHEDULED)return stop();for(i in schedules){o=schedules[i];if(o.name!==self.name)continue;// While this element already has a starting transition during this frame,\n// defer starting an interrupting transition until that transition has a\n// chance to tick (and possibly end); see d3/d3-transition#54!\nif(o.state===STARTED)return timeout$1(start);// Interrupt the active transition, if any.\n// Dispatch the interrupt event.\nif(o.state===RUNNING){o.state=ENDED;o.timer.stop();o.on.call(\"interrupt\",node,node.__data__,o.index,o.group);delete schedules[i];}// Cancel any pre-empted transitions. No interrupt event is dispatched\n// because the cancelled transitions never started. Note that this also\n// removes this transition from the pending list!\nelse if(+i<id){o.state=ENDED;o.timer.stop();delete schedules[i];}}// Defer the first tick to end of the current frame; see d3/d3#1576.\n// Note the transition may be canceled after start and before the first tick!\n// Note this must be scheduled before the start event; see d3/d3-transition#16!\n// Assuming this is successful, subsequent callbacks go straight to tick.\ntimeout$1(function(){if(self.state===STARTED){self.state=RUNNING;self.timer.restart(tick,self.delay,self.time);tick(elapsed);}});// Dispatch the start event.\n// Note this must be done before the tween are initialized.\nself.state=STARTING;self.on.call(\"start\",node,node.__data__,self.index,self.group);if(self.state!==STARTING)return;// interrupted\nself.state=STARTED;// Initialize the tween, deleting null tween.\ntween=new Array(n=self.tween.length);for(i=0,j=-1;i<n;++i){if(o=self.tween[i].value.call(node,node.__data__,self.index,self.group)){tween[++j]=o;}}tween.length=j+1;}function tick(elapsed){var t=elapsed<self.duration?self.ease.call(null,elapsed/self.duration):(self.timer.restart(stop),self.state=ENDING,1),i=-1,n=tween.length;while(++i<n){tween[i].call(null,t);}// Dispatch the end event.\nif(self.state===ENDING){self.on.call(\"end\",node,node.__data__,self.index,self.group);stop();}}function stop(){self.state=ENDED;self.timer.stop();delete schedules[id];for(var i in schedules){return;}// eslint-disable-line no-unused-vars\ndelete node.__transition;}}function interrupt(node,name){var schedules=node.__transition,schedule$$1,active,empty=true,i;if(!schedules)return;name=name==null?null:name+\"\";for(i in schedules){if((schedule$$1=schedules[i]).name!==name){empty=false;continue;}active=schedule$$1.state>STARTING&&schedule$$1.state<ENDING;schedule$$1.state=ENDED;schedule$$1.timer.stop();if(active)schedule$$1.on.call(\"interrupt\",node,node.__data__,schedule$$1.index,schedule$$1.group);delete schedules[i];}if(empty)delete node.__transition;}function selection_interrupt(name){return this.each(function(){interrupt(this,name);});}function tweenRemove(id,name){var tween0,tween1;return function(){var schedule$$1=set$1(this,id),tween=schedule$$1.tween;// If this node shared tween with the previous node,\n// just assign the updated shared tween and we’re done!\n// Otherwise, copy-on-write.\nif(tween!==tween0){tween1=tween0=tween;for(var i=0,n=tween1.length;i<n;++i){if(tween1[i].name===name){tween1=tween1.slice();tween1.splice(i,1);break;}}}schedule$$1.tween=tween1;};}function tweenFunction(id,name,value){var tween0,tween1;if(typeof value!==\"function\")throw new Error();return function(){var schedule$$1=set$1(this,id),tween=schedule$$1.tween;// If this node shared tween with the previous node,\n// just assign the updated shared tween and we’re done!\n// Otherwise, copy-on-write.\nif(tween!==tween0){tween1=(tween0=tween).slice();for(var t={name:name,value:value},i=0,n=tween1.length;i<n;++i){if(tween1[i].name===name){tween1[i]=t;break;}}if(i===n)tween1.push(t);}schedule$$1.tween=tween1;};}function transition_tween(name,value){var id=this._id;name+=\"\";if(arguments.length<2){var tween=get$1(this.node(),id).tween;for(var i=0,n=tween.length,t;i<n;++i){if((t=tween[i]).name===name){return t.value;}}return null;}return this.each((value==null?tweenRemove:tweenFunction)(id,name,value));}function tweenValue(transition,name,value){var id=transition._id;transition.each(function(){var schedule$$1=set$1(this,id);(schedule$$1.value||(schedule$$1.value={}))[name]=value.apply(this,arguments);});return function(node){return get$1(node,id).value[name];};}function interpolate(a,b){var c;return(typeof b===\"number\"?reinterpolate:b instanceof color?interpolateRgb:(c=color(b))?(b=c,interpolateRgb):interpolateString)(a,b);}function attrRemove$1(name){return function(){this.removeAttribute(name);};}function attrRemoveNS$1(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local);};}function attrConstant$1(name,interpolate$$1,value1){var value00,interpolate0;return function(){var value0=this.getAttribute(name);return value0===value1?null:value0===value00?interpolate0:interpolate0=interpolate$$1(value00=value0,value1);};}function attrConstantNS$1(fullname,interpolate$$1,value1){var value00,interpolate0;return function(){var value0=this.getAttributeNS(fullname.space,fullname.local);return value0===value1?null:value0===value00?interpolate0:interpolate0=interpolate$$1(value00=value0,value1);};}function attrFunction$1(name,interpolate$$1,value){var value00,value10,interpolate0;return function(){var value0,value1=value(this);if(value1==null)return void this.removeAttribute(name);value0=this.getAttribute(name);return value0===value1?null:value0===value00&&value1===value10?interpolate0:interpolate0=interpolate$$1(value00=value0,value10=value1);};}function attrFunctionNS$1(fullname,interpolate$$1,value){var value00,value10,interpolate0;return function(){var value0,value1=value(this);if(value1==null)return void this.removeAttributeNS(fullname.space,fullname.local);value0=this.getAttributeNS(fullname.space,fullname.local);return value0===value1?null:value0===value00&&value1===value10?interpolate0:interpolate0=interpolate$$1(value00=value0,value10=value1);};}function transition_attr(name,value){var fullname=namespace(name),i=fullname===\"transform\"?interpolateTransformSvg:interpolate;return this.attrTween(name,typeof value===\"function\"?(fullname.local?attrFunctionNS$1:attrFunction$1)(fullname,i,tweenValue(this,\"attr.\"+name,value)):value==null?(fullname.local?attrRemoveNS$1:attrRemove$1)(fullname):(fullname.local?attrConstantNS$1:attrConstant$1)(fullname,i,value+\"\"));}function attrTweenNS(fullname,value){function tween(){var node=this,i=value.apply(node,arguments);return i&&function(t){node.setAttributeNS(fullname.space,fullname.local,i(t));};}tween._value=value;return tween;}function attrTween(name,value){function tween(){var node=this,i=value.apply(node,arguments);return i&&function(t){node.setAttribute(name,i(t));};}tween._value=value;return tween;}function transition_attrTween(name,value){var key=\"attr.\"+name;if(arguments.length<2)return(key=this.tween(key))&&key._value;if(value==null)return this.tween(key,null);if(typeof value!==\"function\")throw new Error();var fullname=namespace(name);return this.tween(key,(fullname.local?attrTweenNS:attrTween)(fullname,value));}function delayFunction(id,value){return function(){init(this,id).delay=+value.apply(this,arguments);};}function delayConstant(id,value){return value=+value,function(){init(this,id).delay=value;};}function transition_delay(value){var id=this._id;return arguments.length?this.each((typeof value===\"function\"?delayFunction:delayConstant)(id,value)):get$1(this.node(),id).delay;}function durationFunction(id,value){return function(){set$1(this,id).duration=+value.apply(this,arguments);};}function durationConstant(id,value){return value=+value,function(){set$1(this,id).duration=value;};}function transition_duration(value){var id=this._id;return arguments.length?this.each((typeof value===\"function\"?durationFunction:durationConstant)(id,value)):get$1(this.node(),id).duration;}function easeConstant(id,value){if(typeof value!==\"function\")throw new Error();return function(){set$1(this,id).ease=value;};}function transition_ease(value){var id=this._id;return arguments.length?this.each(easeConstant(id,value)):get$1(this.node(),id).ease;}function transition_filter(match){if(typeof match!==\"function\")match=matcher$1(match);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=[],node,i=0;i<n;++i){if((node=group[i])&&match.call(node,node.__data__,i,group)){subgroup.push(node);}}}return new Transition(subgroups,this._parents,this._name,this._id);}function transition_merge(transition$$1){if(transition$$1._id!==this._id)throw new Error();for(var groups0=this._groups,groups1=transition$$1._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j){for(var group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),node,i=0;i<n;++i){if(node=group0[i]||group1[i]){merge[i]=node;}}}for(;j<m0;++j){merges[j]=groups0[j];}return new Transition(merges,this._parents,this._name,this._id);}function start(name){return(name+\"\").trim().split(/^|\\s+/).every(function(t){var i=t.indexOf(\".\");if(i>=0)t=t.slice(0,i);return!t||t===\"start\";});}function onFunction(id,name,listener){var on0,on1,sit=start(name)?init:set$1;return function(){var schedule$$1=sit(this,id),on=schedule$$1.on;// If this node shared a dispatch with the previous node,\n// just assign the updated shared dispatch and we’re done!\n// Otherwise, copy-on-write.\nif(on!==on0)(on1=(on0=on).copy()).on(name,listener);schedule$$1.on=on1;};}function transition_on(name,listener){var id=this._id;return arguments.length<2?get$1(this.node(),id).on.on(name):this.each(onFunction(id,name,listener));}function removeFunction(id){return function(){var parent=this.parentNode;for(var i in this.__transition){if(+i!==id)return;}if(parent)parent.removeChild(this);};}function transition_remove(){return this.on(\"end.remove\",removeFunction(this._id));}function transition_select(select$$1){var name=this._name,id=this._id;if(typeof select$$1!==\"function\")select$$1=selector(select$$1);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),node,subnode,i=0;i<n;++i){if((node=group[i])&&(subnode=select$$1.call(node,node.__data__,i,group))){if(\"__data__\"in node)subnode.__data__=node.__data__;subgroup[i]=subnode;schedule(subgroup[i],name,id,i,subgroup,get$1(node,id));}}}return new Transition(subgroups,this._parents,name,id);}function transition_selectAll(select$$1){var name=this._name,id=this._id;if(typeof select$$1!==\"function\")select$$1=selectorAll(select$$1);for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){for(var children=select$$1.call(node,node.__data__,i,group),child,inherit=get$1(node,id),k=0,l=children.length;k<l;++k){if(child=children[k]){schedule(child,name,id,k,children,inherit);}}subgroups.push(children);parents.push(node);}}}return new Transition(subgroups,parents,name,id);}var Selection$1=selection.prototype.constructor;function transition_selection(){return new Selection$1(this._groups,this._parents);}function styleRemove$1(name,interpolate$$1){var value00,value10,interpolate0;return function(){var value0=styleValue(this,name),value1=(this.style.removeProperty(name),styleValue(this,name));return value0===value1?null:value0===value00&&value1===value10?interpolate0:interpolate0=interpolate$$1(value00=value0,value10=value1);};}function styleRemoveEnd(name){return function(){this.style.removeProperty(name);};}function styleConstant$1(name,interpolate$$1,value1){var value00,interpolate0;return function(){var value0=styleValue(this,name);return value0===value1?null:value0===value00?interpolate0:interpolate0=interpolate$$1(value00=value0,value1);};}function styleFunction$1(name,interpolate$$1,value){var value00,value10,interpolate0;return function(){var value0=styleValue(this,name),value1=value(this);if(value1==null)value1=(this.style.removeProperty(name),styleValue(this,name));return value0===value1?null:value0===value00&&value1===value10?interpolate0:interpolate0=interpolate$$1(value00=value0,value10=value1);};}function transition_style(name,value,priority){var i=(name+=\"\")===\"transform\"?interpolateTransformCss:interpolate;return value==null?this.styleTween(name,styleRemove$1(name,i)).on(\"end.style.\"+name,styleRemoveEnd(name)):this.styleTween(name,typeof value===\"function\"?styleFunction$1(name,i,tweenValue(this,\"style.\"+name,value)):styleConstant$1(name,i,value+\"\"),priority);}function styleTween(name,value,priority){function tween(){var node=this,i=value.apply(node,arguments);return i&&function(t){node.style.setProperty(name,i(t),priority);};}tween._value=value;return tween;}function transition_styleTween(name,value,priority){var key=\"style.\"+(name+=\"\");if(arguments.length<2)return(key=this.tween(key))&&key._value;if(value==null)return this.tween(key,null);if(typeof value!==\"function\")throw new Error();return this.tween(key,styleTween(name,value,priority==null?\"\":priority));}function textConstant$1(value){return function(){this.textContent=value;};}function textFunction$1(value){return function(){var value1=value(this);this.textContent=value1==null?\"\":value1;};}function transition_text(value){return this.tween(\"text\",typeof value===\"function\"?textFunction$1(tweenValue(this,\"text\",value)):textConstant$1(value==null?\"\":value+\"\"));}function transition_transition(){var name=this._name,id0=this._id,id1=newId();for(var groups=this._groups,m=groups.length,j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){var inherit=get$1(node,id0);schedule(node,name,id1,i,group,{time:inherit.time+inherit.delay+inherit.duration,delay:0,duration:inherit.duration,ease:inherit.ease});}}}return new Transition(groups,this._parents,name,id1);}var id=0;function Transition(groups,parents,name,id){this._groups=groups;this._parents=parents;this._name=name;this._id=id;}function transition(name){return selection().transition(name);}function newId(){return++id;}var selection_prototype=selection.prototype;Transition.prototype=transition.prototype={constructor:Transition,select:transition_select,selectAll:transition_selectAll,filter:transition_filter,merge:transition_merge,selection:transition_selection,transition:transition_transition,call:selection_prototype.call,nodes:selection_prototype.nodes,node:selection_prototype.node,size:selection_prototype.size,empty:selection_prototype.empty,each:selection_prototype.each,on:transition_on,attr:transition_attr,attrTween:transition_attrTween,style:transition_style,styleTween:transition_styleTween,text:transition_text,remove:transition_remove,tween:transition_tween,delay:transition_delay,duration:transition_duration,ease:transition_ease};function linear$1(t){return+t;}function quadIn(t){return t*t;}function quadOut(t){return t*(2-t);}function quadInOut(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2;}function cubicIn(t){return t*t*t;}function cubicOut(t){return--t*t*t+1;}function cubicInOut(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2;}var exponent=3;var polyIn=function custom(e){e=+e;function polyIn(t){return Math.pow(t,e);}polyIn.exponent=custom;return polyIn;}(exponent);var polyOut=function custom(e){e=+e;function polyOut(t){return 1-Math.pow(1-t,e);}polyOut.exponent=custom;return polyOut;}(exponent);var polyInOut=function custom(e){e=+e;function polyInOut(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2;}polyInOut.exponent=custom;return polyInOut;}(exponent);var pi=Math.PI,halfPi=pi/2;function sinIn(t){return 1-Math.cos(t*halfPi);}function sinOut(t){return Math.sin(t*halfPi);}function sinInOut(t){return(1-Math.cos(pi*t))/2;}function expIn(t){return Math.pow(2,10*t-10);}function expOut(t){return 1-Math.pow(2,-10*t);}function expInOut(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2;}function circleIn(t){return 1-Math.sqrt(1-t*t);}function circleOut(t){return Math.sqrt(1- --t*t);}function circleInOut(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2;}var b1=4/11,b2=6/11,b3=8/11,b4=3/4,b5=9/11,b6=10/11,b7=15/16,b8=21/22,b9=63/64,b0=1/b1/b1;function bounceIn(t){return 1-bounceOut(1-t);}function bounceOut(t){return(t=+t)<b1?b0*t*t:t<b3?b0*(t-=b2)*t+b4:t<b6?b0*(t-=b5)*t+b7:b0*(t-=b8)*t+b9;}function bounceInOut(t){return((t*=2)<=1?1-bounceOut(1-t):bounceOut(t-1)+1)/2;}var overshoot=1.70158;var backIn=function custom(s){s=+s;function backIn(t){return t*t*((s+1)*t-s);}backIn.overshoot=custom;return backIn;}(overshoot);var backOut=function custom(s){s=+s;function backOut(t){return--t*t*((s+1)*t+s)+1;}backOut.overshoot=custom;return backOut;}(overshoot);var backInOut=function custom(s){s=+s;function backInOut(t){return((t*=2)<1?t*t*((s+1)*t-s):(t-=2)*t*((s+1)*t+s)+2)/2;}backInOut.overshoot=custom;return backInOut;}(overshoot);var tau=2*Math.PI,amplitude=1,period=0.3;var elasticIn=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticIn(t){return a*Math.pow(2,10*--t)*Math.sin((s-t)/p);}elasticIn.amplitude=function(a){return custom(a,p*tau);};elasticIn.period=function(p){return custom(a,p);};return elasticIn;}(amplitude,period);var elasticOut=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticOut(t){return 1-a*Math.pow(2,-10*(t=+t))*Math.sin((t+s)/p);}elasticOut.amplitude=function(a){return custom(a,p*tau);};elasticOut.period=function(p){return custom(a,p);};return elasticOut;}(amplitude,period);var elasticInOut=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticInOut(t){return((t=t*2-1)<0?a*Math.pow(2,10*t)*Math.sin((s-t)/p):2-a*Math.pow(2,-10*t)*Math.sin((s+t)/p))/2;}elasticInOut.amplitude=function(a){return custom(a,p*tau);};elasticInOut.period=function(p){return custom(a,p);};return elasticInOut;}(amplitude,period);var defaultTiming={time:null,// Set on use.\ndelay:0,duration:250,ease:cubicInOut};function inherit(node,id){var timing;while(!(timing=node.__transition)||!(timing=timing[id])){if(!(node=node.parentNode)){return defaultTiming.time=now(),defaultTiming;}}return timing;}function selection_transition(name){var id,timing;if(name instanceof Transition){id=name._id,name=name._name;}else{id=newId(),(timing=defaultTiming).time=now(),name=name==null?null:name+\"\";}for(var groups=this._groups,m=groups.length,j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){schedule(node,name,id,i,group,timing||inherit(node,id));}}}return new Transition(groups,this._parents,name,id);}selection.prototype.interrupt=selection_interrupt;selection.prototype.transition=selection_transition;var root$1=[null];function active(node,name){var schedules=node.__transition,schedule$$1,i;if(schedules){name=name==null?null:name+\"\";for(i in schedules){if((schedule$$1=schedules[i]).state>SCHEDULED&&schedule$$1.name===name){return new Transition([[node]],root$1,name,+i);}}}return null;}function constant$4(x){return function(){return x;};}function BrushEvent(target,type,selection){this.target=target;this.type=type;this.selection=selection;}function nopropagation$1(){d3.event.stopImmediatePropagation();}function noevent$1(){d3.event.preventDefault();d3.event.stopImmediatePropagation();}var MODE_DRAG={name:\"drag\"},MODE_SPACE={name:\"space\"},MODE_HANDLE={name:\"handle\"},MODE_CENTER={name:\"center\"};var X={name:\"x\",handles:[\"e\",\"w\"].map(type),input:function input(x,e){return x&&[[x[0],e[0][1]],[x[1],e[1][1]]];},output:function output(xy){return xy&&[xy[0][0],xy[1][0]];}};var Y={name:\"y\",handles:[\"n\",\"s\"].map(type),input:function input(y,e){return y&&[[e[0][0],y[0]],[e[1][0],y[1]]];},output:function output(xy){return xy&&[xy[0][1],xy[1][1]];}};var XY={name:\"xy\",handles:[\"n\",\"e\",\"s\",\"w\",\"nw\",\"ne\",\"se\",\"sw\"].map(type),input:function input(xy){return xy;},output:function output(xy){return xy;}};var cursors={overlay:\"crosshair\",selection:\"move\",n:\"ns-resize\",e:\"ew-resize\",s:\"ns-resize\",w:\"ew-resize\",nw:\"nwse-resize\",ne:\"nesw-resize\",se:\"nwse-resize\",sw:\"nesw-resize\"};var flipX={e:\"w\",w:\"e\",nw:\"ne\",ne:\"nw\",se:\"sw\",sw:\"se\"};var flipY={n:\"s\",s:\"n\",nw:\"sw\",ne:\"se\",se:\"ne\",sw:\"nw\"};var signsX={overlay:+1,selection:+1,n:null,e:+1,s:null,w:-1,nw:-1,ne:+1,se:+1,sw:-1};var signsY={overlay:+1,selection:+1,n:-1,e:null,s:+1,w:null,nw:-1,ne:-1,se:+1,sw:+1};function type(t){return{type:t};}// Ignore right-click, since that should open the context menu.\nfunction defaultFilter$1(){return!d3.event.button;}function defaultExtent(){var svg=this.ownerSVGElement||this;return[[0,0],[svg.width.baseVal.value,svg.height.baseVal.value]];}// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local$1(node){while(!node.__brush){if(!(node=node.parentNode))return;}return node.__brush;}function empty$1(extent){return extent[0][0]===extent[1][0]||extent[0][1]===extent[1][1];}function brushSelection(node){var state=node.__brush;return state?state.dim.output(state.selection):null;}function brushX(){return brush$1(X);}function brushY(){return brush$1(Y);}function brush(){return brush$1(XY);}function brush$1(dim){var extent=defaultExtent,filter=defaultFilter$1,listeners=dispatch(brush,\"start\",\"brush\",\"end\"),handleSize=6,touchending;function brush(group){var overlay=group.property(\"__brush\",initialize).selectAll(\".overlay\").data([type(\"overlay\")]);overlay.enter().append(\"rect\").attr(\"class\",\"overlay\").attr(\"pointer-events\",\"all\").attr(\"cursor\",cursors.overlay).merge(overlay).each(function(){var extent=local$1(this).extent;select(this).attr(\"x\",extent[0][0]).attr(\"y\",extent[0][1]).attr(\"width\",extent[1][0]-extent[0][0]).attr(\"height\",extent[1][1]-extent[0][1]);});group.selectAll(\".selection\").data([type(\"selection\")]).enter().append(\"rect\").attr(\"class\",\"selection\").attr(\"cursor\",cursors.selection).attr(\"fill\",\"#777\").attr(\"fill-opacity\",0.3).attr(\"stroke\",\"#fff\").attr(\"shape-rendering\",\"crispEdges\");var handle=group.selectAll(\".handle\").data(dim.handles,function(d){return d.type;});handle.exit().remove();handle.enter().append(\"rect\").attr(\"class\",function(d){return\"handle handle--\"+d.type;}).attr(\"cursor\",function(d){return cursors[d.type];});group.each(redraw).attr(\"fill\",\"none\").attr(\"pointer-events\",\"all\").style(\"-webkit-tap-highlight-color\",\"rgba(0,0,0,0)\").on(\"mousedown.brush touchstart.brush\",started);}brush.move=function(group,selection$$1){if(group.selection){group.on(\"start.brush\",function(){emitter(this,arguments).beforestart().start();}).on(\"interrupt.brush end.brush\",function(){emitter(this,arguments).end();}).tween(\"brush\",function(){var that=this,state=that.__brush,emit=emitter(that,arguments),selection0=state.selection,selection1=dim.input(typeof selection$$1===\"function\"?selection$$1.apply(this,arguments):selection$$1,state.extent),i=interpolateValue(selection0,selection1);function tween(t){state.selection=t===1&&empty$1(selection1)?null:i(t);redraw.call(that);emit.brush();}return selection0&&selection1?tween:tween(1);});}else{group.each(function(){var that=this,args=arguments,state=that.__brush,selection1=dim.input(typeof selection$$1===\"function\"?selection$$1.apply(that,args):selection$$1,state.extent),emit=emitter(that,args).beforestart();interrupt(that);state.selection=selection1==null||empty$1(selection1)?null:selection1;redraw.call(that);emit.start().brush().end();});}};function redraw(){var group=select(this),selection$$1=local$1(this).selection;if(selection$$1){group.selectAll(\".selection\").style(\"display\",null).attr(\"x\",selection$$1[0][0]).attr(\"y\",selection$$1[0][1]).attr(\"width\",selection$$1[1][0]-selection$$1[0][0]).attr(\"height\",selection$$1[1][1]-selection$$1[0][1]);group.selectAll(\".handle\").style(\"display\",null).attr(\"x\",function(d){return d.type[d.type.length-1]===\"e\"?selection$$1[1][0]-handleSize/2:selection$$1[0][0]-handleSize/2;}).attr(\"y\",function(d){return d.type[0]===\"s\"?selection$$1[1][1]-handleSize/2:selection$$1[0][1]-handleSize/2;}).attr(\"width\",function(d){return d.type===\"n\"||d.type===\"s\"?selection$$1[1][0]-selection$$1[0][0]+handleSize:handleSize;}).attr(\"height\",function(d){return d.type===\"e\"||d.type===\"w\"?selection$$1[1][1]-selection$$1[0][1]+handleSize:handleSize;});}else{group.selectAll(\".selection,.handle\").style(\"display\",\"none\").attr(\"x\",null).attr(\"y\",null).attr(\"width\",null).attr(\"height\",null);}}function emitter(that,args){return that.__brush.emitter||new Emitter(that,args);}function Emitter(that,args){this.that=that;this.args=args;this.state=that.__brush;this.active=0;}Emitter.prototype={beforestart:function beforestart(){if(++this.active===1)this.state.emitter=this,this.starting=true;return this;},start:function start(){if(this.starting)this.starting=false,this.emit(\"start\");return this;},brush:function brush(){this.emit(\"brush\");return this;},end:function end(){if(--this.active===0)delete this.state.emitter,this.emit(\"end\");return this;},emit:function emit(type){customEvent(new BrushEvent(brush,type,dim.output(this.state.selection)),listeners.apply,listeners,[type,this.that,this.args]);}};function started(){if(d3.event.touches){if(d3.event.changedTouches.length<d3.event.touches.length)return noevent$1();}else if(touchending)return;if(!filter.apply(this,arguments))return;var that=this,type=d3.event.target.__data__.type,mode=(d3.event.metaKey?type=\"overlay\":type)===\"selection\"?MODE_DRAG:d3.event.altKey?MODE_CENTER:MODE_HANDLE,signX=dim===Y?null:signsX[type],signY=dim===X?null:signsY[type],state=local$1(that),extent=state.extent,selection$$1=state.selection,W=extent[0][0],w0,w1,N=extent[0][1],n0,n1,E=extent[1][0],e0,e1,S=extent[1][1],s0,s1,dx,dy,moving,shifting=signX&&signY&&d3.event.shiftKey,lockX,lockY,point0=mouse(that),point$$1=point0,emit=emitter(that,arguments).beforestart();if(type===\"overlay\"){state.selection=selection$$1=[[w0=dim===Y?W:point0[0],n0=dim===X?N:point0[1]],[e0=dim===Y?E:w0,s0=dim===X?S:n0]];}else{w0=selection$$1[0][0];n0=selection$$1[0][1];e0=selection$$1[1][0];s0=selection$$1[1][1];}w1=w0;n1=n0;e1=e0;s1=s0;var group=select(that).attr(\"pointer-events\",\"none\");var overlay=group.selectAll(\".overlay\").attr(\"cursor\",cursors[type]);if(d3.event.touches){group.on(\"touchmove.brush\",moved,true).on(\"touchend.brush touchcancel.brush\",ended,true);}else{var view=select(d3.event.view).on(\"keydown.brush\",keydowned,true).on(\"keyup.brush\",keyupped,true).on(\"mousemove.brush\",moved,true).on(\"mouseup.brush\",ended,true);dragDisable(d3.event.view);}nopropagation$1();interrupt(that);redraw.call(that);emit.start();function moved(){var point1=mouse(that);if(shifting&&!lockX&&!lockY){if(Math.abs(point1[0]-point$$1[0])>Math.abs(point1[1]-point$$1[1]))lockY=true;else lockX=true;}point$$1=point1;moving=true;noevent$1();move();}function move(){var t;dx=point$$1[0]-point0[0];dy=point$$1[1]-point0[1];switch(mode){case MODE_SPACE:case MODE_DRAG:{if(signX)dx=Math.max(W-w0,Math.min(E-e0,dx)),w1=w0+dx,e1=e0+dx;if(signY)dy=Math.max(N-n0,Math.min(S-s0,dy)),n1=n0+dy,s1=s0+dy;break;}case MODE_HANDLE:{if(signX<0)dx=Math.max(W-w0,Math.min(E-w0,dx)),w1=w0+dx,e1=e0;else if(signX>0)dx=Math.max(W-e0,Math.min(E-e0,dx)),w1=w0,e1=e0+dx;if(signY<0)dy=Math.max(N-n0,Math.min(S-n0,dy)),n1=n0+dy,s1=s0;else if(signY>0)dy=Math.max(N-s0,Math.min(S-s0,dy)),n1=n0,s1=s0+dy;break;}case MODE_CENTER:{if(signX)w1=Math.max(W,Math.min(E,w0-dx*signX)),e1=Math.max(W,Math.min(E,e0+dx*signX));if(signY)n1=Math.max(N,Math.min(S,n0-dy*signY)),s1=Math.max(N,Math.min(S,s0+dy*signY));break;}}if(e1<w1){signX*=-1;t=w0,w0=e0,e0=t;t=w1,w1=e1,e1=t;if(type in flipX)overlay.attr(\"cursor\",cursors[type=flipX[type]]);}if(s1<n1){signY*=-1;t=n0,n0=s0,s0=t;t=n1,n1=s1,s1=t;if(type in flipY)overlay.attr(\"cursor\",cursors[type=flipY[type]]);}if(state.selection)selection$$1=state.selection;// May be set by brush.move!\nif(lockX)w1=selection$$1[0][0],e1=selection$$1[1][0];if(lockY)n1=selection$$1[0][1],s1=selection$$1[1][1];if(selection$$1[0][0]!==w1||selection$$1[0][1]!==n1||selection$$1[1][0]!==e1||selection$$1[1][1]!==s1){state.selection=[[w1,n1],[e1,s1]];redraw.call(that);emit.brush();}}function ended(){nopropagation$1();if(d3.event.touches){if(d3.event.touches.length)return;if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},500);// Ghost clicks are delayed!\ngroup.on(\"touchmove.brush touchend.brush touchcancel.brush\",null);}else{yesdrag(d3.event.view,moving);view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\",null);}group.attr(\"pointer-events\",\"all\");overlay.attr(\"cursor\",cursors.overlay);if(state.selection)selection$$1=state.selection;// May be set by brush.move (on start)!\nif(empty$1(selection$$1))state.selection=null,redraw.call(that);emit.end();}function keydowned(){switch(d3.event.keyCode){case 16:{// SHIFT\nshifting=signX&&signY;break;}case 18:{// ALT\nif(mode===MODE_HANDLE){if(signX)e0=e1-dx*signX,w0=w1+dx*signX;if(signY)s0=s1-dy*signY,n0=n1+dy*signY;mode=MODE_CENTER;move();}break;}case 32:{// SPACE; takes priority over ALT\nif(mode===MODE_HANDLE||mode===MODE_CENTER){if(signX<0)e0=e1-dx;else if(signX>0)w0=w1-dx;if(signY<0)s0=s1-dy;else if(signY>0)n0=n1-dy;mode=MODE_SPACE;overlay.attr(\"cursor\",cursors.selection);move();}break;}default:return;}noevent$1();}function keyupped(){switch(d3.event.keyCode){case 16:{// SHIFT\nif(shifting){lockX=lockY=shifting=false;move();}break;}case 18:{// ALT\nif(mode===MODE_CENTER){if(signX<0)e0=e1;else if(signX>0)w0=w1;if(signY<0)s0=s1;else if(signY>0)n0=n1;mode=MODE_HANDLE;move();}break;}case 32:{// SPACE\nif(mode===MODE_SPACE){if(d3.event.altKey){if(signX)e0=e1-dx*signX,w0=w1+dx*signX;if(signY)s0=s1-dy*signY,n0=n1+dy*signY;mode=MODE_CENTER;}else{if(signX<0)e0=e1;else if(signX>0)w0=w1;if(signY<0)s0=s1;else if(signY>0)n0=n1;mode=MODE_HANDLE;}overlay.attr(\"cursor\",cursors[type]);move();}break;}default:return;}noevent$1();}}function initialize(){var state=this.__brush||{selection:null};state.extent=extent.apply(this,arguments);state.dim=dim;return state;}brush.extent=function(_){return arguments.length?(extent=typeof _===\"function\"?_:constant$4([[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]]),brush):extent;};brush.filter=function(_){return arguments.length?(filter=typeof _===\"function\"?_:constant$4(!!_),brush):filter;};brush.handleSize=function(_){return arguments.length?(handleSize=+_,brush):handleSize;};brush.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?brush:value;};return brush;}var cos=Math.cos;var sin=Math.sin;var pi$1=Math.PI;var halfPi$1=pi$1/2;var tau$1=pi$1*2;var max$1=Math.max;function compareValue(compare){return function(a,b){return compare(a.source.value+a.target.value,b.source.value+b.target.value);};}function chord(){var padAngle=0,sortGroups=null,sortSubgroups=null,sortChords=null;function chord(matrix){var n=matrix.length,groupSums=[],groupIndex=sequence(n),subgroupIndex=[],chords=[],groups=chords.groups=new Array(n),subgroups=new Array(n*n),k,x,x0,dx,i,j;// Compute the sum.\nk=0,i=-1;while(++i<n){x=0,j=-1;while(++j<n){x+=matrix[i][j];}groupSums.push(x);subgroupIndex.push(sequence(n));k+=x;}// Sort groups…\nif(sortGroups)groupIndex.sort(function(a,b){return sortGroups(groupSums[a],groupSums[b]);});// Sort subgroups…\nif(sortSubgroups)subgroupIndex.forEach(function(d,i){d.sort(function(a,b){return sortSubgroups(matrix[i][a],matrix[i][b]);});});// Convert the sum to scaling factor for [0, 2pi].\n// TODO Allow start and end angle to be specified?\n// TODO Allow padding to be specified as percentage?\nk=max$1(0,tau$1-padAngle*n)/k;dx=k?padAngle:tau$1/n;// Compute the start and end angle for each group and subgroup.\n// Note: Opera has a bug reordering object literal properties!\nx=0,i=-1;while(++i<n){x0=x,j=-1;while(++j<n){var di=groupIndex[i],dj=subgroupIndex[di][j],v=matrix[di][dj],a0=x,a1=x+=v*k;subgroups[dj*n+di]={index:di,subindex:dj,startAngle:a0,endAngle:a1,value:v};}groups[di]={index:di,startAngle:x0,endAngle:x,value:groupSums[di]};x+=dx;}// Generate chords for each (non-empty) subgroup-subgroup link.\ni=-1;while(++i<n){j=i-1;while(++j<n){var source=subgroups[j*n+i],target=subgroups[i*n+j];if(source.value||target.value){chords.push(source.value<target.value?{source:target,target:source}:{source:source,target:target});}}}return sortChords?chords.sort(sortChords):chords;}chord.padAngle=function(_){return arguments.length?(padAngle=max$1(0,_),chord):padAngle;};chord.sortGroups=function(_){return arguments.length?(sortGroups=_,chord):sortGroups;};chord.sortSubgroups=function(_){return arguments.length?(sortSubgroups=_,chord):sortSubgroups;};chord.sortChords=function(_){return arguments.length?(_==null?sortChords=null:(sortChords=compareValue(_))._=_,chord):sortChords&&sortChords._;};return chord;}var slice$2=Array.prototype.slice;function constant$5(x){return function(){return x;};}var pi$2=Math.PI,tau$2=2*pi$2,epsilon$1=1e-6,tauEpsilon=tau$2-epsilon$1;function Path(){this._x0=this._y0=// start of current subpath\nthis._x1=this._y1=null;// end of current subpath\nthis._=\"\";}function path(){return new Path();}Path.prototype=path.prototype={constructor:Path,moveTo:function moveTo(x,y){this._+=\"M\"+(this._x0=this._x1=+x)+\",\"+(this._y0=this._y1=+y);},closePath:function closePath(){if(this._x1!==null){this._x1=this._x0,this._y1=this._y0;this._+=\"Z\";}},lineTo:function lineTo(x,y){this._+=\"L\"+(this._x1=+x)+\",\"+(this._y1=+y);},quadraticCurveTo:function quadraticCurveTo(x1,y1,x,y){this._+=\"Q\"+ +x1+\",\"+ +y1+\",\"+(this._x1=+x)+\",\"+(this._y1=+y);},bezierCurveTo:function bezierCurveTo(x1,y1,x2,y2,x,y){this._+=\"C\"+ +x1+\",\"+ +y1+\",\"+ +x2+\",\"+ +y2+\",\"+(this._x1=+x)+\",\"+(this._y1=+y);},arcTo:function arcTo(x1,y1,x2,y2,r){x1=+x1,y1=+y1,x2=+x2,y2=+y2,r=+r;var x0=this._x1,y0=this._y1,x21=x2-x1,y21=y2-y1,x01=x0-x1,y01=y0-y1,l01_2=x01*x01+y01*y01;// Is the radius negative? Error.\nif(r<0)throw new Error(\"negative radius: \"+r);// Is this path empty? Move to (x1,y1).\nif(this._x1===null){this._+=\"M\"+(this._x1=x1)+\",\"+(this._y1=y1);}// Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\nelse if(!(l01_2>epsilon$1)){}// Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n// Equivalently, is (x1,y1) coincident with (x2,y2)?\n// Or, is the radius zero? Line to (x1,y1).\nelse if(!(Math.abs(y01*x21-y21*x01)>epsilon$1)||!r){this._+=\"L\"+(this._x1=x1)+\",\"+(this._y1=y1);}// Otherwise, draw an arc!\nelse{var x20=x2-x0,y20=y2-y0,l21_2=x21*x21+y21*y21,l20_2=x20*x20+y20*y20,l21=Math.sqrt(l21_2),l01=Math.sqrt(l01_2),l=r*Math.tan((pi$2-Math.acos((l21_2+l01_2-l20_2)/(2*l21*l01)))/2),t01=l/l01,t21=l/l21;// If the start tangent is not coincident with (x0,y0), line to.\nif(Math.abs(t01-1)>epsilon$1){this._+=\"L\"+(x1+t01*x01)+\",\"+(y1+t01*y01);}this._+=\"A\"+r+\",\"+r+\",0,0,\"+ +(y01*x20>x01*y20)+\",\"+(this._x1=x1+t21*x21)+\",\"+(this._y1=y1+t21*y21);}},arc:function arc(x,y,r,a0,a1,ccw){x=+x,y=+y,r=+r;var dx=r*Math.cos(a0),dy=r*Math.sin(a0),x0=x+dx,y0=y+dy,cw=1^ccw,da=ccw?a0-a1:a1-a0;// Is the radius negative? Error.\nif(r<0)throw new Error(\"negative radius: \"+r);// Is this path empty? Move to (x0,y0).\nif(this._x1===null){this._+=\"M\"+x0+\",\"+y0;}// Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\nelse if(Math.abs(this._x1-x0)>epsilon$1||Math.abs(this._y1-y0)>epsilon$1){this._+=\"L\"+x0+\",\"+y0;}// Is this arc empty? We’re done.\nif(!r)return;// Does the angle go the wrong way? Flip the direction.\nif(da<0)da=da%tau$2+tau$2;// Is this a complete circle? Draw two arcs to complete the circle.\nif(da>tauEpsilon){this._+=\"A\"+r+\",\"+r+\",0,1,\"+cw+\",\"+(x-dx)+\",\"+(y-dy)+\"A\"+r+\",\"+r+\",0,1,\"+cw+\",\"+(this._x1=x0)+\",\"+(this._y1=y0);}// Is this arc non-empty? Draw an arc!\nelse if(da>epsilon$1){this._+=\"A\"+r+\",\"+r+\",0,\"+ +(da>=pi$2)+\",\"+cw+\",\"+(this._x1=x+r*Math.cos(a1))+\",\"+(this._y1=y+r*Math.sin(a1));}},rect:function rect(x,y,w,h){this._+=\"M\"+(this._x0=this._x1=+x)+\",\"+(this._y0=this._y1=+y)+\"h\"+ +w+\"v\"+ +h+\"h\"+-w+\"Z\";},toString:function toString(){return this._;}};function defaultSource(d){return d.source;}function defaultTarget(d){return d.target;}function defaultRadius(d){return d.radius;}function defaultStartAngle(d){return d.startAngle;}function defaultEndAngle(d){return d.endAngle;}function ribbon(){var source=defaultSource,target=defaultTarget,radius=defaultRadius,startAngle=defaultStartAngle,endAngle=defaultEndAngle,context=null;function ribbon(){var buffer,argv=slice$2.call(arguments),s=source.apply(this,argv),t=target.apply(this,argv),sr=+radius.apply(this,(argv[0]=s,argv)),sa0=startAngle.apply(this,argv)-halfPi$1,sa1=endAngle.apply(this,argv)-halfPi$1,sx0=sr*cos(sa0),sy0=sr*sin(sa0),tr=+radius.apply(this,(argv[0]=t,argv)),ta0=startAngle.apply(this,argv)-halfPi$1,ta1=endAngle.apply(this,argv)-halfPi$1;if(!context)context=buffer=path();context.moveTo(sx0,sy0);context.arc(0,0,sr,sa0,sa1);if(sa0!==ta0||sa1!==ta1){// TODO sr !== tr?\ncontext.quadraticCurveTo(0,0,tr*cos(ta0),tr*sin(ta0));context.arc(0,0,tr,ta0,ta1);}context.quadraticCurveTo(0,0,sx0,sy0);context.closePath();if(buffer)return context=null,buffer+\"\"||null;}ribbon.radius=function(_){return arguments.length?(radius=typeof _===\"function\"?_:constant$5(+_),ribbon):radius;};ribbon.startAngle=function(_){return arguments.length?(startAngle=typeof _===\"function\"?_:constant$5(+_),ribbon):startAngle;};ribbon.endAngle=function(_){return arguments.length?(endAngle=typeof _===\"function\"?_:constant$5(+_),ribbon):endAngle;};ribbon.source=function(_){return arguments.length?(source=_,ribbon):source;};ribbon.target=function(_){return arguments.length?(target=_,ribbon):target;};ribbon.context=function(_){return arguments.length?(context=_==null?null:_,ribbon):context;};return ribbon;}var prefix=\"$\";function Map(){}Map.prototype=map$1.prototype={constructor:Map,has:function has(key){return prefix+key in this;},get:function get(key){return this[prefix+key];},set:function set(key,value){this[prefix+key]=value;return this;},remove:function remove(key){var property=prefix+key;return property in this&&delete this[property];},clear:function clear(){for(var property in this){if(property[0]===prefix)delete this[property];}},keys:function keys(){var keys=[];for(var property in this){if(property[0]===prefix)keys.push(property.slice(1));}return keys;},values:function values(){var values=[];for(var property in this){if(property[0]===prefix)values.push(this[property]);}return values;},entries:function entries(){var entries=[];for(var property in this){if(property[0]===prefix)entries.push({key:property.slice(1),value:this[property]});}return entries;},size:function size(){var size=0;for(var property in this){if(property[0]===prefix)++size;}return size;},empty:function empty(){for(var property in this){if(property[0]===prefix)return false;}return true;},each:function each(f){for(var property in this){if(property[0]===prefix)f(this[property],property.slice(1),this);}}};function map$1(object,f){var map=new Map();// Copy constructor.\nif(object instanceof Map)object.each(function(value,key){map.set(key,value);});// Index array by numeric index or specified key function.\nelse if(Array.isArray(object)){var i=-1,n=object.length,o;if(f==null)while(++i<n){map.set(i,object[i]);}else while(++i<n){map.set(f(o=object[i],i,object),o);}}// Convert object to map.\nelse if(object)for(var key in object){map.set(key,object[key]);}return map;}function nest(){var keys=[],_sortKeys=[],_sortValues,_rollup,nest;function apply(array,depth,createResult,setResult){if(depth>=keys.length){if(_sortValues!=null)array.sort(_sortValues);return _rollup!=null?_rollup(array):array;}var i=-1,n=array.length,key=keys[depth++],keyValue,value,valuesByKey=map$1(),values,result=createResult();while(++i<n){if(values=valuesByKey.get(keyValue=key(value=array[i])+\"\")){values.push(value);}else{valuesByKey.set(keyValue,[value]);}}valuesByKey.each(function(values,key){setResult(result,key,apply(values,depth,createResult,setResult));});return result;}function _entries(map,depth){if(++depth>keys.length)return map;var array,sortKey=_sortKeys[depth-1];if(_rollup!=null&&depth>=keys.length)array=map.entries();else array=[],map.each(function(v,k){array.push({key:k,values:_entries(v,depth)});});return sortKey!=null?array.sort(function(a,b){return sortKey(a.key,b.key);}):array;}return nest={object:function object(array){return apply(array,0,createObject,setObject);},map:function map(array){return apply(array,0,createMap,setMap);},entries:function entries(array){return _entries(apply(array,0,createMap,setMap),0);},key:function key(d){keys.push(d);return nest;},sortKeys:function sortKeys(order){_sortKeys[keys.length-1]=order;return nest;},sortValues:function sortValues(order){_sortValues=order;return nest;},rollup:function rollup(f){_rollup=f;return nest;}};}function createObject(){return{};}function setObject(object,key,value){object[key]=value;}function createMap(){return map$1();}function setMap(map,key,value){map.set(key,value);}function Set(){}var proto=map$1.prototype;Set.prototype=set$2.prototype={constructor:Set,has:proto.has,add:function add(value){value+=\"\";this[prefix+value]=value;return this;},remove:proto.remove,clear:proto.clear,values:proto.keys,size:proto.size,empty:proto.empty,each:proto.each};function set$2(object,f){var set=new Set();// Copy constructor.\nif(object instanceof Set)object.each(function(value){set.add(value);});// Otherwise, assume it’s an array.\nelse if(object){var i=-1,n=object.length;if(f==null)while(++i<n){set.add(object[i]);}else while(++i<n){set.add(f(object[i],i,object));}}return set;}function keys(map){var keys=[];for(var key in map){keys.push(key);}return keys;}function values(map){var values=[];for(var key in map){values.push(map[key]);}return values;}function entries(map){var entries=[];for(var key in map){entries.push({key:key,value:map[key]});}return entries;}var array$2=Array.prototype;var slice$3=array$2.slice;function ascending$2(a,b){return a-b;}function area(ring){var i=0,n=ring.length,area=ring[n-1][1]*ring[0][0]-ring[n-1][0]*ring[0][1];while(++i<n){area+=ring[i-1][1]*ring[i][0]-ring[i-1][0]*ring[i][1];}return area;}function constant$6(x){return function(){return x;};}function contains(ring,hole){var i=-1,n=hole.length,c;while(++i<n){if(c=ringContains(ring,hole[i]))return c;}return 0;}function ringContains(ring,point){var x=point[0],y=point[1],contains=-1;for(var i=0,n=ring.length,j=n-1;i<n;j=i++){var pi=ring[i],xi=pi[0],yi=pi[1],pj=ring[j],xj=pj[0],yj=pj[1];if(segmentContains(pi,pj,point))return 0;if(yi>y!==yj>y&&x<(xj-xi)*(y-yi)/(yj-yi)+xi)contains=-contains;}return contains;}function segmentContains(a,b,c){var i;return collinear(a,b,c)&&within(a[i=+(a[0]===b[0])],c[i],b[i]);}function collinear(a,b,c){return(b[0]-a[0])*(c[1]-a[1])===(c[0]-a[0])*(b[1]-a[1]);}function within(p,q,r){return p<=q&&q<=r||r<=q&&q<=p;}function noop$1(){}var cases=[[],[[[1.0,1.5],[0.5,1.0]]],[[[1.5,1.0],[1.0,1.5]]],[[[1.5,1.0],[0.5,1.0]]],[[[1.0,0.5],[1.5,1.0]]],[[[1.0,1.5],[0.5,1.0]],[[1.0,0.5],[1.5,1.0]]],[[[1.0,0.5],[1.0,1.5]]],[[[1.0,0.5],[0.5,1.0]]],[[[0.5,1.0],[1.0,0.5]]],[[[1.0,1.5],[1.0,0.5]]],[[[0.5,1.0],[1.0,0.5]],[[1.5,1.0],[1.0,1.5]]],[[[1.5,1.0],[1.0,0.5]]],[[[0.5,1.0],[1.5,1.0]]],[[[1.0,1.5],[1.5,1.0]]],[[[0.5,1.0],[1.0,1.5]]],[]];function contours(){var dx=1,dy=1,threshold$$1=thresholdSturges,smooth=smoothLinear;function contours(values){var tz=threshold$$1(values);// Convert number of thresholds into uniform thresholds.\nif(!Array.isArray(tz)){var domain=extent(values),start=domain[0],stop=domain[1];tz=tickStep(start,stop,tz);tz=sequence(Math.floor(start/tz)*tz,Math.floor(stop/tz)*tz,tz);}else{tz=tz.slice().sort(ascending$2);}return tz.map(function(value){return contour(values,value);});}// Accumulate, smooth contour rings, assign holes to exterior rings.\n// Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\nfunction contour(values,value){var polygons=[],holes=[];isorings(values,value,function(ring){smooth(ring,values,value);if(area(ring)>0)polygons.push([ring]);else holes.push(ring);});holes.forEach(function(hole){for(var i=0,n=polygons.length,polygon;i<n;++i){if(contains((polygon=polygons[i])[0],hole)!==-1){polygon.push(hole);return;}}});return{type:\"MultiPolygon\",value:value,coordinates:polygons};}// Marching squares with isolines stitched into rings.\n// Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\nfunction isorings(values,value,callback){var fragmentByStart=new Array(),fragmentByEnd=new Array(),x,y,t0,t1,t2,t3;// Special case for the first row (y = -1, t2 = t3 = 0).\nx=y=-1;t1=values[0]>=value;cases[t1<<1].forEach(stitch);while(++x<dx-1){t0=t1,t1=values[x+1]>=value;cases[t0|t1<<1].forEach(stitch);}cases[t1<<0].forEach(stitch);// General case for the intermediate rows.\nwhile(++y<dy-1){x=-1;t1=values[y*dx+dx]>=value;t2=values[y*dx]>=value;cases[t1<<1|t2<<2].forEach(stitch);while(++x<dx-1){t0=t1,t1=values[y*dx+dx+x+1]>=value;t3=t2,t2=values[y*dx+x+1]>=value;cases[t0|t1<<1|t2<<2|t3<<3].forEach(stitch);}cases[t1|t2<<3].forEach(stitch);}// Special case for the last row (y = dy - 1, t0 = t1 = 0).\nx=-1;t2=values[y*dx]>=value;cases[t2<<2].forEach(stitch);while(++x<dx-1){t3=t2,t2=values[y*dx+x+1]>=value;cases[t2<<2|t3<<3].forEach(stitch);}cases[t2<<3].forEach(stitch);function stitch(line){var start=[line[0][0]+x,line[0][1]+y],end=[line[1][0]+x,line[1][1]+y],startIndex=index(start),endIndex=index(end),f,g;if(f=fragmentByEnd[startIndex]){if(g=fragmentByStart[endIndex]){delete fragmentByEnd[f.end];delete fragmentByStart[g.start];if(f===g){f.ring.push(end);callback(f.ring);}else{fragmentByStart[f.start]=fragmentByEnd[g.end]={start:f.start,end:g.end,ring:f.ring.concat(g.ring)};}}else{delete fragmentByEnd[f.end];f.ring.push(end);fragmentByEnd[f.end=endIndex]=f;}}else if(f=fragmentByStart[endIndex]){if(g=fragmentByEnd[startIndex]){delete fragmentByStart[f.start];delete fragmentByEnd[g.end];if(f===g){f.ring.push(end);callback(f.ring);}else{fragmentByStart[g.start]=fragmentByEnd[f.end]={start:g.start,end:f.end,ring:g.ring.concat(f.ring)};}}else{delete fragmentByStart[f.start];f.ring.unshift(start);fragmentByStart[f.start=startIndex]=f;}}else{fragmentByStart[startIndex]=fragmentByEnd[endIndex]={start:startIndex,end:endIndex,ring:[start,end]};}}}function index(point){return point[0]*2+point[1]*(dx+1)*4;}function smoothLinear(ring,values,value){ring.forEach(function(point){var x=point[0],y=point[1],xt=x|0,yt=y|0,v0,v1=values[yt*dx+xt];if(x>0&&x<dx&&xt===x){v0=values[yt*dx+xt-1];point[0]=x+(value-v0)/(v1-v0)-0.5;}if(y>0&&y<dy&&yt===y){v0=values[(yt-1)*dx+xt];point[1]=y+(value-v0)/(v1-v0)-0.5;}});}contours.contour=contour;contours.size=function(_){if(!arguments.length)return[dx,dy];var _0=Math.ceil(_[0]),_1=Math.ceil(_[1]);if(!(_0>0)||!(_1>0))throw new Error(\"invalid size\");return dx=_0,dy=_1,contours;};contours.thresholds=function(_){return arguments.length?(threshold$$1=typeof _===\"function\"?_:Array.isArray(_)?constant$6(slice$3.call(_)):constant$6(_),contours):threshold$$1;};contours.smooth=function(_){return arguments.length?(smooth=_?smoothLinear:noop$1,contours):smooth===smoothLinear;};return contours;}// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nfunction blurX(source,target,r){var n=source.width,m=source.height,w=(r<<1)+1;for(var j=0;j<m;++j){for(var i=0,sr=0;i<n+r;++i){if(i<n){sr+=source.data[i+j*n];}if(i>=r){if(i>=w){sr-=source.data[i-w+j*n];}target.data[i-r+j*n]=sr/Math.min(i+1,n-1+w-i,w);}}}}// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nfunction blurY(source,target,r){var n=source.width,m=source.height,w=(r<<1)+1;for(var i=0;i<n;++i){for(var j=0,sr=0;j<m+r;++j){if(j<m){sr+=source.data[i+j*n];}if(j>=r){if(j>=w){sr-=source.data[i+(j-w)*n];}target.data[i+(j-r)*n]=sr/Math.min(j+1,m-1+w-j,w);}}}}function defaultX(d){return d[0];}function defaultY(d){return d[1];}function density(){var x=defaultX,y=defaultY,dx=960,dy=500,r=20,// blur radius\nk=2,// log2(grid cell size)\no=r*3,// grid offset, to pad for blur\nn=dx+o*2>>k,// grid width\nm=dy+o*2>>k,// grid height\nthreshold$$1=constant$6(20);function density(data){var values0=new Float32Array(n*m),values1=new Float32Array(n*m);data.forEach(function(d,i,data){var xi=x(d,i,data)+o>>k,yi=y(d,i,data)+o>>k;if(xi>=0&&xi<n&&yi>=0&&yi<m){++values0[xi+yi*n];}});// TODO Optimize.\nblurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);blurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);blurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);var tz=threshold$$1(values0);// Convert number of thresholds into uniform thresholds.\nif(!Array.isArray(tz)){var stop=max(values0);tz=tickStep(0,stop,tz);tz=sequence(0,Math.floor(stop/tz)*tz,tz);tz.shift();}return contours().thresholds(tz).size([n,m])(values0).map(transform);}function transform(geometry){geometry.value*=Math.pow(2,-2*k);// Density in points per square pixel.\ngeometry.coordinates.forEach(transformPolygon);return geometry;}function transformPolygon(coordinates){coordinates.forEach(transformRing);}function transformRing(coordinates){coordinates.forEach(transformPoint);}// TODO Optimize.\nfunction transformPoint(coordinates){coordinates[0]=coordinates[0]*Math.pow(2,k)-o;coordinates[1]=coordinates[1]*Math.pow(2,k)-o;}function resize(){o=r*3;n=dx+o*2>>k;m=dy+o*2>>k;return density;}density.x=function(_){return arguments.length?(x=typeof _===\"function\"?_:constant$6(+_),density):x;};density.y=function(_){return arguments.length?(y=typeof _===\"function\"?_:constant$6(+_),density):y;};density.size=function(_){if(!arguments.length)return[dx,dy];var _0=Math.ceil(_[0]),_1=Math.ceil(_[1]);if(!(_0>=0)&&!(_0>=0))throw new Error(\"invalid size\");return dx=_0,dy=_1,resize();};density.cellSize=function(_){if(!arguments.length)return 1<<k;if(!((_=+_)>=1))throw new Error(\"invalid cell size\");return k=Math.floor(Math.log(_)/Math.LN2),resize();};density.thresholds=function(_){return arguments.length?(threshold$$1=typeof _===\"function\"?_:Array.isArray(_)?constant$6(slice$3.call(_)):constant$6(_),density):threshold$$1;};density.bandwidth=function(_){if(!arguments.length)return Math.sqrt(r*(r+1));if(!((_=+_)>=0))throw new Error(\"invalid bandwidth\");return r=Math.round((Math.sqrt(4*_*_+1)-1)/2),resize();};return density;}var EOL={},EOF={},QUOTE=34,NEWLINE=10,RETURN=13;function objectConverter(columns){return new Function(\"d\",\"return {\"+columns.map(function(name,i){return JSON.stringify(name)+\": d[\"+i+\"]\";}).join(\",\")+\"}\");}function customConverter(columns,f){var object=objectConverter(columns);return function(row,i){return f(object(row),i,columns);};}// Compute unique columns in order of discovery.\nfunction inferColumns(rows){var columnSet=Object.create(null),columns=[];rows.forEach(function(row){for(var column in row){if(!(column in columnSet)){columns.push(columnSet[column]=column);}}});return columns;}function dsvFormat(delimiter){var reFormat=new RegExp(\"[\\\"\"+delimiter+\"\\n\\r]\"),DELIMITER=delimiter.charCodeAt(0);function parse(text,f){var convert,columns,rows=parseRows(text,function(row,i){if(convert)return convert(row,i-1);columns=row,convert=f?customConverter(row,f):objectConverter(row);});rows.columns=columns||[];return rows;}function parseRows(text,f){var rows=[],// output rows\nN=text.length,I=0,// current character index\nn=0,// current line number\nt,// current token\neof=N<=0,// current token followed by EOF?\neol=false;// current token followed by EOL?\n// Strip the trailing newline.\nif(text.charCodeAt(N-1)===NEWLINE)--N;if(text.charCodeAt(N-1)===RETURN)--N;function token(){if(eof)return EOF;if(eol)return eol=false,EOL;// Unescape quotes.\nvar i,j=I,c;if(text.charCodeAt(j)===QUOTE){while(I++<N&&text.charCodeAt(I)!==QUOTE||text.charCodeAt(++I)===QUOTE){}if((i=I)>=N)eof=true;else if((c=text.charCodeAt(I++))===NEWLINE)eol=true;else if(c===RETURN){eol=true;if(text.charCodeAt(I)===NEWLINE)++I;}return text.slice(j+1,i-1).replace(/\"\"/g,\"\\\"\");}// Find next delimiter or newline.\nwhile(I<N){if((c=text.charCodeAt(i=I++))===NEWLINE)eol=true;else if(c===RETURN){eol=true;if(text.charCodeAt(I)===NEWLINE)++I;}else if(c!==DELIMITER)continue;return text.slice(j,i);}// Return last token before EOF.\nreturn eof=true,text.slice(j,N);}while((t=token())!==EOF){var row=[];while(t!==EOL&&t!==EOF){row.push(t),t=token();}if(f&&(row=f(row,n++))==null)continue;rows.push(row);}return rows;}function format(rows,columns){if(columns==null)columns=inferColumns(rows);return[columns.map(formatValue).join(delimiter)].concat(rows.map(function(row){return columns.map(function(column){return formatValue(row[column]);}).join(delimiter);})).join(\"\\n\");}function formatRows(rows){return rows.map(formatRow).join(\"\\n\");}function formatRow(row){return row.map(formatValue).join(delimiter);}function formatValue(text){return text==null?\"\":reFormat.test(text+=\"\")?\"\\\"\"+text.replace(/\"/g,\"\\\"\\\"\")+\"\\\"\":text;}return{parse:parse,parseRows:parseRows,format:format,formatRows:formatRows};}var csv=dsvFormat(\",\");var csvParse=csv.parse;var csvParseRows=csv.parseRows;var csvFormat=csv.format;var csvFormatRows=csv.formatRows;var tsv=dsvFormat(\"\\t\");var tsvParse=tsv.parse;var tsvParseRows=tsv.parseRows;var tsvFormat=tsv.format;var tsvFormatRows=tsv.formatRows;function responseBlob(response){if(!response.ok)throw new Error(response.status+\" \"+response.statusText);return response.blob();}function blob(input,init){return fetch(input,init).then(responseBlob);}function responseArrayBuffer(response){if(!response.ok)throw new Error(response.status+\" \"+response.statusText);return response.arrayBuffer();}function buffer(input,init){return fetch(input,init).then(responseArrayBuffer);}function responseText(response){if(!response.ok)throw new Error(response.status+\" \"+response.statusText);return response.text();}function text(input,init){return fetch(input,init).then(responseText);}function dsvParse(parse){return function(input,init,row){if(arguments.length===2&&typeof init===\"function\")row=init,init=undefined;return text(input,init).then(function(response){return parse(response,row);});};}function dsv(delimiter,input,init,row){if(arguments.length===3&&typeof init===\"function\")row=init,init=undefined;var format=dsvFormat(delimiter);return text(input,init).then(function(response){return format.parse(response,row);});}var csv$1=dsvParse(csvParse);var tsv$1=dsvParse(tsvParse);function image(input,init){return new Promise(function(resolve,reject){var image=new Image();for(var key in init){image[key]=init[key];}image.onerror=reject;image.onload=function(){resolve(image);};image.src=input;});}function responseJson(response){if(!response.ok)throw new Error(response.status+\" \"+response.statusText);return response.json();}function json(input,init){return fetch(input,init).then(responseJson);}function parser(type){return function(input,init){return text(input,init).then(function(text$$1){return new DOMParser().parseFromString(text$$1,type);});};}var xml=parser(\"application/xml\");var html=parser(\"text/html\");var svg=parser(\"image/svg+xml\");function center$1(x,y){var nodes;if(x==null)x=0;if(y==null)y=0;function force(){var i,n=nodes.length,node,sx=0,sy=0;for(i=0;i<n;++i){node=nodes[i],sx+=node.x,sy+=node.y;}for(sx=sx/n-x,sy=sy/n-y,i=0;i<n;++i){node=nodes[i],node.x-=sx,node.y-=sy;}}force.initialize=function(_){nodes=_;};force.x=function(_){return arguments.length?(x=+_,force):x;};force.y=function(_){return arguments.length?(y=+_,force):y;};return force;}function constant$7(x){return function(){return x;};}function jiggle(){return(Math.random()-0.5)*1e-6;}function tree_add(d){var x=+this._x.call(null,d),y=+this._y.call(null,d);return add(this.cover(x,y),x,y,d);}function add(tree,x,y,d){if(isNaN(x)||isNaN(y))return tree;// ignore invalid points\nvar parent,node=tree._root,leaf={data:d},x0=tree._x0,y0=tree._y0,x1=tree._x1,y1=tree._y1,xm,ym,xp,yp,right,bottom,i,j;// If the tree is empty, initialize the root as a leaf.\nif(!node)return tree._root=leaf,tree;// Find the existing leaf for the new point, or add it.\nwhile(node.length){if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;if(parent=node,!(node=node[i=bottom<<1|right]))return parent[i]=leaf,tree;}// Is the new point is exactly coincident with the existing point?\nxp=+tree._x.call(null,node.data);yp=+tree._y.call(null,node.data);if(x===xp&&y===yp)return leaf.next=node,parent?parent[i]=leaf:tree._root=leaf,tree;// Otherwise, split the leaf node until the old and new point are separated.\ndo{parent=parent?parent[i]=new Array(4):tree._root=new Array(4);if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;}while((i=bottom<<1|right)===(j=(yp>=ym)<<1|xp>=xm));return parent[j]=node,parent[i]=leaf,tree;}function addAll(data){var d,i,n=data.length,x,y,xz=new Array(n),yz=new Array(n),x0=Infinity,y0=Infinity,x1=-Infinity,y1=-Infinity;// Compute the points and their extent.\nfor(i=0;i<n;++i){if(isNaN(x=+this._x.call(null,d=data[i]))||isNaN(y=+this._y.call(null,d)))continue;xz[i]=x;yz[i]=y;if(x<x0)x0=x;if(x>x1)x1=x;if(y<y0)y0=y;if(y>y1)y1=y;}// If there were no (valid) points, inherit the existing extent.\nif(x1<x0)x0=this._x0,x1=this._x1;if(y1<y0)y0=this._y0,y1=this._y1;// Expand the tree to cover the new points.\nthis.cover(x0,y0).cover(x1,y1);// Add the new points.\nfor(i=0;i<n;++i){add(this,xz[i],yz[i],data[i]);}return this;}function tree_cover(x,y){if(isNaN(x=+x)||isNaN(y=+y))return this;// ignore invalid points\nvar x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1;// If the quadtree has no extent, initialize them.\n// Integer extent are necessary so that if we later double the extent,\n// the existing quadrant boundaries don’t change due to floating point error!\nif(isNaN(x0)){x1=(x0=Math.floor(x))+1;y1=(y0=Math.floor(y))+1;}// Otherwise, double repeatedly to cover.\nelse if(x0>x||x>x1||y0>y||y>y1){var z=x1-x0,node=this._root,parent,i;switch(i=(y<(y0+y1)/2)<<1|x<(x0+x1)/2){case 0:{do{parent=new Array(4),parent[i]=node,node=parent;}while((z*=2,x1=x0+z,y1=y0+z,x>x1||y>y1));break;}case 1:{do{parent=new Array(4),parent[i]=node,node=parent;}while((z*=2,x0=x1-z,y1=y0+z,x0>x||y>y1));break;}case 2:{do{parent=new Array(4),parent[i]=node,node=parent;}while((z*=2,x1=x0+z,y0=y1-z,x>x1||y0>y));break;}case 3:{do{parent=new Array(4),parent[i]=node,node=parent;}while((z*=2,x0=x1-z,y0=y1-z,x0>x||y0>y));break;}}if(this._root&&this._root.length)this._root=node;}// If the quadtree covers the point already, just return.\nelse return this;this._x0=x0;this._y0=y0;this._x1=x1;this._y1=y1;return this;}function tree_data(){var data=[];this.visit(function(node){if(!node.length)do{data.push(node.data);}while(node=node.next);});return data;}function tree_extent(_){return arguments.length?this.cover(+_[0][0],+_[0][1]).cover(+_[1][0],+_[1][1]):isNaN(this._x0)?undefined:[[this._x0,this._y0],[this._x1,this._y1]];}function Quad(node,x0,y0,x1,y1){this.node=node;this.x0=x0;this.y0=y0;this.x1=x1;this.y1=y1;}function tree_find(x,y,radius){var data,x0=this._x0,y0=this._y0,x1,y1,x2,y2,x3=this._x1,y3=this._y1,quads=[],node=this._root,q,i;if(node)quads.push(new Quad(node,x0,y0,x3,y3));if(radius==null)radius=Infinity;else{x0=x-radius,y0=y-radius;x3=x+radius,y3=y+radius;radius*=radius;}while(q=quads.pop()){// Stop searching if this quadrant can’t contain a closer node.\nif(!(node=q.node)||(x1=q.x0)>x3||(y1=q.y0)>y3||(x2=q.x1)<x0||(y2=q.y1)<y0)continue;// Bisect the current quadrant.\nif(node.length){var xm=(x1+x2)/2,ym=(y1+y2)/2;quads.push(new Quad(node[3],xm,ym,x2,y2),new Quad(node[2],x1,ym,xm,y2),new Quad(node[1],xm,y1,x2,ym),new Quad(node[0],x1,y1,xm,ym));// Visit the closest quadrant first.\nif(i=(y>=ym)<<1|x>=xm){q=quads[quads.length-1];quads[quads.length-1]=quads[quads.length-1-i];quads[quads.length-1-i]=q;}}// Visit this point. (Visiting coincident points isn’t necessary!)\nelse{var dx=x-+this._x.call(null,node.data),dy=y-+this._y.call(null,node.data),d2=dx*dx+dy*dy;if(d2<radius){var d=Math.sqrt(radius=d2);x0=x-d,y0=y-d;x3=x+d,y3=y+d;data=node.data;}}}return data;}function tree_remove(d){if(isNaN(x=+this._x.call(null,d))||isNaN(y=+this._y.call(null,d)))return this;// ignore invalid points\nvar parent,node=this._root,retainer,previous,next,x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1,x,y,xm,ym,right,bottom,i,j;// If the tree is empty, initialize the root as a leaf.\nif(!node)return this;// Find the leaf node for the point.\n// While descending, also retain the deepest parent with a non-removed sibling.\nif(node.length)while(true){if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;if(!(parent=node,node=node[i=bottom<<1|right]))return this;if(!node.length)break;if(parent[i+1&3]||parent[i+2&3]||parent[i+3&3])retainer=parent,j=i;}// Find the point to remove.\nwhile(node.data!==d){if(!(previous=node,node=node.next))return this;}if(next=node.next)delete node.next;// If there are multiple coincident points, remove just the point.\nif(previous)return next?previous.next=next:delete previous.next,this;// If this is the root point, remove it.\nif(!parent)return this._root=next,this;// Remove this leaf.\nnext?parent[i]=next:delete parent[i];// If the parent now contains exactly one leaf, collapse superfluous parents.\nif((node=parent[0]||parent[1]||parent[2]||parent[3])&&node===(parent[3]||parent[2]||parent[1]||parent[0])&&!node.length){if(retainer)retainer[j]=node;else this._root=node;}return this;}function removeAll(data){for(var i=0,n=data.length;i<n;++i){this.remove(data[i]);}return this;}function tree_root(){return this._root;}function tree_size(){var size=0;this.visit(function(node){if(!node.length)do{++size;}while(node=node.next);});return size;}function tree_visit(callback){var quads=[],q,node=this._root,child,x0,y0,x1,y1;if(node)quads.push(new Quad(node,this._x0,this._y0,this._x1,this._y1));while(q=quads.pop()){if(!callback(node=q.node,x0=q.x0,y0=q.y0,x1=q.x1,y1=q.y1)&&node.length){var xm=(x0+x1)/2,ym=(y0+y1)/2;if(child=node[3])quads.push(new Quad(child,xm,ym,x1,y1));if(child=node[2])quads.push(new Quad(child,x0,ym,xm,y1));if(child=node[1])quads.push(new Quad(child,xm,y0,x1,ym));if(child=node[0])quads.push(new Quad(child,x0,y0,xm,ym));}}return this;}function tree_visitAfter(callback){var quads=[],next=[],q;if(this._root)quads.push(new Quad(this._root,this._x0,this._y0,this._x1,this._y1));while(q=quads.pop()){var node=q.node;if(node.length){var child,x0=q.x0,y0=q.y0,x1=q.x1,y1=q.y1,xm=(x0+x1)/2,ym=(y0+y1)/2;if(child=node[0])quads.push(new Quad(child,x0,y0,xm,ym));if(child=node[1])quads.push(new Quad(child,xm,y0,x1,ym));if(child=node[2])quads.push(new Quad(child,x0,ym,xm,y1));if(child=node[3])quads.push(new Quad(child,xm,ym,x1,y1));}next.push(q);}while(q=next.pop()){callback(q.node,q.x0,q.y0,q.x1,q.y1);}return this;}function defaultX$1(d){return d[0];}function tree_x(_){return arguments.length?(this._x=_,this):this._x;}function defaultY$1(d){return d[1];}function tree_y(_){return arguments.length?(this._y=_,this):this._y;}function quadtree(nodes,x,y){var tree=new Quadtree(x==null?defaultX$1:x,y==null?defaultY$1:y,NaN,NaN,NaN,NaN);return nodes==null?tree:tree.addAll(nodes);}function Quadtree(x,y,x0,y0,x1,y1){this._x=x;this._y=y;this._x0=x0;this._y0=y0;this._x1=x1;this._y1=y1;this._root=undefined;}function leaf_copy(leaf){var copy={data:leaf.data},next=copy;while(leaf=leaf.next){next=next.next={data:leaf.data};}return copy;}var treeProto=quadtree.prototype=Quadtree.prototype;treeProto.copy=function(){var copy=new Quadtree(this._x,this._y,this._x0,this._y0,this._x1,this._y1),node=this._root,nodes,child;if(!node)return copy;if(!node.length)return copy._root=leaf_copy(node),copy;nodes=[{source:node,target:copy._root=new Array(4)}];while(node=nodes.pop()){for(var i=0;i<4;++i){if(child=node.source[i]){if(child.length)nodes.push({source:child,target:node.target[i]=new Array(4)});else node.target[i]=leaf_copy(child);}}}return copy;};treeProto.add=tree_add;treeProto.addAll=addAll;treeProto.cover=tree_cover;treeProto.data=tree_data;treeProto.extent=tree_extent;treeProto.find=tree_find;treeProto.remove=tree_remove;treeProto.removeAll=removeAll;treeProto.root=tree_root;treeProto.size=tree_size;treeProto.visit=tree_visit;treeProto.visitAfter=tree_visitAfter;treeProto.x=tree_x;treeProto.y=tree_y;function x(d){return d.x+d.vx;}function y(d){return d.y+d.vy;}function collide(radius){var nodes,radii,strength=1,iterations=1;if(typeof radius!==\"function\")radius=constant$7(radius==null?1:+radius);function force(){var i,n=nodes.length,tree,node,xi,yi,ri,ri2;for(var k=0;k<iterations;++k){tree=quadtree(nodes,x,y).visitAfter(prepare);for(i=0;i<n;++i){node=nodes[i];ri=radii[node.index],ri2=ri*ri;xi=node.x+node.vx;yi=node.y+node.vy;tree.visit(apply);}}function apply(quad,x0,y0,x1,y1){var data=quad.data,rj=quad.r,r=ri+rj;if(data){if(data.index>node.index){var x=xi-data.x-data.vx,y=yi-data.y-data.vy,l=x*x+y*y;if(l<r*r){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;l=(r-(l=Math.sqrt(l)))/l*strength;node.vx+=(x*=l)*(r=(rj*=rj)/(ri2+rj));node.vy+=(y*=l)*r;data.vx-=x*(r=1-r);data.vy-=y*r;}}return;}return x0>xi+r||x1<xi-r||y0>yi+r||y1<yi-r;}}function prepare(quad){if(quad.data)return quad.r=radii[quad.data.index];for(var i=quad.r=0;i<4;++i){if(quad[i]&&quad[i].r>quad.r){quad.r=quad[i].r;}}}function initialize(){if(!nodes)return;var i,n=nodes.length,node;radii=new Array(n);for(i=0;i<n;++i){node=nodes[i],radii[node.index]=+radius(node,i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.iterations=function(_){return arguments.length?(iterations=+_,force):iterations;};force.strength=function(_){return arguments.length?(strength=+_,force):strength;};force.radius=function(_){return arguments.length?(radius=typeof _===\"function\"?_:constant$7(+_),initialize(),force):radius;};return force;}function index(d){return d.index;}function find(nodeById,nodeId){var node=nodeById.get(nodeId);if(!node)throw new Error(\"missing: \"+nodeId);return node;}function link(links){var id=index,strength=defaultStrength,strengths,distance=constant$7(30),distances,nodes,count,bias,iterations=1;if(links==null)links=[];function defaultStrength(link){return 1/Math.min(count[link.source.index],count[link.target.index]);}function force(alpha){for(var k=0,n=links.length;k<iterations;++k){for(var i=0,link,source,target,x,y,l,b;i<n;++i){link=links[i],source=link.source,target=link.target;x=target.x+target.vx-source.x-source.vx||jiggle();y=target.y+target.vy-source.y-source.vy||jiggle();l=Math.sqrt(x*x+y*y);l=(l-distances[i])/l*alpha*strengths[i];x*=l,y*=l;target.vx-=x*(b=bias[i]);target.vy-=y*b;source.vx+=x*(b=1-b);source.vy+=y*b;}}}function initialize(){if(!nodes)return;var i,n=nodes.length,m=links.length,nodeById=map$1(nodes,id),link;for(i=0,count=new Array(n);i<m;++i){link=links[i],link.index=i;if(_typeof(link.source)!==\"object\")link.source=find(nodeById,link.source);if(_typeof(link.target)!==\"object\")link.target=find(nodeById,link.target);count[link.source.index]=(count[link.source.index]||0)+1;count[link.target.index]=(count[link.target.index]||0)+1;}for(i=0,bias=new Array(m);i<m;++i){link=links[i],bias[i]=count[link.source.index]/(count[link.source.index]+count[link.target.index]);}strengths=new Array(m),initializeStrength();distances=new Array(m),initializeDistance();}function initializeStrength(){if(!nodes)return;for(var i=0,n=links.length;i<n;++i){strengths[i]=+strength(links[i],i,links);}}function initializeDistance(){if(!nodes)return;for(var i=0,n=links.length;i<n;++i){distances[i]=+distance(links[i],i,links);}}force.initialize=function(_){nodes=_;initialize();};force.links=function(_){return arguments.length?(links=_,initialize(),force):links;};force.id=function(_){return arguments.length?(id=_,force):id;};force.iterations=function(_){return arguments.length?(iterations=+_,force):iterations;};force.strength=function(_){return arguments.length?(strength=typeof _===\"function\"?_:constant$7(+_),initializeStrength(),force):strength;};force.distance=function(_){return arguments.length?(distance=typeof _===\"function\"?_:constant$7(+_),initializeDistance(),force):distance;};return force;}function x$1(d){return d.x;}function y$1(d){return d.y;}var initialRadius=10,initialAngle=Math.PI*(3-Math.sqrt(5));function simulation(_nodes){var simulation,_alpha=1,_alphaMin=0.001,_alphaDecay=1-Math.pow(_alphaMin,1/300),_alphaTarget=0,_velocityDecay=0.6,forces=map$1(),stepper=timer(step),event=dispatch(\"tick\",\"end\");if(_nodes==null)_nodes=[];function step(){tick();event.call(\"tick\",simulation);if(_alpha<_alphaMin){stepper.stop();event.call(\"end\",simulation);}}function tick(){var i,n=_nodes.length,node;_alpha+=(_alphaTarget-_alpha)*_alphaDecay;forces.each(function(force){force(_alpha);});for(i=0;i<n;++i){node=_nodes[i];if(node.fx==null)node.x+=node.vx*=_velocityDecay;else node.x=node.fx,node.vx=0;if(node.fy==null)node.y+=node.vy*=_velocityDecay;else node.y=node.fy,node.vy=0;}}function initializeNodes(){for(var i=0,n=_nodes.length,node;i<n;++i){node=_nodes[i],node.index=i;if(isNaN(node.x)||isNaN(node.y)){var radius=initialRadius*Math.sqrt(i),angle=i*initialAngle;node.x=radius*Math.cos(angle);node.y=radius*Math.sin(angle);}if(isNaN(node.vx)||isNaN(node.vy)){node.vx=node.vy=0;}}}function initializeForce(force){if(force.initialize)force.initialize(_nodes);return force;}initializeNodes();return simulation={tick:tick,restart:function restart(){return stepper.restart(step),simulation;},stop:function stop(){return stepper.stop(),simulation;},nodes:function nodes(_){return arguments.length?(_nodes=_,initializeNodes(),forces.each(initializeForce),simulation):_nodes;},alpha:function alpha(_){return arguments.length?(_alpha=+_,simulation):_alpha;},alphaMin:function alphaMin(_){return arguments.length?(_alphaMin=+_,simulation):_alphaMin;},alphaDecay:function alphaDecay(_){return arguments.length?(_alphaDecay=+_,simulation):+_alphaDecay;},alphaTarget:function alphaTarget(_){return arguments.length?(_alphaTarget=+_,simulation):_alphaTarget;},velocityDecay:function velocityDecay(_){return arguments.length?(_velocityDecay=1-_,simulation):1-_velocityDecay;},force:function force(name,_){return arguments.length>1?(_==null?forces.remove(name):forces.set(name,initializeForce(_)),simulation):forces.get(name);},find:function find(x,y,radius){var i=0,n=_nodes.length,dx,dy,d2,node,closest;if(radius==null)radius=Infinity;else radius*=radius;for(i=0;i<n;++i){node=_nodes[i];dx=x-node.x;dy=y-node.y;d2=dx*dx+dy*dy;if(d2<radius)closest=node,radius=d2;}return closest;},on:function on(name,_){return arguments.length>1?(event.on(name,_),simulation):event.on(name);}};}function manyBody(){var nodes,node,alpha,strength=constant$7(-30),strengths,distanceMin2=1,distanceMax2=Infinity,theta2=0.81;function force(_){var i,n=nodes.length,tree=quadtree(nodes,x$1,y$1).visitAfter(accumulate);for(alpha=_,i=0;i<n;++i){node=nodes[i],tree.visit(apply);}}function initialize(){if(!nodes)return;var i,n=nodes.length,node;strengths=new Array(n);for(i=0;i<n;++i){node=nodes[i],strengths[node.index]=+strength(node,i,nodes);}}function accumulate(quad){var strength=0,q,c,weight=0,x,y,i;// For internal nodes, accumulate forces from child quadrants.\nif(quad.length){for(x=y=i=0;i<4;++i){if((q=quad[i])&&(c=Math.abs(q.value))){strength+=q.value,weight+=c,x+=c*q.x,y+=c*q.y;}}quad.x=x/weight;quad.y=y/weight;}// For leaf nodes, accumulate forces from coincident quadrants.\nelse{q=quad;q.x=q.data.x;q.y=q.data.y;do{strength+=strengths[q.data.index];}while(q=q.next);}quad.value=strength;}function apply(quad,x1,_,x2){if(!quad.value)return true;var x=quad.x-node.x,y=quad.y-node.y,w=x2-x1,l=x*x+y*y;// Apply the Barnes-Hut approximation if possible.\n// Limit forces for very close nodes; randomize direction if coincident.\nif(w*w/theta2<l){if(l<distanceMax2){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;if(l<distanceMin2)l=Math.sqrt(distanceMin2*l);node.vx+=x*quad.value*alpha/l;node.vy+=y*quad.value*alpha/l;}return true;}// Otherwise, process points directly.\nelse if(quad.length||l>=distanceMax2)return;// Limit forces for very close nodes; randomize direction if coincident.\nif(quad.data!==node||quad.next){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;if(l<distanceMin2)l=Math.sqrt(distanceMin2*l);}do{if(quad.data!==node){w=strengths[quad.data.index]*alpha/l;node.vx+=x*w;node.vy+=y*w;}}while(quad=quad.next);}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _===\"function\"?_:constant$7(+_),initialize(),force):strength;};force.distanceMin=function(_){return arguments.length?(distanceMin2=_*_,force):Math.sqrt(distanceMin2);};force.distanceMax=function(_){return arguments.length?(distanceMax2=_*_,force):Math.sqrt(distanceMax2);};force.theta=function(_){return arguments.length?(theta2=_*_,force):Math.sqrt(theta2);};return force;}function radial(radius,x,y){var nodes,strength=constant$7(0.1),strengths,radiuses;if(typeof radius!==\"function\")radius=constant$7(+radius);if(x==null)x=0;if(y==null)y=0;function force(alpha){for(var i=0,n=nodes.length;i<n;++i){var node=nodes[i],dx=node.x-x||1e-6,dy=node.y-y||1e-6,r=Math.sqrt(dx*dx+dy*dy),k=(radiuses[i]-r)*strengths[i]*alpha/r;node.vx+=dx*k;node.vy+=dy*k;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);radiuses=new Array(n);for(i=0;i<n;++i){radiuses[i]=+radius(nodes[i],i,nodes);strengths[i]=isNaN(radiuses[i])?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_,initialize();};force.strength=function(_){return arguments.length?(strength=typeof _===\"function\"?_:constant$7(+_),initialize(),force):strength;};force.radius=function(_){return arguments.length?(radius=typeof _===\"function\"?_:constant$7(+_),initialize(),force):radius;};force.x=function(_){return arguments.length?(x=+_,force):x;};force.y=function(_){return arguments.length?(y=+_,force):y;};return force;}function x$2(x){var strength=constant$7(0.1),nodes,strengths,xz;if(typeof x!==\"function\")x=constant$7(x==null?0:+x);function force(alpha){for(var i=0,n=nodes.length,node;i<n;++i){node=nodes[i],node.vx+=(xz[i]-node.x)*strengths[i]*alpha;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);xz=new Array(n);for(i=0;i<n;++i){strengths[i]=isNaN(xz[i]=+x(nodes[i],i,nodes))?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _===\"function\"?_:constant$7(+_),initialize(),force):strength;};force.x=function(_){return arguments.length?(x=typeof _===\"function\"?_:constant$7(+_),initialize(),force):x;};return force;}function y$2(y){var strength=constant$7(0.1),nodes,strengths,yz;if(typeof y!==\"function\")y=constant$7(y==null?0:+y);function force(alpha){for(var i=0,n=nodes.length,node;i<n;++i){node=nodes[i],node.vy+=(yz[i]-node.y)*strengths[i]*alpha;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);yz=new Array(n);for(i=0;i<n;++i){strengths[i]=isNaN(yz[i]=+y(nodes[i],i,nodes))?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _===\"function\"?_:constant$7(+_),initialize(),force):strength;};force.y=function(_){return arguments.length?(y=typeof _===\"function\"?_:constant$7(+_),initialize(),force):y;};return force;}// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nfunction formatDecimal(x,p){if((i=(x=p?x.toExponential(p-1):x.toExponential()).indexOf(\"e\"))<0)return null;// NaN, ±Infinity\nvar i,coefficient=x.slice(0,i);// The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n// (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\nreturn[coefficient.length>1?coefficient[0]+coefficient.slice(2):coefficient,+x.slice(i+1)];}function exponent$1(x){return x=formatDecimal(Math.abs(x)),x?x[1]:NaN;}function formatGroup(grouping,thousands){return function(value,width){var i=value.length,t=[],j=0,g=grouping[0],length=0;while(i>0&&g>0){if(length+g+1>width)g=Math.max(1,width-length);t.push(value.substring(i-=g,i+g));if((length+=g+1)>width)break;g=grouping[j=(j+1)%grouping.length];}return t.reverse().join(thousands);};}function formatNumerals(numerals){return function(value){return value.replace(/[0-9]/g,function(i){return numerals[+i];});};}// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re=/^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;function formatSpecifier(specifier){return new FormatSpecifier(specifier);}formatSpecifier.prototype=FormatSpecifier.prototype;// instanceof\nfunction FormatSpecifier(specifier){if(!(match=re.exec(specifier)))throw new Error(\"invalid format: \"+specifier);var match;this.fill=match[1]||\" \";this.align=match[2]||\">\";this.sign=match[3]||\"-\";this.symbol=match[4]||\"\";this.zero=!!match[5];this.width=match[6]&&+match[6];this.comma=!!match[7];this.precision=match[8]&&+match[8].slice(1);this.trim=!!match[9];this.type=match[10]||\"\";}FormatSpecifier.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?\"0\":\"\")+(this.width==null?\"\":Math.max(1,this.width|0))+(this.comma?\",\":\"\")+(this.precision==null?\"\":\".\"+Math.max(0,this.precision|0))+(this.trim?\"~\":\"\")+this.type;};// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nfunction formatTrim(s){out:for(var n=s.length,i=1,i0=-1,i1;i<n;++i){switch(s[i]){case\".\":i0=i1=i;break;case\"0\":if(i0===0)i0=i;i1=i;break;default:if(i0>0){if(!+s[i])break out;i0=0;}break;}}return i0>0?s.slice(0,i0)+s.slice(i1+1):s;}var prefixExponent;function formatPrefixAuto(x,p){var d=formatDecimal(x,p);if(!d)return x+\"\";var coefficient=d[0],exponent=d[1],i=exponent-(prefixExponent=Math.max(-8,Math.min(8,Math.floor(exponent/3)))*3)+1,n=coefficient.length;return i===n?coefficient:i>n?coefficient+new Array(i-n+1).join(\"0\"):i>0?coefficient.slice(0,i)+\".\"+coefficient.slice(i):\"0.\"+new Array(1-i).join(\"0\")+formatDecimal(x,Math.max(0,p+i-1))[0];// less than 1y!\n}function formatRounded(x,p){var d=formatDecimal(x,p);if(!d)return x+\"\";var coefficient=d[0],exponent=d[1];return exponent<0?\"0.\"+new Array(-exponent).join(\"0\")+coefficient:coefficient.length>exponent+1?coefficient.slice(0,exponent+1)+\".\"+coefficient.slice(exponent+1):coefficient+new Array(exponent-coefficient.length+2).join(\"0\");}var formatTypes={\"%\":function _(x,p){return(x*100).toFixed(p);},\"b\":function b(x){return Math.round(x).toString(2);},\"c\":function c(x){return x+\"\";},\"d\":function d(x){return Math.round(x).toString(10);},\"e\":function e(x,p){return x.toExponential(p);},\"f\":function f(x,p){return x.toFixed(p);},\"g\":function g(x,p){return x.toPrecision(p);},\"o\":function o(x){return Math.round(x).toString(8);},\"p\":function p(x,_p){return formatRounded(x*100,_p);},\"r\":formatRounded,\"s\":formatPrefixAuto,\"X\":function X(x){return Math.round(x).toString(16).toUpperCase();},\"x\":function x(_x){return Math.round(_x).toString(16);}};function identity$3(x){return x;}var prefixes=[\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];function formatLocale(locale){var group=locale.grouping&&locale.thousands?formatGroup(locale.grouping,locale.thousands):identity$3,currency=locale.currency,decimal=locale.decimal,numerals=locale.numerals?formatNumerals(locale.numerals):identity$3,percent=locale.percent||\"%\";function newFormat(specifier){specifier=formatSpecifier(specifier);var fill=specifier.fill,align=specifier.align,sign=specifier.sign,symbol=specifier.symbol,zero=specifier.zero,width=specifier.width,comma=specifier.comma,precision=specifier.precision,trim=specifier.trim,type=specifier.type;// The \"n\" type is an alias for \",g\".\nif(type===\"n\")comma=true,type=\"g\";// The \"\" type, and any invalid type, is an alias for \".12~g\".\nelse if(!formatTypes[type])precision==null&&(precision=12),trim=true,type=\"g\";// If zero fill is specified, padding goes after sign and before digits.\nif(zero||fill===\"0\"&&align===\"=\")zero=true,fill=\"0\",align=\"=\";// Compute the prefix and suffix.\n// For SI-prefix, the suffix is lazily computed.\nvar prefix=symbol===\"$\"?currency[0]:symbol===\"#\"&&/[boxX]/.test(type)?\"0\"+type.toLowerCase():\"\",suffix=symbol===\"$\"?currency[1]:/[%p]/.test(type)?percent:\"\";// What format function should we use?\n// Is this an integer type?\n// Can this type generate exponential notation?\nvar formatType=formatTypes[type],maybeSuffix=/[defgprs%]/.test(type);// Set the default precision if not specified,\n// or clamp the specified precision to the supported range.\n// For significant precision, it must be in [1, 21].\n// For fixed precision, it must be in [0, 20].\nprecision=precision==null?6:/[gprs]/.test(type)?Math.max(1,Math.min(21,precision)):Math.max(0,Math.min(20,precision));function format(value){var valuePrefix=prefix,valueSuffix=suffix,i,n,c;if(type===\"c\"){valueSuffix=formatType(value)+valueSuffix;value=\"\";}else{value=+value;// Perform the initial formatting.\nvar valueNegative=value<0;value=formatType(Math.abs(value),precision);// Trim insignificant zeros.\nif(trim)value=formatTrim(value);// If a negative value rounds to zero during formatting, treat as positive.\nif(valueNegative&&+value===0)valueNegative=false;// Compute the prefix and suffix.\nvaluePrefix=(valueNegative?sign===\"(\"?sign:\"-\":sign===\"-\"||sign===\"(\"?\"\":sign)+valuePrefix;valueSuffix=(type===\"s\"?prefixes[8+prefixExponent/3]:\"\")+valueSuffix+(valueNegative&&sign===\"(\"?\")\":\"\");// Break the formatted value into the integer “value” part that can be\n// grouped, and fractional or exponential “suffix” part that is not.\nif(maybeSuffix){i=-1,n=value.length;while(++i<n){if(c=value.charCodeAt(i),48>c||c>57){valueSuffix=(c===46?decimal+value.slice(i+1):value.slice(i))+valueSuffix;value=value.slice(0,i);break;}}}}// If the fill character is not \"0\", grouping is applied before padding.\nif(comma&&!zero)value=group(value,Infinity);// Compute the padding.\nvar length=valuePrefix.length+value.length+valueSuffix.length,padding=length<width?new Array(width-length+1).join(fill):\"\";// If the fill character is \"0\", grouping is applied after padding.\nif(comma&&zero)value=group(padding+value,padding.length?width-valueSuffix.length:Infinity),padding=\"\";// Reconstruct the final output based on the desired alignment.\nswitch(align){case\"<\":value=valuePrefix+value+valueSuffix+padding;break;case\"=\":value=valuePrefix+padding+value+valueSuffix;break;case\"^\":value=padding.slice(0,length=padding.length>>1)+valuePrefix+value+valueSuffix+padding.slice(length);break;default:value=padding+valuePrefix+value+valueSuffix;break;}return numerals(value);}format.toString=function(){return specifier+\"\";};return format;}function formatPrefix(specifier,value){var f=newFormat((specifier=formatSpecifier(specifier),specifier.type=\"f\",specifier)),e=Math.max(-8,Math.min(8,Math.floor(exponent$1(value)/3)))*3,k=Math.pow(10,-e),prefix=prefixes[8+e/3];return function(value){return f(k*value)+prefix;};}return{format:newFormat,formatPrefix:formatPrefix};}var locale;defaultLocale({decimal:\".\",thousands:\",\",grouping:[3],currency:[\"$\",\"\"]});function defaultLocale(definition){locale=formatLocale(definition);d3.format=locale.format;d3.formatPrefix=locale.formatPrefix;return locale;}function precisionFixed(step){return Math.max(0,-exponent$1(Math.abs(step)));}function precisionPrefix(step,value){return Math.max(0,Math.max(-8,Math.min(8,Math.floor(exponent$1(value)/3)))*3-exponent$1(Math.abs(step)));}function precisionRound(step,max){step=Math.abs(step),max=Math.abs(max)-step;return Math.max(0,exponent$1(max)-exponent$1(step))+1;}// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\nfunction adder(){return new Adder();}function Adder(){this.reset();}Adder.prototype={constructor:Adder,reset:function reset(){this.s=// rounded value\nthis.t=0;// exact error\n},add:function add(y){add$1(temp,y,this.t);add$1(this,temp.s,this.s);if(this.s)this.t+=temp.t;else this.s=temp.t;},valueOf:function valueOf(){return this.s;}};var temp=new Adder();function add$1(adder,a,b){var x=adder.s=a+b,bv=x-a,av=x-bv;adder.t=a-av+(b-bv);}var epsilon$2=1e-6;var epsilon2$1=1e-12;var pi$3=Math.PI;var halfPi$2=pi$3/2;var quarterPi=pi$3/4;var tau$3=pi$3*2;var degrees$1=180/pi$3;var radians=pi$3/180;var abs=Math.abs;var atan=Math.atan;var atan2=Math.atan2;var cos$1=Math.cos;var ceil=Math.ceil;var exp=Math.exp;var log=Math.log;var pow=Math.pow;var sin$1=Math.sin;var sign=Math.sign||function(x){return x>0?1:x<0?-1:0;};var sqrt=Math.sqrt;var tan=Math.tan;function acos(x){return x>1?0:x<-1?pi$3:Math.acos(x);}function asin(x){return x>1?halfPi$2:x<-1?-halfPi$2:Math.asin(x);}function haversin(x){return(x=sin$1(x/2))*x;}function noop$2(){}function streamGeometry(geometry,stream){if(geometry&&streamGeometryType.hasOwnProperty(geometry.type)){streamGeometryType[geometry.type](geometry,stream);}}var streamObjectType={Feature:function Feature(object,stream){streamGeometry(object.geometry,stream);},FeatureCollection:function FeatureCollection(object,stream){var features=object.features,i=-1,n=features.length;while(++i<n){streamGeometry(features[i].geometry,stream);}}};var streamGeometryType={Sphere:function Sphere(object,stream){stream.sphere();},Point:function Point(object,stream){object=object.coordinates;stream.point(object[0],object[1],object[2]);},MultiPoint:function MultiPoint(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){object=coordinates[i],stream.point(object[0],object[1],object[2]);}},LineString:function LineString(object,stream){streamLine(object.coordinates,stream,0);},MultiLineString:function MultiLineString(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){streamLine(coordinates[i],stream,0);}},Polygon:function Polygon(object,stream){streamPolygon(object.coordinates,stream);},MultiPolygon:function MultiPolygon(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){streamPolygon(coordinates[i],stream);}},GeometryCollection:function GeometryCollection(object,stream){var geometries=object.geometries,i=-1,n=geometries.length;while(++i<n){streamGeometry(geometries[i],stream);}}};function streamLine(coordinates,stream,closed){var i=-1,n=coordinates.length-closed,coordinate;stream.lineStart();while(++i<n){coordinate=coordinates[i],stream.point(coordinate[0],coordinate[1],coordinate[2]);}stream.lineEnd();}function streamPolygon(coordinates,stream){var i=-1,n=coordinates.length;stream.polygonStart();while(++i<n){streamLine(coordinates[i],stream,1);}stream.polygonEnd();}function geoStream(object,stream){if(object&&streamObjectType.hasOwnProperty(object.type)){streamObjectType[object.type](object,stream);}else{streamGeometry(object,stream);}}var areaRingSum=adder();var areaSum=adder(),lambda00,phi00,lambda0,cosPhi0,sinPhi0;var areaStream={point:noop$2,lineStart:noop$2,lineEnd:noop$2,polygonStart:function polygonStart(){areaRingSum.reset();areaStream.lineStart=areaRingStart;areaStream.lineEnd=areaRingEnd;},polygonEnd:function polygonEnd(){var areaRing=+areaRingSum;areaSum.add(areaRing<0?tau$3+areaRing:areaRing);this.lineStart=this.lineEnd=this.point=noop$2;},sphere:function sphere(){areaSum.add(tau$3);}};function areaRingStart(){areaStream.point=areaPointFirst;}function areaRingEnd(){areaPoint(lambda00,phi00);}function areaPointFirst(lambda,phi){areaStream.point=areaPoint;lambda00=lambda,phi00=phi;lambda*=radians,phi*=radians;lambda0=lambda,cosPhi0=cos$1(phi=phi/2+quarterPi),sinPhi0=sin$1(phi);}function areaPoint(lambda,phi){lambda*=radians,phi*=radians;phi=phi/2+quarterPi;// half the angular distance from south pole\n// Spherical excess E for a spherical triangle with vertices: south pole,\n// previous point, current point.  Uses a formula derived from Cagnoli’s\n// theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\nvar dLambda=lambda-lambda0,sdLambda=dLambda>=0?1:-1,adLambda=sdLambda*dLambda,cosPhi=cos$1(phi),sinPhi=sin$1(phi),k=sinPhi0*sinPhi,u=cosPhi0*cosPhi+k*cos$1(adLambda),v=k*sdLambda*sin$1(adLambda);areaRingSum.add(atan2(v,u));// Advance the previous points.\nlambda0=lambda,cosPhi0=cosPhi,sinPhi0=sinPhi;}function area$1(object){areaSum.reset();geoStream(object,areaStream);return areaSum*2;}function spherical(cartesian){return[atan2(cartesian[1],cartesian[0]),asin(cartesian[2])];}function cartesian(spherical){var lambda=spherical[0],phi=spherical[1],cosPhi=cos$1(phi);return[cosPhi*cos$1(lambda),cosPhi*sin$1(lambda),sin$1(phi)];}function cartesianDot(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2];}function cartesianCross(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]];}// TODO return a\nfunction cartesianAddInPlace(a,b){a[0]+=b[0],a[1]+=b[1],a[2]+=b[2];}function cartesianScale(vector,k){return[vector[0]*k,vector[1]*k,vector[2]*k];}// TODO return d\nfunction cartesianNormalizeInPlace(d){var l=sqrt(d[0]*d[0]+d[1]*d[1]+d[2]*d[2]);d[0]/=l,d[1]/=l,d[2]/=l;}var lambda0$1,phi0,lambda1,phi1,// bounds\nlambda2,// previous lambda-coordinate\nlambda00$1,phi00$1,// first point\np0,// previous 3D point\ndeltaSum=adder(),ranges,range;var boundsStream={point:boundsPoint,lineStart:boundsLineStart,lineEnd:boundsLineEnd,polygonStart:function polygonStart(){boundsStream.point=boundsRingPoint;boundsStream.lineStart=boundsRingStart;boundsStream.lineEnd=boundsRingEnd;deltaSum.reset();areaStream.polygonStart();},polygonEnd:function polygonEnd(){areaStream.polygonEnd();boundsStream.point=boundsPoint;boundsStream.lineStart=boundsLineStart;boundsStream.lineEnd=boundsLineEnd;if(areaRingSum<0)lambda0$1=-(lambda1=180),phi0=-(phi1=90);else if(deltaSum>epsilon$2)phi1=90;else if(deltaSum<-epsilon$2)phi0=-90;range[0]=lambda0$1,range[1]=lambda1;}};function boundsPoint(lambda,phi){ranges.push(range=[lambda0$1=lambda,lambda1=lambda]);if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;}function linePoint(lambda,phi){var p=cartesian([lambda*radians,phi*radians]);if(p0){var normal=cartesianCross(p0,p),equatorial=[normal[1],-normal[0],0],inflection=cartesianCross(equatorial,normal);cartesianNormalizeInPlace(inflection);inflection=spherical(inflection);var delta=lambda-lambda2,sign$$1=delta>0?1:-1,lambdai=inflection[0]*degrees$1*sign$$1,phii,antimeridian=abs(delta)>180;if(antimeridian^(sign$$1*lambda2<lambdai&&lambdai<sign$$1*lambda)){phii=inflection[1]*degrees$1;if(phii>phi1)phi1=phii;}else if(lambdai=(lambdai+360)%360-180,antimeridian^(sign$$1*lambda2<lambdai&&lambdai<sign$$1*lambda)){phii=-inflection[1]*degrees$1;if(phii<phi0)phi0=phii;}else{if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;}if(antimeridian){if(lambda<lambda2){if(angle(lambda0$1,lambda)>angle(lambda0$1,lambda1))lambda1=lambda;}else{if(angle(lambda,lambda1)>angle(lambda0$1,lambda1))lambda0$1=lambda;}}else{if(lambda1>=lambda0$1){if(lambda<lambda0$1)lambda0$1=lambda;if(lambda>lambda1)lambda1=lambda;}else{if(lambda>lambda2){if(angle(lambda0$1,lambda)>angle(lambda0$1,lambda1))lambda1=lambda;}else{if(angle(lambda,lambda1)>angle(lambda0$1,lambda1))lambda0$1=lambda;}}}}else{ranges.push(range=[lambda0$1=lambda,lambda1=lambda]);}if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;p0=p,lambda2=lambda;}function boundsLineStart(){boundsStream.point=linePoint;}function boundsLineEnd(){range[0]=lambda0$1,range[1]=lambda1;boundsStream.point=boundsPoint;p0=null;}function boundsRingPoint(lambda,phi){if(p0){var delta=lambda-lambda2;deltaSum.add(abs(delta)>180?delta+(delta>0?360:-360):delta);}else{lambda00$1=lambda,phi00$1=phi;}areaStream.point(lambda,phi);linePoint(lambda,phi);}function boundsRingStart(){areaStream.lineStart();}function boundsRingEnd(){boundsRingPoint(lambda00$1,phi00$1);areaStream.lineEnd();if(abs(deltaSum)>epsilon$2)lambda0$1=-(lambda1=180);range[0]=lambda0$1,range[1]=lambda1;p0=null;}// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0,lambda1){return(lambda1-=lambda0)<0?lambda1+360:lambda1;}function rangeCompare(a,b){return a[0]-b[0];}function rangeContains(range,x){return range[0]<=range[1]?range[0]<=x&&x<=range[1]:x<range[0]||range[1]<x;}function bounds(feature){var i,n,a,b,merged,deltaMax,delta;phi1=lambda1=-(lambda0$1=phi0=Infinity);ranges=[];geoStream(feature,boundsStream);// First, sort ranges by their minimum longitudes.\nif(n=ranges.length){ranges.sort(rangeCompare);// Then, merge any ranges that overlap.\nfor(i=1,a=ranges[0],merged=[a];i<n;++i){b=ranges[i];if(rangeContains(a,b[0])||rangeContains(a,b[1])){if(angle(a[0],b[1])>angle(a[0],a[1]))a[1]=b[1];if(angle(b[0],a[1])>angle(a[0],a[1]))a[0]=b[0];}else{merged.push(a=b);}}// Finally, find the largest gap between the merged ranges.\n// The final bounding box will be the inverse of this gap.\nfor(deltaMax=-Infinity,n=merged.length-1,i=0,a=merged[n];i<=n;a=b,++i){b=merged[i];if((delta=angle(a[1],b[0]))>deltaMax)deltaMax=delta,lambda0$1=b[0],lambda1=a[1];}}ranges=range=null;return lambda0$1===Infinity||phi0===Infinity?[[NaN,NaN],[NaN,NaN]]:[[lambda0$1,phi0],[lambda1,phi1]];}var W0,W1,X0,Y0,Z0,X1,Y1,Z1,X2,Y2,Z2,lambda00$2,phi00$2,// first point\nx0,y0,z0;// previous point\nvar centroidStream={sphere:noop$2,point:centroidPoint,lineStart:centroidLineStart,lineEnd:centroidLineEnd,polygonStart:function polygonStart(){centroidStream.lineStart=centroidRingStart;centroidStream.lineEnd=centroidRingEnd;},polygonEnd:function polygonEnd(){centroidStream.lineStart=centroidLineStart;centroidStream.lineEnd=centroidLineEnd;}};// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi);centroidPointCartesian(cosPhi*cos$1(lambda),cosPhi*sin$1(lambda),sin$1(phi));}function centroidPointCartesian(x,y,z){++W0;X0+=(x-X0)/W0;Y0+=(y-Y0)/W0;Z0+=(z-Z0)/W0;}function centroidLineStart(){centroidStream.point=centroidLinePointFirst;}function centroidLinePointFirst(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi);x0=cosPhi*cos$1(lambda);y0=cosPhi*sin$1(lambda);z0=sin$1(phi);centroidStream.point=centroidLinePoint;centroidPointCartesian(x0,y0,z0);}function centroidLinePoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi),x=cosPhi*cos$1(lambda),y=cosPhi*sin$1(lambda),z=sin$1(phi),w=atan2(sqrt((w=y0*z-z0*y)*w+(w=z0*x-x0*z)*w+(w=x0*y-y0*x)*w),x0*x+y0*y+z0*z);W1+=w;X1+=w*(x0+(x0=x));Y1+=w*(y0+(y0=y));Z1+=w*(z0+(z0=z));centroidPointCartesian(x0,y0,z0);}function centroidLineEnd(){centroidStream.point=centroidPoint;}// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart(){centroidStream.point=centroidRingPointFirst;}function centroidRingEnd(){centroidRingPoint(lambda00$2,phi00$2);centroidStream.point=centroidPoint;}function centroidRingPointFirst(lambda,phi){lambda00$2=lambda,phi00$2=phi;lambda*=radians,phi*=radians;centroidStream.point=centroidRingPoint;var cosPhi=cos$1(phi);x0=cosPhi*cos$1(lambda);y0=cosPhi*sin$1(lambda);z0=sin$1(phi);centroidPointCartesian(x0,y0,z0);}function centroidRingPoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi),x=cosPhi*cos$1(lambda),y=cosPhi*sin$1(lambda),z=sin$1(phi),cx=y0*z-z0*y,cy=z0*x-x0*z,cz=x0*y-y0*x,m=sqrt(cx*cx+cy*cy+cz*cz),w=asin(m),// line weight = angle\nv=m&&-w/m;// area weight multiplier\nX2+=v*cx;Y2+=v*cy;Z2+=v*cz;W1+=w;X1+=w*(x0+(x0=x));Y1+=w*(y0+(y0=y));Z1+=w*(z0+(z0=z));centroidPointCartesian(x0,y0,z0);}function centroid(object){W0=W1=X0=Y0=Z0=X1=Y1=Z1=X2=Y2=Z2=0;geoStream(object,centroidStream);var x=X2,y=Y2,z=Z2,m=x*x+y*y+z*z;// If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\nif(m<epsilon2$1){x=X1,y=Y1,z=Z1;// If the feature has zero length, fall back to arithmetic mean of point vectors.\nif(W1<epsilon$2)x=X0,y=Y0,z=Z0;m=x*x+y*y+z*z;// If the feature still has an undefined ccentroid, then return.\nif(m<epsilon2$1)return[NaN,NaN];}return[atan2(y,x)*degrees$1,asin(z/sqrt(m))*degrees$1];}function constant$8(x){return function(){return x;};}function compose(a,b){function compose(x,y){return x=a(x,y),b(x[0],x[1]);}if(a.invert&&b.invert)compose.invert=function(x,y){return x=b.invert(x,y),x&&a.invert(x[0],x[1]);};return compose;}function rotationIdentity(lambda,phi){return[lambda>pi$3?lambda-tau$3:lambda<-pi$3?lambda+tau$3:lambda,phi];}rotationIdentity.invert=rotationIdentity;function rotateRadians(deltaLambda,deltaPhi,deltaGamma){return(deltaLambda%=tau$3)?deltaPhi||deltaGamma?compose(rotationLambda(deltaLambda),rotationPhiGamma(deltaPhi,deltaGamma)):rotationLambda(deltaLambda):deltaPhi||deltaGamma?rotationPhiGamma(deltaPhi,deltaGamma):rotationIdentity;}function forwardRotationLambda(deltaLambda){return function(lambda,phi){return lambda+=deltaLambda,[lambda>pi$3?lambda-tau$3:lambda<-pi$3?lambda+tau$3:lambda,phi];};}function rotationLambda(deltaLambda){var rotation=forwardRotationLambda(deltaLambda);rotation.invert=forwardRotationLambda(-deltaLambda);return rotation;}function rotationPhiGamma(deltaPhi,deltaGamma){var cosDeltaPhi=cos$1(deltaPhi),sinDeltaPhi=sin$1(deltaPhi),cosDeltaGamma=cos$1(deltaGamma),sinDeltaGamma=sin$1(deltaGamma);function rotation(lambda,phi){var cosPhi=cos$1(phi),x=cos$1(lambda)*cosPhi,y=sin$1(lambda)*cosPhi,z=sin$1(phi),k=z*cosDeltaPhi+x*sinDeltaPhi;return[atan2(y*cosDeltaGamma-k*sinDeltaGamma,x*cosDeltaPhi-z*sinDeltaPhi),asin(k*cosDeltaGamma+y*sinDeltaGamma)];}rotation.invert=function(lambda,phi){var cosPhi=cos$1(phi),x=cos$1(lambda)*cosPhi,y=sin$1(lambda)*cosPhi,z=sin$1(phi),k=z*cosDeltaGamma-y*sinDeltaGamma;return[atan2(y*cosDeltaGamma+z*sinDeltaGamma,x*cosDeltaPhi+k*sinDeltaPhi),asin(k*cosDeltaPhi-x*sinDeltaPhi)];};return rotation;}function rotation(rotate){rotate=rotateRadians(rotate[0]*radians,rotate[1]*radians,rotate.length>2?rotate[2]*radians:0);function forward(coordinates){coordinates=rotate(coordinates[0]*radians,coordinates[1]*radians);return coordinates[0]*=degrees$1,coordinates[1]*=degrees$1,coordinates;}forward.invert=function(coordinates){coordinates=rotate.invert(coordinates[0]*radians,coordinates[1]*radians);return coordinates[0]*=degrees$1,coordinates[1]*=degrees$1,coordinates;};return forward;}// Generates a circle centered at [0°, 0°], with a given radius and precision.\nfunction circleStream(stream,radius,delta,direction,t0,t1){if(!delta)return;var cosRadius=cos$1(radius),sinRadius=sin$1(radius),step=direction*delta;if(t0==null){t0=radius+direction*tau$3;t1=radius-step/2;}else{t0=circleRadius(cosRadius,t0);t1=circleRadius(cosRadius,t1);if(direction>0?t0<t1:t0>t1)t0+=direction*tau$3;}for(var point,t=t0;direction>0?t>t1:t<t1;t-=step){point=spherical([cosRadius,-sinRadius*cos$1(t),-sinRadius*sin$1(t)]);stream.point(point[0],point[1]);}}// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius,point){point=cartesian(point),point[0]-=cosRadius;cartesianNormalizeInPlace(point);var radius=acos(-point[1]);return((-point[2]<0?-radius:radius)+tau$3-epsilon$2)%tau$3;}function circle(){var center=constant$8([0,0]),radius=constant$8(90),precision=constant$8(6),ring,rotate,stream={point:point};function point(x,y){ring.push(x=rotate(x,y));x[0]*=degrees$1,x[1]*=degrees$1;}function circle(){var c=center.apply(this,arguments),r=radius.apply(this,arguments)*radians,p=precision.apply(this,arguments)*radians;ring=[];rotate=rotateRadians(-c[0]*radians,-c[1]*radians,0).invert;circleStream(stream,r,p,1);c={type:\"Polygon\",coordinates:[ring]};ring=rotate=null;return c;}circle.center=function(_){return arguments.length?(center=typeof _===\"function\"?_:constant$8([+_[0],+_[1]]),circle):center;};circle.radius=function(_){return arguments.length?(radius=typeof _===\"function\"?_:constant$8(+_),circle):radius;};circle.precision=function(_){return arguments.length?(precision=typeof _===\"function\"?_:constant$8(+_),circle):precision;};return circle;}function clipBuffer(){var lines=[],line;return{point:function point(x,y){line.push([x,y]);},lineStart:function lineStart(){lines.push(line=[]);},lineEnd:noop$2,rejoin:function rejoin(){if(lines.length>1)lines.push(lines.pop().concat(lines.shift()));},result:function result(){var result=lines;lines=[];line=null;return result;}};}function pointEqual(a,b){return abs(a[0]-b[0])<epsilon$2&&abs(a[1]-b[1])<epsilon$2;}function Intersection(point,points,other,entry){this.x=point;this.z=points;this.o=other;// another intersection\nthis.e=entry;// is an entry?\nthis.v=false;// visited\nthis.n=this.p=null;// next & previous\n}// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nfunction clipRejoin(segments,compareIntersection,startInside,interpolate,stream){var subject=[],clip=[],i,n;segments.forEach(function(segment){if((n=segment.length-1)<=0)return;var n,p0=segment[0],p1=segment[n],x;// If the first and last points of a segment are coincident, then treat as a\n// closed ring. TODO if all rings are closed, then the winding order of the\n// exterior ring should be checked.\nif(pointEqual(p0,p1)){stream.lineStart();for(i=0;i<n;++i){stream.point((p0=segment[i])[0],p0[1]);}stream.lineEnd();return;}subject.push(x=new Intersection(p0,segment,null,true));clip.push(x.o=new Intersection(p0,null,x,false));subject.push(x=new Intersection(p1,segment,null,false));clip.push(x.o=new Intersection(p1,null,x,true));});if(!subject.length)return;clip.sort(compareIntersection);link$1(subject);link$1(clip);for(i=0,n=clip.length;i<n;++i){clip[i].e=startInside=!startInside;}var start=subject[0],points,point;while(1){// Find first unvisited intersection.\nvar current=start,isSubject=true;while(current.v){if((current=current.n)===start)return;}points=current.z;stream.lineStart();do{current.v=current.o.v=true;if(current.e){if(isSubject){for(i=0,n=points.length;i<n;++i){stream.point((point=points[i])[0],point[1]);}}else{interpolate(current.x,current.n.x,1,stream);}current=current.n;}else{if(isSubject){points=current.p.z;for(i=points.length-1;i>=0;--i){stream.point((point=points[i])[0],point[1]);}}else{interpolate(current.x,current.p.x,-1,stream);}current=current.p;}current=current.o;points=current.z;isSubject=!isSubject;}while(!current.v);stream.lineEnd();}}function link$1(array){if(!(n=array.length))return;var n,i=0,a=array[0],b;while(++i<n){a.n=b=array[i];b.p=a;a=b;}a.n=b=array[0];b.p=a;}var sum$1=adder();function polygonContains(polygon,point){var lambda=point[0],phi=point[1],sinPhi=sin$1(phi),normal=[sin$1(lambda),-cos$1(lambda),0],angle=0,winding=0;sum$1.reset();if(sinPhi===1)phi=halfPi$2+epsilon$2;else if(sinPhi===-1)phi=-halfPi$2-epsilon$2;for(var i=0,n=polygon.length;i<n;++i){if(!(m=(ring=polygon[i]).length))continue;var ring,m,point0=ring[m-1],lambda0=point0[0],phi0=point0[1]/2+quarterPi,sinPhi0=sin$1(phi0),cosPhi0=cos$1(phi0);for(var j=0;j<m;++j,lambda0=lambda1,sinPhi0=sinPhi1,cosPhi0=cosPhi1,point0=point1){var point1=ring[j],lambda1=point1[0],phi1=point1[1]/2+quarterPi,sinPhi1=sin$1(phi1),cosPhi1=cos$1(phi1),delta=lambda1-lambda0,sign$$1=delta>=0?1:-1,absDelta=sign$$1*delta,antimeridian=absDelta>pi$3,k=sinPhi0*sinPhi1;sum$1.add(atan2(k*sign$$1*sin$1(absDelta),cosPhi0*cosPhi1+k*cos$1(absDelta)));angle+=antimeridian?delta+sign$$1*tau$3:delta;// Are the longitudes either side of the point’s meridian (lambda),\n// and are the latitudes smaller than the parallel (phi)?\nif(antimeridian^lambda0>=lambda^lambda1>=lambda){var arc=cartesianCross(cartesian(point0),cartesian(point1));cartesianNormalizeInPlace(arc);var intersection=cartesianCross(normal,arc);cartesianNormalizeInPlace(intersection);var phiArc=(antimeridian^delta>=0?-1:1)*asin(intersection[2]);if(phi>phiArc||phi===phiArc&&(arc[0]||arc[1])){winding+=antimeridian^delta>=0?1:-1;}}}}// First, determine whether the South pole is inside or outside:\n//\n// It is inside if:\n// * the polygon winds around it in a clockwise direction.\n// * the polygon does not (cumulatively) wind around it, but has a negative\n//   (counter-clockwise) area.\n//\n// Second, count the (signed) number of times a segment crosses a lambda\n// from the point to the South pole.  If it is zero, then the point is the\n// same side as the South pole.\nreturn(angle<-epsilon$2||angle<epsilon$2&&sum$1<-epsilon$2)^winding&1;}function clip(pointVisible,clipLine,interpolate,start){return function(sink){var line=clipLine(sink),ringBuffer=clipBuffer(),ringSink=clipLine(ringBuffer),polygonStarted=false,polygon,segments,ring;var clip={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:function polygonStart(){clip.point=pointRing;clip.lineStart=ringStart;clip.lineEnd=ringEnd;segments=[];polygon=[];},polygonEnd:function polygonEnd(){clip.point=point;clip.lineStart=lineStart;clip.lineEnd=lineEnd;segments=merge(segments);var startInside=polygonContains(polygon,start);if(segments.length){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;clipRejoin(segments,compareIntersection,startInside,interpolate,sink);}else if(startInside){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;sink.lineStart();interpolate(null,null,1,sink);sink.lineEnd();}if(polygonStarted)sink.polygonEnd(),polygonStarted=false;segments=polygon=null;},sphere:function sphere(){sink.polygonStart();sink.lineStart();interpolate(null,null,1,sink);sink.lineEnd();sink.polygonEnd();}};function point(lambda,phi){if(pointVisible(lambda,phi))sink.point(lambda,phi);}function pointLine(lambda,phi){line.point(lambda,phi);}function lineStart(){clip.point=pointLine;line.lineStart();}function lineEnd(){clip.point=point;line.lineEnd();}function pointRing(lambda,phi){ring.push([lambda,phi]);ringSink.point(lambda,phi);}function ringStart(){ringSink.lineStart();ring=[];}function ringEnd(){pointRing(ring[0][0],ring[0][1]);ringSink.lineEnd();var clean=ringSink.clean(),ringSegments=ringBuffer.result(),i,n=ringSegments.length,m,segment,point;ring.pop();polygon.push(ring);ring=null;if(!n)return;// No intersections.\nif(clean&1){segment=ringSegments[0];if((m=segment.length-1)>0){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;sink.lineStart();for(i=0;i<m;++i){sink.point((point=segment[i])[0],point[1]);}sink.lineEnd();}return;}// Rejoin connected segments.\n// TODO reuse ringBuffer.rejoin()?\nif(n>1&&clean&2)ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));segments.push(ringSegments.filter(validSegment));}return clip;};}function validSegment(segment){return segment.length>1;}// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a,b){return((a=a.x)[0]<0?a[1]-halfPi$2-epsilon$2:halfPi$2-a[1])-((b=b.x)[0]<0?b[1]-halfPi$2-epsilon$2:halfPi$2-b[1]);}var clipAntimeridian=clip(function(){return true;},clipAntimeridianLine,clipAntimeridianInterpolate,[-pi$3,-halfPi$2]);// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream){var lambda0=NaN,phi0=NaN,sign0=NaN,_clean;// no intersections\nreturn{lineStart:function lineStart(){stream.lineStart();_clean=1;},point:function point(lambda1,phi1){var sign1=lambda1>0?pi$3:-pi$3,delta=abs(lambda1-lambda0);if(abs(delta-pi$3)<epsilon$2){// line crosses a pole\nstream.point(lambda0,phi0=(phi0+phi1)/2>0?halfPi$2:-halfPi$2);stream.point(sign0,phi0);stream.lineEnd();stream.lineStart();stream.point(sign1,phi0);stream.point(lambda1,phi0);_clean=0;}else if(sign0!==sign1&&delta>=pi$3){// line crosses antimeridian\nif(abs(lambda0-sign0)<epsilon$2)lambda0-=sign0*epsilon$2;// handle degeneracies\nif(abs(lambda1-sign1)<epsilon$2)lambda1-=sign1*epsilon$2;phi0=clipAntimeridianIntersect(lambda0,phi0,lambda1,phi1);stream.point(sign0,phi0);stream.lineEnd();stream.lineStart();stream.point(sign1,phi0);_clean=0;}stream.point(lambda0=lambda1,phi0=phi1);sign0=sign1;},lineEnd:function lineEnd(){stream.lineEnd();lambda0=phi0=NaN;},clean:function clean(){return 2-_clean;// if intersections, rejoin first and last segments\n}};}function clipAntimeridianIntersect(lambda0,phi0,lambda1,phi1){var cosPhi0,cosPhi1,sinLambda0Lambda1=sin$1(lambda0-lambda1);return abs(sinLambda0Lambda1)>epsilon$2?atan((sin$1(phi0)*(cosPhi1=cos$1(phi1))*sin$1(lambda1)-sin$1(phi1)*(cosPhi0=cos$1(phi0))*sin$1(lambda0))/(cosPhi0*cosPhi1*sinLambda0Lambda1)):(phi0+phi1)/2;}function clipAntimeridianInterpolate(from,to,direction,stream){var phi;if(from==null){phi=direction*halfPi$2;stream.point(-pi$3,phi);stream.point(0,phi);stream.point(pi$3,phi);stream.point(pi$3,0);stream.point(pi$3,-phi);stream.point(0,-phi);stream.point(-pi$3,-phi);stream.point(-pi$3,0);stream.point(-pi$3,phi);}else if(abs(from[0]-to[0])>epsilon$2){var lambda=from[0]<to[0]?pi$3:-pi$3;phi=direction*lambda/2;stream.point(-lambda,phi);stream.point(0,phi);stream.point(lambda,phi);}else{stream.point(to[0],to[1]);}}function clipCircle(radius){var cr=cos$1(radius),delta=6*radians,smallRadius=cr>0,notHemisphere=abs(cr)>epsilon$2;// TODO optimise for this common case\nfunction interpolate(from,to,direction,stream){circleStream(stream,radius,delta,direction,from,to);}function visible(lambda,phi){return cos$1(lambda)*cos$1(phi)>cr;}// Takes a line and cuts into visible segments. Return values used for polygon\n// clipping: 0 - there were intersections or the line was empty; 1 - no\n// intersections 2 - there were intersections, and the first and last segments\n// should be rejoined.\nfunction clipLine(stream){var point0,// previous point\nc0,// code for previous point\nv0,// visibility of previous point\nv00,// visibility of first point\n_clean2;// no intersections\nreturn{lineStart:function lineStart(){v00=v0=false;_clean2=1;},point:function point(lambda,phi){var point1=[lambda,phi],point2,v=visible(lambda,phi),c=smallRadius?v?0:code(lambda,phi):v?code(lambda+(lambda<0?pi$3:-pi$3),phi):0;if(!point0&&(v00=v0=v))stream.lineStart();// Handle degeneracies.\n// TODO ignore if not clipping polygons.\nif(v!==v0){point2=intersect(point0,point1);if(!point2||pointEqual(point0,point2)||pointEqual(point1,point2)){point1[0]+=epsilon$2;point1[1]+=epsilon$2;v=visible(point1[0],point1[1]);}}if(v!==v0){_clean2=0;if(v){// outside going in\nstream.lineStart();point2=intersect(point1,point0);stream.point(point2[0],point2[1]);}else{// inside going out\npoint2=intersect(point0,point1);stream.point(point2[0],point2[1]);stream.lineEnd();}point0=point2;}else if(notHemisphere&&point0&&smallRadius^v){var t;// If the codes for two points are different, or are both zero,\n// and there this segment intersects with the small circle.\nif(!(c&c0)&&(t=intersect(point1,point0,true))){_clean2=0;if(smallRadius){stream.lineStart();stream.point(t[0][0],t[0][1]);stream.point(t[1][0],t[1][1]);stream.lineEnd();}else{stream.point(t[1][0],t[1][1]);stream.lineEnd();stream.lineStart();stream.point(t[0][0],t[0][1]);}}}if(v&&(!point0||!pointEqual(point0,point1))){stream.point(point1[0],point1[1]);}point0=point1,v0=v,c0=c;},lineEnd:function lineEnd(){if(v0)stream.lineEnd();point0=null;},// Rejoin first and last segments if there were intersections and the first\n// and last points were visible.\nclean:function clean(){return _clean2|(v00&&v0)<<1;}};}// Intersects the great circle between a and b with the clip circle.\nfunction intersect(a,b,two){var pa=cartesian(a),pb=cartesian(b);// We have two planes, n1.p = d1 and n2.p = d2.\n// Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\nvar n1=[1,0,0],// normal\nn2=cartesianCross(pa,pb),n2n2=cartesianDot(n2,n2),n1n2=n2[0],// cartesianDot(n1, n2),\ndeterminant=n2n2-n1n2*n1n2;// Two polar points.\nif(!determinant)return!two&&a;var c1=cr*n2n2/determinant,c2=-cr*n1n2/determinant,n1xn2=cartesianCross(n1,n2),A=cartesianScale(n1,c1),B=cartesianScale(n2,c2);cartesianAddInPlace(A,B);// Solve |p(t)|^2 = 1.\nvar u=n1xn2,w=cartesianDot(A,u),uu=cartesianDot(u,u),t2=w*w-uu*(cartesianDot(A,A)-1);if(t2<0)return;var t=sqrt(t2),q=cartesianScale(u,(-w-t)/uu);cartesianAddInPlace(q,A);q=spherical(q);if(!two)return q;// Two intersection points.\nvar lambda0=a[0],lambda1=b[0],phi0=a[1],phi1=b[1],z;if(lambda1<lambda0)z=lambda0,lambda0=lambda1,lambda1=z;var delta=lambda1-lambda0,polar=abs(delta-pi$3)<epsilon$2,meridian=polar||delta<epsilon$2;if(!polar&&phi1<phi0)z=phi0,phi0=phi1,phi1=z;// Check that the first point is between a and b.\nif(meridian?polar?phi0+phi1>0^q[1]<(abs(q[0]-lambda0)<epsilon$2?phi0:phi1):phi0<=q[1]&&q[1]<=phi1:delta>pi$3^(lambda0<=q[0]&&q[0]<=lambda1)){var q1=cartesianScale(u,(-w+t)/uu);cartesianAddInPlace(q1,A);return[q,spherical(q1)];}}// Generates a 4-bit vector representing the location of a point relative to\n// the small circle's bounding box.\nfunction code(lambda,phi){var r=smallRadius?radius:pi$3-radius,code=0;if(lambda<-r)code|=1;// left\nelse if(lambda>r)code|=2;// right\nif(phi<-r)code|=4;// below\nelse if(phi>r)code|=8;// above\nreturn code;}return clip(visible,clipLine,interpolate,smallRadius?[0,-radius]:[-pi$3,radius-pi$3]);}function clipLine(a,b,x0,y0,x1,y1){var ax=a[0],ay=a[1],bx=b[0],by=b[1],t0=0,t1=1,dx=bx-ax,dy=by-ay,r;r=x0-ax;if(!dx&&r>0)return;r/=dx;if(dx<0){if(r<t0)return;if(r<t1)t1=r;}else if(dx>0){if(r>t1)return;if(r>t0)t0=r;}r=x1-ax;if(!dx&&r<0)return;r/=dx;if(dx<0){if(r>t1)return;if(r>t0)t0=r;}else if(dx>0){if(r<t0)return;if(r<t1)t1=r;}r=y0-ay;if(!dy&&r>0)return;r/=dy;if(dy<0){if(r<t0)return;if(r<t1)t1=r;}else if(dy>0){if(r>t1)return;if(r>t0)t0=r;}r=y1-ay;if(!dy&&r<0)return;r/=dy;if(dy<0){if(r>t1)return;if(r>t0)t0=r;}else if(dy>0){if(r<t0)return;if(r<t1)t1=r;}if(t0>0)a[0]=ax+t0*dx,a[1]=ay+t0*dy;if(t1<1)b[0]=ax+t1*dx,b[1]=ay+t1*dy;return true;}var clipMax=1e9,clipMin=-clipMax;// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\nfunction clipRectangle(x0,y0,x1,y1){function visible(x,y){return x0<=x&&x<=x1&&y0<=y&&y<=y1;}function interpolate(from,to,direction,stream){var a=0,a1=0;if(from==null||(a=corner(from,direction))!==(a1=corner(to,direction))||comparePoint(from,to)<0^direction>0){do{stream.point(a===0||a===3?x0:x1,a>1?y1:y0);}while((a=(a+direction+4)%4)!==a1);}else{stream.point(to[0],to[1]);}}function corner(p,direction){return abs(p[0]-x0)<epsilon$2?direction>0?0:3:abs(p[0]-x1)<epsilon$2?direction>0?2:1:abs(p[1]-y0)<epsilon$2?direction>0?1:0:direction>0?3:2;// abs(p[1] - y1) < epsilon\n}function compareIntersection(a,b){return comparePoint(a.x,b.x);}function comparePoint(a,b){var ca=corner(a,1),cb=corner(b,1);return ca!==cb?ca-cb:ca===0?b[1]-a[1]:ca===1?a[0]-b[0]:ca===2?a[1]-b[1]:b[0]-a[0];}return function(stream){var activeStream=stream,bufferStream=clipBuffer(),segments,polygon,ring,x__,y__,v__,// first point\nx_,y_,v_,// previous point\nfirst,clean;var clipStream={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:polygonStart,polygonEnd:polygonEnd};function point(x,y){if(visible(x,y))activeStream.point(x,y);}function polygonInside(){var winding=0;for(var i=0,n=polygon.length;i<n;++i){for(var ring=polygon[i],j=1,m=ring.length,point=ring[0],a0,a1,b0=point[0],b1=point[1];j<m;++j){a0=b0,a1=b1,point=ring[j],b0=point[0],b1=point[1];if(a1<=y1){if(b1>y1&&(b0-a0)*(y1-a1)>(b1-a1)*(x0-a0))++winding;}else{if(b1<=y1&&(b0-a0)*(y1-a1)<(b1-a1)*(x0-a0))--winding;}}}return winding;}// Buffer geometry within a polygon and then clip it en masse.\nfunction polygonStart(){activeStream=bufferStream,segments=[],polygon=[],clean=true;}function polygonEnd(){var startInside=polygonInside(),cleanInside=clean&&startInside,visible=(segments=merge(segments)).length;if(cleanInside||visible){stream.polygonStart();if(cleanInside){stream.lineStart();interpolate(null,null,1,stream);stream.lineEnd();}if(visible){clipRejoin(segments,compareIntersection,startInside,interpolate,stream);}stream.polygonEnd();}activeStream=stream,segments=polygon=ring=null;}function lineStart(){clipStream.point=linePoint;if(polygon)polygon.push(ring=[]);first=true;v_=false;x_=y_=NaN;}// TODO rather than special-case polygons, simply handle them separately.\n// Ideally, coincident intersection points should be jittered to avoid\n// clipping issues.\nfunction lineEnd(){if(segments){linePoint(x__,y__);if(v__&&v_)bufferStream.rejoin();segments.push(bufferStream.result());}clipStream.point=point;if(v_)activeStream.lineEnd();}function linePoint(x,y){var v=visible(x,y);if(polygon)ring.push([x,y]);if(first){x__=x,y__=y,v__=v;first=false;if(v){activeStream.lineStart();activeStream.point(x,y);}}else{if(v&&v_)activeStream.point(x,y);else{var a=[x_=Math.max(clipMin,Math.min(clipMax,x_)),y_=Math.max(clipMin,Math.min(clipMax,y_))],b=[x=Math.max(clipMin,Math.min(clipMax,x)),y=Math.max(clipMin,Math.min(clipMax,y))];if(clipLine(a,b,x0,y0,x1,y1)){if(!v_){activeStream.lineStart();activeStream.point(a[0],a[1]);}activeStream.point(b[0],b[1]);if(!v)activeStream.lineEnd();clean=false;}else if(v){activeStream.lineStart();activeStream.point(x,y);clean=false;}}}x_=x,y_=y,v_=v;}return clipStream;};}function extent$1(){var x0=0,y0=0,x1=960,y1=500,cache,cacheStream,clip;return clip={stream:function stream(_stream){return cache&&cacheStream===_stream?cache:cache=clipRectangle(x0,y0,x1,y1)(cacheStream=_stream);},extent:function extent(_){return arguments.length?(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1],cache=cacheStream=null,clip):[[x0,y0],[x1,y1]];}};}var lengthSum=adder(),lambda0$2,sinPhi0$1,cosPhi0$1;var lengthStream={sphere:noop$2,point:noop$2,lineStart:lengthLineStart,lineEnd:noop$2,polygonStart:noop$2,polygonEnd:noop$2};function lengthLineStart(){lengthStream.point=lengthPointFirst;lengthStream.lineEnd=lengthLineEnd;}function lengthLineEnd(){lengthStream.point=lengthStream.lineEnd=noop$2;}function lengthPointFirst(lambda,phi){lambda*=radians,phi*=radians;lambda0$2=lambda,sinPhi0$1=sin$1(phi),cosPhi0$1=cos$1(phi);lengthStream.point=lengthPoint;}function lengthPoint(lambda,phi){lambda*=radians,phi*=radians;var sinPhi=sin$1(phi),cosPhi=cos$1(phi),delta=abs(lambda-lambda0$2),cosDelta=cos$1(delta),sinDelta=sin$1(delta),x=cosPhi*sinDelta,y=cosPhi0$1*sinPhi-sinPhi0$1*cosPhi*cosDelta,z=sinPhi0$1*sinPhi+cosPhi0$1*cosPhi*cosDelta;lengthSum.add(atan2(sqrt(x*x+y*y),z));lambda0$2=lambda,sinPhi0$1=sinPhi,cosPhi0$1=cosPhi;}function length$1(object){lengthSum.reset();geoStream(object,lengthStream);return+lengthSum;}var coordinates=[null,null],object$1={type:\"LineString\",coordinates:coordinates};function distance(a,b){coordinates[0]=a;coordinates[1]=b;return length$1(object$1);}var containsObjectType={Feature:function Feature(object,point){return containsGeometry(object.geometry,point);},FeatureCollection:function FeatureCollection(object,point){var features=object.features,i=-1,n=features.length;while(++i<n){if(containsGeometry(features[i].geometry,point))return true;}return false;}};var containsGeometryType={Sphere:function Sphere(){return true;},Point:function Point(object,point){return containsPoint(object.coordinates,point);},MultiPoint:function MultiPoint(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsPoint(coordinates[i],point))return true;}return false;},LineString:function LineString(object,point){return containsLine(object.coordinates,point);},MultiLineString:function MultiLineString(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsLine(coordinates[i],point))return true;}return false;},Polygon:function Polygon(object,point){return containsPolygon(object.coordinates,point);},MultiPolygon:function MultiPolygon(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsPolygon(coordinates[i],point))return true;}return false;},GeometryCollection:function GeometryCollection(object,point){var geometries=object.geometries,i=-1,n=geometries.length;while(++i<n){if(containsGeometry(geometries[i],point))return true;}return false;}};function containsGeometry(geometry,point){return geometry&&containsGeometryType.hasOwnProperty(geometry.type)?containsGeometryType[geometry.type](geometry,point):false;}function containsPoint(coordinates,point){return distance(coordinates,point)===0;}function containsLine(coordinates,point){var ab=distance(coordinates[0],coordinates[1]),ao=distance(coordinates[0],point),ob=distance(point,coordinates[1]);return ao+ob<=ab+epsilon$2;}function containsPolygon(coordinates,point){return!!polygonContains(coordinates.map(ringRadians),pointRadians(point));}function ringRadians(ring){return ring=ring.map(pointRadians),ring.pop(),ring;}function pointRadians(point){return[point[0]*radians,point[1]*radians];}function contains$1(object,point){return(object&&containsObjectType.hasOwnProperty(object.type)?containsObjectType[object.type]:containsGeometry)(object,point);}function graticuleX(y0,y1,dy){var y=sequence(y0,y1-epsilon$2,dy).concat(y1);return function(x){return y.map(function(y){return[x,y];});};}function graticuleY(x0,x1,dx){var x=sequence(x0,x1-epsilon$2,dx).concat(x1);return function(y){return x.map(function(x){return[x,y];});};}function graticule(){var x1,x0,X1,X0,y1,y0,Y1,Y0,dx=10,dy=dx,DX=90,DY=360,x,y,X,Y,precision=2.5;function graticule(){return{type:\"MultiLineString\",coordinates:lines()};}function lines(){return sequence(ceil(X0/DX)*DX,X1,DX).map(X).concat(sequence(ceil(Y0/DY)*DY,Y1,DY).map(Y)).concat(sequence(ceil(x0/dx)*dx,x1,dx).filter(function(x){return abs(x%DX)>epsilon$2;}).map(x)).concat(sequence(ceil(y0/dy)*dy,y1,dy).filter(function(y){return abs(y%DY)>epsilon$2;}).map(y));}graticule.lines=function(){return lines().map(function(coordinates){return{type:\"LineString\",coordinates:coordinates};});};graticule.outline=function(){return{type:\"Polygon\",coordinates:[X(X0).concat(Y(Y1).slice(1),X(X1).reverse().slice(1),Y(Y0).reverse().slice(1))]};};graticule.extent=function(_){if(!arguments.length)return graticule.extentMinor();return graticule.extentMajor(_).extentMinor(_);};graticule.extentMajor=function(_){if(!arguments.length)return[[X0,Y0],[X1,Y1]];X0=+_[0][0],X1=+_[1][0];Y0=+_[0][1],Y1=+_[1][1];if(X0>X1)_=X0,X0=X1,X1=_;if(Y0>Y1)_=Y0,Y0=Y1,Y1=_;return graticule.precision(precision);};graticule.extentMinor=function(_){if(!arguments.length)return[[x0,y0],[x1,y1]];x0=+_[0][0],x1=+_[1][0];y0=+_[0][1],y1=+_[1][1];if(x0>x1)_=x0,x0=x1,x1=_;if(y0>y1)_=y0,y0=y1,y1=_;return graticule.precision(precision);};graticule.step=function(_){if(!arguments.length)return graticule.stepMinor();return graticule.stepMajor(_).stepMinor(_);};graticule.stepMajor=function(_){if(!arguments.length)return[DX,DY];DX=+_[0],DY=+_[1];return graticule;};graticule.stepMinor=function(_){if(!arguments.length)return[dx,dy];dx=+_[0],dy=+_[1];return graticule;};graticule.precision=function(_){if(!arguments.length)return precision;precision=+_;x=graticuleX(y0,y1,90);y=graticuleY(x0,x1,precision);X=graticuleX(Y0,Y1,90);Y=graticuleY(X0,X1,precision);return graticule;};return graticule.extentMajor([[-180,-90+epsilon$2],[180,90-epsilon$2]]).extentMinor([[-180,-80-epsilon$2],[180,80+epsilon$2]]);}function graticule10(){return graticule()();}function interpolate$1(a,b){var x0=a[0]*radians,y0=a[1]*radians,x1=b[0]*radians,y1=b[1]*radians,cy0=cos$1(y0),sy0=sin$1(y0),cy1=cos$1(y1),sy1=sin$1(y1),kx0=cy0*cos$1(x0),ky0=cy0*sin$1(x0),kx1=cy1*cos$1(x1),ky1=cy1*sin$1(x1),d=2*asin(sqrt(haversin(y1-y0)+cy0*cy1*haversin(x1-x0))),k=sin$1(d);var interpolate=d?function(t){var B=sin$1(t*=d)/k,A=sin$1(d-t)/k,x=A*kx0+B*kx1,y=A*ky0+B*ky1,z=A*sy0+B*sy1;return[atan2(y,x)*degrees$1,atan2(z,sqrt(x*x+y*y))*degrees$1];}:function(){return[x0*degrees$1,y0*degrees$1];};interpolate.distance=d;return interpolate;}function identity$4(x){return x;}var areaSum$1=adder(),areaRingSum$1=adder(),x00,y00,x0$1,y0$1;var areaStream$1={point:noop$2,lineStart:noop$2,lineEnd:noop$2,polygonStart:function polygonStart(){areaStream$1.lineStart=areaRingStart$1;areaStream$1.lineEnd=areaRingEnd$1;},polygonEnd:function polygonEnd(){areaStream$1.lineStart=areaStream$1.lineEnd=areaStream$1.point=noop$2;areaSum$1.add(abs(areaRingSum$1));areaRingSum$1.reset();},result:function result(){var area=areaSum$1/2;areaSum$1.reset();return area;}};function areaRingStart$1(){areaStream$1.point=areaPointFirst$1;}function areaPointFirst$1(x,y){areaStream$1.point=areaPoint$1;x00=x0$1=x,y00=y0$1=y;}function areaPoint$1(x,y){areaRingSum$1.add(y0$1*x-x0$1*y);x0$1=x,y0$1=y;}function areaRingEnd$1(){areaPoint$1(x00,y00);}var x0$2=Infinity,y0$2=x0$2,x1=-x0$2,y1=x1;var boundsStream$1={point:boundsPoint$1,lineStart:noop$2,lineEnd:noop$2,polygonStart:noop$2,polygonEnd:noop$2,result:function result(){var bounds=[[x0$2,y0$2],[x1,y1]];x1=y1=-(y0$2=x0$2=Infinity);return bounds;}};function boundsPoint$1(x,y){if(x<x0$2)x0$2=x;if(x>x1)x1=x;if(y<y0$2)y0$2=y;if(y>y1)y1=y;}// TODO Enforce positive area for exterior, negative area for interior?\nvar X0$1=0,Y0$1=0,Z0$1=0,X1$1=0,Y1$1=0,Z1$1=0,X2$1=0,Y2$1=0,Z2$1=0,x00$1,y00$1,x0$3,y0$3;var centroidStream$1={point:centroidPoint$1,lineStart:centroidLineStart$1,lineEnd:centroidLineEnd$1,polygonStart:function polygonStart(){centroidStream$1.lineStart=centroidRingStart$1;centroidStream$1.lineEnd=centroidRingEnd$1;},polygonEnd:function polygonEnd(){centroidStream$1.point=centroidPoint$1;centroidStream$1.lineStart=centroidLineStart$1;centroidStream$1.lineEnd=centroidLineEnd$1;},result:function result(){var centroid=Z2$1?[X2$1/Z2$1,Y2$1/Z2$1]:Z1$1?[X1$1/Z1$1,Y1$1/Z1$1]:Z0$1?[X0$1/Z0$1,Y0$1/Z0$1]:[NaN,NaN];X0$1=Y0$1=Z0$1=X1$1=Y1$1=Z1$1=X2$1=Y2$1=Z2$1=0;return centroid;}};function centroidPoint$1(x,y){X0$1+=x;Y0$1+=y;++Z0$1;}function centroidLineStart$1(){centroidStream$1.point=centroidPointFirstLine;}function centroidPointFirstLine(x,y){centroidStream$1.point=centroidPointLine;centroidPoint$1(x0$3=x,y0$3=y);}function centroidPointLine(x,y){var dx=x-x0$3,dy=y-y0$3,z=sqrt(dx*dx+dy*dy);X1$1+=z*(x0$3+x)/2;Y1$1+=z*(y0$3+y)/2;Z1$1+=z;centroidPoint$1(x0$3=x,y0$3=y);}function centroidLineEnd$1(){centroidStream$1.point=centroidPoint$1;}function centroidRingStart$1(){centroidStream$1.point=centroidPointFirstRing;}function centroidRingEnd$1(){centroidPointRing(x00$1,y00$1);}function centroidPointFirstRing(x,y){centroidStream$1.point=centroidPointRing;centroidPoint$1(x00$1=x0$3=x,y00$1=y0$3=y);}function centroidPointRing(x,y){var dx=x-x0$3,dy=y-y0$3,z=sqrt(dx*dx+dy*dy);X1$1+=z*(x0$3+x)/2;Y1$1+=z*(y0$3+y)/2;Z1$1+=z;z=y0$3*x-x0$3*y;X2$1+=z*(x0$3+x);Y2$1+=z*(y0$3+y);Z2$1+=z*3;centroidPoint$1(x0$3=x,y0$3=y);}function PathContext(context){this._context=context;}PathContext.prototype={_radius:4.5,pointRadius:function pointRadius(_){return this._radius=_,this;},polygonStart:function polygonStart(){this._line=0;},polygonEnd:function polygonEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line===0)this._context.closePath();this._point=NaN;},point:function point(x,y){switch(this._point){case 0:{this._context.moveTo(x,y);this._point=1;break;}case 1:{this._context.lineTo(x,y);break;}default:{this._context.moveTo(x+this._radius,y);this._context.arc(x,y,this._radius,0,tau$3);break;}}},result:noop$2};var lengthSum$1=adder(),lengthRing,x00$2,y00$2,x0$4,y0$4;var lengthStream$1={point:noop$2,lineStart:function lineStart(){lengthStream$1.point=lengthPointFirst$1;},lineEnd:function lineEnd(){if(lengthRing)lengthPoint$1(x00$2,y00$2);lengthStream$1.point=noop$2;},polygonStart:function polygonStart(){lengthRing=true;},polygonEnd:function polygonEnd(){lengthRing=null;},result:function result(){var length=+lengthSum$1;lengthSum$1.reset();return length;}};function lengthPointFirst$1(x,y){lengthStream$1.point=lengthPoint$1;x00$2=x0$4=x,y00$2=y0$4=y;}function lengthPoint$1(x,y){x0$4-=x,y0$4-=y;lengthSum$1.add(sqrt(x0$4*x0$4+y0$4*y0$4));x0$4=x,y0$4=y;}function PathString(){this._string=[];}PathString.prototype={_radius:4.5,_circle:circle$1(4.5),pointRadius:function pointRadius(_){if((_=+_)!==this._radius)this._radius=_,this._circle=null;return this;},polygonStart:function polygonStart(){this._line=0;},polygonEnd:function polygonEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line===0)this._string.push(\"Z\");this._point=NaN;},point:function point(x,y){switch(this._point){case 0:{this._string.push(\"M\",x,\",\",y);this._point=1;break;}case 1:{this._string.push(\"L\",x,\",\",y);break;}default:{if(this._circle==null)this._circle=circle$1(this._radius);this._string.push(\"M\",x,\",\",y,this._circle);break;}}},result:function result(){if(this._string.length){var result=this._string.join(\"\");this._string=[];return result;}else{return null;}}};function circle$1(radius){return\"m0,\"+radius+\"a\"+radius+\",\"+radius+\" 0 1,1 0,\"+-2*radius+\"a\"+radius+\",\"+radius+\" 0 1,1 0,\"+2*radius+\"z\";}function index$1(projection,context){var pointRadius=4.5,projectionStream,contextStream;function path(object){if(object){if(typeof pointRadius===\"function\")contextStream.pointRadius(+pointRadius.apply(this,arguments));geoStream(object,projectionStream(contextStream));}return contextStream.result();}path.area=function(object){geoStream(object,projectionStream(areaStream$1));return areaStream$1.result();};path.measure=function(object){geoStream(object,projectionStream(lengthStream$1));return lengthStream$1.result();};path.bounds=function(object){geoStream(object,projectionStream(boundsStream$1));return boundsStream$1.result();};path.centroid=function(object){geoStream(object,projectionStream(centroidStream$1));return centroidStream$1.result();};path.projection=function(_){return arguments.length?(projectionStream=_==null?(projection=null,identity$4):(projection=_).stream,path):projection;};path.context=function(_){if(!arguments.length)return context;contextStream=_==null?(context=null,new PathString()):new PathContext(context=_);if(typeof pointRadius!==\"function\")contextStream.pointRadius(pointRadius);return path;};path.pointRadius=function(_){if(!arguments.length)return pointRadius;pointRadius=typeof _===\"function\"?_:(contextStream.pointRadius(+_),+_);return path;};return path.projection(projection).context(context);}function transform(methods){return{stream:transformer(methods)};}function transformer(methods){return function(stream){var s=new TransformStream();for(var key in methods){s[key]=methods[key];}s.stream=stream;return s;};}function TransformStream(){}TransformStream.prototype={constructor:TransformStream,point:function point(x,y){this.stream.point(x,y);},sphere:function sphere(){this.stream.sphere();},lineStart:function lineStart(){this.stream.lineStart();},lineEnd:function lineEnd(){this.stream.lineEnd();},polygonStart:function polygonStart(){this.stream.polygonStart();},polygonEnd:function polygonEnd(){this.stream.polygonEnd();}};function fit(projection,fitBounds,object){var clip=projection.clipExtent&&projection.clipExtent();projection.scale(150).translate([0,0]);if(clip!=null)projection.clipExtent(null);geoStream(object,projection.stream(boundsStream$1));fitBounds(boundsStream$1.result());if(clip!=null)projection.clipExtent(clip);return projection;}function _fitExtent(projection,extent,object){return fit(projection,function(b){var w=extent[1][0]-extent[0][0],h=extent[1][1]-extent[0][1],k=Math.min(w/(b[1][0]-b[0][0]),h/(b[1][1]-b[0][1])),x=+extent[0][0]+(w-k*(b[1][0]+b[0][0]))/2,y=+extent[0][1]+(h-k*(b[1][1]+b[0][1]))/2;projection.scale(150*k).translate([x,y]);},object);}function _fitSize(projection,size,object){return _fitExtent(projection,[[0,0],size],object);}function _fitWidth(projection,width,object){return fit(projection,function(b){var w=+width,k=w/(b[1][0]-b[0][0]),x=(w-k*(b[1][0]+b[0][0]))/2,y=-k*b[0][1];projection.scale(150*k).translate([x,y]);},object);}function _fitHeight(projection,height,object){return fit(projection,function(b){var h=+height,k=h/(b[1][1]-b[0][1]),x=-k*b[0][0],y=(h-k*(b[1][1]+b[0][1]))/2;projection.scale(150*k).translate([x,y]);},object);}var maxDepth=16,// maximum depth of subdivision\ncosMinDistance=cos$1(30*radians);// cos(minimum angular distance)\nfunction resample(project,delta2){return+delta2?resample$1(project,delta2):resampleNone(project);}function resampleNone(project){return transformer({point:function point(x,y){x=project(x,y);this.stream.point(x[0],x[1]);}});}function resample$1(project,delta2){function resampleLineTo(x0,y0,lambda0,a0,b0,c0,x1,y1,lambda1,a1,b1,c1,depth,stream){var dx=x1-x0,dy=y1-y0,d2=dx*dx+dy*dy;if(d2>4*delta2&&depth--){var a=a0+a1,b=b0+b1,c=c0+c1,m=sqrt(a*a+b*b+c*c),phi2=asin(c/=m),lambda2=abs(abs(c)-1)<epsilon$2||abs(lambda0-lambda1)<epsilon$2?(lambda0+lambda1)/2:atan2(b,a),p=project(lambda2,phi2),x2=p[0],y2=p[1],dx2=x2-x0,dy2=y2-y0,dz=dy*dx2-dx*dy2;if(dz*dz/d2>delta2// perpendicular projected distance\n||abs((dx*dx2+dy*dy2)/d2-0.5)>0.3// midpoint close to an end\n||a0*a1+b0*b1+c0*c1<cosMinDistance){// angular distance\nresampleLineTo(x0,y0,lambda0,a0,b0,c0,x2,y2,lambda2,a/=m,b/=m,c,depth,stream);stream.point(x2,y2);resampleLineTo(x2,y2,lambda2,a,b,c,x1,y1,lambda1,a1,b1,c1,depth,stream);}}}return function(stream){var lambda00,x00,y00,a00,b00,c00,// first point\nlambda0,x0,y0,a0,b0,c0;// previous point\nvar resampleStream={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:function polygonStart(){stream.polygonStart();resampleStream.lineStart=ringStart;},polygonEnd:function polygonEnd(){stream.polygonEnd();resampleStream.lineStart=lineStart;}};function point(x,y){x=project(x,y);stream.point(x[0],x[1]);}function lineStart(){x0=NaN;resampleStream.point=linePoint;stream.lineStart();}function linePoint(lambda,phi){var c=cartesian([lambda,phi]),p=project(lambda,phi);resampleLineTo(x0,y0,lambda0,a0,b0,c0,x0=p[0],y0=p[1],lambda0=lambda,a0=c[0],b0=c[1],c0=c[2],maxDepth,stream);stream.point(x0,y0);}function lineEnd(){resampleStream.point=point;stream.lineEnd();}function ringStart(){lineStart();resampleStream.point=ringPoint;resampleStream.lineEnd=ringEnd;}function ringPoint(lambda,phi){linePoint(lambda00=lambda,phi),x00=x0,y00=y0,a00=a0,b00=b0,c00=c0;resampleStream.point=linePoint;}function ringEnd(){resampleLineTo(x0,y0,lambda0,a0,b0,c0,x00,y00,lambda00,a00,b00,c00,maxDepth,stream);resampleStream.lineEnd=lineEnd;lineEnd();}return resampleStream;};}var transformRadians=transformer({point:function point(x,y){this.stream.point(x*radians,y*radians);}});function transformRotate(rotate){return transformer({point:function point(x,y){var r=rotate(x,y);return this.stream.point(r[0],r[1]);}});}function scaleTranslate(k,dx,dy){function transform$$1(x,y){return[dx+k*x,dy-k*y];}transform$$1.invert=function(x,y){return[(x-dx)/k,(dy-y)/k];};return transform$$1;}function scaleTranslateRotate(k,dx,dy,alpha){var cosAlpha=cos$1(alpha),sinAlpha=sin$1(alpha),a=cosAlpha*k,b=sinAlpha*k,ai=cosAlpha/k,bi=sinAlpha/k,ci=(sinAlpha*dy-cosAlpha*dx)/k,fi=(sinAlpha*dx+cosAlpha*dy)/k;function transform$$1(x,y){return[a*x-b*y+dx,dy-b*x-a*y];}transform$$1.invert=function(x,y){return[ai*x-bi*y+ci,fi-bi*x-ai*y];};return transform$$1;}function projection(project){return projectionMutator(function(){return project;})();}function projectionMutator(projectAt){var project,k=150,// scale\nx=480,y=250,// translate\nlambda=0,phi=0,// center\ndeltaLambda=0,deltaPhi=0,deltaGamma=0,rotate,// pre-rotate\nalpha=0,// post-rotate\ntheta=null,preclip=clipAntimeridian,// pre-clip angle\nx0=null,y0,x1,y1,postclip=identity$4,// post-clip extent\ndelta2=0.5,// precision\nprojectResample,projectTransform,projectRotateTransform,cache,cacheStream;function projection(point){return projectRotateTransform(point[0]*radians,point[1]*radians);}function invert(point){point=projectRotateTransform.invert(point[0],point[1]);return point&&[point[0]*degrees$1,point[1]*degrees$1];}projection.stream=function(stream){return cache&&cacheStream===stream?cache:cache=transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream=stream)))));};projection.preclip=function(_){return arguments.length?(preclip=_,theta=undefined,reset()):preclip;};projection.postclip=function(_){return arguments.length?(postclip=_,x0=y0=x1=y1=null,reset()):postclip;};projection.clipAngle=function(_){return arguments.length?(preclip=+_?clipCircle(theta=_*radians):(theta=null,clipAntimeridian),reset()):theta*degrees$1;};projection.clipExtent=function(_){return arguments.length?(postclip=_==null?(x0=y0=x1=y1=null,identity$4):clipRectangle(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reset()):x0==null?null:[[x0,y0],[x1,y1]];};projection.scale=function(_){return arguments.length?(k=+_,recenter()):k;};projection.translate=function(_){return arguments.length?(x=+_[0],y=+_[1],recenter()):[x,y];};projection.center=function(_){return arguments.length?(lambda=_[0]%360*radians,phi=_[1]%360*radians,recenter()):[lambda*degrees$1,phi*degrees$1];};projection.rotate=function(_){return arguments.length?(deltaLambda=_[0]%360*radians,deltaPhi=_[1]%360*radians,deltaGamma=_.length>2?_[2]%360*radians:0,recenter()):[deltaLambda*degrees$1,deltaPhi*degrees$1,deltaGamma*degrees$1];};projection.angle=function(_){return arguments.length?(alpha=_%360*radians,recenter()):alpha*degrees$1;};projection.precision=function(_){return arguments.length?(projectResample=resample(projectTransform,delta2=_*_),reset()):sqrt(delta2);};projection.fitExtent=function(extent,object){return _fitExtent(projection,extent,object);};projection.fitSize=function(size,object){return _fitSize(projection,size,object);};projection.fitWidth=function(width,object){return _fitWidth(projection,width,object);};projection.fitHeight=function(height,object){return _fitHeight(projection,height,object);};function recenter(){var center=scaleTranslateRotate(k,0,0,alpha).apply(null,project(lambda,phi)),transform$$1=(alpha?scaleTranslateRotate:scaleTranslate)(k,x-center[0],y-center[1],alpha);rotate=rotateRadians(deltaLambda,deltaPhi,deltaGamma);projectTransform=compose(project,transform$$1);projectRotateTransform=compose(rotate,projectTransform);projectResample=resample(projectTransform,delta2);return reset();}function reset(){cache=cacheStream=null;return projection;}return function(){project=projectAt.apply(this,arguments);projection.invert=project.invert&&invert;return recenter();};}function conicProjection(projectAt){var phi0=0,phi1=pi$3/3,m=projectionMutator(projectAt),p=m(phi0,phi1);p.parallels=function(_){return arguments.length?m(phi0=_[0]*radians,phi1=_[1]*radians):[phi0*degrees$1,phi1*degrees$1];};return p;}function cylindricalEqualAreaRaw(phi0){var cosPhi0=cos$1(phi0);function forward(lambda,phi){return[lambda*cosPhi0,sin$1(phi)/cosPhi0];}forward.invert=function(x,y){return[x/cosPhi0,asin(y*cosPhi0)];};return forward;}function conicEqualAreaRaw(y0,y1){var sy0=sin$1(y0),n=(sy0+sin$1(y1))/2;// Are the parallels symmetrical around the Equator?\nif(abs(n)<epsilon$2)return cylindricalEqualAreaRaw(y0);var c=1+sy0*(2*n-sy0),r0=sqrt(c)/n;function project(x,y){var r=sqrt(c-2*n*sin$1(y))/n;return[r*sin$1(x*=n),r0-r*cos$1(x)];}project.invert=function(x,y){var r0y=r0-y;return[atan2(x,abs(r0y))/n*sign(r0y),asin((c-(x*x+r0y*r0y)*n*n)/(2*n))];};return project;}function conicEqualArea(){return conicProjection(conicEqualAreaRaw).scale(155.424).center([0,33.6442]);}function albers(){return conicEqualArea().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-0.6,38.7]);}// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams){var n=streams.length;return{point:function point(x,y){var i=-1;while(++i<n){streams[i].point(x,y);}},sphere:function sphere(){var i=-1;while(++i<n){streams[i].sphere();}},lineStart:function lineStart(){var i=-1;while(++i<n){streams[i].lineStart();}},lineEnd:function lineEnd(){var i=-1;while(++i<n){streams[i].lineEnd();}},polygonStart:function polygonStart(){var i=-1;while(++i<n){streams[i].polygonStart();}},polygonEnd:function polygonEnd(){var i=-1;while(++i<n){streams[i].polygonEnd();}}};}// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nfunction albersUsa(){var cache,cacheStream,lower48=albers(),lower48Point,alaska=conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),alaskaPoint,// EPSG:3338\nhawaii=conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),hawaiiPoint,// ESRI:102007\n_point,pointStream={point:function point(x,y){_point=[x,y];}};function albersUsa(coordinates){var x=coordinates[0],y=coordinates[1];return _point=null,(lower48Point.point(x,y),_point)||(alaskaPoint.point(x,y),_point)||(hawaiiPoint.point(x,y),_point);}albersUsa.invert=function(coordinates){var k=lower48.scale(),t=lower48.translate(),x=(coordinates[0]-t[0])/k,y=(coordinates[1]-t[1])/k;return(y>=0.120&&y<0.234&&x>=-0.425&&x<-0.214?alaska:y>=0.166&&y<0.234&&x>=-0.214&&x<-0.115?hawaii:lower48).invert(coordinates);};albersUsa.stream=function(stream){return cache&&cacheStream===stream?cache:cache=multiplex([lower48.stream(cacheStream=stream),alaska.stream(stream),hawaii.stream(stream)]);};albersUsa.precision=function(_){if(!arguments.length)return lower48.precision();lower48.precision(_),alaska.precision(_),hawaii.precision(_);return reset();};albersUsa.scale=function(_){if(!arguments.length)return lower48.scale();lower48.scale(_),alaska.scale(_*0.35),hawaii.scale(_);return albersUsa.translate(lower48.translate());};albersUsa.translate=function(_){if(!arguments.length)return lower48.translate();var k=lower48.scale(),x=+_[0],y=+_[1];lower48Point=lower48.translate(_).clipExtent([[x-0.455*k,y-0.238*k],[x+0.455*k,y+0.238*k]]).stream(pointStream);alaskaPoint=alaska.translate([x-0.307*k,y+0.201*k]).clipExtent([[x-0.425*k+epsilon$2,y+0.120*k+epsilon$2],[x-0.214*k-epsilon$2,y+0.234*k-epsilon$2]]).stream(pointStream);hawaiiPoint=hawaii.translate([x-0.205*k,y+0.212*k]).clipExtent([[x-0.214*k+epsilon$2,y+0.166*k+epsilon$2],[x-0.115*k-epsilon$2,y+0.234*k-epsilon$2]]).stream(pointStream);return reset();};albersUsa.fitExtent=function(extent,object){return _fitExtent(albersUsa,extent,object);};albersUsa.fitSize=function(size,object){return _fitSize(albersUsa,size,object);};albersUsa.fitWidth=function(width,object){return _fitWidth(albersUsa,width,object);};albersUsa.fitHeight=function(height,object){return _fitHeight(albersUsa,height,object);};function reset(){cache=cacheStream=null;return albersUsa;}return albersUsa.scale(1070);}function azimuthalRaw(scale){return function(x,y){var cx=cos$1(x),cy=cos$1(y),k=scale(cx*cy);return[k*cy*sin$1(x),k*sin$1(y)];};}function azimuthalInvert(angle){return function(x,y){var z=sqrt(x*x+y*y),c=angle(z),sc=sin$1(c),cc=cos$1(c);return[atan2(x*sc,z*cc),asin(z&&y*sc/z)];};}var azimuthalEqualAreaRaw=azimuthalRaw(function(cxcy){return sqrt(2/(1+cxcy));});azimuthalEqualAreaRaw.invert=azimuthalInvert(function(z){return 2*asin(z/2);});function azimuthalEqualArea(){return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180-1e-3);}var azimuthalEquidistantRaw=azimuthalRaw(function(c){return(c=acos(c))&&c/sin$1(c);});azimuthalEquidistantRaw.invert=azimuthalInvert(function(z){return z;});function azimuthalEquidistant(){return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180-1e-3);}function mercatorRaw(lambda,phi){return[lambda,log(tan((halfPi$2+phi)/2))];}mercatorRaw.invert=function(x,y){return[x,2*atan(exp(y))-halfPi$2];};function mercator(){return mercatorProjection(mercatorRaw).scale(961/tau$3);}function mercatorProjection(project){var m=projection(project),center=m.center,scale=m.scale,translate=m.translate,clipExtent=m.clipExtent,x0=null,y0,x1,y1;// clip extent\nm.scale=function(_){return arguments.length?(scale(_),reclip()):scale();};m.translate=function(_){return arguments.length?(translate(_),reclip()):translate();};m.center=function(_){return arguments.length?(center(_),reclip()):center();};m.clipExtent=function(_){return arguments.length?(_==null?x0=y0=x1=y1=null:(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reclip()):x0==null?null:[[x0,y0],[x1,y1]];};function reclip(){var k=pi$3*scale(),t=m(rotation(m.rotate()).invert([0,0]));return clipExtent(x0==null?[[t[0]-k,t[1]-k],[t[0]+k,t[1]+k]]:project===mercatorRaw?[[Math.max(t[0]-k,x0),y0],[Math.min(t[0]+k,x1),y1]]:[[x0,Math.max(t[1]-k,y0)],[x1,Math.min(t[1]+k,y1)]]);}return reclip();}function tany(y){return tan((halfPi$2+y)/2);}function conicConformalRaw(y0,y1){var cy0=cos$1(y0),n=y0===y1?sin$1(y0):log(cy0/cos$1(y1))/log(tany(y1)/tany(y0)),f=cy0*pow(tany(y0),n)/n;if(!n)return mercatorRaw;function project(x,y){if(f>0){if(y<-halfPi$2+epsilon$2)y=-halfPi$2+epsilon$2;}else{if(y>halfPi$2-epsilon$2)y=halfPi$2-epsilon$2;}var r=f/pow(tany(y),n);return[r*sin$1(n*x),f-r*cos$1(n*x)];}project.invert=function(x,y){var fy=f-y,r=sign(n)*sqrt(x*x+fy*fy);return[atan2(x,abs(fy))/n*sign(fy),2*atan(pow(f/r,1/n))-halfPi$2];};return project;}function conicConformal(){return conicProjection(conicConformalRaw).scale(109.5).parallels([30,30]);}function equirectangularRaw(lambda,phi){return[lambda,phi];}equirectangularRaw.invert=equirectangularRaw;function equirectangular(){return projection(equirectangularRaw).scale(152.63);}function conicEquidistantRaw(y0,y1){var cy0=cos$1(y0),n=y0===y1?sin$1(y0):(cy0-cos$1(y1))/(y1-y0),g=cy0/n+y0;if(abs(n)<epsilon$2)return equirectangularRaw;function project(x,y){var gy=g-y,nx=n*x;return[gy*sin$1(nx),g-gy*cos$1(nx)];}project.invert=function(x,y){var gy=g-y;return[atan2(x,abs(gy))/n*sign(gy),g-sign(n)*sqrt(x*x+gy*gy)];};return project;}function conicEquidistant(){return conicProjection(conicEquidistantRaw).scale(131.154).center([0,13.9389]);}function gnomonicRaw(x,y){var cy=cos$1(y),k=cos$1(x)*cy;return[cy*sin$1(x)/k,sin$1(y)/k];}gnomonicRaw.invert=azimuthalInvert(atan);function gnomonic(){return projection(gnomonicRaw).scale(144.049).clipAngle(60);}function scaleTranslate$1(kx,ky,tx,ty){return kx===1&&ky===1&&tx===0&&ty===0?identity$4:transformer({point:function point(x,y){this.stream.point(x*kx+tx,y*ky+ty);}});}function identity$5(){var k=1,tx=0,ty=0,sx=1,sy=1,transform$$1=identity$4,// scale, translate and reflect\nx0=null,y0,x1,y1,// clip extent\n_postclip=identity$4,cache,cacheStream,projection;function reset(){cache=cacheStream=null;return projection;}return projection={stream:function stream(_stream2){return cache&&cacheStream===_stream2?cache:cache=transform$$1(_postclip(cacheStream=_stream2));},postclip:function postclip(_){return arguments.length?(_postclip=_,x0=y0=x1=y1=null,reset()):_postclip;},clipExtent:function clipExtent(_){return arguments.length?(_postclip=_==null?(x0=y0=x1=y1=null,identity$4):clipRectangle(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reset()):x0==null?null:[[x0,y0],[x1,y1]];},scale:function scale(_){return arguments.length?(transform$$1=scaleTranslate$1((k=+_)*sx,k*sy,tx,ty),reset()):k;},translate:function translate(_){return arguments.length?(transform$$1=scaleTranslate$1(k*sx,k*sy,tx=+_[0],ty=+_[1]),reset()):[tx,ty];},reflectX:function reflectX(_){return arguments.length?(transform$$1=scaleTranslate$1(k*(sx=_?-1:1),k*sy,tx,ty),reset()):sx<0;},reflectY:function reflectY(_){return arguments.length?(transform$$1=scaleTranslate$1(k*sx,k*(sy=_?-1:1),tx,ty),reset()):sy<0;},fitExtent:function fitExtent(extent,object){return _fitExtent(projection,extent,object);},fitSize:function fitSize(size,object){return _fitSize(projection,size,object);},fitWidth:function fitWidth(width,object){return _fitWidth(projection,width,object);},fitHeight:function fitHeight(height,object){return _fitHeight(projection,height,object);}};}function naturalEarth1Raw(lambda,phi){var phi2=phi*phi,phi4=phi2*phi2;return[lambda*(0.8707-0.131979*phi2+phi4*(-0.013791+phi4*(0.003971*phi2-0.001529*phi4))),phi*(1.007226+phi2*(0.015085+phi4*(-0.044475+0.028874*phi2-0.005916*phi4)))];}naturalEarth1Raw.invert=function(x,y){var phi=y,i=25,delta;do{var phi2=phi*phi,phi4=phi2*phi2;phi-=delta=(phi*(1.007226+phi2*(0.015085+phi4*(-0.044475+0.028874*phi2-0.005916*phi4)))-y)/(1.007226+phi2*(0.015085*3+phi4*(-0.044475*7+0.028874*9*phi2-0.005916*11*phi4)));}while(abs(delta)>epsilon$2&&--i>0);return[x/(0.8707+(phi2=phi*phi)*(-0.131979+phi2*(-0.013791+phi2*phi2*phi2*(0.003971-0.001529*phi2)))),phi];};function naturalEarth1(){return projection(naturalEarth1Raw).scale(175.295);}function orthographicRaw(x,y){return[cos$1(y)*sin$1(x),sin$1(y)];}orthographicRaw.invert=azimuthalInvert(asin);function orthographic(){return projection(orthographicRaw).scale(249.5).clipAngle(90+epsilon$2);}function stereographicRaw(x,y){var cy=cos$1(y),k=1+cos$1(x)*cy;return[cy*sin$1(x)/k,sin$1(y)/k];}stereographicRaw.invert=azimuthalInvert(function(z){return 2*atan(z);});function stereographic(){return projection(stereographicRaw).scale(250).clipAngle(142);}function transverseMercatorRaw(lambda,phi){return[log(tan((halfPi$2+phi)/2)),-lambda];}transverseMercatorRaw.invert=function(x,y){return[-y,2*atan(exp(x))-halfPi$2];};function transverseMercator(){var m=mercatorProjection(transverseMercatorRaw),center=m.center,rotate=m.rotate;m.center=function(_){return arguments.length?center([-_[1],_[0]]):(_=center(),[_[1],-_[0]]);};m.rotate=function(_){return arguments.length?rotate([_[0],_[1],_.length>2?_[2]+90:90]):(_=rotate(),[_[0],_[1],_[2]-90]);};return rotate([0,0,90]).scale(159.155);}function defaultSeparation(a,b){return a.parent===b.parent?1:2;}function meanX(children){return children.reduce(meanXReduce,0)/children.length;}function meanXReduce(x,c){return x+c.x;}function maxY(children){return 1+children.reduce(maxYReduce,0);}function maxYReduce(y,c){return Math.max(y,c.y);}function leafLeft(node){var children;while(children=node.children){node=children[0];}return node;}function leafRight(node){var children;while(children=node.children){node=children[children.length-1];}return node;}function cluster(){var separation=defaultSeparation,dx=1,dy=1,nodeSize=false;function cluster(root){var previousNode,x=0;// First walk, computing the initial x & y values.\nroot.eachAfter(function(node){var children=node.children;if(children){node.x=meanX(children);node.y=maxY(children);}else{node.x=previousNode?x+=separation(node,previousNode):0;node.y=0;previousNode=node;}});var left=leafLeft(root),right=leafRight(root),x0=left.x-separation(left,right)/2,x1=right.x+separation(right,left)/2;// Second walk, normalizing x & y to the desired size.\nreturn root.eachAfter(nodeSize?function(node){node.x=(node.x-root.x)*dx;node.y=(root.y-node.y)*dy;}:function(node){node.x=(node.x-x0)/(x1-x0)*dx;node.y=(1-(root.y?node.y/root.y:1))*dy;});}cluster.separation=function(x){return arguments.length?(separation=x,cluster):separation;};cluster.size=function(x){return arguments.length?(nodeSize=false,dx=+x[0],dy=+x[1],cluster):nodeSize?null:[dx,dy];};cluster.nodeSize=function(x){return arguments.length?(nodeSize=true,dx=+x[0],dy=+x[1],cluster):nodeSize?[dx,dy]:null;};return cluster;}function count(node){var sum=0,children=node.children,i=children&&children.length;if(!i)sum=1;else while(--i>=0){sum+=children[i].value;}node.value=sum;}function node_count(){return this.eachAfter(count);}function node_each(callback){var node=this,current,next=[node],children,i,n;do{current=next.reverse(),next=[];while(node=current.pop()){callback(node),children=node.children;if(children)for(i=0,n=children.length;i<n;++i){next.push(children[i]);}}}while(next.length);return this;}function node_eachBefore(callback){var node=this,nodes=[node],children,i;while(node=nodes.pop()){callback(node),children=node.children;if(children)for(i=children.length-1;i>=0;--i){nodes.push(children[i]);}}return this;}function node_eachAfter(callback){var node=this,nodes=[node],next=[],children,i,n;while(node=nodes.pop()){next.push(node),children=node.children;if(children)for(i=0,n=children.length;i<n;++i){nodes.push(children[i]);}}while(node=next.pop()){callback(node);}return this;}function node_sum(value){return this.eachAfter(function(node){var sum=+value(node.data)||0,children=node.children,i=children&&children.length;while(--i>=0){sum+=children[i].value;}node.value=sum;});}function node_sort(compare){return this.eachBefore(function(node){if(node.children){node.children.sort(compare);}});}function node_path(end){var start=this,ancestor=leastCommonAncestor(start,end),nodes=[start];while(start!==ancestor){start=start.parent;nodes.push(start);}var k=nodes.length;while(end!==ancestor){nodes.splice(k,0,end);end=end.parent;}return nodes;}function leastCommonAncestor(a,b){if(a===b)return a;var aNodes=a.ancestors(),bNodes=b.ancestors(),c=null;a=aNodes.pop();b=bNodes.pop();while(a===b){c=a;a=aNodes.pop();b=bNodes.pop();}return c;}function node_ancestors(){var node=this,nodes=[node];while(node=node.parent){nodes.push(node);}return nodes;}function node_descendants(){var nodes=[];this.each(function(node){nodes.push(node);});return nodes;}function node_leaves(){var leaves=[];this.eachBefore(function(node){if(!node.children){leaves.push(node);}});return leaves;}function node_links(){var root=this,links=[];root.each(function(node){if(node!==root){// Don’t include the root’s parent, if any.\nlinks.push({source:node.parent,target:node});}});return links;}function hierarchy(data,children){var root=new Node(data),valued=+data.value&&(root.value=data.value),node,nodes=[root],child,childs,i,n;if(children==null)children=defaultChildren;while(node=nodes.pop()){if(valued)node.value=+node.data.value;if((childs=children(node.data))&&(n=childs.length)){node.children=new Array(n);for(i=n-1;i>=0;--i){nodes.push(child=node.children[i]=new Node(childs[i]));child.parent=node;child.depth=node.depth+1;}}}return root.eachBefore(computeHeight);}function node_copy(){return hierarchy(this).eachBefore(copyData);}function defaultChildren(d){return d.children;}function copyData(node){node.data=node.data.data;}function computeHeight(node){var height=0;do{node.height=height;}while((node=node.parent)&&node.height<++height);}function Node(data){this.data=data;this.depth=this.height=0;this.parent=null;}Node.prototype=hierarchy.prototype={constructor:Node,count:node_count,each:node_each,eachAfter:node_eachAfter,eachBefore:node_eachBefore,sum:node_sum,sort:node_sort,path:node_path,ancestors:node_ancestors,descendants:node_descendants,leaves:node_leaves,links:node_links,copy:node_copy};var slice$4=Array.prototype.slice;function shuffle$1(array){var m=array.length,t,i;while(m){i=Math.random()*m--|0;t=array[m];array[m]=array[i];array[i]=t;}return array;}function enclose(circles){var i=0,n=(circles=shuffle$1(slice$4.call(circles))).length,B=[],p,e;while(i<n){p=circles[i];if(e&&enclosesWeak(e,p))++i;else e=encloseBasis(B=extendBasis(B,p)),i=0;}return e;}function extendBasis(B,p){var i,j;if(enclosesWeakAll(p,B))return[p];// If we get here then B must have at least one element.\nfor(i=0;i<B.length;++i){if(enclosesNot(p,B[i])&&enclosesWeakAll(encloseBasis2(B[i],p),B)){return[B[i],p];}}// If we get here then B must have at least two elements.\nfor(i=0;i<B.length-1;++i){for(j=i+1;j<B.length;++j){if(enclosesNot(encloseBasis2(B[i],B[j]),p)&&enclosesNot(encloseBasis2(B[i],p),B[j])&&enclosesNot(encloseBasis2(B[j],p),B[i])&&enclosesWeakAll(encloseBasis3(B[i],B[j],p),B)){return[B[i],B[j],p];}}}// If we get here then something is very wrong.\nthrow new Error();}function enclosesNot(a,b){var dr=a.r-b.r,dx=b.x-a.x,dy=b.y-a.y;return dr<0||dr*dr<dx*dx+dy*dy;}function enclosesWeak(a,b){var dr=a.r-b.r+1e-6,dx=b.x-a.x,dy=b.y-a.y;return dr>0&&dr*dr>dx*dx+dy*dy;}function enclosesWeakAll(a,B){for(var i=0;i<B.length;++i){if(!enclosesWeak(a,B[i])){return false;}}return true;}function encloseBasis(B){switch(B.length){case 1:return encloseBasis1(B[0]);case 2:return encloseBasis2(B[0],B[1]);case 3:return encloseBasis3(B[0],B[1],B[2]);}}function encloseBasis1(a){return{x:a.x,y:a.y,r:a.r};}function encloseBasis2(a,b){var x1=a.x,y1=a.y,r1=a.r,x2=b.x,y2=b.y,r2=b.r,x21=x2-x1,y21=y2-y1,r21=r2-r1,l=Math.sqrt(x21*x21+y21*y21);return{x:(x1+x2+x21/l*r21)/2,y:(y1+y2+y21/l*r21)/2,r:(l+r1+r2)/2};}function encloseBasis3(a,b,c){var x1=a.x,y1=a.y,r1=a.r,x2=b.x,y2=b.y,r2=b.r,x3=c.x,y3=c.y,r3=c.r,a2=x1-x2,a3=x1-x3,b2=y1-y2,b3=y1-y3,c2=r2-r1,c3=r3-r1,d1=x1*x1+y1*y1-r1*r1,d2=d1-x2*x2-y2*y2+r2*r2,d3=d1-x3*x3-y3*y3+r3*r3,ab=a3*b2-a2*b3,xa=(b2*d3-b3*d2)/(ab*2)-x1,xb=(b3*c2-b2*c3)/ab,ya=(a3*d2-a2*d3)/(ab*2)-y1,yb=(a2*c3-a3*c2)/ab,A=xb*xb+yb*yb-1,B=2*(r1+xa*xb+ya*yb),C=xa*xa+ya*ya-r1*r1,r=-(A?(B+Math.sqrt(B*B-4*A*C))/(2*A):C/B);return{x:x1+xa+xb*r,y:y1+ya+yb*r,r:r};}function place(b,a,c){var dx=b.x-a.x,x,a2,dy=b.y-a.y,y,b2,d2=dx*dx+dy*dy;if(d2){a2=a.r+c.r,a2*=a2;b2=b.r+c.r,b2*=b2;if(a2>b2){x=(d2+b2-a2)/(2*d2);y=Math.sqrt(Math.max(0,b2/d2-x*x));c.x=b.x-x*dx-y*dy;c.y=b.y-x*dy+y*dx;}else{x=(d2+a2-b2)/(2*d2);y=Math.sqrt(Math.max(0,a2/d2-x*x));c.x=a.x+x*dx-y*dy;c.y=a.y+x*dy+y*dx;}}else{c.x=a.x+c.r;c.y=a.y;}}function intersects(a,b){var dr=a.r+b.r-1e-6,dx=b.x-a.x,dy=b.y-a.y;return dr>0&&dr*dr>dx*dx+dy*dy;}function score(node){var a=node._,b=node.next._,ab=a.r+b.r,dx=(a.x*b.r+b.x*a.r)/ab,dy=(a.y*b.r+b.y*a.r)/ab;return dx*dx+dy*dy;}function Node$1(circle){this._=circle;this.next=null;this.previous=null;}function packEnclose(circles){if(!(n=circles.length))return 0;var a,b,c,n,aa,ca,i,j,k,sj,sk;// Place the first circle.\na=circles[0],a.x=0,a.y=0;if(!(n>1))return a.r;// Place the second circle.\nb=circles[1],a.x=-b.r,b.x=a.r,b.y=0;if(!(n>2))return a.r+b.r;// Place the third circle.\nplace(b,a,c=circles[2]);// Initialize the front-chain using the first three circles a, b and c.\na=new Node$1(a),b=new Node$1(b),c=new Node$1(c);a.next=c.previous=b;b.next=a.previous=c;c.next=b.previous=a;// Attempt to place each remaining circle…\npack:for(i=3;i<n;++i){place(a._,b._,c=circles[i]),c=new Node$1(c);// Find the closest intersecting circle on the front-chain, if any.\n// “Closeness” is determined by linear distance along the front-chain.\n// “Ahead” or “behind” is likewise determined by linear distance.\nj=b.next,k=a.previous,sj=b._.r,sk=a._.r;do{if(sj<=sk){if(intersects(j._,c._)){b=j,a.next=b,b.previous=a,--i;continue pack;}sj+=j._.r,j=j.next;}else{if(intersects(k._,c._)){a=k,a.next=b,b.previous=a,--i;continue pack;}sk+=k._.r,k=k.previous;}}while(j!==k.next);// Success! Insert the new circle c between a and b.\nc.previous=a,c.next=b,a.next=b.previous=b=c;// Compute the new closest circle pair to the centroid.\naa=score(a);while((c=c.next)!==b){if((ca=score(c))<aa){a=c,aa=ca;}}b=a.next;}// Compute the enclosing circle of the front chain.\na=[b._],c=b;while((c=c.next)!==b){a.push(c._);}c=enclose(a);// Translate the circles to put the enclosing circle around the origin.\nfor(i=0;i<n;++i){a=circles[i],a.x-=c.x,a.y-=c.y;}return c.r;}function siblings(circles){packEnclose(circles);return circles;}function optional(f){return f==null?null:required(f);}function required(f){if(typeof f!==\"function\")throw new Error();return f;}function constantZero(){return 0;}function constant$9(x){return function(){return x;};}function defaultRadius$1(d){return Math.sqrt(d.value);}function index$2(){var radius=null,dx=1,dy=1,padding=constantZero;function pack(root){root.x=dx/2,root.y=dy/2;if(radius){root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding,0.5)).eachBefore(translateChild(1));}else{root.eachBefore(radiusLeaf(defaultRadius$1)).eachAfter(packChildren(constantZero,1)).eachAfter(packChildren(padding,root.r/Math.min(dx,dy))).eachBefore(translateChild(Math.min(dx,dy)/(2*root.r)));}return root;}pack.radius=function(x){return arguments.length?(radius=optional(x),pack):radius;};pack.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],pack):[dx,dy];};pack.padding=function(x){return arguments.length?(padding=typeof x===\"function\"?x:constant$9(+x),pack):padding;};return pack;}function radiusLeaf(radius){return function(node){if(!node.children){node.r=Math.max(0,+radius(node)||0);}};}function packChildren(padding,k){return function(node){if(children=node.children){var children,i,n=children.length,r=padding(node)*k||0,e;if(r)for(i=0;i<n;++i){children[i].r+=r;}e=packEnclose(children);if(r)for(i=0;i<n;++i){children[i].r-=r;}node.r=e+r;}};}function translateChild(k){return function(node){var parent=node.parent;node.r*=k;if(parent){node.x=parent.x+k*node.x;node.y=parent.y+k*node.y;}};}function roundNode(node){node.x0=Math.round(node.x0);node.y0=Math.round(node.y0);node.x1=Math.round(node.x1);node.y1=Math.round(node.y1);}function treemapDice(parent,x0,y0,x1,y1){var nodes=parent.children,node,i=-1,n=nodes.length,k=parent.value&&(x1-x0)/parent.value;while(++i<n){node=nodes[i],node.y0=y0,node.y1=y1;node.x0=x0,node.x1=x0+=node.value*k;}}function partition(){var dx=1,dy=1,padding=0,round=false;function partition(root){var n=root.height+1;root.x0=root.y0=padding;root.x1=dx;root.y1=dy/n;root.eachBefore(positionNode(dy,n));if(round)root.eachBefore(roundNode);return root;}function positionNode(dy,n){return function(node){if(node.children){treemapDice(node,node.x0,dy*(node.depth+1)/n,node.x1,dy*(node.depth+2)/n);}var x0=node.x0,y0=node.y0,x1=node.x1-padding,y1=node.y1-padding;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;node.x0=x0;node.y0=y0;node.x1=x1;node.y1=y1;};}partition.round=function(x){return arguments.length?(round=!!x,partition):round;};partition.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],partition):[dx,dy];};partition.padding=function(x){return arguments.length?(padding=+x,partition):padding;};return partition;}var keyPrefix$1=\"$\",// Protect against keys like “__proto__”.\npreroot={depth:-1},ambiguous={};function defaultId(d){return d.id;}function defaultParentId(d){return d.parentId;}function stratify(){var id=defaultId,parentId=defaultParentId;function stratify(data){var d,i,n=data.length,root,parent,node,nodes=new Array(n),nodeId,nodeKey,nodeByKey={};for(i=0;i<n;++i){d=data[i],node=nodes[i]=new Node(d);if((nodeId=id(d,i,data))!=null&&(nodeId+=\"\")){nodeKey=keyPrefix$1+(node.id=nodeId);nodeByKey[nodeKey]=nodeKey in nodeByKey?ambiguous:node;}}for(i=0;i<n;++i){node=nodes[i],nodeId=parentId(data[i],i,data);if(nodeId==null||!(nodeId+=\"\")){if(root)throw new Error(\"multiple roots\");root=node;}else{parent=nodeByKey[keyPrefix$1+nodeId];if(!parent)throw new Error(\"missing: \"+nodeId);if(parent===ambiguous)throw new Error(\"ambiguous: \"+nodeId);if(parent.children)parent.children.push(node);else parent.children=[node];node.parent=parent;}}if(!root)throw new Error(\"no root\");root.parent=preroot;root.eachBefore(function(node){node.depth=node.parent.depth+1;--n;}).eachBefore(computeHeight);root.parent=null;if(n>0)throw new Error(\"cycle\");return root;}stratify.id=function(x){return arguments.length?(id=required(x),stratify):id;};stratify.parentId=function(x){return arguments.length?(parentId=required(x),stratify):parentId;};return stratify;}function defaultSeparation$1(a,b){return a.parent===b.parent?1:2;}// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v){var children=v.children;return children?children[0]:v.t;}// This function works analogously to nextLeft.\nfunction nextRight(v){var children=v.children;return children?children[children.length-1]:v.t;}// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm,wp,shift){var change=shift/(wp.i-wm.i);wp.c-=change;wp.s+=shift;wm.c+=change;wp.z+=shift;wp.m+=shift;}// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v){var shift=0,change=0,children=v.children,i=children.length,w;while(--i>=0){w=children[i];w.z+=shift;w.m+=shift;shift+=w.s+(change+=w.c);}}// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim,v,ancestor){return vim.a.parent===v.parent?vim.a:ancestor;}function TreeNode(node,i){this._=node;this.parent=null;this.children=null;this.A=null;// default ancestor\nthis.a=this;// ancestor\nthis.z=0;// prelim\nthis.m=0;// mod\nthis.c=0;// change\nthis.s=0;// shift\nthis.t=null;// thread\nthis.i=i;// number\n}TreeNode.prototype=Object.create(Node.prototype);function treeRoot(root){var tree=new TreeNode(root,0),node,nodes=[tree],child,children,i,n;while(node=nodes.pop()){if(children=node._.children){node.children=new Array(n=children.length);for(i=n-1;i>=0;--i){nodes.push(child=node.children[i]=new TreeNode(children[i],i));child.parent=node;}}}(tree.parent=new TreeNode(null,0)).children=[tree];return tree;}// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nfunction tree(){var separation=defaultSeparation$1,dx=1,dy=1,nodeSize=null;function tree(root){var t=treeRoot(root);// Compute the layout using Buchheim et al.’s algorithm.\nt.eachAfter(firstWalk),t.parent.m=-t.z;t.eachBefore(secondWalk);// If a fixed node size is specified, scale x and y.\nif(nodeSize)root.eachBefore(sizeNode);// If a fixed tree size is specified, scale x and y based on the extent.\n// Compute the left-most, right-most, and depth-most nodes for extents.\nelse{var left=root,right=root,bottom=root;root.eachBefore(function(node){if(node.x<left.x)left=node;if(node.x>right.x)right=node;if(node.depth>bottom.depth)bottom=node;});var s=left===right?1:separation(left,right)/2,tx=s-left.x,kx=dx/(right.x+s+tx),ky=dy/(bottom.depth||1);root.eachBefore(function(node){node.x=(node.x+tx)*kx;node.y=node.depth*ky;});}return root;}// Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n// applied recursively to the children of v, as well as the function\n// APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n// node v is placed to the midpoint of its outermost children.\nfunction firstWalk(v){var children=v.children,siblings=v.parent.children,w=v.i?siblings[v.i-1]:null;if(children){executeShifts(v);var midpoint=(children[0].z+children[children.length-1].z)/2;if(w){v.z=w.z+separation(v._,w._);v.m=v.z-midpoint;}else{v.z=midpoint;}}else if(w){v.z=w.z+separation(v._,w._);}v.parent.A=apportion(v,w,v.parent.A||siblings[0]);}// Computes all real x-coordinates by summing up the modifiers recursively.\nfunction secondWalk(v){v._.x=v.z+v.parent.m;v.m+=v.parent.m;}// The core of the algorithm. Here, a new subtree is combined with the\n// previous subtrees. Threads are used to traverse the inside and outside\n// contours of the left and right subtree up to the highest common level. The\n// vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n// superscript o means outside and i means inside, the subscript - means left\n// subtree and + means right subtree. For summing up the modifiers along the\n// contour, we use respective variables si+, si-, so-, and so+. Whenever two\n// nodes of the inside contours conflict, we compute the left one of the\n// greatest uncommon ancestors using the function ANCESTOR and call MOVE\n// SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n// Finally, we add a new thread (if necessary).\nfunction apportion(v,w,ancestor){if(w){var vip=v,vop=v,vim=w,vom=vip.parent.children[0],sip=vip.m,sop=vop.m,sim=vim.m,som=vom.m,shift;while(vim=nextRight(vim),vip=nextLeft(vip),vim&&vip){vom=nextLeft(vom);vop=nextRight(vop);vop.a=v;shift=vim.z+sim-vip.z-sip+separation(vim._,vip._);if(shift>0){moveSubtree(nextAncestor(vim,v,ancestor),v,shift);sip+=shift;sop+=shift;}sim+=vim.m;sip+=vip.m;som+=vom.m;sop+=vop.m;}if(vim&&!nextRight(vop)){vop.t=vim;vop.m+=sim-sop;}if(vip&&!nextLeft(vom)){vom.t=vip;vom.m+=sip-som;ancestor=v;}}return ancestor;}function sizeNode(node){node.x*=dx;node.y=node.depth*dy;}tree.separation=function(x){return arguments.length?(separation=x,tree):separation;};tree.size=function(x){return arguments.length?(nodeSize=false,dx=+x[0],dy=+x[1],tree):nodeSize?null:[dx,dy];};tree.nodeSize=function(x){return arguments.length?(nodeSize=true,dx=+x[0],dy=+x[1],tree):nodeSize?[dx,dy]:null;};return tree;}function treemapSlice(parent,x0,y0,x1,y1){var nodes=parent.children,node,i=-1,n=nodes.length,k=parent.value&&(y1-y0)/parent.value;while(++i<n){node=nodes[i],node.x0=x0,node.x1=x1;node.y0=y0,node.y1=y0+=node.value*k;}}var phi=(1+Math.sqrt(5))/2;function squarifyRatio(ratio,parent,x0,y0,x1,y1){var rows=[],nodes=parent.children,row,nodeValue,i0=0,i1=0,n=nodes.length,dx,dy,value=parent.value,sumValue,minValue,maxValue,newRatio,minRatio,alpha,beta;while(i0<n){dx=x1-x0,dy=y1-y0;// Find the next non-empty node.\ndo{sumValue=nodes[i1++].value;}while(!sumValue&&i1<n);minValue=maxValue=sumValue;alpha=Math.max(dy/dx,dx/dy)/(value*ratio);beta=sumValue*sumValue*alpha;minRatio=Math.max(maxValue/beta,beta/minValue);// Keep adding nodes while the aspect ratio maintains or improves.\nfor(;i1<n;++i1){sumValue+=nodeValue=nodes[i1].value;if(nodeValue<minValue)minValue=nodeValue;if(nodeValue>maxValue)maxValue=nodeValue;beta=sumValue*sumValue*alpha;newRatio=Math.max(maxValue/beta,beta/minValue);if(newRatio>minRatio){sumValue-=nodeValue;break;}minRatio=newRatio;}// Position and record the row orientation.\nrows.push(row={value:sumValue,dice:dx<dy,children:nodes.slice(i0,i1)});if(row.dice)treemapDice(row,x0,y0,x1,value?y0+=dy*sumValue/value:y1);else treemapSlice(row,x0,y0,value?x0+=dx*sumValue/value:x1,y1);value-=sumValue,i0=i1;}return rows;}var squarify=function custom(ratio){function squarify(parent,x0,y0,x1,y1){squarifyRatio(ratio,parent,x0,y0,x1,y1);}squarify.ratio=function(x){return custom((x=+x)>1?x:1);};return squarify;}(phi);function index$3(){var tile=squarify,round=false,dx=1,dy=1,paddingStack=[0],paddingInner=constantZero,paddingTop=constantZero,paddingRight=constantZero,paddingBottom=constantZero,paddingLeft=constantZero;function treemap(root){root.x0=root.y0=0;root.x1=dx;root.y1=dy;root.eachBefore(positionNode);paddingStack=[0];if(round)root.eachBefore(roundNode);return root;}function positionNode(node){var p=paddingStack[node.depth],x0=node.x0+p,y0=node.y0+p,x1=node.x1-p,y1=node.y1-p;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;node.x0=x0;node.y0=y0;node.x1=x1;node.y1=y1;if(node.children){p=paddingStack[node.depth+1]=paddingInner(node)/2;x0+=paddingLeft(node)-p;y0+=paddingTop(node)-p;x1-=paddingRight(node)-p;y1-=paddingBottom(node)-p;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;tile(node,x0,y0,x1,y1);}}treemap.round=function(x){return arguments.length?(round=!!x,treemap):round;};treemap.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],treemap):[dx,dy];};treemap.tile=function(x){return arguments.length?(tile=required(x),treemap):tile;};treemap.padding=function(x){return arguments.length?treemap.paddingInner(x).paddingOuter(x):treemap.paddingInner();};treemap.paddingInner=function(x){return arguments.length?(paddingInner=typeof x===\"function\"?x:constant$9(+x),treemap):paddingInner;};treemap.paddingOuter=function(x){return arguments.length?treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x):treemap.paddingTop();};treemap.paddingTop=function(x){return arguments.length?(paddingTop=typeof x===\"function\"?x:constant$9(+x),treemap):paddingTop;};treemap.paddingRight=function(x){return arguments.length?(paddingRight=typeof x===\"function\"?x:constant$9(+x),treemap):paddingRight;};treemap.paddingBottom=function(x){return arguments.length?(paddingBottom=typeof x===\"function\"?x:constant$9(+x),treemap):paddingBottom;};treemap.paddingLeft=function(x){return arguments.length?(paddingLeft=typeof x===\"function\"?x:constant$9(+x),treemap):paddingLeft;};return treemap;}function binary(parent,x0,y0,x1,y1){var nodes=parent.children,i,n=nodes.length,sum,sums=new Array(n+1);for(sums[0]=sum=i=0;i<n;++i){sums[i+1]=sum+=nodes[i].value;}partition(0,n,parent.value,x0,y0,x1,y1);function partition(i,j,value,x0,y0,x1,y1){if(i>=j-1){var node=nodes[i];node.x0=x0,node.y0=y0;node.x1=x1,node.y1=y1;return;}var valueOffset=sums[i],valueTarget=value/2+valueOffset,k=i+1,hi=j-1;while(k<hi){var mid=k+hi>>>1;if(sums[mid]<valueTarget)k=mid+1;else hi=mid;}if(valueTarget-sums[k-1]<sums[k]-valueTarget&&i+1<k)--k;var valueLeft=sums[k]-valueOffset,valueRight=value-valueLeft;if(x1-x0>y1-y0){var xk=(x0*valueRight+x1*valueLeft)/value;partition(i,k,valueLeft,x0,y0,xk,y1);partition(k,j,valueRight,xk,y0,x1,y1);}else{var yk=(y0*valueRight+y1*valueLeft)/value;partition(i,k,valueLeft,x0,y0,x1,yk);partition(k,j,valueRight,x0,yk,x1,y1);}}}function sliceDice(parent,x0,y0,x1,y1){(parent.depth&1?treemapSlice:treemapDice)(parent,x0,y0,x1,y1);}var resquarify=function custom(ratio){function resquarify(parent,x0,y0,x1,y1){if((rows=parent._squarify)&&rows.ratio===ratio){var rows,row,nodes,i,j=-1,n,m=rows.length,value=parent.value;while(++j<m){row=rows[j],nodes=row.children;for(i=row.value=0,n=nodes.length;i<n;++i){row.value+=nodes[i].value;}if(row.dice)treemapDice(row,x0,y0,x1,y0+=(y1-y0)*row.value/value);else treemapSlice(row,x0,y0,x0+=(x1-x0)*row.value/value,y1);value-=row.value;}}else{parent._squarify=rows=squarifyRatio(ratio,parent,x0,y0,x1,y1);rows.ratio=ratio;}}resquarify.ratio=function(x){return custom((x=+x)>1?x:1);};return resquarify;}(phi);function area$2(polygon){var i=-1,n=polygon.length,a,b=polygon[n-1],area=0;while(++i<n){a=b;b=polygon[i];area+=a[1]*b[0]-a[0]*b[1];}return area/2;}function centroid$1(polygon){var i=-1,n=polygon.length,x=0,y=0,a,b=polygon[n-1],c,k=0;while(++i<n){a=b;b=polygon[i];k+=c=a[0]*b[1]-b[0]*a[1];x+=(a[0]+b[0])*c;y+=(a[1]+b[1])*c;}return k*=3,[x/k,y/k];}// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nfunction cross$1(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0]);}function lexicographicOrder(a,b){return a[0]-b[0]||a[1]-b[1];}// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points){var n=points.length,indexes=[0,1],size=2;for(var i=2;i<n;++i){while(size>1&&cross$1(points[indexes[size-2]],points[indexes[size-1]],points[i])<=0){--size;}indexes[size++]=i;}return indexes.slice(0,size);// remove popped points\n}function hull(points){if((n=points.length)<3)return null;var i,n,sortedPoints=new Array(n),flippedPoints=new Array(n);for(i=0;i<n;++i){sortedPoints[i]=[+points[i][0],+points[i][1],i];}sortedPoints.sort(lexicographicOrder);for(i=0;i<n;++i){flippedPoints[i]=[sortedPoints[i][0],-sortedPoints[i][1]];}var upperIndexes=computeUpperHullIndexes(sortedPoints),lowerIndexes=computeUpperHullIndexes(flippedPoints);// Construct the hull polygon, removing possible duplicate endpoints.\nvar skipLeft=lowerIndexes[0]===upperIndexes[0],skipRight=lowerIndexes[lowerIndexes.length-1]===upperIndexes[upperIndexes.length-1],hull=[];// Add upper hull in right-to-l order.\n// Then add lower hull in left-to-right order.\nfor(i=upperIndexes.length-1;i>=0;--i){hull.push(points[sortedPoints[upperIndexes[i]][2]]);}for(i=+skipLeft;i<lowerIndexes.length-skipRight;++i){hull.push(points[sortedPoints[lowerIndexes[i]][2]]);}return hull;}function contains$2(polygon,point){var n=polygon.length,p=polygon[n-1],x=point[0],y=point[1],x0=p[0],y0=p[1],x1,y1,inside=false;for(var i=0;i<n;++i){p=polygon[i],x1=p[0],y1=p[1];if(y1>y!==y0>y&&x<(x0-x1)*(y-y1)/(y0-y1)+x1)inside=!inside;x0=x1,y0=y1;}return inside;}function length$2(polygon){var i=-1,n=polygon.length,b=polygon[n-1],xa,ya,xb=b[0],yb=b[1],perimeter=0;while(++i<n){xa=xb;ya=yb;b=polygon[i];xb=b[0];yb=b[1];xa-=xb;ya-=yb;perimeter+=Math.sqrt(xa*xa+ya*ya);}return perimeter;}function defaultSource$1(){return Math.random();}var uniform=function sourceRandomUniform(source){function randomUniform(min,max){min=min==null?0:+min;max=max==null?1:+max;if(arguments.length===1)max=min,min=0;else max-=min;return function(){return source()*max+min;};}randomUniform.source=sourceRandomUniform;return randomUniform;}(defaultSource$1);var normal=function sourceRandomNormal(source){function randomNormal(mu,sigma){var x,r;mu=mu==null?0:+mu;sigma=sigma==null?1:+sigma;return function(){var y;// If available, use the second previously-generated uniform random.\nif(x!=null)y=x,x=null;// Otherwise, generate a new x and y.\nelse do{x=source()*2-1;y=source()*2-1;r=x*x+y*y;}while(!r||r>1);return mu+sigma*y*Math.sqrt(-2*Math.log(r)/r);};}randomNormal.source=sourceRandomNormal;return randomNormal;}(defaultSource$1);var logNormal=function sourceRandomLogNormal(source){function randomLogNormal(){var randomNormal=normal.source(source).apply(this,arguments);return function(){return Math.exp(randomNormal());};}randomLogNormal.source=sourceRandomLogNormal;return randomLogNormal;}(defaultSource$1);var irwinHall=function sourceRandomIrwinHall(source){function randomIrwinHall(n){return function(){for(var sum=0,i=0;i<n;++i){sum+=source();}return sum;};}randomIrwinHall.source=sourceRandomIrwinHall;return randomIrwinHall;}(defaultSource$1);var bates=function sourceRandomBates(source){function randomBates(n){var randomIrwinHall=irwinHall.source(source)(n);return function(){return randomIrwinHall()/n;};}randomBates.source=sourceRandomBates;return randomBates;}(defaultSource$1);var exponential$1=function sourceRandomExponential(source){function randomExponential(lambda){return function(){return-Math.log(1-source())/lambda;};}randomExponential.source=sourceRandomExponential;return randomExponential;}(defaultSource$1);var array$3=Array.prototype;var map$2=array$3.map;var slice$5=array$3.slice;var implicit={name:\"implicit\"};function ordinal(range){var index=map$1(),domain=[],unknown=implicit;range=range==null?[]:slice$5.call(range);function scale(d){var key=d+\"\",i=index.get(key);if(!i){if(unknown!==implicit)return unknown;index.set(key,i=domain.push(d));}return range[(i-1)%range.length];}scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[],index=map$1();var i=-1,n=_.length,d,key;while(++i<n){if(!index.has(key=(d=_[i])+\"\"))index.set(key,domain.push(d));}return scale;};scale.range=function(_){return arguments.length?(range=slice$5.call(_),scale):range.slice();};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};scale.copy=function(){return ordinal().domain(domain).range(range).unknown(unknown);};return scale;}function band(){var scale=ordinal().unknown(undefined),domain=scale.domain,ordinalRange=scale.range,range$$1=[0,1],step,bandwidth,round=false,paddingInner=0,paddingOuter=0,align=0.5;delete scale.unknown;function rescale(){var n=domain().length,reverse=range$$1[1]<range$$1[0],start=range$$1[reverse-0],stop=range$$1[1-reverse];step=(stop-start)/Math.max(1,n-paddingInner+paddingOuter*2);if(round)step=Math.floor(step);start+=(stop-start-step*(n-paddingInner))*align;bandwidth=step*(1-paddingInner);if(round)start=Math.round(start),bandwidth=Math.round(bandwidth);var values=sequence(n).map(function(i){return start+step*i;});return ordinalRange(reverse?values.reverse():values);}scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain();};scale.range=function(_){return arguments.length?(range$$1=[+_[0],+_[1]],rescale()):range$$1.slice();};scale.rangeRound=function(_){return range$$1=[+_[0],+_[1]],round=true,rescale();};scale.bandwidth=function(){return bandwidth;};scale.step=function(){return step;};scale.round=function(_){return arguments.length?(round=!!_,rescale()):round;};scale.padding=function(_){return arguments.length?(paddingInner=paddingOuter=Math.max(0,Math.min(1,_)),rescale()):paddingInner;};scale.paddingInner=function(_){return arguments.length?(paddingInner=Math.max(0,Math.min(1,_)),rescale()):paddingInner;};scale.paddingOuter=function(_){return arguments.length?(paddingOuter=Math.max(0,Math.min(1,_)),rescale()):paddingOuter;};scale.align=function(_){return arguments.length?(align=Math.max(0,Math.min(1,_)),rescale()):align;};scale.copy=function(){return band().domain(domain()).range(range$$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);};return rescale();}function pointish(scale){var copy=scale.copy;scale.padding=scale.paddingOuter;delete scale.paddingInner;delete scale.paddingOuter;scale.copy=function(){return pointish(copy());};return scale;}function point$1(){return pointish(band().paddingInner(1));}function constant$10(x){return function(){return x;};}function number$2(x){return+x;}var unit=[0,1];function deinterpolateLinear(a,b){return(b-=a=+a)?function(x){return(x-a)/b;}:constant$10(b);}function deinterpolateClamp(deinterpolate){return function(a,b){var d=deinterpolate(a=+a,b=+b);return function(x){return x<=a?0:x>=b?1:d(x);};};}function reinterpolateClamp(reinterpolate$$1){return function(a,b){var r=reinterpolate$$1(a=+a,b=+b);return function(t){return t<=0?a:t>=1?b:r(t);};};}function bimap(domain,range,deinterpolate,reinterpolate$$1){var d0=domain[0],d1=domain[1],r0=range[0],r1=range[1];if(d1<d0)d0=deinterpolate(d1,d0),r0=reinterpolate$$1(r1,r0);else d0=deinterpolate(d0,d1),r0=reinterpolate$$1(r0,r1);return function(x){return r0(d0(x));};}function polymap(domain,range,deinterpolate,reinterpolate$$1){var j=Math.min(domain.length,range.length)-1,d=new Array(j),r=new Array(j),i=-1;// Reverse descending domains.\nif(domain[j]<domain[0]){domain=domain.slice().reverse();range=range.slice().reverse();}while(++i<j){d[i]=deinterpolate(domain[i],domain[i+1]);r[i]=reinterpolate$$1(range[i],range[i+1]);}return function(x){var i=bisectRight(domain,x,1,j)-1;return r[i](d[i](x));};}function copy(source,target){return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());}// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nfunction continuous(deinterpolate,reinterpolate$$1){var domain=unit,range=unit,interpolate$$1=interpolateValue,clamp=false,piecewise$$1,output,input;function rescale(){piecewise$$1=Math.min(domain.length,range.length)>2?polymap:bimap;output=input=null;return scale;}function scale(x){return(output||(output=piecewise$$1(domain,range,clamp?deinterpolateClamp(deinterpolate):deinterpolate,interpolate$$1)))(+x);}scale.invert=function(y){return(input||(input=piecewise$$1(range,domain,deinterpolateLinear,clamp?reinterpolateClamp(reinterpolate$$1):reinterpolate$$1)))(+y);};scale.domain=function(_){return arguments.length?(domain=map$2.call(_,number$2),rescale()):domain.slice();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),rescale()):range.slice();};scale.rangeRound=function(_){return range=slice$5.call(_),interpolate$$1=interpolateRound,rescale();};scale.clamp=function(_){return arguments.length?(clamp=!!_,rescale()):clamp;};scale.interpolate=function(_){return arguments.length?(interpolate$$1=_,rescale()):interpolate$$1;};return rescale();}function tickFormat(domain,count,specifier){var start=domain[0],stop=domain[domain.length-1],step=tickStep(start,stop,count==null?10:count),precision;specifier=formatSpecifier(specifier==null?\",f\":specifier);switch(specifier.type){case\"s\":{var value=Math.max(Math.abs(start),Math.abs(stop));if(specifier.precision==null&&!isNaN(precision=precisionPrefix(step,value)))specifier.precision=precision;return d3.formatPrefix(specifier,value);}case\"\":case\"e\":case\"g\":case\"p\":case\"r\":{if(specifier.precision==null&&!isNaN(precision=precisionRound(step,Math.max(Math.abs(start),Math.abs(stop)))))specifier.precision=precision-(specifier.type===\"e\");break;}case\"f\":case\"%\":{if(specifier.precision==null&&!isNaN(precision=precisionFixed(step)))specifier.precision=precision-(specifier.type===\"%\")*2;break;}}return d3.format(specifier);}function linearish(scale){var domain=scale.domain;scale.ticks=function(count){var d=domain();return ticks(d[0],d[d.length-1],count==null?10:count);};scale.tickFormat=function(count,specifier){return tickFormat(domain(),count,specifier);};scale.nice=function(count){if(count==null)count=10;var d=domain(),i0=0,i1=d.length-1,start=d[i0],stop=d[i1],step;if(stop<start){step=start,start=stop,stop=step;step=i0,i0=i1,i1=step;}step=tickIncrement(start,stop,count);if(step>0){start=Math.floor(start/step)*step;stop=Math.ceil(stop/step)*step;step=tickIncrement(start,stop,count);}else if(step<0){start=Math.ceil(start*step)/step;stop=Math.floor(stop*step)/step;step=tickIncrement(start,stop,count);}if(step>0){d[i0]=Math.floor(start/step)*step;d[i1]=Math.ceil(stop/step)*step;domain(d);}else if(step<0){d[i0]=Math.ceil(start*step)/step;d[i1]=Math.floor(stop*step)/step;domain(d);}return scale;};return scale;}function linear$2(){var scale=continuous(deinterpolateLinear,reinterpolate);scale.copy=function(){return copy(scale,linear$2());};return linearish(scale);}function identity$6(){var domain=[0,1];function scale(x){return+x;}scale.invert=scale;scale.domain=scale.range=function(_){return arguments.length?(domain=map$2.call(_,number$2),scale):domain.slice();};scale.copy=function(){return identity$6().domain(domain);};return linearish(scale);}function nice(domain,interval){domain=domain.slice();var i0=0,i1=domain.length-1,x0=domain[i0],x1=domain[i1],t;if(x1<x0){t=i0,i0=i1,i1=t;t=x0,x0=x1,x1=t;}domain[i0]=interval.floor(x0);domain[i1]=interval.ceil(x1);return domain;}function deinterpolate(a,b){return(b=Math.log(b/a))?function(x){return Math.log(x/a)/b;}:constant$10(b);}function reinterpolate$1(a,b){return a<0?function(t){return-Math.pow(-b,t)*Math.pow(-a,1-t);}:function(t){return Math.pow(b,t)*Math.pow(a,1-t);};}function pow10(x){return isFinite(x)?+(\"1e\"+x):x<0?0:x;}function powp(base){return base===10?pow10:base===Math.E?Math.exp:function(x){return Math.pow(base,x);};}function logp(base){return base===Math.E?Math.log:base===10&&Math.log10||base===2&&Math.log2||(base=Math.log(base),function(x){return Math.log(x)/base;});}function reflect(f){return function(x){return-f(-x);};}function log$1(){var scale=continuous(deinterpolate,reinterpolate$1).domain([1,10]),domain=scale.domain,base=10,logs=logp(10),pows=powp(10);function rescale(){logs=logp(base),pows=powp(base);if(domain()[0]<0)logs=reflect(logs),pows=reflect(pows);return scale;}scale.base=function(_){return arguments.length?(base=+_,rescale()):base;};scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain();};scale.ticks=function(count){var d=domain(),u=d[0],v=d[d.length-1],r;if(r=v<u)i=u,u=v,v=i;var i=logs(u),j=logs(v),p,k,t,n=count==null?10:+count,z=[];if(!(base%1)&&j-i<n){i=Math.round(i)-1,j=Math.round(j)+1;if(u>0)for(;i<j;++i){for(k=1,p=pows(i);k<base;++k){t=p*k;if(t<u)continue;if(t>v)break;z.push(t);}}else for(;i<j;++i){for(k=base-1,p=pows(i);k>=1;--k){t=p*k;if(t<u)continue;if(t>v)break;z.push(t);}}}else{z=ticks(i,j,Math.min(j-i,n)).map(pows);}return r?z.reverse():z;};scale.tickFormat=function(count,specifier){if(specifier==null)specifier=base===10?\".0e\":\",\";if(typeof specifier!==\"function\")specifier=d3.format(specifier);if(count===Infinity)return specifier;if(count==null)count=10;var k=Math.max(1,base*count/scale.ticks().length);// TODO fast estimate?\nreturn function(d){var i=d/pows(Math.round(logs(d)));if(i*base<base-0.5)i*=base;return i<=k?specifier(d):\"\";};};scale.nice=function(){return domain(nice(domain(),{floor:function floor(x){return pows(Math.floor(logs(x)));},ceil:function ceil(x){return pows(Math.ceil(logs(x)));}}));};scale.copy=function(){return copy(scale,log$1().base(base));};return scale;}function raise$1(x,exponent){return x<0?-Math.pow(-x,exponent):Math.pow(x,exponent);}function pow$1(){var exponent=1,scale=continuous(deinterpolate,reinterpolate),domain=scale.domain;function deinterpolate(a,b){return(b=raise$1(b,exponent)-(a=raise$1(a,exponent)))?function(x){return(raise$1(x,exponent)-a)/b;}:constant$10(b);}function reinterpolate(a,b){b=raise$1(b,exponent)-(a=raise$1(a,exponent));return function(t){return raise$1(a+b*t,1/exponent);};}scale.exponent=function(_){return arguments.length?(exponent=+_,domain(domain())):exponent;};scale.copy=function(){return copy(scale,pow$1().exponent(exponent));};return linearish(scale);}function sqrt$1(){return pow$1().exponent(0.5);}function quantile$$1(){var domain=[],range=[],thresholds=[];function rescale(){var i=0,n=Math.max(1,range.length);thresholds=new Array(n-1);while(++i<n){thresholds[i-1]=threshold(domain,i/n);}return scale;}function scale(x){if(!isNaN(x=+x))return range[bisectRight(thresholds,x)];}scale.invertExtent=function(y){var i=range.indexOf(y);return i<0?[NaN,NaN]:[i>0?thresholds[i-1]:domain[0],i<thresholds.length?thresholds[i]:domain[domain.length-1]];};scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[];for(var i=0,n=_.length,d;i<n;++i){if(d=_[i],d!=null&&!isNaN(d=+d))domain.push(d);}domain.sort(ascending);return rescale();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),rescale()):range.slice();};scale.quantiles=function(){return thresholds.slice();};scale.copy=function(){return quantile$$1().domain(domain).range(range);};return scale;}function quantize$1(){var x0=0,x1=1,n=1,domain=[0.5],range=[0,1];function scale(x){if(x<=x)return range[bisectRight(domain,x,0,n)];}function rescale(){var i=-1;domain=new Array(n);while(++i<n){domain[i]=((i+1)*x1-(i-n)*x0)/(n+1);}return scale;}scale.domain=function(_){return arguments.length?(x0=+_[0],x1=+_[1],rescale()):[x0,x1];};scale.range=function(_){return arguments.length?(n=(range=slice$5.call(_)).length-1,rescale()):range.slice();};scale.invertExtent=function(y){var i=range.indexOf(y);return i<0?[NaN,NaN]:i<1?[x0,domain[0]]:i>=n?[domain[n-1],x1]:[domain[i-1],domain[i]];};scale.copy=function(){return quantize$1().domain([x0,x1]).range(range);};return linearish(scale);}function threshold$1(){var domain=[0.5],range=[0,1],n=1;function scale(x){if(x<=x)return range[bisectRight(domain,x,0,n)];}scale.domain=function(_){return arguments.length?(domain=slice$5.call(_),n=Math.min(domain.length,range.length-1),scale):domain.slice();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),n=Math.min(domain.length,range.length-1),scale):range.slice();};scale.invertExtent=function(y){var i=range.indexOf(y);return[domain[i-1],domain[i]];};scale.copy=function(){return threshold$1().domain(domain).range(range);};return scale;}var t0$1=new Date(),t1$1=new Date();function newInterval(floori,offseti,count,field){function interval(date){return floori(date=new Date(+date)),date;}interval.floor=interval;interval.ceil=function(date){return floori(date=new Date(date-1)),offseti(date,1),floori(date),date;};interval.round=function(date){var d0=interval(date),d1=interval.ceil(date);return date-d0<d1-date?d0:d1;};interval.offset=function(date,step){return offseti(date=new Date(+date),step==null?1:Math.floor(step)),date;};interval.range=function(start,stop,step){var range=[],previous;start=interval.ceil(start);step=step==null?1:Math.floor(step);if(!(start<stop)||!(step>0))return range;// also handles Invalid Date\ndo{range.push(previous=new Date(+start)),offseti(start,step),floori(start);}while(previous<start&&start<stop);return range;};interval.filter=function(test){return newInterval(function(date){if(date>=date)while(floori(date),!test(date)){date.setTime(date-1);}},function(date,step){if(date>=date){if(step<0)while(++step<=0){while(offseti(date,-1),!test(date)){}// eslint-disable-line no-empty\n}else while(--step>=0){while(offseti(date,+1),!test(date)){}// eslint-disable-line no-empty\n}}});};if(count){interval.count=function(start,end){t0$1.setTime(+start),t1$1.setTime(+end);floori(t0$1),floori(t1$1);return Math.floor(count(t0$1,t1$1));};interval.every=function(step){step=Math.floor(step);return!isFinite(step)||!(step>0)?null:!(step>1)?interval:interval.filter(field?function(d){return field(d)%step===0;}:function(d){return interval.count(0,d)%step===0;});};}return interval;}var millisecond=newInterval(function(){// noop\n},function(date,step){date.setTime(+date+step);},function(start,end){return end-start;});// An optimized implementation for this simple case.\nmillisecond.every=function(k){k=Math.floor(k);if(!isFinite(k)||!(k>0))return null;if(!(k>1))return millisecond;return newInterval(function(date){date.setTime(Math.floor(date/k)*k);},function(date,step){date.setTime(+date+step*k);},function(start,end){return(end-start)/k;});};var milliseconds=millisecond.range;var durationSecond=1e3;var durationMinute=6e4;var durationHour=36e5;var durationDay=864e5;var durationWeek=6048e5;var second=newInterval(function(date){date.setTime(Math.floor(date/durationSecond)*durationSecond);},function(date,step){date.setTime(+date+step*durationSecond);},function(start,end){return(end-start)/durationSecond;},function(date){return date.getUTCSeconds();});var seconds=second.range;var minute=newInterval(function(date){date.setTime(Math.floor(date/durationMinute)*durationMinute);},function(date,step){date.setTime(+date+step*durationMinute);},function(start,end){return(end-start)/durationMinute;},function(date){return date.getMinutes();});var minutes=minute.range;var hour=newInterval(function(date){var offset=date.getTimezoneOffset()*durationMinute%durationHour;if(offset<0)offset+=durationHour;date.setTime(Math.floor((+date-offset)/durationHour)*durationHour+offset);},function(date,step){date.setTime(+date+step*durationHour);},function(start,end){return(end-start)/durationHour;},function(date){return date.getHours();});var hours=hour.range;var day=newInterval(function(date){date.setHours(0,0,0,0);},function(date,step){date.setDate(date.getDate()+step);},function(start,end){return(end-start-(end.getTimezoneOffset()-start.getTimezoneOffset())*durationMinute)/durationDay;},function(date){return date.getDate()-1;});var days=day.range;function weekday(i){return newInterval(function(date){date.setDate(date.getDate()-(date.getDay()+7-i)%7);date.setHours(0,0,0,0);},function(date,step){date.setDate(date.getDate()+step*7);},function(start,end){return(end-start-(end.getTimezoneOffset()-start.getTimezoneOffset())*durationMinute)/durationWeek;});}var sunday=weekday(0);var monday=weekday(1);var tuesday=weekday(2);var wednesday=weekday(3);var thursday=weekday(4);var friday=weekday(5);var saturday=weekday(6);var sundays=sunday.range;var mondays=monday.range;var tuesdays=tuesday.range;var wednesdays=wednesday.range;var thursdays=thursday.range;var fridays=friday.range;var saturdays=saturday.range;var month=newInterval(function(date){date.setDate(1);date.setHours(0,0,0,0);},function(date,step){date.setMonth(date.getMonth()+step);},function(start,end){return end.getMonth()-start.getMonth()+(end.getFullYear()-start.getFullYear())*12;},function(date){return date.getMonth();});var months=month.range;var year=newInterval(function(date){date.setMonth(0,1);date.setHours(0,0,0,0);},function(date,step){date.setFullYear(date.getFullYear()+step);},function(start,end){return end.getFullYear()-start.getFullYear();},function(date){return date.getFullYear();});// An optimized implementation for this simple case.\nyear.every=function(k){return!isFinite(k=Math.floor(k))||!(k>0)?null:newInterval(function(date){date.setFullYear(Math.floor(date.getFullYear()/k)*k);date.setMonth(0,1);date.setHours(0,0,0,0);},function(date,step){date.setFullYear(date.getFullYear()+step*k);});};var years=year.range;var utcMinute=newInterval(function(date){date.setUTCSeconds(0,0);},function(date,step){date.setTime(+date+step*durationMinute);},function(start,end){return(end-start)/durationMinute;},function(date){return date.getUTCMinutes();});var utcMinutes=utcMinute.range;var utcHour=newInterval(function(date){date.setUTCMinutes(0,0,0);},function(date,step){date.setTime(+date+step*durationHour);},function(start,end){return(end-start)/durationHour;},function(date){return date.getUTCHours();});var utcHours=utcHour.range;var utcDay=newInterval(function(date){date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCDate(date.getUTCDate()+step);},function(start,end){return(end-start)/durationDay;},function(date){return date.getUTCDate()-1;});var utcDays=utcDay.range;function utcWeekday(i){return newInterval(function(date){date.setUTCDate(date.getUTCDate()-(date.getUTCDay()+7-i)%7);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCDate(date.getUTCDate()+step*7);},function(start,end){return(end-start)/durationWeek;});}var utcSunday=utcWeekday(0);var utcMonday=utcWeekday(1);var utcTuesday=utcWeekday(2);var utcWednesday=utcWeekday(3);var utcThursday=utcWeekday(4);var utcFriday=utcWeekday(5);var utcSaturday=utcWeekday(6);var utcSundays=utcSunday.range;var utcMondays=utcMonday.range;var utcTuesdays=utcTuesday.range;var utcWednesdays=utcWednesday.range;var utcThursdays=utcThursday.range;var utcFridays=utcFriday.range;var utcSaturdays=utcSaturday.range;var utcMonth=newInterval(function(date){date.setUTCDate(1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCMonth(date.getUTCMonth()+step);},function(start,end){return end.getUTCMonth()-start.getUTCMonth()+(end.getUTCFullYear()-start.getUTCFullYear())*12;},function(date){return date.getUTCMonth();});var utcMonths=utcMonth.range;var utcYear=newInterval(function(date){date.setUTCMonth(0,1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCFullYear(date.getUTCFullYear()+step);},function(start,end){return end.getUTCFullYear()-start.getUTCFullYear();},function(date){return date.getUTCFullYear();});// An optimized implementation for this simple case.\nutcYear.every=function(k){return!isFinite(k=Math.floor(k))||!(k>0)?null:newInterval(function(date){date.setUTCFullYear(Math.floor(date.getUTCFullYear()/k)*k);date.setUTCMonth(0,1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCFullYear(date.getUTCFullYear()+step*k);});};var utcYears=utcYear.range;function localDate(d){if(0<=d.y&&d.y<100){var date=new Date(-1,d.m,d.d,d.H,d.M,d.S,d.L);date.setFullYear(d.y);return date;}return new Date(d.y,d.m,d.d,d.H,d.M,d.S,d.L);}function utcDate(d){if(0<=d.y&&d.y<100){var date=new Date(Date.UTC(-1,d.m,d.d,d.H,d.M,d.S,d.L));date.setUTCFullYear(d.y);return date;}return new Date(Date.UTC(d.y,d.m,d.d,d.H,d.M,d.S,d.L));}function newYear(y){return{y:y,m:0,d:1,H:0,M:0,S:0,L:0};}function formatLocale$1(locale){var locale_dateTime=locale.dateTime,locale_date=locale.date,locale_time=locale.time,locale_periods=locale.periods,locale_weekdays=locale.days,locale_shortWeekdays=locale.shortDays,locale_months=locale.months,locale_shortMonths=locale.shortMonths;var periodRe=formatRe(locale_periods),periodLookup=formatLookup(locale_periods),weekdayRe=formatRe(locale_weekdays),weekdayLookup=formatLookup(locale_weekdays),shortWeekdayRe=formatRe(locale_shortWeekdays),shortWeekdayLookup=formatLookup(locale_shortWeekdays),monthRe=formatRe(locale_months),monthLookup=formatLookup(locale_months),shortMonthRe=formatRe(locale_shortMonths),shortMonthLookup=formatLookup(locale_shortMonths);var formats={\"a\":formatShortWeekday,\"A\":formatWeekday,\"b\":formatShortMonth,\"B\":formatMonth,\"c\":null,\"d\":formatDayOfMonth,\"e\":formatDayOfMonth,\"f\":formatMicroseconds,\"H\":formatHour24,\"I\":formatHour12,\"j\":formatDayOfYear,\"L\":formatMilliseconds,\"m\":formatMonthNumber,\"M\":formatMinutes,\"p\":formatPeriod,\"Q\":formatUnixTimestamp,\"s\":formatUnixTimestampSeconds,\"S\":formatSeconds,\"u\":formatWeekdayNumberMonday,\"U\":formatWeekNumberSunday,\"V\":formatWeekNumberISO,\"w\":formatWeekdayNumberSunday,\"W\":formatWeekNumberMonday,\"x\":null,\"X\":null,\"y\":formatYear,\"Y\":formatFullYear,\"Z\":formatZone,\"%\":formatLiteralPercent};var utcFormats={\"a\":formatUTCShortWeekday,\"A\":formatUTCWeekday,\"b\":formatUTCShortMonth,\"B\":formatUTCMonth,\"c\":null,\"d\":formatUTCDayOfMonth,\"e\":formatUTCDayOfMonth,\"f\":formatUTCMicroseconds,\"H\":formatUTCHour24,\"I\":formatUTCHour12,\"j\":formatUTCDayOfYear,\"L\":formatUTCMilliseconds,\"m\":formatUTCMonthNumber,\"M\":formatUTCMinutes,\"p\":formatUTCPeriod,\"Q\":formatUnixTimestamp,\"s\":formatUnixTimestampSeconds,\"S\":formatUTCSeconds,\"u\":formatUTCWeekdayNumberMonday,\"U\":formatUTCWeekNumberSunday,\"V\":formatUTCWeekNumberISO,\"w\":formatUTCWeekdayNumberSunday,\"W\":formatUTCWeekNumberMonday,\"x\":null,\"X\":null,\"y\":formatUTCYear,\"Y\":formatUTCFullYear,\"Z\":formatUTCZone,\"%\":formatLiteralPercent};var parses={\"a\":parseShortWeekday,\"A\":parseWeekday,\"b\":parseShortMonth,\"B\":parseMonth,\"c\":parseLocaleDateTime,\"d\":parseDayOfMonth,\"e\":parseDayOfMonth,\"f\":parseMicroseconds,\"H\":parseHour24,\"I\":parseHour24,\"j\":parseDayOfYear,\"L\":parseMilliseconds,\"m\":parseMonthNumber,\"M\":parseMinutes,\"p\":parsePeriod,\"Q\":parseUnixTimestamp,\"s\":parseUnixTimestampSeconds,\"S\":parseSeconds,\"u\":parseWeekdayNumberMonday,\"U\":parseWeekNumberSunday,\"V\":parseWeekNumberISO,\"w\":parseWeekdayNumberSunday,\"W\":parseWeekNumberMonday,\"x\":parseLocaleDate,\"X\":parseLocaleTime,\"y\":parseYear,\"Y\":parseFullYear,\"Z\":parseZone,\"%\":parseLiteralPercent};// These recursive directive definitions must be deferred.\nformats.x=newFormat(locale_date,formats);formats.X=newFormat(locale_time,formats);formats.c=newFormat(locale_dateTime,formats);utcFormats.x=newFormat(locale_date,utcFormats);utcFormats.X=newFormat(locale_time,utcFormats);utcFormats.c=newFormat(locale_dateTime,utcFormats);function newFormat(specifier,formats){return function(date){var string=[],i=-1,j=0,n=specifier.length,c,pad,format;if(!(date instanceof Date))date=new Date(+date);while(++i<n){if(specifier.charCodeAt(i)===37){string.push(specifier.slice(j,i));if((pad=pads[c=specifier.charAt(++i)])!=null)c=specifier.charAt(++i);else pad=c===\"e\"?\" \":\"0\";if(format=formats[c])c=format(date,pad);string.push(c);j=i+1;}}string.push(specifier.slice(j,i));return string.join(\"\");};}function newParse(specifier,newDate){return function(string){var d=newYear(1900),i=parseSpecifier(d,specifier,string+=\"\",0),week,day$$1;if(i!=string.length)return null;// If a UNIX timestamp is specified, return it.\nif(\"Q\"in d)return new Date(d.Q);// The am-pm flag is 0 for AM, and 1 for PM.\nif(\"p\"in d)d.H=d.H%12+d.p*12;// Convert day-of-week and week-of-year to day-of-year.\nif(\"V\"in d){if(d.V<1||d.V>53)return null;if(!(\"w\"in d))d.w=1;if(\"Z\"in d){week=utcDate(newYear(d.y)),day$$1=week.getUTCDay();week=day$$1>4||day$$1===0?utcMonday.ceil(week):utcMonday(week);week=utcDay.offset(week,(d.V-1)*7);d.y=week.getUTCFullYear();d.m=week.getUTCMonth();d.d=week.getUTCDate()+(d.w+6)%7;}else{week=newDate(newYear(d.y)),day$$1=week.getDay();week=day$$1>4||day$$1===0?monday.ceil(week):monday(week);week=day.offset(week,(d.V-1)*7);d.y=week.getFullYear();d.m=week.getMonth();d.d=week.getDate()+(d.w+6)%7;}}else if(\"W\"in d||\"U\"in d){if(!(\"w\"in d))d.w=\"u\"in d?d.u%7:\"W\"in d?1:0;day$$1=\"Z\"in d?utcDate(newYear(d.y)).getUTCDay():newDate(newYear(d.y)).getDay();d.m=0;d.d=\"W\"in d?(d.w+6)%7+d.W*7-(day$$1+5)%7:d.w+d.U*7-(day$$1+6)%7;}// If a time zone is specified, all fields are interpreted as UTC and then\n// offset according to the specified time zone.\nif(\"Z\"in d){d.H+=d.Z/100|0;d.M+=d.Z%100;return utcDate(d);}// Otherwise, all fields are in local time.\nreturn newDate(d);};}function parseSpecifier(d,specifier,string,j){var i=0,n=specifier.length,m=string.length,c,parse;while(i<n){if(j>=m)return-1;c=specifier.charCodeAt(i++);if(c===37){c=specifier.charAt(i++);parse=parses[c in pads?specifier.charAt(i++):c];if(!parse||(j=parse(d,string,j))<0)return-1;}else if(c!=string.charCodeAt(j++)){return-1;}}return j;}function parsePeriod(d,string,i){var n=periodRe.exec(string.slice(i));return n?(d.p=periodLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseShortWeekday(d,string,i){var n=shortWeekdayRe.exec(string.slice(i));return n?(d.w=shortWeekdayLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseWeekday(d,string,i){var n=weekdayRe.exec(string.slice(i));return n?(d.w=weekdayLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseShortMonth(d,string,i){var n=shortMonthRe.exec(string.slice(i));return n?(d.m=shortMonthLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseMonth(d,string,i){var n=monthRe.exec(string.slice(i));return n?(d.m=monthLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseLocaleDateTime(d,string,i){return parseSpecifier(d,locale_dateTime,string,i);}function parseLocaleDate(d,string,i){return parseSpecifier(d,locale_date,string,i);}function parseLocaleTime(d,string,i){return parseSpecifier(d,locale_time,string,i);}function formatShortWeekday(d){return locale_shortWeekdays[d.getDay()];}function formatWeekday(d){return locale_weekdays[d.getDay()];}function formatShortMonth(d){return locale_shortMonths[d.getMonth()];}function formatMonth(d){return locale_months[d.getMonth()];}function formatPeriod(d){return locale_periods[+(d.getHours()>=12)];}function formatUTCShortWeekday(d){return locale_shortWeekdays[d.getUTCDay()];}function formatUTCWeekday(d){return locale_weekdays[d.getUTCDay()];}function formatUTCShortMonth(d){return locale_shortMonths[d.getUTCMonth()];}function formatUTCMonth(d){return locale_months[d.getUTCMonth()];}function formatUTCPeriod(d){return locale_periods[+(d.getUTCHours()>=12)];}return{format:function format(specifier){var f=newFormat(specifier+=\"\",formats);f.toString=function(){return specifier;};return f;},parse:function parse(specifier){var p=newParse(specifier+=\"\",localDate);p.toString=function(){return specifier;};return p;},utcFormat:function utcFormat(specifier){var f=newFormat(specifier+=\"\",utcFormats);f.toString=function(){return specifier;};return f;},utcParse:function utcParse(specifier){var p=newParse(specifier,utcDate);p.toString=function(){return specifier;};return p;}};}var pads={\"-\":\"\",\"_\":\" \",\"0\":\"0\"},numberRe=/^\\s*\\d+/,// note: ignores next directive\npercentRe=/^%/,requoteRe=/[\\\\^$*+?|[\\]().{}]/g;function pad(value,fill,width){var sign=value<0?\"-\":\"\",string=(sign?-value:value)+\"\",length=string.length;return sign+(length<width?new Array(width-length+1).join(fill)+string:string);}function requote(s){return s.replace(requoteRe,\"\\\\$&\");}function formatRe(names){return new RegExp(\"^(?:\"+names.map(requote).join(\"|\")+\")\",\"i\");}function formatLookup(names){var map={},i=-1,n=names.length;while(++i<n){map[names[i].toLowerCase()]=i;}return map;}function parseWeekdayNumberSunday(d,string,i){var n=numberRe.exec(string.slice(i,i+1));return n?(d.w=+n[0],i+n[0].length):-1;}function parseWeekdayNumberMonday(d,string,i){var n=numberRe.exec(string.slice(i,i+1));return n?(d.u=+n[0],i+n[0].length):-1;}function parseWeekNumberSunday(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.U=+n[0],i+n[0].length):-1;}function parseWeekNumberISO(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.V=+n[0],i+n[0].length):-1;}function parseWeekNumberMonday(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.W=+n[0],i+n[0].length):-1;}function parseFullYear(d,string,i){var n=numberRe.exec(string.slice(i,i+4));return n?(d.y=+n[0],i+n[0].length):-1;}function parseYear(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.y=+n[0]+(+n[0]>68?1900:2000),i+n[0].length):-1;}function parseZone(d,string,i){var n=/^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i,i+6));return n?(d.Z=n[1]?0:-(n[2]+(n[3]||\"00\")),i+n[0].length):-1;}function parseMonthNumber(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.m=n[0]-1,i+n[0].length):-1;}function parseDayOfMonth(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.d=+n[0],i+n[0].length):-1;}function parseDayOfYear(d,string,i){var n=numberRe.exec(string.slice(i,i+3));return n?(d.m=0,d.d=+n[0],i+n[0].length):-1;}function parseHour24(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.H=+n[0],i+n[0].length):-1;}function parseMinutes(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.M=+n[0],i+n[0].length):-1;}function parseSeconds(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.S=+n[0],i+n[0].length):-1;}function parseMilliseconds(d,string,i){var n=numberRe.exec(string.slice(i,i+3));return n?(d.L=+n[0],i+n[0].length):-1;}function parseMicroseconds(d,string,i){var n=numberRe.exec(string.slice(i,i+6));return n?(d.L=Math.floor(n[0]/1000),i+n[0].length):-1;}function parseLiteralPercent(d,string,i){var n=percentRe.exec(string.slice(i,i+1));return n?i+n[0].length:-1;}function parseUnixTimestamp(d,string,i){var n=numberRe.exec(string.slice(i));return n?(d.Q=+n[0],i+n[0].length):-1;}function parseUnixTimestampSeconds(d,string,i){var n=numberRe.exec(string.slice(i));return n?(d.Q=+n[0]*1000,i+n[0].length):-1;}function formatDayOfMonth(d,p){return pad(d.getDate(),p,2);}function formatHour24(d,p){return pad(d.getHours(),p,2);}function formatHour12(d,p){return pad(d.getHours()%12||12,p,2);}function formatDayOfYear(d,p){return pad(1+day.count(year(d),d),p,3);}function formatMilliseconds(d,p){return pad(d.getMilliseconds(),p,3);}function formatMicroseconds(d,p){return formatMilliseconds(d,p)+\"000\";}function formatMonthNumber(d,p){return pad(d.getMonth()+1,p,2);}function formatMinutes(d,p){return pad(d.getMinutes(),p,2);}function formatSeconds(d,p){return pad(d.getSeconds(),p,2);}function formatWeekdayNumberMonday(d){var day$$1=d.getDay();return day$$1===0?7:day$$1;}function formatWeekNumberSunday(d,p){return pad(sunday.count(year(d),d),p,2);}function formatWeekNumberISO(d,p){var day$$1=d.getDay();d=day$$1>=4||day$$1===0?thursday(d):thursday.ceil(d);return pad(thursday.count(year(d),d)+(year(d).getDay()===4),p,2);}function formatWeekdayNumberSunday(d){return d.getDay();}function formatWeekNumberMonday(d,p){return pad(monday.count(year(d),d),p,2);}function formatYear(d,p){return pad(d.getFullYear()%100,p,2);}function formatFullYear(d,p){return pad(d.getFullYear()%10000,p,4);}function formatZone(d){var z=d.getTimezoneOffset();return(z>0?\"-\":(z*=-1,\"+\"))+pad(z/60|0,\"0\",2)+pad(z%60,\"0\",2);}function formatUTCDayOfMonth(d,p){return pad(d.getUTCDate(),p,2);}function formatUTCHour24(d,p){return pad(d.getUTCHours(),p,2);}function formatUTCHour12(d,p){return pad(d.getUTCHours()%12||12,p,2);}function formatUTCDayOfYear(d,p){return pad(1+utcDay.count(utcYear(d),d),p,3);}function formatUTCMilliseconds(d,p){return pad(d.getUTCMilliseconds(),p,3);}function formatUTCMicroseconds(d,p){return formatUTCMilliseconds(d,p)+\"000\";}function formatUTCMonthNumber(d,p){return pad(d.getUTCMonth()+1,p,2);}function formatUTCMinutes(d,p){return pad(d.getUTCMinutes(),p,2);}function formatUTCSeconds(d,p){return pad(d.getUTCSeconds(),p,2);}function formatUTCWeekdayNumberMonday(d){var dow=d.getUTCDay();return dow===0?7:dow;}function formatUTCWeekNumberSunday(d,p){return pad(utcSunday.count(utcYear(d),d),p,2);}function formatUTCWeekNumberISO(d,p){var day$$1=d.getUTCDay();d=day$$1>=4||day$$1===0?utcThursday(d):utcThursday.ceil(d);return pad(utcThursday.count(utcYear(d),d)+(utcYear(d).getUTCDay()===4),p,2);}function formatUTCWeekdayNumberSunday(d){return d.getUTCDay();}function formatUTCWeekNumberMonday(d,p){return pad(utcMonday.count(utcYear(d),d),p,2);}function formatUTCYear(d,p){return pad(d.getUTCFullYear()%100,p,2);}function formatUTCFullYear(d,p){return pad(d.getUTCFullYear()%10000,p,4);}function formatUTCZone(){return\"+0000\";}function formatLiteralPercent(){return\"%\";}function formatUnixTimestamp(d){return+d;}function formatUnixTimestampSeconds(d){return Math.floor(+d/1000);}var locale$1;defaultLocale$1({dateTime:\"%x, %X\",date:\"%-m/%-d/%Y\",time:\"%-I:%M:%S %p\",periods:[\"AM\",\"PM\"],days:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],shortDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],months:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],shortMonths:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]});function defaultLocale$1(definition){locale$1=formatLocale$1(definition);d3.timeFormat=locale$1.format;d3.timeParse=locale$1.parse;d3.utcFormat=locale$1.utcFormat;d3.utcParse=locale$1.utcParse;return locale$1;}var isoSpecifier=\"%Y-%m-%dT%H:%M:%S.%LZ\";function formatIsoNative(date){return date.toISOString();}var formatIso=Date.prototype.toISOString?formatIsoNative:d3.utcFormat(isoSpecifier);function parseIsoNative(string){var date=new Date(string);return isNaN(date)?null:date;}var parseIso=+new Date(\"2000-01-01T00:00:00.000Z\")?parseIsoNative:d3.utcParse(isoSpecifier);var durationSecond$1=1000,durationMinute$1=durationSecond$1*60,durationHour$1=durationMinute$1*60,durationDay$1=durationHour$1*24,durationWeek$1=durationDay$1*7,durationMonth=durationDay$1*30,durationYear=durationDay$1*365;function date$1(t){return new Date(t);}function number$3(t){return t instanceof Date?+t:+new Date(+t);}function calendar(year$$1,month$$1,week,day$$1,hour$$1,minute$$1,second$$1,millisecond$$1,format){var scale=continuous(deinterpolateLinear,reinterpolate),invert=scale.invert,domain=scale.domain;var formatMillisecond=format(\".%L\"),formatSecond=format(\":%S\"),formatMinute=format(\"%I:%M\"),formatHour=format(\"%I %p\"),formatDay=format(\"%a %d\"),formatWeek=format(\"%b %d\"),formatMonth=format(\"%B\"),formatYear=format(\"%Y\");var tickIntervals=[[second$$1,1,durationSecond$1],[second$$1,5,5*durationSecond$1],[second$$1,15,15*durationSecond$1],[second$$1,30,30*durationSecond$1],[minute$$1,1,durationMinute$1],[minute$$1,5,5*durationMinute$1],[minute$$1,15,15*durationMinute$1],[minute$$1,30,30*durationMinute$1],[hour$$1,1,durationHour$1],[hour$$1,3,3*durationHour$1],[hour$$1,6,6*durationHour$1],[hour$$1,12,12*durationHour$1],[day$$1,1,durationDay$1],[day$$1,2,2*durationDay$1],[week,1,durationWeek$1],[month$$1,1,durationMonth],[month$$1,3,3*durationMonth],[year$$1,1,durationYear]];function tickFormat(date$$1){return(second$$1(date$$1)<date$$1?formatMillisecond:minute$$1(date$$1)<date$$1?formatSecond:hour$$1(date$$1)<date$$1?formatMinute:day$$1(date$$1)<date$$1?formatHour:month$$1(date$$1)<date$$1?week(date$$1)<date$$1?formatDay:formatWeek:year$$1(date$$1)<date$$1?formatMonth:formatYear)(date$$1);}function tickInterval(interval,start,stop,step){if(interval==null)interval=10;// If a desired tick count is specified, pick a reasonable tick interval\n// based on the extent of the domain and a rough estimate of tick size.\n// Otherwise, assume interval is already a time interval and use it.\nif(typeof interval===\"number\"){var target=Math.abs(stop-start)/interval,i=bisector(function(i){return i[2];}).right(tickIntervals,target);if(i===tickIntervals.length){step=tickStep(start/durationYear,stop/durationYear,interval);interval=year$$1;}else if(i){i=tickIntervals[target/tickIntervals[i-1][2]<tickIntervals[i][2]/target?i-1:i];step=i[1];interval=i[0];}else{step=Math.max(tickStep(start,stop,interval),1);interval=millisecond$$1;}}return step==null?interval:interval.every(step);}scale.invert=function(y){return new Date(invert(y));};scale.domain=function(_){return arguments.length?domain(map$2.call(_,number$3)):domain().map(date$1);};scale.ticks=function(interval,step){var d=domain(),t0=d[0],t1=d[d.length-1],r=t1<t0,t;if(r)t=t0,t0=t1,t1=t;t=tickInterval(interval,t0,t1,step);t=t?t.range(t0,t1+1):[];// inclusive stop\nreturn r?t.reverse():t;};scale.tickFormat=function(count,specifier){return specifier==null?tickFormat:format(specifier);};scale.nice=function(interval,step){var d=domain();return(interval=tickInterval(interval,d[0],d[d.length-1],step))?domain(nice(d,interval)):scale;};scale.copy=function(){return copy(scale,calendar(year$$1,month$$1,week,day$$1,hour$$1,minute$$1,second$$1,millisecond$$1,format));};return scale;}function time(){return calendar(year,month,sunday,day,hour,minute,second,millisecond,d3.timeFormat).domain([new Date(2000,0,1),new Date(2000,0,2)]);}function utcTime(){return calendar(utcYear,utcMonth,utcSunday,utcDay,utcHour,utcMinute,second,millisecond,d3.utcFormat).domain([Date.UTC(2000,0,1),Date.UTC(2000,0,2)]);}function sequential(interpolator){var x0=0,x1=1,clamp=false;function scale(x){var t=(x-x0)/(x1-x0);return interpolator(clamp?Math.max(0,Math.min(1,t)):t);}scale.domain=function(_){return arguments.length?(x0=+_[0],x1=+_[1],scale):[x0,x1];};scale.clamp=function(_){return arguments.length?(clamp=!!_,scale):clamp;};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator;};scale.copy=function(){return sequential(interpolator).domain([x0,x1]).clamp(clamp);};return linearish(scale);}function colors(specifier){var n=specifier.length/6|0,colors=new Array(n),i=0;while(i<n){colors[i]=\"#\"+specifier.slice(i*6,++i*6);}return colors;}var category10=colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");var Accent=colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");var Dark2=colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");var Paired=colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");var Pastel1=colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");var Pastel2=colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");var Set1=colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");var Set2=colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");var Set3=colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");function ramp(scheme){return rgbBasis(scheme[scheme.length-1]);}var scheme=new Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(colors);var BrBG=ramp(scheme);var scheme$1=new Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(colors);var PRGn=ramp(scheme$1);var scheme$2=new Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(colors);var PiYG=ramp(scheme$2);var scheme$3=new Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(colors);var PuOr=ramp(scheme$3);var scheme$4=new Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(colors);var RdBu=ramp(scheme$4);var scheme$5=new Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(colors);var RdGy=ramp(scheme$5);var scheme$6=new Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(colors);var RdYlBu=ramp(scheme$6);var scheme$7=new Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(colors);var RdYlGn=ramp(scheme$7);var scheme$8=new Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(colors);var Spectral=ramp(scheme$8);var scheme$9=new Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(colors);var BuGn=ramp(scheme$9);var scheme$10=new Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(colors);var BuPu=ramp(scheme$10);var scheme$11=new Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(colors);var GnBu=ramp(scheme$11);var scheme$12=new Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(colors);var OrRd=ramp(scheme$12);var scheme$13=new Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(colors);var PuBuGn=ramp(scheme$13);var scheme$14=new Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(colors);var PuBu=ramp(scheme$14);var scheme$15=new Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(colors);var PuRd=ramp(scheme$15);var scheme$16=new Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(colors);var RdPu=ramp(scheme$16);var scheme$17=new Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(colors);var YlGnBu=ramp(scheme$17);var scheme$18=new Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(colors);var YlGn=ramp(scheme$18);var scheme$19=new Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(colors);var YlOrBr=ramp(scheme$19);var scheme$20=new Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(colors);var YlOrRd=ramp(scheme$20);var scheme$21=new Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(colors);var Blues=ramp(scheme$21);var scheme$22=new Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(colors);var Greens=ramp(scheme$22);var scheme$23=new Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(colors);var Greys=ramp(scheme$23);var scheme$24=new Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(colors);var Purples=ramp(scheme$24);var scheme$25=new Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(colors);var Reds=ramp(scheme$25);var scheme$26=new Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(colors);var Oranges=ramp(scheme$26);var cubehelix$3=cubehelixLong(cubehelix(300,0.5,0.0),cubehelix(-240,0.5,1.0));var warm=cubehelixLong(cubehelix(-100,0.75,0.35),cubehelix(80,1.50,0.8));var cool=cubehelixLong(cubehelix(260,0.75,0.35),cubehelix(80,1.50,0.8));var c=cubehelix();function rainbow(t){if(t<0||t>1)t-=Math.floor(t);var ts=Math.abs(t-0.5);c.h=360*t-100;c.s=1.5-1.5*ts;c.l=0.8-0.9*ts;return c+\"\";}var c$1=rgb(),pi_1_3=Math.PI/3,pi_2_3=Math.PI*2/3;function sinebow(t){var x;t=(0.5-t)*Math.PI;c$1.r=255*(x=Math.sin(t))*x;c$1.g=255*(x=Math.sin(t+pi_1_3))*x;c$1.b=255*(x=Math.sin(t+pi_2_3))*x;return c$1+\"\";}function ramp$1(range){var n=range.length;return function(t){return range[Math.max(0,Math.min(n-1,Math.floor(t*n)))];};}var viridis=ramp$1(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));var magma=ramp$1(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));var inferno=ramp$1(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));var plasma=ramp$1(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));function constant$11(x){return function constant(){return x;};}var abs$1=Math.abs;var atan2$1=Math.atan2;var cos$2=Math.cos;var max$2=Math.max;var min$1=Math.min;var sin$2=Math.sin;var sqrt$2=Math.sqrt;var epsilon$3=1e-12;var pi$4=Math.PI;var halfPi$3=pi$4/2;var tau$4=2*pi$4;function acos$1(x){return x>1?0:x<-1?pi$4:Math.acos(x);}function asin$1(x){return x>=1?halfPi$3:x<=-1?-halfPi$3:Math.asin(x);}function arcInnerRadius(d){return d.innerRadius;}function arcOuterRadius(d){return d.outerRadius;}function arcStartAngle(d){return d.startAngle;}function arcEndAngle(d){return d.endAngle;}function arcPadAngle(d){return d&&d.padAngle;// Note: optional!\n}function intersect(x0,y0,x1,y1,x2,y2,x3,y3){var x10=x1-x0,y10=y1-y0,x32=x3-x2,y32=y3-y2,t=(x32*(y0-y2)-y32*(x0-x2))/(y32*x10-x32*y10);return[x0+t*x10,y0+t*y10];}// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0,y0,x1,y1,r1,rc,cw){var x01=x0-x1,y01=y0-y1,lo=(cw?rc:-rc)/sqrt$2(x01*x01+y01*y01),ox=lo*y01,oy=-lo*x01,x11=x0+ox,y11=y0+oy,x10=x1+ox,y10=y1+oy,x00=(x11+x10)/2,y00=(y11+y10)/2,dx=x10-x11,dy=y10-y11,d2=dx*dx+dy*dy,r=r1-rc,D=x11*y10-x10*y11,d=(dy<0?-1:1)*sqrt$2(max$2(0,r*r*d2-D*D)),cx0=(D*dy-dx*d)/d2,cy0=(-D*dx-dy*d)/d2,cx1=(D*dy+dx*d)/d2,cy1=(-D*dx+dy*d)/d2,dx0=cx0-x00,dy0=cy0-y00,dx1=cx1-x00,dy1=cy1-y00;// Pick the closer of the two intersection points.\n// TODO Is there a faster way to determine which intersection to use?\nif(dx0*dx0+dy0*dy0>dx1*dx1+dy1*dy1)cx0=cx1,cy0=cy1;return{cx:cx0,cy:cy0,x01:-ox,y01:-oy,x11:cx0*(r1/r-1),y11:cy0*(r1/r-1)};}function arc(){var innerRadius=arcInnerRadius,outerRadius=arcOuterRadius,cornerRadius=constant$11(0),padRadius=null,startAngle=arcStartAngle,endAngle=arcEndAngle,padAngle=arcPadAngle,context=null;function arc(){var buffer,r,r0=+innerRadius.apply(this,arguments),r1=+outerRadius.apply(this,arguments),a0=startAngle.apply(this,arguments)-halfPi$3,a1=endAngle.apply(this,arguments)-halfPi$3,da=abs$1(a1-a0),cw=a1>a0;if(!context)context=buffer=path();// Ensure that the outer radius is always larger than the inner radius.\nif(r1<r0)r=r1,r1=r0,r0=r;// Is it a point?\nif(!(r1>epsilon$3))context.moveTo(0,0);// Or is it a circle or annulus?\nelse if(da>tau$4-epsilon$3){context.moveTo(r1*cos$2(a0),r1*sin$2(a0));context.arc(0,0,r1,a0,a1,!cw);if(r0>epsilon$3){context.moveTo(r0*cos$2(a1),r0*sin$2(a1));context.arc(0,0,r0,a1,a0,cw);}}// Or is it a circular or annular sector?\nelse{var a01=a0,a11=a1,a00=a0,a10=a1,da0=da,da1=da,ap=padAngle.apply(this,arguments)/2,rp=ap>epsilon$3&&(padRadius?+padRadius.apply(this,arguments):sqrt$2(r0*r0+r1*r1)),rc=min$1(abs$1(r1-r0)/2,+cornerRadius.apply(this,arguments)),rc0=rc,rc1=rc,t0,t1;// Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\nif(rp>epsilon$3){var p0=asin$1(rp/r0*sin$2(ap)),p1=asin$1(rp/r1*sin$2(ap));if((da0-=p0*2)>epsilon$3)p0*=cw?1:-1,a00+=p0,a10-=p0;else da0=0,a00=a10=(a0+a1)/2;if((da1-=p1*2)>epsilon$3)p1*=cw?1:-1,a01+=p1,a11-=p1;else da1=0,a01=a11=(a0+a1)/2;}var x01=r1*cos$2(a01),y01=r1*sin$2(a01),x10=r0*cos$2(a10),y10=r0*sin$2(a10);// Apply rounded corners?\nif(rc>epsilon$3){var x11=r1*cos$2(a11),y11=r1*sin$2(a11),x00=r0*cos$2(a00),y00=r0*sin$2(a00);// Restrict the corner radius according to the sector angle.\nif(da<pi$4){var oc=da0>epsilon$3?intersect(x01,y01,x00,y00,x11,y11,x10,y10):[x10,y10],ax=x01-oc[0],ay=y01-oc[1],bx=x11-oc[0],by=y11-oc[1],kc=1/sin$2(acos$1((ax*bx+ay*by)/(sqrt$2(ax*ax+ay*ay)*sqrt$2(bx*bx+by*by)))/2),lc=sqrt$2(oc[0]*oc[0]+oc[1]*oc[1]);rc0=min$1(rc,(r0-lc)/(kc-1));rc1=min$1(rc,(r1-lc)/(kc+1));}}// Is the sector collapsed to a line?\nif(!(da1>epsilon$3))context.moveTo(x01,y01);// Does the sector’s outer ring have rounded corners?\nelse if(rc1>epsilon$3){t0=cornerTangents(x00,y00,x01,y01,r1,rc1,cw);t1=cornerTangents(x11,y11,x10,y10,r1,rc1,cw);context.moveTo(t0.cx+t0.x01,t0.cy+t0.y01);// Have the corners merged?\nif(rc1<rc)context.arc(t0.cx,t0.cy,rc1,atan2$1(t0.y01,t0.x01),atan2$1(t1.y01,t1.x01),!cw);// Otherwise, draw the two corners and the ring.\nelse{context.arc(t0.cx,t0.cy,rc1,atan2$1(t0.y01,t0.x01),atan2$1(t0.y11,t0.x11),!cw);context.arc(0,0,r1,atan2$1(t0.cy+t0.y11,t0.cx+t0.x11),atan2$1(t1.cy+t1.y11,t1.cx+t1.x11),!cw);context.arc(t1.cx,t1.cy,rc1,atan2$1(t1.y11,t1.x11),atan2$1(t1.y01,t1.x01),!cw);}}// Or is the outer ring just a circular arc?\nelse context.moveTo(x01,y01),context.arc(0,0,r1,a01,a11,!cw);// Is there no inner ring, and it’s a circular sector?\n// Or perhaps it’s an annular sector collapsed due to padding?\nif(!(r0>epsilon$3)||!(da0>epsilon$3))context.lineTo(x10,y10);// Does the sector’s inner ring (or point) have rounded corners?\nelse if(rc0>epsilon$3){t0=cornerTangents(x10,y10,x11,y11,r0,-rc0,cw);t1=cornerTangents(x01,y01,x00,y00,r0,-rc0,cw);context.lineTo(t0.cx+t0.x01,t0.cy+t0.y01);// Have the corners merged?\nif(rc0<rc)context.arc(t0.cx,t0.cy,rc0,atan2$1(t0.y01,t0.x01),atan2$1(t1.y01,t1.x01),!cw);// Otherwise, draw the two corners and the ring.\nelse{context.arc(t0.cx,t0.cy,rc0,atan2$1(t0.y01,t0.x01),atan2$1(t0.y11,t0.x11),!cw);context.arc(0,0,r0,atan2$1(t0.cy+t0.y11,t0.cx+t0.x11),atan2$1(t1.cy+t1.y11,t1.cx+t1.x11),cw);context.arc(t1.cx,t1.cy,rc0,atan2$1(t1.y11,t1.x11),atan2$1(t1.y01,t1.x01),!cw);}}// Or is the inner ring just a circular arc?\nelse context.arc(0,0,r0,a10,a00,cw);}context.closePath();if(buffer)return context=null,buffer+\"\"||null;}arc.centroid=function(){var r=(+innerRadius.apply(this,arguments)+ +outerRadius.apply(this,arguments))/2,a=(+startAngle.apply(this,arguments)+ +endAngle.apply(this,arguments))/2-pi$4/2;return[cos$2(a)*r,sin$2(a)*r];};arc.innerRadius=function(_){return arguments.length?(innerRadius=typeof _===\"function\"?_:constant$11(+_),arc):innerRadius;};arc.outerRadius=function(_){return arguments.length?(outerRadius=typeof _===\"function\"?_:constant$11(+_),arc):outerRadius;};arc.cornerRadius=function(_){return arguments.length?(cornerRadius=typeof _===\"function\"?_:constant$11(+_),arc):cornerRadius;};arc.padRadius=function(_){return arguments.length?(padRadius=_==null?null:typeof _===\"function\"?_:constant$11(+_),arc):padRadius;};arc.startAngle=function(_){return arguments.length?(startAngle=typeof _===\"function\"?_:constant$11(+_),arc):startAngle;};arc.endAngle=function(_){return arguments.length?(endAngle=typeof _===\"function\"?_:constant$11(+_),arc):endAngle;};arc.padAngle=function(_){return arguments.length?(padAngle=typeof _===\"function\"?_:constant$11(+_),arc):padAngle;};arc.context=function(_){return arguments.length?(context=_==null?null:_,arc):context;};return arc;}function Linear(context){this._context=context;}Linear.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;// proceed\ndefault:this._context.lineTo(x,y);break;}}};function curveLinear(context){return new Linear(context);}function x$3(p){return p[0];}function y$3(p){return p[1];}function line(){var x$$1=x$3,y$$1=y$3,defined=constant$11(true),context=null,curve=curveLinear,output=null;function line(data){var i,n=data.length,d,defined0=false,buffer;if(context==null)output=curve(buffer=path());for(i=0;i<=n;++i){if(!(i<n&&defined(d=data[i],i,data))===defined0){if(defined0=!defined0)output.lineStart();else output.lineEnd();}if(defined0)output.point(+x$$1(d,i,data),+y$$1(d,i,data));}if(buffer)return output=null,buffer+\"\"||null;}line.x=function(_){return arguments.length?(x$$1=typeof _===\"function\"?_:constant$11(+_),line):x$$1;};line.y=function(_){return arguments.length?(y$$1=typeof _===\"function\"?_:constant$11(+_),line):y$$1;};line.defined=function(_){return arguments.length?(defined=typeof _===\"function\"?_:constant$11(!!_),line):defined;};line.curve=function(_){return arguments.length?(curve=_,context!=null&&(output=curve(context)),line):curve;};line.context=function(_){return arguments.length?(_==null?context=output=null:output=curve(context=_),line):context;};return line;}function area$3(){var x0=x$3,x1=null,y0=constant$11(0),y1=y$3,defined=constant$11(true),context=null,curve=curveLinear,output=null;function area(data){var i,j,k,n=data.length,d,defined0=false,buffer,x0z=new Array(n),y0z=new Array(n);if(context==null)output=curve(buffer=path());for(i=0;i<=n;++i){if(!(i<n&&defined(d=data[i],i,data))===defined0){if(defined0=!defined0){j=i;output.areaStart();output.lineStart();}else{output.lineEnd();output.lineStart();for(k=i-1;k>=j;--k){output.point(x0z[k],y0z[k]);}output.lineEnd();output.areaEnd();}}if(defined0){x0z[i]=+x0(d,i,data),y0z[i]=+y0(d,i,data);output.point(x1?+x1(d,i,data):x0z[i],y1?+y1(d,i,data):y0z[i]);}}if(buffer)return output=null,buffer+\"\"||null;}function arealine(){return line().defined(defined).curve(curve).context(context);}area.x=function(_){return arguments.length?(x0=typeof _===\"function\"?_:constant$11(+_),x1=null,area):x0;};area.x0=function(_){return arguments.length?(x0=typeof _===\"function\"?_:constant$11(+_),area):x0;};area.x1=function(_){return arguments.length?(x1=_==null?null:typeof _===\"function\"?_:constant$11(+_),area):x1;};area.y=function(_){return arguments.length?(y0=typeof _===\"function\"?_:constant$11(+_),y1=null,area):y0;};area.y0=function(_){return arguments.length?(y0=typeof _===\"function\"?_:constant$11(+_),area):y0;};area.y1=function(_){return arguments.length?(y1=_==null?null:typeof _===\"function\"?_:constant$11(+_),area):y1;};area.lineX0=area.lineY0=function(){return arealine().x(x0).y(y0);};area.lineY1=function(){return arealine().x(x0).y(y1);};area.lineX1=function(){return arealine().x(x1).y(y0);};area.defined=function(_){return arguments.length?(defined=typeof _===\"function\"?_:constant$11(!!_),area):defined;};area.curve=function(_){return arguments.length?(curve=_,context!=null&&(output=curve(context)),area):curve;};area.context=function(_){return arguments.length?(_==null?context=output=null:output=curve(context=_),area):context;};return area;}function descending$1(a,b){return b<a?-1:b>a?1:b>=a?0:NaN;}function identity$7(d){return d;}function pie(){var value=identity$7,sortValues=descending$1,sort=null,startAngle=constant$11(0),endAngle=constant$11(tau$4),padAngle=constant$11(0);function pie(data){var i,n=data.length,j,k,sum=0,index=new Array(n),arcs=new Array(n),a0=+startAngle.apply(this,arguments),da=Math.min(tau$4,Math.max(-tau$4,endAngle.apply(this,arguments)-a0)),a1,p=Math.min(Math.abs(da)/n,padAngle.apply(this,arguments)),pa=p*(da<0?-1:1),v;for(i=0;i<n;++i){if((v=arcs[index[i]=i]=+value(data[i],i,data))>0){sum+=v;}}// Optionally sort the arcs by previously-computed values or by data.\nif(sortValues!=null)index.sort(function(i,j){return sortValues(arcs[i],arcs[j]);});else if(sort!=null)index.sort(function(i,j){return sort(data[i],data[j]);});// Compute the arcs! They are stored in the original data's order.\nfor(i=0,k=sum?(da-n*pa)/sum:0;i<n;++i,a0=a1){j=index[i],v=arcs[j],a1=a0+(v>0?v*k:0)+pa,arcs[j]={data:data[j],index:i,value:v,startAngle:a0,endAngle:a1,padAngle:p};}return arcs;}pie.value=function(_){return arguments.length?(value=typeof _===\"function\"?_:constant$11(+_),pie):value;};pie.sortValues=function(_){return arguments.length?(sortValues=_,sort=null,pie):sortValues;};pie.sort=function(_){return arguments.length?(sort=_,sortValues=null,pie):sort;};pie.startAngle=function(_){return arguments.length?(startAngle=typeof _===\"function\"?_:constant$11(+_),pie):startAngle;};pie.endAngle=function(_){return arguments.length?(endAngle=typeof _===\"function\"?_:constant$11(+_),pie):endAngle;};pie.padAngle=function(_){return arguments.length?(padAngle=typeof _===\"function\"?_:constant$11(+_),pie):padAngle;};return pie;}var curveRadialLinear=curveRadial(curveLinear);function Radial(curve){this._curve=curve;}Radial.prototype={areaStart:function areaStart(){this._curve.areaStart();},areaEnd:function areaEnd(){this._curve.areaEnd();},lineStart:function lineStart(){this._curve.lineStart();},lineEnd:function lineEnd(){this._curve.lineEnd();},point:function point(a,r){this._curve.point(r*Math.sin(a),r*-Math.cos(a));}};function curveRadial(curve){function radial(context){return new Radial(curve(context));}radial._curve=curve;return radial;}function lineRadial(l){var c=l.curve;l.angle=l.x,delete l.x;l.radius=l.y,delete l.y;l.curve=function(_){return arguments.length?c(curveRadial(_)):c()._curve;};return l;}function lineRadial$1(){return lineRadial(line().curve(curveRadialLinear));}function areaRadial(){var a=area$3().curve(curveRadialLinear),c=a.curve,x0=a.lineX0,x1=a.lineX1,y0=a.lineY0,y1=a.lineY1;a.angle=a.x,delete a.x;a.startAngle=a.x0,delete a.x0;a.endAngle=a.x1,delete a.x1;a.radius=a.y,delete a.y;a.innerRadius=a.y0,delete a.y0;a.outerRadius=a.y1,delete a.y1;a.lineStartAngle=function(){return lineRadial(x0());},delete a.lineX0;a.lineEndAngle=function(){return lineRadial(x1());},delete a.lineX1;a.lineInnerRadius=function(){return lineRadial(y0());},delete a.lineY0;a.lineOuterRadius=function(){return lineRadial(y1());},delete a.lineY1;a.curve=function(_){return arguments.length?c(curveRadial(_)):c()._curve;};return a;}function pointRadial(x,y){return[(y=+y)*Math.cos(x-=Math.PI/2),y*Math.sin(x)];}var slice$6=Array.prototype.slice;function linkSource(d){return d.source;}function linkTarget(d){return d.target;}function link$2(curve){var source=linkSource,target=linkTarget,x$$1=x$3,y$$1=y$3,context=null;function link(){var buffer,argv=slice$6.call(arguments),s=source.apply(this,argv),t=target.apply(this,argv);if(!context)context=buffer=path();curve(context,+x$$1.apply(this,(argv[0]=s,argv)),+y$$1.apply(this,argv),+x$$1.apply(this,(argv[0]=t,argv)),+y$$1.apply(this,argv));if(buffer)return context=null,buffer+\"\"||null;}link.source=function(_){return arguments.length?(source=_,link):source;};link.target=function(_){return arguments.length?(target=_,link):target;};link.x=function(_){return arguments.length?(x$$1=typeof _===\"function\"?_:constant$11(+_),link):x$$1;};link.y=function(_){return arguments.length?(y$$1=typeof _===\"function\"?_:constant$11(+_),link):y$$1;};link.context=function(_){return arguments.length?(context=_==null?null:_,link):context;};return link;}function curveHorizontal(context,x0,y0,x1,y1){context.moveTo(x0,y0);context.bezierCurveTo(x0=(x0+x1)/2,y0,x0,y1,x1,y1);}function curveVertical(context,x0,y0,x1,y1){context.moveTo(x0,y0);context.bezierCurveTo(x0,y0=(y0+y1)/2,x1,y0,x1,y1);}function curveRadial$1(context,x0,y0,x1,y1){var p0=pointRadial(x0,y0),p1=pointRadial(x0,y0=(y0+y1)/2),p2=pointRadial(x1,y0),p3=pointRadial(x1,y1);context.moveTo(p0[0],p0[1]);context.bezierCurveTo(p1[0],p1[1],p2[0],p2[1],p3[0],p3[1]);}function linkHorizontal(){return link$2(curveHorizontal);}function linkVertical(){return link$2(curveVertical);}function linkRadial(){var l=link$2(curveRadial$1);l.angle=l.x,delete l.x;l.radius=l.y,delete l.y;return l;}var circle$2={draw:function draw(context,size){var r=Math.sqrt(size/pi$4);context.moveTo(r,0);context.arc(0,0,r,0,tau$4);}};var cross$2={draw:function draw(context,size){var r=Math.sqrt(size/5)/2;context.moveTo(-3*r,-r);context.lineTo(-r,-r);context.lineTo(-r,-3*r);context.lineTo(r,-3*r);context.lineTo(r,-r);context.lineTo(3*r,-r);context.lineTo(3*r,r);context.lineTo(r,r);context.lineTo(r,3*r);context.lineTo(-r,3*r);context.lineTo(-r,r);context.lineTo(-3*r,r);context.closePath();}};var tan30=Math.sqrt(1/3),tan30_2=tan30*2;var diamond={draw:function draw(context,size){var y=Math.sqrt(size/tan30_2),x=y*tan30;context.moveTo(0,-y);context.lineTo(x,0);context.lineTo(0,y);context.lineTo(-x,0);context.closePath();}};var ka=0.89081309152928522810,kr=Math.sin(pi$4/10)/Math.sin(7*pi$4/10),kx=Math.sin(tau$4/10)*kr,ky=-Math.cos(tau$4/10)*kr;var star={draw:function draw(context,size){var r=Math.sqrt(size*ka),x=kx*r,y=ky*r;context.moveTo(0,-r);context.lineTo(x,y);for(var i=1;i<5;++i){var a=tau$4*i/5,c=Math.cos(a),s=Math.sin(a);context.lineTo(s*r,-c*r);context.lineTo(c*x-s*y,s*x+c*y);}context.closePath();}};var square={draw:function draw(context,size){var w=Math.sqrt(size),x=-w/2;context.rect(x,x,w,w);}};var sqrt3=Math.sqrt(3);var triangle={draw:function draw(context,size){var y=-Math.sqrt(size/(sqrt3*3));context.moveTo(0,y*2);context.lineTo(-sqrt3*y,-y);context.lineTo(sqrt3*y,-y);context.closePath();}};var c$2=-0.5,s=Math.sqrt(3)/2,k=1/Math.sqrt(12),a=(k/2+1)*3;var wye={draw:function draw(context,size){var r=Math.sqrt(size/a),x0=r/2,y0=r*k,x1=x0,y1=r*k+r,x2=-x1,y2=y1;context.moveTo(x0,y0);context.lineTo(x1,y1);context.lineTo(x2,y2);context.lineTo(c$2*x0-s*y0,s*x0+c$2*y0);context.lineTo(c$2*x1-s*y1,s*x1+c$2*y1);context.lineTo(c$2*x2-s*y2,s*x2+c$2*y2);context.lineTo(c$2*x0+s*y0,c$2*y0-s*x0);context.lineTo(c$2*x1+s*y1,c$2*y1-s*x1);context.lineTo(c$2*x2+s*y2,c$2*y2-s*x2);context.closePath();}};var symbols=[circle$2,cross$2,diamond,square,star,triangle,wye];function symbol(){var type=constant$11(circle$2),size=constant$11(64),context=null;function symbol(){var buffer;if(!context)context=buffer=path();type.apply(this,arguments).draw(context,+size.apply(this,arguments));if(buffer)return context=null,buffer+\"\"||null;}symbol.type=function(_){return arguments.length?(type=typeof _===\"function\"?_:constant$11(_),symbol):type;};symbol.size=function(_){return arguments.length?(size=typeof _===\"function\"?_:constant$11(+_),symbol):size;};symbol.context=function(_){return arguments.length?(context=_==null?null:_,symbol):context;};return symbol;}function noop$3(){}function point$2(that,x,y){that._context.bezierCurveTo((2*that._x0+that._x1)/3,(2*that._y0+that._y1)/3,(that._x0+2*that._x1)/3,(that._y0+2*that._y1)/3,(that._x0+4*that._x1+x)/6,(that._y0+4*that._y1+y)/6);}function Basis(context){this._context=context;}Basis.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 3:point$2(this,this._x1,this._y1);// proceed\ncase 2:this._context.lineTo(this._x1,this._y1);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);// proceed\ndefault:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basis$2(context){return new Basis(context);}function BasisClosed(context){this._context=context;}BasisClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x2,this._y2);this._context.closePath();break;}case 2:{this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3);this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3);this._context.closePath();break;}case 3:{this.point(this._x2,this._y2);this.point(this._x3,this._y3);this.point(this._x4,this._y4);break;}}},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._x2=x,this._y2=y;break;case 1:this._point=2;this._x3=x,this._y3=y;break;case 2:this._point=3;this._x4=x,this._y4=y;this._context.moveTo((this._x0+4*this._x1+x)/6,(this._y0+4*this._y1+y)/6);break;default:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basisClosed$1(context){return new BasisClosed(context);}function BasisOpen(context){this._context=context;}BasisOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=NaN;this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var x0=(this._x0+4*this._x1+x)/6,y0=(this._y0+4*this._y1+y)/6;this._line?this._context.lineTo(x0,y0):this._context.moveTo(x0,y0);break;case 3:this._point=4;// proceed\ndefault:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basisOpen(context){return new BasisOpen(context);}function Bundle(context,beta){this._basis=new Basis(context);this._beta=beta;}Bundle.prototype={lineStart:function lineStart(){this._x=[];this._y=[];this._basis.lineStart();},lineEnd:function lineEnd(){var x=this._x,y=this._y,j=x.length-1;if(j>0){var x0=x[0],y0=y[0],dx=x[j]-x0,dy=y[j]-y0,i=-1,t;while(++i<=j){t=i/j;this._basis.point(this._beta*x[i]+(1-this._beta)*(x0+t*dx),this._beta*y[i]+(1-this._beta)*(y0+t*dy));}}this._x=this._y=null;this._basis.lineEnd();},point:function point(x,y){this._x.push(+x);this._y.push(+y);}};var bundle=function custom(beta){function bundle(context){return beta===1?new Basis(context):new Bundle(context,beta);}bundle.beta=function(beta){return custom(+beta);};return bundle;}(0.85);function point$3(that,x,y){that._context.bezierCurveTo(that._x1+that._k*(that._x2-that._x0),that._y1+that._k*(that._y2-that._y0),that._x2+that._k*(that._x1-x),that._y2+that._k*(that._y1-y),that._x2,that._y2);}function Cardinal(context,tension){this._context=context;this._k=(1-tension)/6;}Cardinal.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:point$3(this,this._x1,this._y1);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;this._x1=x,this._y1=y;break;case 2:this._point=3;// proceed\ndefault:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinal=function custom(tension){function cardinal(context){return new Cardinal(context,tension);}cardinal.tension=function(tension){return custom(+tension);};return cardinal;}(0);function CardinalClosed(context,tension){this._context=context;this._k=(1-tension)/6;}CardinalClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3);this._context.closePath();break;}case 2:{this._context.lineTo(this._x3,this._y3);this._context.closePath();break;}case 3:{this.point(this._x3,this._y3);this.point(this._x4,this._y4);this.point(this._x5,this._y5);break;}}},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._x3=x,this._y3=y;break;case 1:this._point=2;this._context.moveTo(this._x4=x,this._y4=y);break;case 2:this._point=3;this._x5=x,this._y5=y;break;default:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinalClosed=function custom(tension){function cardinal$$1(context){return new CardinalClosed(context,tension);}cardinal$$1.tension=function(tension){return custom(+tension);};return cardinal$$1;}(0);function CardinalOpen(context,tension){this._context=context;this._k=(1-tension)/6;}CardinalOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;// proceed\ndefault:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinalOpen=function custom(tension){function cardinal$$1(context){return new CardinalOpen(context,tension);}cardinal$$1.tension=function(tension){return custom(+tension);};return cardinal$$1;}(0);function point$4(that,x,y){var x1=that._x1,y1=that._y1,x2=that._x2,y2=that._y2;if(that._l01_a>epsilon$3){var a=2*that._l01_2a+3*that._l01_a*that._l12_a+that._l12_2a,n=3*that._l01_a*(that._l01_a+that._l12_a);x1=(x1*a-that._x0*that._l12_2a+that._x2*that._l01_2a)/n;y1=(y1*a-that._y0*that._l12_2a+that._y2*that._l01_2a)/n;}if(that._l23_a>epsilon$3){var b=2*that._l23_2a+3*that._l23_a*that._l12_a+that._l12_2a,m=3*that._l23_a*(that._l23_a+that._l12_a);x2=(x2*b+that._x1*that._l23_2a-x*that._l12_2a)/m;y2=(y2*b+that._y1*that._l23_2a-y*that._l12_2a)/m;}that._context.bezierCurveTo(x1,y1,x2,y2,that._x2,that._y2);}function CatmullRom(context,alpha){this._context=context;this._alpha=alpha;}CatmullRom.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;// proceed\ndefault:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRom=function custom(alpha){function catmullRom(context){return alpha?new CatmullRom(context,alpha):new Cardinal(context,0);}catmullRom.alpha=function(alpha){return custom(+alpha);};return catmullRom;}(0.5);function CatmullRomClosed(context,alpha){this._context=context;this._alpha=alpha;}CatmullRomClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3);this._context.closePath();break;}case 2:{this._context.lineTo(this._x3,this._y3);this._context.closePath();break;}case 3:{this.point(this._x3,this._y3);this.point(this._x4,this._y4);this.point(this._x5,this._y5);break;}}},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;this._x3=x,this._y3=y;break;case 1:this._point=2;this._context.moveTo(this._x4=x,this._y4=y);break;case 2:this._point=3;this._x5=x,this._y5=y;break;default:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRomClosed=function custom(alpha){function catmullRom$$1(context){return alpha?new CatmullRomClosed(context,alpha):new CardinalClosed(context,0);}catmullRom$$1.alpha=function(alpha){return custom(+alpha);};return catmullRom$$1;}(0.5);function CatmullRomOpen(context,alpha){this._context=context;this._alpha=alpha;}CatmullRomOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;// proceed\ndefault:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRomOpen=function custom(alpha){function catmullRom$$1(context){return alpha?new CatmullRomOpen(context,alpha):new CardinalOpen(context,0);}catmullRom$$1.alpha=function(alpha){return custom(+alpha);};return catmullRom$$1;}(0.5);function LinearClosed(context){this._context=context;}LinearClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._point)this._context.closePath();},point:function point(x,y){x=+x,y=+y;if(this._point)this._context.lineTo(x,y);else this._point=1,this._context.moveTo(x,y);}};function linearClosed(context){return new LinearClosed(context);}function sign$1(x){return x<0?-1:1;}// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that,x2,y2){var h0=that._x1-that._x0,h1=x2-that._x1,s0=(that._y1-that._y0)/(h0||h1<0&&-0),s1=(y2-that._y1)/(h1||h0<0&&-0),p=(s0*h1+s1*h0)/(h0+h1);return(sign$1(s0)+sign$1(s1))*Math.min(Math.abs(s0),Math.abs(s1),0.5*Math.abs(p))||0;}// Calculate a one-sided slope.\nfunction slope2(that,t){var h=that._x1-that._x0;return h?(3*(that._y1-that._y0)/h-t)/2:t;}// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point$5(that,t0,t1){var x0=that._x0,y0=that._y0,x1=that._x1,y1=that._y1,dx=(x1-x0)/3;that._context.bezierCurveTo(x0+dx,y0+dx*t0,x1-dx,y1-dx*t1,x1,y1);}function MonotoneX(context){this._context=context;}MonotoneX.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:point$5(this,this._t0,slope2(this,this._t0));break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){var t1=NaN;x=+x,y=+y;if(x===this._x1&&y===this._y1)return;// Ignore coincident points.\nswitch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;point$5(this,slope2(this,t1=slope3(this,x,y)),t1);break;default:point$5(this,this._t0,t1=slope3(this,x,y));break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;this._t0=t1;}};function MonotoneY(context){this._context=new ReflectContext(context);}(MonotoneY.prototype=Object.create(MonotoneX.prototype)).point=function(x,y){MonotoneX.prototype.point.call(this,y,x);};function ReflectContext(context){this._context=context;}ReflectContext.prototype={moveTo:function moveTo(x,y){this._context.moveTo(y,x);},closePath:function closePath(){this._context.closePath();},lineTo:function lineTo(x,y){this._context.lineTo(y,x);},bezierCurveTo:function bezierCurveTo(x1,y1,x2,y2,x,y){this._context.bezierCurveTo(y1,x1,y2,x2,y,x);}};function monotoneX(context){return new MonotoneX(context);}function monotoneY(context){return new MonotoneY(context);}function Natural(context){this._context=context;}Natural.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x=[];this._y=[];},lineEnd:function lineEnd(){var x=this._x,y=this._y,n=x.length;if(n){this._line?this._context.lineTo(x[0],y[0]):this._context.moveTo(x[0],y[0]);if(n===2){this._context.lineTo(x[1],y[1]);}else{var px=controlPoints(x),py=controlPoints(y);for(var i0=0,i1=1;i1<n;++i0,++i1){this._context.bezierCurveTo(px[0][i0],py[0][i0],px[1][i0],py[1][i0],x[i1],y[i1]);}}}if(this._line||this._line!==0&&n===1)this._context.closePath();this._line=1-this._line;this._x=this._y=null;},point:function point(x,y){this._x.push(+x);this._y.push(+y);}};// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x){var i,n=x.length-1,m,a=new Array(n),b=new Array(n),r=new Array(n);a[0]=0,b[0]=2,r[0]=x[0]+2*x[1];for(i=1;i<n-1;++i){a[i]=1,b[i]=4,r[i]=4*x[i]+2*x[i+1];}a[n-1]=2,b[n-1]=7,r[n-1]=8*x[n-1]+x[n];for(i=1;i<n;++i){m=a[i]/b[i-1],b[i]-=m,r[i]-=m*r[i-1];}a[n-1]=r[n-1]/b[n-1];for(i=n-2;i>=0;--i){a[i]=(r[i]-a[i+1])/b[i];}b[n-1]=(x[n]+a[n-1])/2;for(i=0;i<n-1;++i){b[i]=2*x[i+1]-a[i+1];}return[a,b];}function natural(context){return new Natural(context);}function Step(context,t){this._context=context;this._t=t;}Step.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x=this._y=NaN;this._point=0;},lineEnd:function lineEnd(){if(0<this._t&&this._t<1&&this._point===2)this._context.lineTo(this._x,this._y);if(this._line||this._line!==0&&this._point===1)this._context.closePath();if(this._line>=0)this._t=1-this._t,this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;// proceed\ndefault:{if(this._t<=0){this._context.lineTo(this._x,y);this._context.lineTo(x,y);}else{var x1=this._x*(1-this._t)+x*this._t;this._context.lineTo(x1,this._y);this._context.lineTo(x1,y);}break;}}this._x=x,this._y=y;}};function step(context){return new Step(context,0.5);}function stepBefore(context){return new Step(context,0);}function stepAfter(context){return new Step(context,1);}function none$1(series,order){if(!((n=series.length)>1))return;for(var i=1,j,s0,s1=series[order[0]],n,m=s1.length;i<n;++i){s0=s1,s1=series[order[i]];for(j=0;j<m;++j){s1[j][1]+=s1[j][0]=isNaN(s0[j][1])?s0[j][0]:s0[j][1];}}}function none$2(series){var n=series.length,o=new Array(n);while(--n>=0){o[n]=n;}return o;}function stackValue(d,key){return d[key];}function stack(){var keys=constant$11([]),order=none$2,offset=none$1,value=stackValue;function stack(data){var kz=keys.apply(this,arguments),i,m=data.length,n=kz.length,sz=new Array(n),oz;for(i=0;i<n;++i){for(var ki=kz[i],si=sz[i]=new Array(m),j=0,sij;j<m;++j){si[j]=sij=[0,+value(data[j],ki,j,data)];sij.data=data[j];}si.key=ki;}for(i=0,oz=order(sz);i<n;++i){sz[oz[i]].index=i;}offset(sz,oz);return sz;}stack.keys=function(_){return arguments.length?(keys=typeof _===\"function\"?_:constant$11(slice$6.call(_)),stack):keys;};stack.value=function(_){return arguments.length?(value=typeof _===\"function\"?_:constant$11(+_),stack):value;};stack.order=function(_){return arguments.length?(order=_==null?none$2:typeof _===\"function\"?_:constant$11(slice$6.call(_)),stack):order;};stack.offset=function(_){return arguments.length?(offset=_==null?none$1:_,stack):offset;};return stack;}function expand(series,order){if(!((n=series.length)>0))return;for(var i,n,j=0,m=series[0].length,y;j<m;++j){for(y=i=0;i<n;++i){y+=series[i][j][1]||0;}if(y)for(i=0;i<n;++i){series[i][j][1]/=y;}}none$1(series,order);}function diverging(series,order){if(!((n=series.length)>1))return;for(var i,j=0,d,dy,yp,yn,n,m=series[order[0]].length;j<m;++j){for(yp=yn=0,i=0;i<n;++i){if((dy=(d=series[order[i]][j])[1]-d[0])>=0){d[0]=yp,d[1]=yp+=dy;}else if(dy<0){d[1]=yn,d[0]=yn+=dy;}else{d[0]=yp;}}}}function silhouette(series,order){if(!((n=series.length)>0))return;for(var j=0,s0=series[order[0]],n,m=s0.length;j<m;++j){for(var i=0,y=0;i<n;++i){y+=series[i][j][1]||0;}s0[j][1]+=s0[j][0]=-y/2;}none$1(series,order);}function wiggle(series,order){if(!((n=series.length)>0)||!((m=(s0=series[order[0]]).length)>0))return;for(var y=0,j=1,s0,m,n;j<m;++j){for(var i=0,s1=0,s2=0;i<n;++i){var si=series[order[i]],sij0=si[j][1]||0,sij1=si[j-1][1]||0,s3=(sij0-sij1)/2;for(var k=0;k<i;++k){var sk=series[order[k]],skj0=sk[j][1]||0,skj1=sk[j-1][1]||0;s3+=skj0-skj1;}s1+=sij0,s2+=s3*sij0;}s0[j-1][1]+=s0[j-1][0]=y;if(s1)y-=s2/s1;}s0[j-1][1]+=s0[j-1][0]=y;none$1(series,order);}function ascending$3(series){var sums=series.map(sum$2);return none$2(series).sort(function(a,b){return sums[a]-sums[b];});}function sum$2(series){var s=0,i=-1,n=series.length,v;while(++i<n){if(v=+series[i][1])s+=v;}return s;}function descending$2(series){return ascending$3(series).reverse();}function insideOut(series){var n=series.length,i,j,sums=series.map(sum$2),order=none$2(series).sort(function(a,b){return sums[b]-sums[a];}),top=0,bottom=0,tops=[],bottoms=[];for(i=0;i<n;++i){j=order[i];if(top<bottom){top+=sums[j];tops.push(j);}else{bottom+=sums[j];bottoms.push(j);}}return bottoms.reverse().concat(tops);}function reverse(series){return none$2(series).reverse();}function constant$12(x){return function(){return x;};}function x$4(d){return d[0];}function y$4(d){return d[1];}function RedBlackTree(){this._=null;// root node\n}function RedBlackNode(node){node.U=// parent node\nnode.C=// color - true for red, false for black\nnode.L=// left node\nnode.R=// right node\nnode.P=// previous node\nnode.N=null;// next node\n}RedBlackTree.prototype={constructor:RedBlackTree,insert:function insert(after,node){var parent,grandpa,uncle;if(after){node.P=after;node.N=after.N;if(after.N)after.N.P=node;after.N=node;if(after.R){after=after.R;while(after.L){after=after.L;}after.L=node;}else{after.R=node;}parent=after;}else if(this._){after=RedBlackFirst(this._);node.P=null;node.N=after;after.P=after.L=node;parent=after;}else{node.P=node.N=null;this._=node;parent=null;}node.L=node.R=null;node.U=parent;node.C=true;after=node;while(parent&&parent.C){grandpa=parent.U;if(parent===grandpa.L){uncle=grandpa.R;if(uncle&&uncle.C){parent.C=uncle.C=false;grandpa.C=true;after=grandpa;}else{if(after===parent.R){RedBlackRotateLeft(this,parent);after=parent;parent=after.U;}parent.C=false;grandpa.C=true;RedBlackRotateRight(this,grandpa);}}else{uncle=grandpa.L;if(uncle&&uncle.C){parent.C=uncle.C=false;grandpa.C=true;after=grandpa;}else{if(after===parent.L){RedBlackRotateRight(this,parent);after=parent;parent=after.U;}parent.C=false;grandpa.C=true;RedBlackRotateLeft(this,grandpa);}}parent=after.U;}this._.C=false;},remove:function remove(node){if(node.N)node.N.P=node.P;if(node.P)node.P.N=node.N;node.N=node.P=null;var parent=node.U,sibling,left=node.L,right=node.R,next,red;if(!left)next=right;else if(!right)next=left;else next=RedBlackFirst(right);if(parent){if(parent.L===node)parent.L=next;else parent.R=next;}else{this._=next;}if(left&&right){red=next.C;next.C=node.C;next.L=left;left.U=next;if(next!==right){parent=next.U;next.U=node.U;node=next.R;parent.L=node;next.R=right;right.U=next;}else{next.U=parent;parent=next;node=next.R;}}else{red=node.C;node=next;}if(node)node.U=parent;if(red)return;if(node&&node.C){node.C=false;return;}do{if(node===this._)break;if(node===parent.L){sibling=parent.R;if(sibling.C){sibling.C=false;parent.C=true;RedBlackRotateLeft(this,parent);sibling=parent.R;}if(sibling.L&&sibling.L.C||sibling.R&&sibling.R.C){if(!sibling.R||!sibling.R.C){sibling.L.C=false;sibling.C=true;RedBlackRotateRight(this,sibling);sibling=parent.R;}sibling.C=parent.C;parent.C=sibling.R.C=false;RedBlackRotateLeft(this,parent);node=this._;break;}}else{sibling=parent.L;if(sibling.C){sibling.C=false;parent.C=true;RedBlackRotateRight(this,parent);sibling=parent.L;}if(sibling.L&&sibling.L.C||sibling.R&&sibling.R.C){if(!sibling.L||!sibling.L.C){sibling.R.C=false;sibling.C=true;RedBlackRotateLeft(this,sibling);sibling=parent.L;}sibling.C=parent.C;parent.C=sibling.L.C=false;RedBlackRotateRight(this,parent);node=this._;break;}}sibling.C=true;node=parent;parent=parent.U;}while(!node.C);if(node)node.C=false;}};function RedBlackRotateLeft(tree,node){var p=node,q=node.R,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q;}else{tree._=q;}q.U=parent;p.U=q;p.R=q.L;if(p.R)p.R.U=p;q.L=p;}function RedBlackRotateRight(tree,node){var p=node,q=node.L,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q;}else{tree._=q;}q.U=parent;p.U=q;p.L=q.R;if(p.L)p.L.U=p;q.R=p;}function RedBlackFirst(node){while(node.L){node=node.L;}return node;}function createEdge(left,right,v0,v1){var edge=[null,null],index=edges.push(edge)-1;edge.left=left;edge.right=right;if(v0)setEdgeEnd(edge,left,right,v0);if(v1)setEdgeEnd(edge,right,left,v1);cells[left.index].halfedges.push(index);cells[right.index].halfedges.push(index);return edge;}function createBorderEdge(left,v0,v1){var edge=[v0,v1];edge.left=left;return edge;}function setEdgeEnd(edge,left,right,vertex){if(!edge[0]&&!edge[1]){edge[0]=vertex;edge.left=left;edge.right=right;}else if(edge.left===right){edge[1]=vertex;}else{edge[0]=vertex;}}// Liang–Barsky line clipping.\nfunction clipEdge(edge,x0,y0,x1,y1){var a=edge[0],b=edge[1],ax=a[0],ay=a[1],bx=b[0],by=b[1],t0=0,t1=1,dx=bx-ax,dy=by-ay,r;r=x0-ax;if(!dx&&r>0)return;r/=dx;if(dx<0){if(r<t0)return;if(r<t1)t1=r;}else if(dx>0){if(r>t1)return;if(r>t0)t0=r;}r=x1-ax;if(!dx&&r<0)return;r/=dx;if(dx<0){if(r>t1)return;if(r>t0)t0=r;}else if(dx>0){if(r<t0)return;if(r<t1)t1=r;}r=y0-ay;if(!dy&&r>0)return;r/=dy;if(dy<0){if(r<t0)return;if(r<t1)t1=r;}else if(dy>0){if(r>t1)return;if(r>t0)t0=r;}r=y1-ay;if(!dy&&r<0)return;r/=dy;if(dy<0){if(r>t1)return;if(r>t0)t0=r;}else if(dy>0){if(r<t0)return;if(r<t1)t1=r;}if(!(t0>0)&&!(t1<1))return true;// TODO Better check?\nif(t0>0)edge[0]=[ax+t0*dx,ay+t0*dy];if(t1<1)edge[1]=[ax+t1*dx,ay+t1*dy];return true;}function connectEdge(edge,x0,y0,x1,y1){var v1=edge[1];if(v1)return true;var v0=edge[0],left=edge.left,right=edge.right,lx=left[0],ly=left[1],rx=right[0],ry=right[1],fx=(lx+rx)/2,fy=(ly+ry)/2,fm,fb;if(ry===ly){if(fx<x0||fx>=x1)return;if(lx>rx){if(!v0)v0=[fx,y0];else if(v0[1]>=y1)return;v1=[fx,y1];}else{if(!v0)v0=[fx,y1];else if(v0[1]<y0)return;v1=[fx,y0];}}else{fm=(lx-rx)/(ry-ly);fb=fy-fm*fx;if(fm<-1||fm>1){if(lx>rx){if(!v0)v0=[(y0-fb)/fm,y0];else if(v0[1]>=y1)return;v1=[(y1-fb)/fm,y1];}else{if(!v0)v0=[(y1-fb)/fm,y1];else if(v0[1]<y0)return;v1=[(y0-fb)/fm,y0];}}else{if(ly<ry){if(!v0)v0=[x0,fm*x0+fb];else if(v0[0]>=x1)return;v1=[x1,fm*x1+fb];}else{if(!v0)v0=[x1,fm*x1+fb];else if(v0[0]<x0)return;v1=[x0,fm*x0+fb];}}}edge[0]=v0;edge[1]=v1;return true;}function clipEdges(x0,y0,x1,y1){var i=edges.length,edge;while(i--){if(!connectEdge(edge=edges[i],x0,y0,x1,y1)||!clipEdge(edge,x0,y0,x1,y1)||!(Math.abs(edge[0][0]-edge[1][0])>epsilon$4||Math.abs(edge[0][1]-edge[1][1])>epsilon$4)){delete edges[i];}}}function createCell(site){return cells[site.index]={site:site,halfedges:[]};}function cellHalfedgeAngle(cell,edge){var site=cell.site,va=edge.left,vb=edge.right;if(site===vb)vb=va,va=site;if(vb)return Math.atan2(vb[1]-va[1],vb[0]-va[0]);if(site===va)va=edge[1],vb=edge[0];else va=edge[0],vb=edge[1];return Math.atan2(va[0]-vb[0],vb[1]-va[1]);}function cellHalfedgeStart(cell,edge){return edge[+(edge.left!==cell.site)];}function cellHalfedgeEnd(cell,edge){return edge[+(edge.left===cell.site)];}function sortCellHalfedges(){for(var i=0,n=cells.length,cell,halfedges,j,m;i<n;++i){if((cell=cells[i])&&(m=(halfedges=cell.halfedges).length)){var index=new Array(m),array=new Array(m);for(j=0;j<m;++j){index[j]=j,array[j]=cellHalfedgeAngle(cell,edges[halfedges[j]]);}index.sort(function(i,j){return array[j]-array[i];});for(j=0;j<m;++j){array[j]=halfedges[index[j]];}for(j=0;j<m;++j){halfedges[j]=array[j];}}}}function clipCells(x0,y0,x1,y1){var nCells=cells.length,iCell,cell,site,iHalfedge,halfedges,nHalfedges,start,startX,startY,end,endX,endY,cover=true;for(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;halfedges=cell.halfedges;iHalfedge=halfedges.length;// Remove any dangling clipped edges.\nwhile(iHalfedge--){if(!edges[halfedges[iHalfedge]]){halfedges.splice(iHalfedge,1);}}// Insert any border edges as necessary.\niHalfedge=0,nHalfedges=halfedges.length;while(iHalfedge<nHalfedges){end=cellHalfedgeEnd(cell,edges[halfedges[iHalfedge]]),endX=end[0],endY=end[1];start=cellHalfedgeStart(cell,edges[halfedges[++iHalfedge%nHalfedges]]),startX=start[0],startY=start[1];if(Math.abs(endX-startX)>epsilon$4||Math.abs(endY-startY)>epsilon$4){halfedges.splice(iHalfedge,0,edges.push(createBorderEdge(site,end,Math.abs(endX-x0)<epsilon$4&&y1-endY>epsilon$4?[x0,Math.abs(startX-x0)<epsilon$4?startY:y1]:Math.abs(endY-y1)<epsilon$4&&x1-endX>epsilon$4?[Math.abs(startY-y1)<epsilon$4?startX:x1,y1]:Math.abs(endX-x1)<epsilon$4&&endY-y0>epsilon$4?[x1,Math.abs(startX-x1)<epsilon$4?startY:y0]:Math.abs(endY-y0)<epsilon$4&&endX-x0>epsilon$4?[Math.abs(startY-y0)<epsilon$4?startX:x0,y0]:null))-1);++nHalfedges;}}if(nHalfedges)cover=false;}}// If there weren’t any edges, have the closest site cover the extent.\n// It doesn’t matter which corner of the extent we measure!\nif(cover){var dx,dy,d2,dc=Infinity;for(iCell=0,cover=null;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;dx=site[0]-x0;dy=site[1]-y0;d2=dx*dx+dy*dy;if(d2<dc)dc=d2,cover=cell;}}if(cover){var v00=[x0,y0],v01=[x0,y1],v11=[x1,y1],v10=[x1,y0];cover.halfedges.push(edges.push(createBorderEdge(site=cover.site,v00,v01))-1,edges.push(createBorderEdge(site,v01,v11))-1,edges.push(createBorderEdge(site,v11,v10))-1,edges.push(createBorderEdge(site,v10,v00))-1);}}// Lastly delete any cells with no edges; these were entirely clipped.\nfor(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){if(!cell.halfedges.length){delete cells[iCell];}}}}var circlePool=[];var firstCircle;function Circle(){RedBlackNode(this);this.x=this.y=this.arc=this.site=this.cy=null;}function attachCircle(arc){var lArc=arc.P,rArc=arc.N;if(!lArc||!rArc)return;var lSite=lArc.site,cSite=arc.site,rSite=rArc.site;if(lSite===rSite)return;var bx=cSite[0],by=cSite[1],ax=lSite[0]-bx,ay=lSite[1]-by,cx=rSite[0]-bx,cy=rSite[1]-by;var d=2*(ax*cy-ay*cx);if(d>=-epsilon2$2)return;var ha=ax*ax+ay*ay,hc=cx*cx+cy*cy,x=(cy*ha-ay*hc)/d,y=(ax*hc-cx*ha)/d;var circle=circlePool.pop()||new Circle();circle.arc=arc;circle.site=cSite;circle.x=x+bx;circle.y=(circle.cy=y+by)+Math.sqrt(x*x+y*y);// y bottom\narc.circle=circle;var before=null,node=circles._;while(node){if(circle.y<node.y||circle.y===node.y&&circle.x<=node.x){if(node.L)node=node.L;else{before=node.P;break;}}else{if(node.R)node=node.R;else{before=node;break;}}}circles.insert(before,circle);if(!before)firstCircle=circle;}function detachCircle(arc){var circle=arc.circle;if(circle){if(!circle.P)firstCircle=circle.N;circles.remove(circle);circlePool.push(circle);RedBlackNode(circle);arc.circle=null;}}var beachPool=[];function Beach(){RedBlackNode(this);this.edge=this.site=this.circle=null;}function createBeach(site){var beach=beachPool.pop()||new Beach();beach.site=site;return beach;}function detachBeach(beach){detachCircle(beach);beaches.remove(beach);beachPool.push(beach);RedBlackNode(beach);}function removeBeach(beach){var circle=beach.circle,x=circle.x,y=circle.cy,vertex=[x,y],previous=beach.P,next=beach.N,disappearing=[beach];detachBeach(beach);var lArc=previous;while(lArc.circle&&Math.abs(x-lArc.circle.x)<epsilon$4&&Math.abs(y-lArc.circle.cy)<epsilon$4){previous=lArc.P;disappearing.unshift(lArc);detachBeach(lArc);lArc=previous;}disappearing.unshift(lArc);detachCircle(lArc);var rArc=next;while(rArc.circle&&Math.abs(x-rArc.circle.x)<epsilon$4&&Math.abs(y-rArc.circle.cy)<epsilon$4){next=rArc.N;disappearing.push(rArc);detachBeach(rArc);rArc=next;}disappearing.push(rArc);detachCircle(rArc);var nArcs=disappearing.length,iArc;for(iArc=1;iArc<nArcs;++iArc){rArc=disappearing[iArc];lArc=disappearing[iArc-1];setEdgeEnd(rArc.edge,lArc.site,rArc.site,vertex);}lArc=disappearing[0];rArc=disappearing[nArcs-1];rArc.edge=createEdge(lArc.site,rArc.site,null,vertex);attachCircle(lArc);attachCircle(rArc);}function addBeach(site){var x=site[0],directrix=site[1],lArc,rArc,dxl,dxr,node=beaches._;while(node){dxl=leftBreakPoint(node,directrix)-x;if(dxl>epsilon$4)node=node.L;else{dxr=x-rightBreakPoint(node,directrix);if(dxr>epsilon$4){if(!node.R){lArc=node;break;}node=node.R;}else{if(dxl>-epsilon$4){lArc=node.P;rArc=node;}else if(dxr>-epsilon$4){lArc=node;rArc=node.N;}else{lArc=rArc=node;}break;}}}createCell(site);var newArc=createBeach(site);beaches.insert(lArc,newArc);if(!lArc&&!rArc)return;if(lArc===rArc){detachCircle(lArc);rArc=createBeach(lArc.site);beaches.insert(newArc,rArc);newArc.edge=rArc.edge=createEdge(lArc.site,newArc.site);attachCircle(lArc);attachCircle(rArc);return;}if(!rArc){// && lArc\nnewArc.edge=createEdge(lArc.site,newArc.site);return;}// else lArc !== rArc\ndetachCircle(lArc);detachCircle(rArc);var lSite=lArc.site,ax=lSite[0],ay=lSite[1],bx=site[0]-ax,by=site[1]-ay,rSite=rArc.site,cx=rSite[0]-ax,cy=rSite[1]-ay,d=2*(bx*cy-by*cx),hb=bx*bx+by*by,hc=cx*cx+cy*cy,vertex=[(cy*hb-by*hc)/d+ax,(bx*hc-cx*hb)/d+ay];setEdgeEnd(rArc.edge,lSite,rSite,vertex);newArc.edge=createEdge(lSite,site,null,vertex);rArc.edge=createEdge(site,rSite,null,vertex);attachCircle(lArc);attachCircle(rArc);}function leftBreakPoint(arc,directrix){var site=arc.site,rfocx=site[0],rfocy=site[1],pby2=rfocy-directrix;if(!pby2)return rfocx;var lArc=arc.P;if(!lArc)return-Infinity;site=lArc.site;var lfocx=site[0],lfocy=site[1],plby2=lfocy-directrix;if(!plby2)return lfocx;var hl=lfocx-rfocx,aby2=1/pby2-1/plby2,b=hl/plby2;if(aby2)return(-b+Math.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;return(rfocx+lfocx)/2;}function rightBreakPoint(arc,directrix){var rArc=arc.N;if(rArc)return leftBreakPoint(rArc,directrix);var site=arc.site;return site[1]===directrix?site[0]:Infinity;}var epsilon$4=1e-6;var epsilon2$2=1e-12;var beaches;var cells;var circles;var edges;function triangleArea(a,b,c){return(a[0]-c[0])*(b[1]-a[1])-(a[0]-b[0])*(c[1]-a[1]);}function lexicographic(a,b){return b[1]-a[1]||b[0]-a[0];}function Diagram(sites,extent){var site=sites.sort(lexicographic).pop(),x,y,circle;edges=[];cells=new Array(sites.length);beaches=new RedBlackTree();circles=new RedBlackTree();while(true){circle=firstCircle;if(site&&(!circle||site[1]<circle.y||site[1]===circle.y&&site[0]<circle.x)){if(site[0]!==x||site[1]!==y){addBeach(site);x=site[0],y=site[1];}site=sites.pop();}else if(circle){removeBeach(circle.arc);}else{break;}}sortCellHalfedges();if(extent){var x0=+extent[0][0],y0=+extent[0][1],x1=+extent[1][0],y1=+extent[1][1];clipEdges(x0,y0,x1,y1);clipCells(x0,y0,x1,y1);}this.edges=edges;this.cells=cells;beaches=circles=edges=cells=null;}Diagram.prototype={constructor:Diagram,polygons:function polygons(){var edges=this.edges;return this.cells.map(function(cell){var polygon=cell.halfedges.map(function(i){return cellHalfedgeStart(cell,edges[i]);});polygon.data=cell.site.data;return polygon;});},triangles:function triangles(){var triangles=[],edges=this.edges;this.cells.forEach(function(cell,i){if(!(m=(halfedges=cell.halfedges).length))return;var site=cell.site,halfedges,j=-1,m,s0,e1=edges[halfedges[m-1]],s1=e1.left===site?e1.right:e1.left;while(++j<m){s0=s1;e1=edges[halfedges[j]];s1=e1.left===site?e1.right:e1.left;if(s0&&s1&&i<s0.index&&i<s1.index&&triangleArea(site,s0,s1)<0){triangles.push([site.data,s0.data,s1.data]);}}});return triangles;},links:function links(){return this.edges.filter(function(edge){return edge.right;}).map(function(edge){return{source:edge.left.data,target:edge.right.data};});},find:function find(x,y,radius){var that=this,i0,i1=that._found||0,n=that.cells.length,cell;// Use the previously-found cell, or start with an arbitrary one.\nwhile(!(cell=that.cells[i1])){if(++i1>=n)return null;}var dx=x-cell.site[0],dy=y-cell.site[1],d2=dx*dx+dy*dy;// Traverse the half-edges to find a closer cell, if any.\ndo{cell=that.cells[i0=i1],i1=null;cell.halfedges.forEach(function(e){var edge=that.edges[e],v=edge.left;if((v===cell.site||!v)&&!(v=edge.right))return;var vx=x-v[0],vy=y-v[1],v2=vx*vx+vy*vy;if(v2<d2)d2=v2,i1=v.index;});}while(i1!==null);that._found=i0;return radius==null||d2<=radius*radius?cell.site:null;}};function voronoi(){var x$$1=x$4,y$$1=y$4,extent=null;function voronoi(data){return new Diagram(data.map(function(d,i){var s=[Math.round(x$$1(d,i,data)/epsilon$4)*epsilon$4,Math.round(y$$1(d,i,data)/epsilon$4)*epsilon$4];s.index=i;s.data=d;return s;}),extent);}voronoi.polygons=function(data){return voronoi(data).polygons();};voronoi.links=function(data){return voronoi(data).links();};voronoi.triangles=function(data){return voronoi(data).triangles();};voronoi.x=function(_){return arguments.length?(x$$1=typeof _===\"function\"?_:constant$12(+_),voronoi):x$$1;};voronoi.y=function(_){return arguments.length?(y$$1=typeof _===\"function\"?_:constant$12(+_),voronoi):y$$1;};voronoi.extent=function(_){return arguments.length?(extent=_==null?null:[[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]],voronoi):extent&&[[extent[0][0],extent[0][1]],[extent[1][0],extent[1][1]]];};voronoi.size=function(_){return arguments.length?(extent=_==null?null:[[0,0],[+_[0],+_[1]]],voronoi):extent&&[extent[1][0]-extent[0][0],extent[1][1]-extent[0][1]];};return voronoi;}function constant$13(x){return function(){return x;};}function ZoomEvent(target,type,transform){this.target=target;this.type=type;this.transform=transform;}function Transform(k,x,y){this.k=k;this.x=x;this.y=y;}Transform.prototype={constructor:Transform,scale:function scale(k){return k===1?this:new Transform(this.k*k,this.x,this.y);},translate:function translate(x,y){return x===0&y===0?this:new Transform(this.k,this.x+this.k*x,this.y+this.k*y);},apply:function apply(point){return[point[0]*this.k+this.x,point[1]*this.k+this.y];},applyX:function applyX(x){return x*this.k+this.x;},applyY:function applyY(y){return y*this.k+this.y;},invert:function invert(location){return[(location[0]-this.x)/this.k,(location[1]-this.y)/this.k];},invertX:function invertX(x){return(x-this.x)/this.k;},invertY:function invertY(y){return(y-this.y)/this.k;},rescaleX:function rescaleX(x){return x.copy().domain(x.range().map(this.invertX,this).map(x.invert,x));},rescaleY:function rescaleY(y){return y.copy().domain(y.range().map(this.invertY,this).map(y.invert,y));},toString:function toString(){return\"translate(\"+this.x+\",\"+this.y+\") scale(\"+this.k+\")\";}};var identity$8=new Transform(1,0,0);transform$1.prototype=Transform.prototype;function transform$1(node){return node.__zoom||identity$8;}function nopropagation$2(){d3.event.stopImmediatePropagation();}function noevent$2(){d3.event.preventDefault();d3.event.stopImmediatePropagation();}// Ignore right-click, since that should open the context menu.\nfunction defaultFilter$2(){return!d3.event.button;}function defaultExtent$1(){var e=this,w,h;if(e instanceof SVGElement){e=e.ownerSVGElement||e;w=e.width.baseVal.value;h=e.height.baseVal.value;}else{w=e.clientWidth;h=e.clientHeight;}return[[0,0],[w,h]];}function defaultTransform(){return this.__zoom||identity$8;}function defaultWheelDelta(){return-d3.event.deltaY*(d3.event.deltaMode?120:1)/500;}function defaultTouchable$1(){return\"ontouchstart\"in this;}function defaultConstrain(transform,extent,translateExtent){var dx0=transform.invertX(extent[0][0])-translateExtent[0][0],dx1=transform.invertX(extent[1][0])-translateExtent[1][0],dy0=transform.invertY(extent[0][1])-translateExtent[0][1],dy1=transform.invertY(extent[1][1])-translateExtent[1][1];return transform.translate(dx1>dx0?(dx0+dx1)/2:Math.min(0,dx0)||Math.max(0,dx1),dy1>dy0?(dy0+dy1)/2:Math.min(0,dy0)||Math.max(0,dy1));}function zoom(){var filter=defaultFilter$2,extent=defaultExtent$1,constrain=defaultConstrain,wheelDelta=defaultWheelDelta,touchable=defaultTouchable$1,scaleExtent=[0,Infinity],translateExtent=[[-Infinity,-Infinity],[Infinity,Infinity]],duration=250,interpolate=interpolateZoom,gestures=[],listeners=dispatch(\"start\",\"zoom\",\"end\"),touchstarting,touchending,touchDelay=500,wheelDelay=150,clickDistance2=0;function zoom(selection$$1){selection$$1.property(\"__zoom\",defaultTransform).on(\"wheel.zoom\",wheeled).on(\"mousedown.zoom\",mousedowned).on(\"dblclick.zoom\",dblclicked).filter(touchable).on(\"touchstart.zoom\",touchstarted).on(\"touchmove.zoom\",touchmoved).on(\"touchend.zoom touchcancel.zoom\",touchended).style(\"touch-action\",\"none\").style(\"-webkit-tap-highlight-color\",\"rgba(0,0,0,0)\");}zoom.transform=function(collection,transform){var selection$$1=collection.selection?collection.selection():collection;selection$$1.property(\"__zoom\",defaultTransform);if(collection!==selection$$1){schedule(collection,transform);}else{selection$$1.interrupt().each(function(){gesture(this,arguments).start().zoom(null,typeof transform===\"function\"?transform.apply(this,arguments):transform).end();});}};zoom.scaleBy=function(selection$$1,k){zoom.scaleTo(selection$$1,function(){var k0=this.__zoom.k,k1=typeof k===\"function\"?k.apply(this,arguments):k;return k0*k1;});};zoom.scaleTo=function(selection$$1,k){zoom.transform(selection$$1,function(){var e=extent.apply(this,arguments),t0=this.__zoom,p0=centroid(e),p1=t0.invert(p0),k1=typeof k===\"function\"?k.apply(this,arguments):k;return constrain(translate(scale(t0,k1),p0,p1),e,translateExtent);});};zoom.translateBy=function(selection$$1,x,y){zoom.transform(selection$$1,function(){return constrain(this.__zoom.translate(typeof x===\"function\"?x.apply(this,arguments):x,typeof y===\"function\"?y.apply(this,arguments):y),extent.apply(this,arguments),translateExtent);});};zoom.translateTo=function(selection$$1,x,y){zoom.transform(selection$$1,function(){var e=extent.apply(this,arguments),t=this.__zoom,p=centroid(e);return constrain(identity$8.translate(p[0],p[1]).scale(t.k).translate(typeof x===\"function\"?-x.apply(this,arguments):-x,typeof y===\"function\"?-y.apply(this,arguments):-y),e,translateExtent);});};function scale(transform,k){k=Math.max(scaleExtent[0],Math.min(scaleExtent[1],k));return k===transform.k?transform:new Transform(k,transform.x,transform.y);}function translate(transform,p0,p1){var x=p0[0]-p1[0]*transform.k,y=p0[1]-p1[1]*transform.k;return x===transform.x&&y===transform.y?transform:new Transform(transform.k,x,y);}function centroid(extent){return[(+extent[0][0]+ +extent[1][0])/2,(+extent[0][1]+ +extent[1][1])/2];}function schedule(transition$$1,transform,center){transition$$1.on(\"start.zoom\",function(){gesture(this,arguments).start();}).on(\"interrupt.zoom end.zoom\",function(){gesture(this,arguments).end();}).tween(\"zoom\",function(){var that=this,args=arguments,g=gesture(that,args),e=extent.apply(that,args),p=center||centroid(e),w=Math.max(e[1][0]-e[0][0],e[1][1]-e[0][1]),a=that.__zoom,b=typeof transform===\"function\"?transform.apply(that,args):transform,i=interpolate(a.invert(p).concat(w/a.k),b.invert(p).concat(w/b.k));return function(t){if(t===1)t=b;// Avoid rounding error on end.\nelse{var l=i(t),k=w/l[2];t=new Transform(k,p[0]-l[0]*k,p[1]-l[1]*k);}g.zoom(null,t);};});}function gesture(that,args){for(var i=0,n=gestures.length,g;i<n;++i){if((g=gestures[i]).that===that){return g;}}return new Gesture(that,args);}function Gesture(that,args){this.that=that;this.args=args;this.index=-1;this.active=0;this.extent=extent.apply(that,args);}Gesture.prototype={start:function start(){if(++this.active===1){this.index=gestures.push(this)-1;this.emit(\"start\");}return this;},zoom:function zoom(key,transform){if(this.mouse&&key!==\"mouse\")this.mouse[1]=transform.invert(this.mouse[0]);if(this.touch0&&key!==\"touch\")this.touch0[1]=transform.invert(this.touch0[0]);if(this.touch1&&key!==\"touch\")this.touch1[1]=transform.invert(this.touch1[0]);this.that.__zoom=transform;this.emit(\"zoom\");return this;},end:function end(){if(--this.active===0){gestures.splice(this.index,1);this.index=-1;this.emit(\"end\");}return this;},emit:function emit(type){customEvent(new ZoomEvent(zoom,type,this.that.__zoom),listeners.apply,listeners,[type,this.that,this.args]);}};function wheeled(){if(!filter.apply(this,arguments))return;var g=gesture(this,arguments),t=this.__zoom,k=Math.max(scaleExtent[0],Math.min(scaleExtent[1],t.k*Math.pow(2,wheelDelta.apply(this,arguments)))),p=mouse(this);// If the mouse is in the same location as before, reuse it.\n// If there were recent wheel events, reset the wheel idle timeout.\nif(g.wheel){if(g.mouse[0][0]!==p[0]||g.mouse[0][1]!==p[1]){g.mouse[1]=t.invert(g.mouse[0]=p);}clearTimeout(g.wheel);}// If this wheel event won’t trigger a transform change, ignore it.\nelse if(t.k===k)return;// Otherwise, capture the mouse point and location at the start.\nelse{g.mouse=[p,t.invert(p)];interrupt(this);g.start();}noevent$2();g.wheel=setTimeout(wheelidled,wheelDelay);g.zoom(\"mouse\",constrain(translate(scale(t,k),g.mouse[0],g.mouse[1]),g.extent,translateExtent));function wheelidled(){g.wheel=null;g.end();}}function mousedowned(){if(touchending||!filter.apply(this,arguments))return;var g=gesture(this,arguments),v=select(d3.event.view).on(\"mousemove.zoom\",mousemoved,true).on(\"mouseup.zoom\",mouseupped,true),p=mouse(this),x0=d3.event.clientX,y0=d3.event.clientY;dragDisable(d3.event.view);nopropagation$2();g.mouse=[p,this.__zoom.invert(p)];interrupt(this);g.start();function mousemoved(){noevent$2();if(!g.moved){var dx=d3.event.clientX-x0,dy=d3.event.clientY-y0;g.moved=dx*dx+dy*dy>clickDistance2;}g.zoom(\"mouse\",constrain(translate(g.that.__zoom,g.mouse[0]=mouse(g.that),g.mouse[1]),g.extent,translateExtent));}function mouseupped(){v.on(\"mousemove.zoom mouseup.zoom\",null);yesdrag(d3.event.view,g.moved);noevent$2();g.end();}}function dblclicked(){if(!filter.apply(this,arguments))return;var t0=this.__zoom,p0=mouse(this),p1=t0.invert(p0),k1=t0.k*(d3.event.shiftKey?0.5:2),t1=constrain(translate(scale(t0,k1),p0,p1),extent.apply(this,arguments),translateExtent);noevent$2();if(duration>0)select(this).transition().duration(duration).call(schedule,t1,p0);else select(this).call(zoom.transform,t1);}function touchstarted(){if(!filter.apply(this,arguments))return;var g=gesture(this,arguments),touches$$1=d3.event.changedTouches,started,n=touches$$1.length,i,t,p;nopropagation$2();for(i=0;i<n;++i){t=touches$$1[i],p=touch(this,touches$$1,t.identifier);p=[p,this.__zoom.invert(p),t.identifier];if(!g.touch0)g.touch0=p,started=true;else if(!g.touch1)g.touch1=p;}// If this is a dbltap, reroute to the (optional) dblclick.zoom handler.\nif(touchstarting){touchstarting=clearTimeout(touchstarting);if(!g.touch1){g.end();p=select(this).on(\"dblclick.zoom\");if(p)p.apply(this,arguments);return;}}if(started){touchstarting=setTimeout(function(){touchstarting=null;},touchDelay);interrupt(this);g.start();}}function touchmoved(){var g=gesture(this,arguments),touches$$1=d3.event.changedTouches,n=touches$$1.length,i,t,p,l;noevent$2();if(touchstarting)touchstarting=clearTimeout(touchstarting);for(i=0;i<n;++i){t=touches$$1[i],p=touch(this,touches$$1,t.identifier);if(g.touch0&&g.touch0[2]===t.identifier)g.touch0[0]=p;else if(g.touch1&&g.touch1[2]===t.identifier)g.touch1[0]=p;}t=g.that.__zoom;if(g.touch1){var p0=g.touch0[0],l0=g.touch0[1],p1=g.touch1[0],l1=g.touch1[1],dp=(dp=p1[0]-p0[0])*dp+(dp=p1[1]-p0[1])*dp,dl=(dl=l1[0]-l0[0])*dl+(dl=l1[1]-l0[1])*dl;t=scale(t,Math.sqrt(dp/dl));p=[(p0[0]+p1[0])/2,(p0[1]+p1[1])/2];l=[(l0[0]+l1[0])/2,(l0[1]+l1[1])/2];}else if(g.touch0)p=g.touch0[0],l=g.touch0[1];else return;g.zoom(\"touch\",constrain(translate(t,p,l),g.extent,translateExtent));}function touchended(){var g=gesture(this,arguments),touches$$1=d3.event.changedTouches,n=touches$$1.length,i,t;nopropagation$2();if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},touchDelay);for(i=0;i<n;++i){t=touches$$1[i];if(g.touch0&&g.touch0[2]===t.identifier)delete g.touch0;else if(g.touch1&&g.touch1[2]===t.identifier)delete g.touch1;}if(g.touch1&&!g.touch0)g.touch0=g.touch1,delete g.touch1;if(g.touch0)g.touch0[1]=this.__zoom.invert(g.touch0[0]);else g.end();}zoom.wheelDelta=function(_){return arguments.length?(wheelDelta=typeof _===\"function\"?_:constant$13(+_),zoom):wheelDelta;};zoom.filter=function(_){return arguments.length?(filter=typeof _===\"function\"?_:constant$13(!!_),zoom):filter;};zoom.touchable=function(_){return arguments.length?(touchable=typeof _===\"function\"?_:constant$13(!!_),zoom):touchable;};zoom.extent=function(_){return arguments.length?(extent=typeof _===\"function\"?_:constant$13([[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]]),zoom):extent;};zoom.scaleExtent=function(_){return arguments.length?(scaleExtent[0]=+_[0],scaleExtent[1]=+_[1],zoom):[scaleExtent[0],scaleExtent[1]];};zoom.translateExtent=function(_){return arguments.length?(translateExtent[0][0]=+_[0][0],translateExtent[1][0]=+_[1][0],translateExtent[0][1]=+_[0][1],translateExtent[1][1]=+_[1][1],zoom):[[translateExtent[0][0],translateExtent[0][1]],[translateExtent[1][0],translateExtent[1][1]]];};zoom.constrain=function(_){return arguments.length?(constrain=_,zoom):constrain;};zoom.duration=function(_){return arguments.length?(duration=+_,zoom):duration;};zoom.interpolate=function(_){return arguments.length?(interpolate=_,zoom):interpolate;};zoom.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?zoom:value;};zoom.clickDistance=function(_){return arguments.length?(clickDistance2=(_=+_)*_,zoom):Math.sqrt(clickDistance2);};return zoom;}d3.version=version;d3.bisect=bisectRight;d3.bisectRight=bisectRight;d3.bisectLeft=bisectLeft;d3.ascending=ascending;d3.bisector=bisector;d3.cross=cross;d3.descending=descending;d3.deviation=deviation;d3.extent=extent;d3.histogram=histogram;d3.thresholdFreedmanDiaconis=freedmanDiaconis;d3.thresholdScott=scott;d3.thresholdSturges=thresholdSturges;d3.max=max;d3.mean=mean;d3.median=median;d3.merge=merge;d3.min=min;d3.pairs=pairs;d3.permute=permute;d3.quantile=threshold;d3.range=sequence;d3.scan=scan;d3.shuffle=shuffle;d3.sum=sum;d3.ticks=ticks;d3.tickIncrement=tickIncrement;d3.tickStep=tickStep;d3.transpose=transpose;d3.variance=variance;d3.zip=zip;d3.axisTop=axisTop;d3.axisRight=axisRight;d3.axisBottom=axisBottom;d3.axisLeft=axisLeft;d3.brush=brush;d3.brushX=brushX;d3.brushY=brushY;d3.brushSelection=brushSelection;d3.chord=chord;d3.ribbon=ribbon;d3.nest=nest;d3.set=set$2;d3.map=map$1;d3.keys=keys;d3.values=values;d3.entries=entries;d3.color=color;d3.rgb=rgb;d3.hsl=hsl;d3.lab=lab;d3.hcl=hcl;d3.lch=lch;d3.gray=gray;d3.cubehelix=cubehelix;d3.contours=contours;d3.contourDensity=density;d3.dispatch=dispatch;d3.drag=drag;d3.dragDisable=dragDisable;d3.dragEnable=yesdrag;d3.dsvFormat=dsvFormat;d3.csvParse=csvParse;d3.csvParseRows=csvParseRows;d3.csvFormat=csvFormat;d3.csvFormatRows=csvFormatRows;d3.tsvParse=tsvParse;d3.tsvParseRows=tsvParseRows;d3.tsvFormat=tsvFormat;d3.tsvFormatRows=tsvFormatRows;d3.easeLinear=linear$1;d3.easeQuad=quadInOut;d3.easeQuadIn=quadIn;d3.easeQuadOut=quadOut;d3.easeQuadInOut=quadInOut;d3.easeCubic=cubicInOut;d3.easeCubicIn=cubicIn;d3.easeCubicOut=cubicOut;d3.easeCubicInOut=cubicInOut;d3.easePoly=polyInOut;d3.easePolyIn=polyIn;d3.easePolyOut=polyOut;d3.easePolyInOut=polyInOut;d3.easeSin=sinInOut;d3.easeSinIn=sinIn;d3.easeSinOut=sinOut;d3.easeSinInOut=sinInOut;d3.easeExp=expInOut;d3.easeExpIn=expIn;d3.easeExpOut=expOut;d3.easeExpInOut=expInOut;d3.easeCircle=circleInOut;d3.easeCircleIn=circleIn;d3.easeCircleOut=circleOut;d3.easeCircleInOut=circleInOut;d3.easeBounce=bounceOut;d3.easeBounceIn=bounceIn;d3.easeBounceOut=bounceOut;d3.easeBounceInOut=bounceInOut;d3.easeBack=backInOut;d3.easeBackIn=backIn;d3.easeBackOut=backOut;d3.easeBackInOut=backInOut;d3.easeElastic=elasticOut;d3.easeElasticIn=elasticIn;d3.easeElasticOut=elasticOut;d3.easeElasticInOut=elasticInOut;d3.blob=blob;d3.buffer=buffer;d3.dsv=dsv;d3.csv=csv$1;d3.tsv=tsv$1;d3.image=image;d3.json=json;d3.text=text;d3.xml=xml;d3.html=html;d3.svg=svg;d3.forceCenter=center$1;d3.forceCollide=collide;d3.forceLink=link;d3.forceManyBody=manyBody;d3.forceRadial=radial;d3.forceSimulation=simulation;d3.forceX=x$2;d3.forceY=y$2;d3.formatDefaultLocale=defaultLocale;d3.formatLocale=formatLocale;d3.formatSpecifier=formatSpecifier;d3.precisionFixed=precisionFixed;d3.precisionPrefix=precisionPrefix;d3.precisionRound=precisionRound;d3.geoArea=area$1;d3.geoBounds=bounds;d3.geoCentroid=centroid;d3.geoCircle=circle;d3.geoClipAntimeridian=clipAntimeridian;d3.geoClipCircle=clipCircle;d3.geoClipExtent=extent$1;d3.geoClipRectangle=clipRectangle;d3.geoContains=contains$1;d3.geoDistance=distance;d3.geoGraticule=graticule;d3.geoGraticule10=graticule10;d3.geoInterpolate=interpolate$1;d3.geoLength=length$1;d3.geoPath=index$1;d3.geoAlbers=albers;d3.geoAlbersUsa=albersUsa;d3.geoAzimuthalEqualArea=azimuthalEqualArea;d3.geoAzimuthalEqualAreaRaw=azimuthalEqualAreaRaw;d3.geoAzimuthalEquidistant=azimuthalEquidistant;d3.geoAzimuthalEquidistantRaw=azimuthalEquidistantRaw;d3.geoConicConformal=conicConformal;d3.geoConicConformalRaw=conicConformalRaw;d3.geoConicEqualArea=conicEqualArea;d3.geoConicEqualAreaRaw=conicEqualAreaRaw;d3.geoConicEquidistant=conicEquidistant;d3.geoConicEquidistantRaw=conicEquidistantRaw;d3.geoEquirectangular=equirectangular;d3.geoEquirectangularRaw=equirectangularRaw;d3.geoGnomonic=gnomonic;d3.geoGnomonicRaw=gnomonicRaw;d3.geoIdentity=identity$5;d3.geoProjection=projection;d3.geoProjectionMutator=projectionMutator;d3.geoMercator=mercator;d3.geoMercatorRaw=mercatorRaw;d3.geoNaturalEarth1=naturalEarth1;d3.geoNaturalEarth1Raw=naturalEarth1Raw;d3.geoOrthographic=orthographic;d3.geoOrthographicRaw=orthographicRaw;d3.geoStereographic=stereographic;d3.geoStereographicRaw=stereographicRaw;d3.geoTransverseMercator=transverseMercator;d3.geoTransverseMercatorRaw=transverseMercatorRaw;d3.geoRotation=rotation;d3.geoStream=geoStream;d3.geoTransform=transform;d3.cluster=cluster;d3.hierarchy=hierarchy;d3.pack=index$2;d3.packSiblings=siblings;d3.packEnclose=enclose;d3.partition=partition;d3.stratify=stratify;d3.tree=tree;d3.treemap=index$3;d3.treemapBinary=binary;d3.treemapDice=treemapDice;d3.treemapSlice=treemapSlice;d3.treemapSliceDice=sliceDice;d3.treemapSquarify=squarify;d3.treemapResquarify=resquarify;d3.interpolate=interpolateValue;d3.interpolateArray=array$1;d3.interpolateBasis=basis$1;d3.interpolateBasisClosed=basisClosed;d3.interpolateDate=date;d3.interpolateNumber=reinterpolate;d3.interpolateObject=object;d3.interpolateRound=interpolateRound;d3.interpolateString=interpolateString;d3.interpolateTransformCss=interpolateTransformCss;d3.interpolateTransformSvg=interpolateTransformSvg;d3.interpolateZoom=interpolateZoom;d3.interpolateRgb=interpolateRgb;d3.interpolateRgbBasis=rgbBasis;d3.interpolateRgbBasisClosed=rgbBasisClosed;d3.interpolateHsl=hsl$2;d3.interpolateHslLong=hslLong;d3.interpolateLab=lab$1;d3.interpolateHcl=hcl$2;d3.interpolateHclLong=hclLong;d3.interpolateCubehelix=cubehelix$2;d3.interpolateCubehelixLong=cubehelixLong;d3.piecewise=piecewise;d3.quantize=quantize;d3.path=path;d3.polygonArea=area$2;d3.polygonCentroid=centroid$1;d3.polygonHull=hull;d3.polygonContains=contains$2;d3.polygonLength=length$2;d3.quadtree=quadtree;d3.randomUniform=uniform;d3.randomNormal=normal;d3.randomLogNormal=logNormal;d3.randomBates=bates;d3.randomIrwinHall=irwinHall;d3.randomExponential=exponential$1;d3.scaleBand=band;d3.scalePoint=point$1;d3.scaleIdentity=identity$6;d3.scaleLinear=linear$2;d3.scaleLog=log$1;d3.scaleOrdinal=ordinal;d3.scaleImplicit=implicit;d3.scalePow=pow$1;d3.scaleSqrt=sqrt$1;d3.scaleQuantile=quantile$$1;d3.scaleQuantize=quantize$1;d3.scaleThreshold=threshold$1;d3.scaleTime=time;d3.scaleUtc=utcTime;d3.scaleSequential=sequential;d3.schemeCategory10=category10;d3.schemeAccent=Accent;d3.schemeDark2=Dark2;d3.schemePaired=Paired;d3.schemePastel1=Pastel1;d3.schemePastel2=Pastel2;d3.schemeSet1=Set1;d3.schemeSet2=Set2;d3.schemeSet3=Set3;d3.interpolateBrBG=BrBG;d3.schemeBrBG=scheme;d3.interpolatePRGn=PRGn;d3.schemePRGn=scheme$1;d3.interpolatePiYG=PiYG;d3.schemePiYG=scheme$2;d3.interpolatePuOr=PuOr;d3.schemePuOr=scheme$3;d3.interpolateRdBu=RdBu;d3.schemeRdBu=scheme$4;d3.interpolateRdGy=RdGy;d3.schemeRdGy=scheme$5;d3.interpolateRdYlBu=RdYlBu;d3.schemeRdYlBu=scheme$6;d3.interpolateRdYlGn=RdYlGn;d3.schemeRdYlGn=scheme$7;d3.interpolateSpectral=Spectral;d3.schemeSpectral=scheme$8;d3.interpolateBuGn=BuGn;d3.schemeBuGn=scheme$9;d3.interpolateBuPu=BuPu;d3.schemeBuPu=scheme$10;d3.interpolateGnBu=GnBu;d3.schemeGnBu=scheme$11;d3.interpolateOrRd=OrRd;d3.schemeOrRd=scheme$12;d3.interpolatePuBuGn=PuBuGn;d3.schemePuBuGn=scheme$13;d3.interpolatePuBu=PuBu;d3.schemePuBu=scheme$14;d3.interpolatePuRd=PuRd;d3.schemePuRd=scheme$15;d3.interpolateRdPu=RdPu;d3.schemeRdPu=scheme$16;d3.interpolateYlGnBu=YlGnBu;d3.schemeYlGnBu=scheme$17;d3.interpolateYlGn=YlGn;d3.schemeYlGn=scheme$18;d3.interpolateYlOrBr=YlOrBr;d3.schemeYlOrBr=scheme$19;d3.interpolateYlOrRd=YlOrRd;d3.schemeYlOrRd=scheme$20;d3.interpolateBlues=Blues;d3.schemeBlues=scheme$21;d3.interpolateGreens=Greens;d3.schemeGreens=scheme$22;d3.interpolateGreys=Greys;d3.schemeGreys=scheme$23;d3.interpolatePurples=Purples;d3.schemePurples=scheme$24;d3.interpolateReds=Reds;d3.schemeReds=scheme$25;d3.interpolateOranges=Oranges;d3.schemeOranges=scheme$26;d3.interpolateCubehelixDefault=cubehelix$3;d3.interpolateRainbow=rainbow;d3.interpolateWarm=warm;d3.interpolateCool=cool;d3.interpolateSinebow=sinebow;d3.interpolateViridis=viridis;d3.interpolateMagma=magma;d3.interpolateInferno=inferno;d3.interpolatePlasma=plasma;d3.create=create;d3.creator=creator;d3.local=local;d3.matcher=matcher$1;d3.mouse=mouse;d3.namespace=namespace;d3.namespaces=namespaces;d3.clientPoint=point;d3.select=select;d3.selectAll=selectAll;d3.selection=selection;d3.selector=selector;d3.selectorAll=selectorAll;d3.style=styleValue;d3.touch=touch;d3.touches=touches;d3.window=defaultView;d3.customEvent=customEvent;d3.arc=arc;d3.area=area$3;d3.line=line;d3.pie=pie;d3.areaRadial=areaRadial;d3.radialArea=areaRadial;d3.lineRadial=lineRadial$1;d3.radialLine=lineRadial$1;d3.pointRadial=pointRadial;d3.linkHorizontal=linkHorizontal;d3.linkVertical=linkVertical;d3.linkRadial=linkRadial;d3.symbol=symbol;d3.symbols=symbols;d3.symbolCircle=circle$2;d3.symbolCross=cross$2;d3.symbolDiamond=diamond;d3.symbolSquare=square;d3.symbolStar=star;d3.symbolTriangle=triangle;d3.symbolWye=wye;d3.curveBasisClosed=basisClosed$1;d3.curveBasisOpen=basisOpen;d3.curveBasis=basis$2;d3.curveBundle=bundle;d3.curveCardinalClosed=cardinalClosed;d3.curveCardinalOpen=cardinalOpen;d3.curveCardinal=cardinal;d3.curveCatmullRomClosed=catmullRomClosed;d3.curveCatmullRomOpen=catmullRomOpen;d3.curveCatmullRom=catmullRom;d3.curveLinearClosed=linearClosed;d3.curveLinear=curveLinear;d3.curveMonotoneX=monotoneX;d3.curveMonotoneY=monotoneY;d3.curveNatural=natural;d3.curveStep=step;d3.curveStepAfter=stepAfter;d3.curveStepBefore=stepBefore;d3.stack=stack;d3.stackOffsetExpand=expand;d3.stackOffsetDiverging=diverging;d3.stackOffsetNone=none$1;d3.stackOffsetSilhouette=silhouette;d3.stackOffsetWiggle=wiggle;d3.stackOrderAscending=ascending$3;d3.stackOrderDescending=descending$2;d3.stackOrderInsideOut=insideOut;d3.stackOrderNone=none$2;d3.stackOrderReverse=reverse;d3.timeInterval=newInterval;d3.timeMillisecond=millisecond;d3.timeMilliseconds=milliseconds;d3.utcMillisecond=millisecond;d3.utcMilliseconds=milliseconds;d3.timeSecond=second;d3.timeSeconds=seconds;d3.utcSecond=second;d3.utcSeconds=seconds;d3.timeMinute=minute;d3.timeMinutes=minutes;d3.timeHour=hour;d3.timeHours=hours;d3.timeDay=day;d3.timeDays=days;d3.timeWeek=sunday;d3.timeWeeks=sundays;d3.timeSunday=sunday;d3.timeSundays=sundays;d3.timeMonday=monday;d3.timeMondays=mondays;d3.timeTuesday=tuesday;d3.timeTuesdays=tuesdays;d3.timeWednesday=wednesday;d3.timeWednesdays=wednesdays;d3.timeThursday=thursday;d3.timeThursdays=thursdays;d3.timeFriday=friday;d3.timeFridays=fridays;d3.timeSaturday=saturday;d3.timeSaturdays=saturdays;d3.timeMonth=month;d3.timeMonths=months;d3.timeYear=year;d3.timeYears=years;d3.utcMinute=utcMinute;d3.utcMinutes=utcMinutes;d3.utcHour=utcHour;d3.utcHours=utcHours;d3.utcDay=utcDay;d3.utcDays=utcDays;d3.utcWeek=utcSunday;d3.utcWeeks=utcSundays;d3.utcSunday=utcSunday;d3.utcSundays=utcSundays;d3.utcMonday=utcMonday;d3.utcMondays=utcMondays;d3.utcTuesday=utcTuesday;d3.utcTuesdays=utcTuesdays;d3.utcWednesday=utcWednesday;d3.utcWednesdays=utcWednesdays;d3.utcThursday=utcThursday;d3.utcThursdays=utcThursdays;d3.utcFriday=utcFriday;d3.utcFridays=utcFridays;d3.utcSaturday=utcSaturday;d3.utcSaturdays=utcSaturdays;d3.utcMonth=utcMonth;d3.utcMonths=utcMonths;d3.utcYear=utcYear;d3.utcYears=utcYears;d3.timeFormatDefaultLocale=defaultLocale$1;d3.timeFormatLocale=formatLocale$1;d3.isoFormat=formatIso;d3.isoParse=parseIso;d3.now=now;d3.timer=timer;d3.timerFlush=timerFlush;d3.timeout=timeout$1;d3.interval=interval$1;d3.transition=transition;d3.active=active;d3.interrupt=interrupt;d3.voronoi=voronoi;d3.zoom=zoom;d3.zoomTransform=transform$1;d3.zoomIdentity=identity$8;exports.d3=d3;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/d3.js\n");

/***/ }),

/***/ "./src/vendor/dc.js":
/*!**************************!*\
  !*** ./src/vendor/dc.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\r\n *  dc 3.0.6\r\n *  http://dc-js.github.io/dc.js/\r\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\r\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\n\n\n\n/**\r\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\r\n * anything else into the global name space.\r\n *\r\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\r\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\r\n * chaining because they return values that are not the chart, although some,\r\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\r\n * return values that are themselves chainable d3 objects.\r\n * @namespace dc\r\n * @version 3.0.6\r\n * @example\r\n * // Example chaining\r\n * chart.width(300)\r\n *      .height(300)\r\n *      .filter('sunday');\r\n */\n/*jshint -W079*/\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.dc = undefined;\n\nvar _crossfilter = __webpack_require__(/*! ./crossfilter.js */ \"./src/vendor/crossfilter.js\");\n\nvar _d = __webpack_require__(/*! ./d3.js */ \"./src/vendor/d3.js\");\n\nvar dc = {\n    version: '3.0.6',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\r\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\r\n * and the default group.\r\n *\r\n * A chart group often corresponds to a crossfilter instance. It specifies\r\n * the set of charts which should be updated when a filter changes on one of the charts or when the\r\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\r\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\r\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\r\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\r\n *\r\n * @namespace chartRegistry\r\n * @memberof dc\r\n * @type {{has, register, deregister, clear, list}}\r\n */\ndc.chartRegistry = function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup(group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\r\n         * Determine if a given chart instance resides in any group in the registry.\r\n         * @method has\r\n         * @memberof dc.chartRegistry\r\n         * @param {Object} chart dc.js chart instance\r\n         * @returns {Boolean}\r\n         */\n        has: function has(chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\r\n         * Add given chart instance to the given group, creating the group if necessary.\r\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\r\n         * @method register\r\n         * @memberof dc.chartRegistry\r\n         * @param {Object} chart dc.js chart instance\r\n         * @param {String} [group] Group name\r\n         */\n        register: function register(chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\r\n         * Remove given chart instance from the given group, creating the group if necessary.\r\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\r\n         * @method deregister\r\n         * @memberof dc.chartRegistry\r\n         * @param {Object} chart dc.js chart instance\r\n         * @param {String} [group] Group name\r\n         */\n        deregister: function deregister(chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\r\n         * Clear given group if one is provided, otherwise clears all groups.\r\n         * @method clear\r\n         * @memberof dc.chartRegistry\r\n         * @param {String} group Group name\r\n         */\n        clear: function clear(group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\r\n         * Get an array of each chart instance in the given group.\r\n         * If no group is provided, the charts in the default group are returned.\r\n         * @method list\r\n         * @memberof dc.chartRegistry\r\n         * @param {String} [group] Group name\r\n         * @returns {Array<Object>}\r\n         */\n        list: function list(group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n}();\n\n/**\r\n * Add given chart instance to the given group, creating the group if necessary.\r\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\r\n * @memberof dc\r\n * @method registerChart\r\n * @param {Object} chart dc.js chart instance\r\n * @param {String} [group] Group name\r\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\r\n * Remove given chart instance from the given group, creating the group if necessary.\r\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\r\n * @memberof dc\r\n * @method deregisterChart\r\n * @param {Object} chart dc.js chart instance\r\n * @param {String} [group] Group name\r\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\r\n * Determine if a given chart instance resides in any group in the registry.\r\n * @memberof dc\r\n * @method hasChart\r\n * @param {Object} chart dc.js chart instance\r\n * @returns {Boolean}\r\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\r\n * Clear given group if one is provided, otherwise clears all groups.\r\n * @memberof dc\r\n * @method deregisterAllCharts\r\n * @param {String} group Group name\r\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\r\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\r\n * only charts that belong to the default chart group will be reset.\r\n * @memberof dc\r\n * @method filterAll\r\n * @param {String} [group]\r\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\r\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\r\n * not given then only charts that belong to the default chart group will be reset.\r\n * @memberof dc\r\n * @method refocusAll\r\n * @param {String} [group]\r\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\r\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\r\n * charts that belong to the default chart group will be re-rendered.\r\n * @memberof dc\r\n * @method renderAll\r\n * @param {String} [group]\r\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\r\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\r\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\r\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\r\n * from scratch.\r\n * @memberof dc\r\n * @method redrawAll\r\n * @param {String} [group]\r\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\r\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\r\n * immediately.\r\n * @memberof dc\r\n * @member disableTransitions\r\n * @type {Boolean}\r\n * @default false\r\n */\ndc.disableTransitions = false;\n\n/**\r\n * Start a transition on a selection if transitions are globally enabled\r\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\r\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\r\n * allows a common code path for both cases.\r\n * @memberof dc\r\n * @method transition\r\n * @param {d3.selection} selection - the selection to be transitioned\r\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\r\n * function returning the duration, or 0 for no transition\r\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\r\n * returning the delay, or 0 for no delay\r\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\r\n * elements are needed)\r\n * @returns {d3.transition|d3.selection}\r\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition.each(function () {\n            ++n;\n        }).on('end', function () {\n            if (! --n) {\n                callback.call(transition);\n            }\n        });\n    }\n};\n\n/**\r\n * @namespace units\r\n * @memberof dc\r\n * @type {{}}\r\n */\ndc.units = {};\n\n/**\r\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\r\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\r\n * be used when the x values are a sequence of integers.\r\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\r\n * @method integers\r\n * @memberof dc.units\r\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @example\r\n * chart.xUnits(dc.units.integers) // already the default\r\n * @param {Number} start\r\n * @param {Number} end\r\n * @returns {Number}\r\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\r\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of a\r\n * coordinate grid chart to specify ordinal units for the x axis. Usually this parameter is used in\r\n * combination with passing\r\n * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\r\n * to {@link dc.coordinateGridMixin#x .x}.\r\n *\r\n * As of dc.js 3.0, this is purely a placeholder or magic value which causes the chart to go into ordinal mode; the\r\n * function is not called.\r\n * @method ordinal\r\n * @memberof dc.units\r\n * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\r\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\r\n * @example\r\n * chart.xUnits(dc.units.ordinal)\r\n *      .x(d3.scaleOrdinal())\r\n */\ndc.units.ordinal = function () {\n    throw new Error('dc.units.ordinal should not be called - it is a placeholder');\n};\n\n/**\r\n * @namespace fp\r\n * @memberof dc.units\r\n * @type {{}}\r\n */\ndc.units.fp = {};\n/**\r\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\r\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\r\n * numbers with the given precision.\r\n * The returned function determines how many values at the given precision will fit into the range\r\n * supplied in its start and end parameters.\r\n * @method precision\r\n * @memberof dc.units.fp\r\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\r\n * @example\r\n * // specify values (and ticks) every 0.1 units\r\n * chart.xUnits(dc.units.fp.precision(0.1)\r\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\r\n * var thousandths = dc.units.fp.precision(0.001);\r\n * thousandths(0.5, 1.0) // returns 500\r\n * @param {Number} precision\r\n * @returns {Function} start-end unit function\r\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function _f(s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n\ndc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = new Error().stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n/**\r\n * The default date format for dc.js\r\n * @name dateFormat\r\n * @memberof dc\r\n * @type {Function}\r\n * @default d3.timeFormat('%m/%d/%Y')\r\n */\ndc.dateFormat = _d.d3.timeFormat('%m/%d/%Y');\n\n/**\r\n * @namespace printers\r\n * @memberof dc\r\n * @type {{}}\r\n */\ndc.printers = {};\n\n/**\r\n * Converts a list of filters into a readable string.\r\n * @method filters\r\n * @memberof dc.printers\r\n * @param {Array<dc.filters>} filters\r\n * @returns {String}\r\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\r\n * Converts a filter into a readable string.\r\n * @method filter\r\n * @memberof dc.printers\r\n * @param {dc.filters|any|Array<any>} filter\r\n * @returns {String}\r\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\r\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\r\n * can be passed as the second argument to also alter the data being returned.\r\n *\r\n * This can be a useful shorthand method to create accessor functions.\r\n * @method pluck\r\n * @memberof dc\r\n * @example\r\n * var xPluck = dc.pluck('x');\r\n * var objA = {x: 1};\r\n * xPluck(objA) // 1\r\n * @example\r\n * var xPosition = dc.pluck('x', function (x, i) {\r\n *     // `this` is the original datum,\r\n *     // `x` is the x property of the datum,\r\n *     // `i` is the position in the array\r\n *     return this.radius + x;\r\n * });\r\n * dc.selectAll('.circle').data(...).x(xPosition);\r\n * @param {String} n\r\n * @param {Function} [f]\r\n * @returns {Function}\r\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) {\n            return d[n];\n        };\n    }\n    return function (d, i) {\n        return f.call(d, d[n], i);\n    };\n};\n\n/**\r\n * @namespace utils\r\n * @memberof dc\r\n * @type {{}}\r\n */\ndc.utils = {};\n\n/**\r\n * Print a single value filter.\r\n * @method printSingleValue\r\n * @memberof dc.utils\r\n * @param {any} filter\r\n * @returns {String}\r\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof filter === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = _d.d3.format('.2f');\n\n// convert 'day' to 'timeDay' and similar\ndc.utils.toTimeFunc = function (t) {\n    return 'time' + t.charAt(0).toUpperCase() + t.slice(1);\n};\n\n/**\r\n * Arbitrary add one value to another.\r\n *\r\n * If the value l is of type Date, adds r units to it. t becomes the unit.\r\n * For example dc.utils.add(dt, 3, 'week') will add 3 (r = 3) weeks (t= 'week') to dt.\r\n *\r\n * If l is of type numeric, t is ignored. In this case if r is of type string,\r\n * it is assumed to be percentage (whether or not it includes %). For example\r\n * dc.utils.add(30, 10) will give 40 and dc.utils.add(30, '10') will give 33.\r\n *\r\n * They also generate strange results if l is a string.\r\n * @method add\r\n * @memberof dc.utils\r\n * @param {Date|Number} l the value to modify\r\n * @param {String|Number} r the amount by which to modify the value\r\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\r\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\r\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\r\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\r\n * @returns {Date|Number}\r\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || _d.d3.timeDay;\n        if (typeof t !== 'function') {\n            t = _d.d3[dc.utils.toTimeFunc(t)];\n        }\n        return t.offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\r\n * Arbitrary subtract one value from another.\r\n *\r\n * If the value l is of type Date, subtracts r units from it. t becomes the unit.\r\n * For example dc.utils.subtract(dt, 3, 'week') will subtract 3 (r = 3) weeks (t= 'week') from dt.\r\n *\r\n * If l is of type numeric, t is ignored. In this case if r is of type string,\r\n * it is assumed to be percentage (whether or not it includes %). For example\r\n * dc.utils.subtract(30, 10) will give 20 and dc.utils.subtract(30, '10') will give 27.\r\n *\r\n * They also generate strange results if l is a string.\r\n * @method subtract\r\n * @memberof dc.utils\r\n * @param {Date|Number} l the value to modify\r\n * @param {String|Number} r the amount by which to modify the value\r\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\r\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\r\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\r\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\r\n * @returns {Date|Number}\r\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || _d.d3.timeDay;\n        if (typeof t !== 'function') {\n            t = _d.d3[dc.utils.toTimeFunc(t)];\n        }\n        return t.offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\r\n * Is the value a number?\r\n * @method isNumber\r\n * @memberof dc.utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\r\n * Is the value a float?\r\n * @method isFloat\r\n * @memberof dc.utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\r\n * Is the value an integer?\r\n * @method isInteger\r\n * @memberof dc.utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\r\n * Is the value very close to zero?\r\n * @method isNegligible\r\n * @memberof dc.utils\r\n * @param {any} n\r\n * @returns {Boolean}\r\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER;\n};\n\n/**\r\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\r\n * @method clamp\r\n * @memberof dc.utils\r\n * @param {any} val\r\n * @param {any} min\r\n * @param {any} max\r\n * @returns {any}\r\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : val > max ? max : val;\n};\n\n/**\r\n * Given `x`, return a function that always returns `x`.\r\n *\r\n * {@link https://github.com/d3/d3/blob/master/CHANGES.md#internals `d3.functor` was removed in d3 version 4}.\r\n * This function helps to implement the replacement,\r\n * `typeof x === \"function\" ? x : dc.utils.constant(x)`\r\n * @method constant\r\n * @memberof dc.utils\r\n * @param {any} x\r\n * @returns {Function}\r\n */\ndc.utils.constant = function (x) {\n    return function () {\n        return x;\n    };\n};\n\n/**\r\n * Using a simple static counter, provide a unique integer id.\r\n * @method uniqueId\r\n * @memberof dc.utils\r\n * @returns {Number}\r\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\r\n * Convert a name to an ID.\r\n * @method nameToId\r\n * @memberof dc.utils\r\n * @param {String} name\r\n * @returns {String}\r\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\r\n * Append or select an item on a parent element.\r\n * @method appendOrSelect\r\n * @memberof dc.utils\r\n * @param {d3.selection} parent\r\n * @param {String} selector\r\n * @param {String} tag\r\n * @returns {d3.selection}\r\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\r\n * Return the number if the value is a number; else 0.\r\n * @method safeNumber\r\n * @memberof dc.utils\r\n * @param {Number|any} n\r\n * @returns {Number}\r\n */\ndc.utils.safeNumber = function (n) {\n    return dc.utils.isNumber(+n) ? +n : 0;\n};\n\n/**\r\n * Return true if both arrays are equal, if both array are null these are considered equal\r\n * @method arraysEqual\r\n * @memberof dc.utils\r\n * @param {Array|null} a1\r\n * @param {Array|null} a2\r\n * @returns {Boolean}\r\n */\ndc.utils.arraysEqual = function (a1, a2) {\n    if (!a1 && !a2) {\n        return true;\n    }\n\n    if (!a1 || !a2) {\n        return false;\n    }\n\n    return a1.length === a2.length &&\n    // If elements are not integers/strings, we hope that it will match because of toString\n    // Test cases cover dates as well.\n    a1.every(function (elem, i) {\n        return elem.valueOf() === a2[i].valueOf();\n    });\n};\n\n// ******** Sunburst Chart ********\ndc.utils.allChildren = function (node) {\n    var paths = [];\n    paths.push(node.path);\n    console.log('currentNode', node);\n    if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n            paths = paths.concat(dc.utils.allChildren(node.children[i]));\n        }\n    }\n    return paths;\n};\n\n// builds a d3 Hierarchy from a collection\n// TODO: turn this monster method something better.\ndc.utils.toHierarchy = function (list, accessor) {\n    var root = { 'key': 'root', 'children': [] };\n    for (var i = 0; i < list.length; i++) {\n        var data = list[i];\n        var parts = data.key;\n        var value = accessor(data);\n        var currentNode = root;\n        for (var j = 0; j < parts.length; j++) {\n            var currentPath = parts.slice(0, j + 1);\n            var children = currentNode.children;\n            var nodeName = parts[j];\n            var childNode;\n            if (j + 1 < parts.length) {\n                // Not yet at the end of the sequence; move down the tree.\n                childNode = findChild(children, nodeName);\n\n                // If we don't already have a child node for this branch, create it.\n                if (childNode === void 0) {\n                    childNode = { 'key': nodeName, 'children': [], 'path': currentPath };\n                    children.push(childNode);\n                }\n                currentNode = childNode;\n            } else {\n                // Reached the end of the sequence; create a leaf node.\n                childNode = { 'key': nodeName, 'value': value, 'data': data, 'path': currentPath };\n                children.push(childNode);\n            }\n        }\n    }\n    return root;\n};\n\nfunction findChild(children, nodeName) {\n    for (var k = 0; k < children.length; k++) {\n        if (children[k].key === nodeName) {\n            return children[k];\n        }\n    }\n}\n\ndc.utils.getAncestors = function (node) {\n    var path = [];\n    var current = node;\n    while (current.parent) {\n        path.unshift(current.name);\n        current = current.parent;\n    }\n    return path;\n};\n\ndc.utils.arraysIdentical = function (a, b) {\n    var i = a.length;\n    if (i !== b.length) {\n        return false;\n    }\n    while (i--) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\r\n * Provides basis logging and deprecation utilities\r\n * @class logger\r\n * @memberof dc\r\n * @returns {dc.logger}\r\n */\ndc.logger = function () {\n\n    var _logger = {};\n\n    /**\r\n     * Enable debug level logging. Set to `false` by default.\r\n     * @name enableDebugLog\r\n     * @memberof dc.logger\r\n     * @instance\r\n     */\n    _logger.enableDebugLog = false;\n\n    /**\r\n     * Put a warning message to console\r\n     * @method warn\r\n     * @memberof dc.logger\r\n     * @instance\r\n     * @example\r\n     * dc.logger.warn('Invalid use of .tension on CurveLinear');\r\n     * @param {String} [msg]\r\n     * @returns {dc.logger}\r\n     */\n    _logger.warn = function (msg) {\n        if (console) {\n            if (console.warn) {\n                console.warn(msg);\n            } else if (console.log) {\n                console.log(msg);\n            }\n        }\n\n        return _logger;\n    };\n\n    var _alreadyWarned = {};\n\n    /**\r\n     * Put a warning message to console. It will warn only on unique messages.\r\n     * @method warnOnce\r\n     * @memberof dc.logger\r\n     * @instance\r\n     * @example\r\n     * dc.logger.warnOnce('Invalid use of .tension on CurveLinear');\r\n     * @param {String} [msg]\r\n     * @returns {dc.logger}\r\n     */\n    _logger.warnOnce = function (msg) {\n        if (!_alreadyWarned[msg]) {\n            _alreadyWarned[msg] = true;\n\n            dc.logger.warn(msg);\n        }\n\n        return _logger;\n    };\n\n    /**\r\n     * Put a debug message to console. It is controlled by `dc.logger.enableDebugLog`\r\n     * @method debug\r\n     * @memberof dc.logger\r\n     * @instance\r\n     * @example\r\n     * dc.logger.debug('Total number of slices: ' + numSlices);\r\n     * @param {String} [msg]\r\n     * @returns {dc.logger}\r\n     */\n    _logger.debug = function (msg) {\n        if (_logger.enableDebugLog && console) {\n            if (console.debug) {\n                console.debug(msg);\n            } else if (console.log) {\n                console.log(msg);\n            }\n        }\n\n        return _logger;\n    };\n\n    /**\r\n     * Use it to deprecate a function. It will return a wrapped version of the function, which will\r\n     * will issue a warning when invoked. For each function, warning will be issued only once.\r\n     *\r\n     * @method deprecate\r\n     * @memberof dc.logger\r\n     * @instance\r\n     * @example\r\n     * _chart.interpolate = dc.logger.deprecate(function (interpolate) {\r\n     *    if (!arguments.length) {\r\n     *        return _interpolate;\r\n     *    }\r\n     *    _interpolate = interpolate;\r\n     *    return _chart;\r\n     * }, 'dc.lineChart.interpolate has been deprecated since version 3.0 use dc.lineChart.curve instead');\r\n     * @param {Function} [fn]\r\n     * @param {String} [msg]\r\n     * @returns {Function}\r\n     */\n    _logger.deprecate = function (fn, msg) {\n        // Allow logging of deprecation\n        var warned = false;\n        function deprecated() {\n            if (!warned) {\n                _logger.warn(msg);\n                warned = true;\n            }\n            return fn.apply(this, arguments);\n        }\n        return deprecated;\n    };\n\n    return _logger;\n}();\n\n/**\r\n * General configuration\r\n *\r\n * @class config\r\n * @memberof dc\r\n * @returns {dc.config}\r\n */\ndc.config = function () {\n    var _config = {};\n\n    // D3v5 has removed schemeCategory20c, copied here for backward compatibility\n    var _schemeCategory20c = ['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476', '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc', '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];\n\n    var _defaultColors = _schemeCategory20c;\n\n    /**\r\n     * Set the default color scheme for ordinal charts. Changing it will impact all ordinal charts.\r\n     *\r\n     * By default it is set to a copy of\r\n     * `d3.schemeCategory20c` for backward compatibility. This color scheme has been\r\n     * [removed from D3v5](https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50).\r\n     * In DC 3.1 release it will change to a more appropriate default.\r\n     *\r\n     * @example\r\n     * dc.config.defaultColors(d3.schemeSet1)\r\n     * @method defaultColors\r\n     * @memberof dc.config\r\n     * @instance\r\n     * @param {Array} [colors]\r\n     * @returns {Array|dc.config}\r\n     */\n    _config.defaultColors = function (colors) {\n        if (!arguments.length) {\n            // Issue warning if it uses _schemeCategory20c\n            if (_defaultColors === _schemeCategory20c) {\n                dc.logger.warnOnce('You are using d3.schemeCategory20c, which has been removed in D3v5. ' + 'See the explanation at https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50. ' + 'DC is using it for backward compatibility, however it will be changed in DCv3.1. ' + 'You can change it by calling dc.config.defaultColors(newScheme). ' + 'See https://github.com/d3/d3-scale-chromatic for some alternatives.');\n            }\n            return _defaultColors;\n        }\n        _defaultColors = colors;\n        return _config;\n    };\n\n    return _config;\n}();\n\ndc.events = {\n    current: null\n};\n\n/**\r\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\r\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\r\n * and invoke more renders than can be executed in time. Using this function to wrap your event\r\n * function allows the library to smooth out the rendering by throttling events and only responding to\r\n * the most recent event.\r\n * @name events.trigger\r\n * @memberof dc\r\n * @example\r\n * chart.on('renderlet', function(chart) {\r\n *     // smooth the rendering through event throttling\r\n *     dc.events.trigger(function(){\r\n *         // focus some other chart to the range selected by user on this chart\r\n *         someOtherChart.focus(chart.filter());\r\n *     });\r\n * })\r\n * @param {Function} closure\r\n * @param {Number} [delay]\r\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n\n/**\r\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\r\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\r\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\r\n * function to the dimension; the function combines multiple filters and if any of them accept a\r\n * record, it is filtered in.\r\n *\r\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\r\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\r\n *\r\n * Each of the dc.js filters is an object with the following properties:\r\n * * `isFiltered` - a function that returns true if a value is within the filter\r\n * * `filterType` - a string identifying the filter, here the name of the constructor\r\n *\r\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\r\n * can be used as long as they have the properties above.\r\n * @namespace filters\r\n * @memberof dc\r\n * @type {{}}\r\n */\ndc.filters = {};\n\n/**\r\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\r\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\r\n *\r\n * Its `filterType` is 'RangedFilter'\r\n * @name RangedFilter\r\n * @memberof dc.filters\r\n * @param {Number} low\r\n * @param {Number} high\r\n * @returns {Array<Number>}\r\n * @constructor\r\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\r\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\r\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\r\n * filtered by filtering all the cells in the row or column.)\r\n *\r\n * Its `filterType` is 'TwoDimensionalFilter'\r\n * @name TwoDimensionalFilter\r\n * @memberof dc.filters\r\n * @param {Array<Number>} filter\r\n * @returns {Array<Number>}\r\n * @constructor\r\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) {\n        return null;\n    }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length && value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\r\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\r\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\r\n *\r\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\r\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\r\n * rectangular range including the lower values but excluding the higher values.\r\n *\r\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\r\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\r\n * x2`.\r\n *\r\n * Its `filterType` is 'RangedTwoDimensionalFilter'\r\n * @name RangedTwoDimensionalFilter\r\n * @memberof dc.filters\r\n * @param {Array<Array<Number>>} filter\r\n * @returns {Array<Array<Number>>}\r\n * @constructor\r\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) {\n        return null;\n    }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [[Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])], [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] && y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n// ******** Sunburst Chart ********\n\n/**\r\n * HierarchyFilter is a filter which accepts a key path as an array. It matches any node at, or\r\n * child of, the given path. It is used by the {@link dc.sunburstChart sunburst chart} to include particular cells and all\r\n * their children as they are clicked.\r\n *\r\n * @name HierarchyFilter\r\n * @memberof dc.filters\r\n * @param {String} path\r\n * @returns {Array<String>}\r\n * @constructor\r\n */\ndc.filters.HierarchyFilter = function (path) {\n    if (path === null) {\n        return null;\n    }\n\n    var filter = path.slice(0);\n    filter.isFiltered = function (value) {\n        if (!(filter.length && value && value.length && value.length >= filter.length)) {\n            return false;\n        }\n\n        for (var i = 0; i < filter.length; i++) {\n            if (value[i] !== filter[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n    return filter;\n};\n\n/**\r\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\r\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\r\n * and available on all chart implementations in the `dc` library.\r\n * @name baseMixin\r\n * @memberof dc\r\n * @mixin\r\n * @param {Object} _chart\r\n * @returns {dc.baseMixin}\r\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function _defaultWidthCalc(element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return width && width > _minWidth ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function _defaultHeightCalc(element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return height && height > _minHeight ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function _title(d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = _d.d3.dispatch('preRender', 'postRender', 'preRedraw', 'postRedraw', 'filtered', 'zoomed', 'renderlet', 'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function _filterHandler(dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function _data(group) {\n        return group.all();\n    };\n\n    /**\r\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\r\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\r\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\r\n     * function, or falsy. If no value is specified then the value of the current height attribute will\r\n     * be returned.\r\n     *\r\n     * By default, without an explicit height being given, the chart will select the width of its\r\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\r\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\r\n     * the chart to the default behavior.\r\n     * @method height\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#minHeight minHeight}\r\n     * @example\r\n     * // Default height\r\n     * chart.height(function (element) {\r\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\r\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\r\n     * });\r\n     *\r\n     * chart.height(250); // Set the chart's height to 250px;\r\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\r\n     * chart.height(null); // reset the height to the default auto calculation\r\n     * @param {Number|Function} [height]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = height ? typeof height === 'function' ? height : dc.utils.constant(height) : _defaultHeightCalc;\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the width attribute of a chart.\r\n     * @method width\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#height height}\r\n     * @see {@link dc.baseMixin#minWidth minWidth}\r\n     * @example\r\n     * // Default width\r\n     * chart.width(function (element) {\r\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\r\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\r\n     * });\r\n     * @param {Number|Function} [width]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = width ? typeof width === 'function' ? width : dc.utils.constant(width) : _defaultWidthCalc;\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\r\n     * {@link dc.baseMixin#width width} function.\r\n     * @method minWidth\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#width width}\r\n     * @param {Number} [minWidth=200]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\r\n     * {@link dc.baseMixin#height height} function.\r\n     * @method minHeight\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#height height}\r\n     * @param {Number} [minHeight=200]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off using the SVG\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\r\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\r\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\r\n     *\r\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\r\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\r\n     * 100%` or absolute positioning to resize to its parent div.\r\n     *\r\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\r\n     * will be resized if the chart is any other size, you need to set the chart width and height so\r\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\r\n     *\r\n     * You can see examples of this resizing strategy in the [Chart Resizing\r\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\r\n     * one-chart examples to enable `useViewBoxResizing`.\r\n     * @method useViewBoxResizing\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Boolean} [useViewBoxResizing=false]\r\n     * @returns {Boolean|dc.baseMixin}\r\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\r\n     *\r\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\r\n     * the current dimension will be returned.\r\n     * @method dimension\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\r\n     * @example\r\n     * var index = crossfilter([]);\r\n     * var dimension = index.dimension(dc.pluck('key'));\r\n     * chart.dimension(dimension);\r\n     * @param {crossfilter.dimension} [dimension]\r\n     * @returns {crossfilter.dimension|dc.baseMixin}\r\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\r\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\r\n     * group and by default will return\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\r\n     * This behavior may be modified to, for instance, return only the top 5 groups.\r\n     * @method data\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // Default data function\r\n     * chart.data(function (group) { return group.all(); });\r\n     *\r\n     * chart.data(function (group) { return group.top(5); });\r\n     * @param {Function} [callback]\r\n     * @returns {*|dc.baseMixin}\r\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = typeof callback === 'function' ? callback : dc.utils.constant(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set or get the group attribute of a chart. In `dc` a group is a\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\r\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\r\n     * given, then it will be used as the new group.\r\n     *\r\n     * If no value specified then the current group will be returned.\r\n     * If `name` is specified then it will be used to generate legend label.\r\n     * @method group\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\r\n     * @example\r\n     * var index = crossfilter([]);\r\n     * var dimension = index.dimension(dc.pluck('key'));\r\n     * chart.dimension(dimension);\r\n     * chart.group(dimension.group(crossfilter.reduceSum()));\r\n     * @param {crossfilter.group} [group]\r\n     * @param {String} [name]\r\n     * @returns {crossfilter.group|dc.baseMixin}\r\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\r\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\r\n     * to sort elements; this accessor returns the value to order on.\r\n     * @method ordering\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\r\n     * @example\r\n     * // Default ordering accessor\r\n     * _chart.ordering(dc.pluck('key'));\r\n     * @param {Function} [orderFunction]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = _crossfilter.crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = _crossfilter.crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\r\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\r\n     * {@link dc.baseMixin#filter chart.filter(null)}.\r\n     * @method filterAll\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\r\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\r\n     * selection.\r\n     *\r\n     * This function is **not chainable** since it does not return a chart instance; however the d3\r\n     * selection result can be chained to d3 function calls.\r\n     * @method select\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3.select}\r\n     * @example\r\n     * // Has the same effect as d3.select('#chart-id').select(selector)\r\n     * chart.select(selector)\r\n     * @returns {d3.selection}\r\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\r\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\r\n     *\r\n     * This function is **not chainable** since it does not return a chart instance; however the d3\r\n     * selection result can be chained to d3 function calls.\r\n     * @method selectAll\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#selectAll d3.selectAll}\r\n     * @example\r\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\r\n     * chart.selectAll(selector)\r\n     * @returns {d3.selection}\r\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\r\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\r\n     * selector](https://github.com/d3/d3-selection/blob/master/README.md#selecting-elements) specifying a dom\r\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\r\n     * within the chartGroup. This class is called internally on chart initialization, but be called\r\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\r\n     * @method anchor\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\r\n     * @param {String} [chartGroup]\r\n     * @returns {String|node|d3.selection|dc.baseMixin}\r\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) {\n                // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = _d.d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\r\n     * Returns the DOM id for the chart's anchored location.\r\n     * @method anchorName\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {String}\r\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\r\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\r\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\r\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\r\n     * unexpected consequences.\r\n     * @method root\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\r\n     * @param {HTMLElement} [rootElement]\r\n     * @returns {HTMLElement|dc.baseMixin}\r\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\r\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\r\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\r\n     * of dc internals may have unexpected consequences.\r\n     * @method svg\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\r\n     * @param {SVGElement|d3.selection} [svgElement]\r\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\r\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\r\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\r\n     * @method resetSvg\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\r\n     * @returns {SVGElement}\r\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg() {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg.attr('width', _chart.width()).attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg.attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg() {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\r\n     * Set or get the filter printer function. The filter printer function is used to generate human\r\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\r\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\r\n     *\r\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\r\n     * that provides simple printing support for both single value and ranged filters.\r\n     * @method filterPrinter\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // for a chart with an ordinal brush, print the filters in upper case\r\n     * chart.filterPrinter(function(filters) {\r\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\r\n     * });\r\n     * // for a chart with a range brush, print the filter as start and extent\r\n     * chart.filterPrinter(function(filters) {\r\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\r\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\r\n     * });\r\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\r\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\r\n     * chart reset and filter controls, for less disruption to the layout.\r\n     * @method controlsUseVisibility\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Boolean} [controlsUseVisibility=false]\r\n     * @returns {Boolean|dc.baseMixin}\r\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on optional control elements within the root element. dc currently supports the\r\n     * following html control elements.\r\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\r\n     * of control element is usually used to store a reset link to allow user to reset filter on a\r\n     * certain chart. This element will be turned off automatically if the filter is cleared.\r\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\r\n     * content of this element is then replaced with the current filter value using the filter printer\r\n     * function. This type of element will be turned off automatically if the filter is cleared.\r\n     * @method turnOnControls\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Turn off optional control elements within the root element.\r\n     * @method turnOffControls\r\n     * @memberof dc.baseMixin\r\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\r\n     * @method transitionDuration\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Number} [duration=750]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\r\n     * @method transitionDelay\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Number} [delay=0]\r\n     * @returns {Number|dc.baseMixin}\r\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes(a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a + ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\r\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\r\n     * should only be used to render the chart for the first time on the page or if you want to make\r\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\r\n     * behaviour.\r\n     * @method render\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.call('preRender', _chart, _chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.call('pretransition', _chart, _chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).on('end', function () {\n                _listeners.call('renderlet', _chart, _chart);\n                if (event) {\n                    _listeners.call(event, _chart, _chart);\n                }\n            });\n        } else {\n            _listeners.call('renderlet', _chart, _chart);\n            if (event) {\n                _listeners.call(event, _chart, _chart);\n            }\n        }\n    };\n\n    /**\r\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\r\n     * change in the underlying data dimension then calling this method will have no effect on the\r\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\r\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\r\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\r\n     * data is loaded in the background using\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\r\n     * @method redraw\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.call('preRedraw', _chart, _chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\r\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\r\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\r\n     *\r\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\r\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\r\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\r\n     * with error first and result second.\r\n     * @method commitHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\r\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\r\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\r\n     * be executed and waited for.\r\n     * @method redrawGroup\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Renders all charts in the same group as this chart. If the chart has a\r\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\r\n     * @method renderGroup\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.call('filtered', _chart, _chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.call('zoomed', _chart, _chart);\n    };\n\n    var _hasFilterHandler = function _hasFilterHandler(filters, filter) {\n        if (filter === null || typeof filter === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\r\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\r\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\r\n     * you to change the way filters are checked for and replaced.\r\n     * @method hasFilterHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default has-filter handler\r\n     * chart.hasFilterHandler(function (filters, filter) {\r\n     *     if (filter === null || typeof(filter) === 'undefined') {\r\n     *         return filters.length > 0;\r\n     *     }\r\n     *     return filters.some(function (f) {\r\n     *         return filter <= f && filter >= f;\r\n     *     });\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.hasFilterHandler(function(filters, filter) {\r\n     *     return false;\r\n     * });\r\n     * @param {Function} [hasFilterHandler]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\r\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\r\n     * This function is **not chainable**.\r\n     * @method hasFilter\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\r\n     * @param {*} [filter]\r\n     * @returns {Boolean}\r\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function _removeFilterHandler(filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\r\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\r\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\r\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\r\n     * using a filter server other than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @method removeFilterHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default remove filter handler\r\n     * chart.removeFilterHandler(function (filters, filter) {\r\n     *     for (var i = 0; i < filters.length; i++) {\r\n     *         if (filters[i] <= filter && filters[i] >= filter) {\r\n     *             filters.splice(i, 1);\r\n     *             break;\r\n     *         }\r\n     *     }\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.removeFilterHandler(function(filters, filter) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [removeFilterHandler]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function _addFilterHandler(filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\r\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\r\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\r\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\r\n     * than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @method addFilterHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default add filter handler\r\n     * chart.addFilterHandler(function (filters, filter) {\r\n     *     filters.push(filter);\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.addFilterHandler(function(filters, filter) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [addFilterHandler]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function _resetFilterHandler(filters) {\n        return [];\n    };\n\n    /**\r\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\r\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\r\n     * change the way filters are reset, or perform additional work when resetting the filters,\r\n     * e.g. when using a filter server other than crossfilter.\r\n     *\r\n     * The handler should return a new or modified array as the result.\r\n     * @method resetFilterHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default remove filter handler\r\n     * function (filters) {\r\n     *     return [];\r\n     * }\r\n     *\r\n     * // custom filter handler (no-op)\r\n     * chart.resetFilterHandler(function(filters) {\r\n     *     return filters;\r\n     * });\r\n     * @param {Function} [resetFilterHandler]\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters(filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\r\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\r\n     * but more efficient because the filter is only applied once.\r\n     *\r\n     * @method replaceFilter\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {*} [filter]\r\n     * @returns {dc.baseMixin}\r\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\r\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\r\n     * is given.\r\n     *\r\n     * The filter parameter can take one of these forms:\r\n     * * A single value: the value will be toggled (added if it is not present in the current\r\n     * filters, removed if it is present)\r\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\r\n     * toggled\r\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\r\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\r\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\r\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\r\n     * {@link dc.heatMap heat map}\r\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\r\n     * for the {@link dc.scatterPlot scatter plot}\r\n     * * `null`: the filter will be reset using the\r\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\r\n     *\r\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\r\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\r\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\r\n     *\r\n     * Each toggle is executed by checking if the value is already present using the\r\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\r\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\r\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\r\n     *\r\n     * Once the filters array has been updated, the filters are applied to the\r\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\r\n     *\r\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\r\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\r\n     * @method filter\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\r\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\r\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\r\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\r\n     * @example\r\n     * // filter by a single string\r\n     * chart.filter('Sunday');\r\n     * // filter by a single age\r\n     * chart.filter(18);\r\n     * // filter by a set of states\r\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\r\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\r\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\r\n     * chart.filter(dc.filters.RangedFilter(15,20));\r\n     * @param {*} [filter]\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\r\n     * Returns all current filters. This method does not perform defensive cloning of the internal\r\n     * filter array before returning, therefore any modification of the returned array will effect the\r\n     * chart's internal filter storage.\r\n     * @method filters\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {Array<*>}\r\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        _d.d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        _d.d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        _d.d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        _d.d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        _d.d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        _d.d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\r\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\r\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\r\n     * @method onClick\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {*} datum\r\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\r\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\r\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\r\n     * before or after filtering.\r\n     * @method filterHandler\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\r\n     * @example\r\n     * // the default filter handler handles all possible cases for the charts in dc.js\r\n     * // you can replace it with something more specialized for your own chart\r\n     * chart.filterHandler(function (dimension, filters) {\r\n     *     if (filters.length === 0) {\r\n     *         // the empty case (no filtering)\r\n     *         dimension.filter(null);\r\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\r\n     *         // single value and not a function-based filter\r\n     *         dimension.filterExact(filters[0]);\r\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\r\n     *         // single range-based filter\r\n     *         dimension.filterRange(filters[0]);\r\n     *     } else {\r\n     *         // an array of values, or an array of filter objects\r\n     *         dimension.filterFunction(function (d) {\r\n     *             for (var i = 0; i < filters.length; i++) {\r\n     *                 var filter = filters[i];\r\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\r\n     *                     return true;\r\n     *                 } else if (filter <= d && filter >= d) {\r\n     *                     return true;\r\n     *                 }\r\n     *             }\r\n     *             return false;\r\n     *         });\r\n     *     }\r\n     *     return filters;\r\n     * });\r\n     *\r\n     * // custom filter handler\r\n     * chart.filterHandler(function(dimension, filter){\r\n     *     var newFilter = filter + 10;\r\n     *     dimension.filter(newFilter);\r\n     *     return newFilter; // set the actual filter value to the new value\r\n     * });\r\n     * @param {Function} [filterHandler]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\r\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\r\n     * value from the crossfilter group. Key values are used differently in different charts, for\r\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\r\n     * @method keyAccessor\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default key accessor\r\n     * chart.keyAccessor(function(d) { return d.key; });\r\n     * // custom key accessor for a multi-value crossfilter reduction\r\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\r\n     * @param {Function} [keyAccessor]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\r\n     * value from the crossfilter group. Group values are used differently in different charts, for\r\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\r\n     * coordinate chart.\r\n     * @method valueAccessor\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default value accessor\r\n     * chart.valueAccessor(function(d) { return d.value; });\r\n     * // custom value accessor for a multi-value crossfilter reduction\r\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\r\n     * @param {Function} [valueAccessor]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the label function. The chart class will use this function to render labels for each\r\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\r\n     * chart supports the label function, for example line chart does not use this function\r\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\r\n     * @method label\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default label function just return the key\r\n     * chart.label(function(d) { return d.key; });\r\n     * // label function has access to the standard d3 data binding and can get quite complicated\r\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\r\n     * @param {Function} [labelFunction]\r\n     * @param {Boolean} [enableLabels=true]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if (enableLabels === undefined || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off label rendering\r\n     * @method renderLabel\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Boolean} [renderLabel=false]\r\n     * @returns {Boolean|dc.baseMixin}\r\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\r\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\r\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\r\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\r\n     * otherwise the brush layer will block tooltip triggering.\r\n     * @method title\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * // default title function shows \"key: value\"\r\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\r\n     * // title function has access to the standard d3 data binding and can get quite complicated\r\n     * chart.title(function(p) {\r\n     *    return p.key.getFullYear()\r\n     *        + '\\n'\r\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\r\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\r\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\r\n     * });\r\n     * @param {Function} [titleFunction]\r\n     * @returns {Function|dc.baseMixin}\r\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\r\n     * given.\r\n     * @method renderTitle\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {Boolean} [renderTitle=true]\r\n     * @returns {Boolean|dc.baseMixin}\r\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\r\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\r\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\r\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\r\n     * Renderlet functions take the chart instance as the only input parameter and you can\r\n     * use the dc API or use raw d3 to achieve pretty much any effect.\r\n     *\r\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\r\n     * Generates a random key for the renderlet, which makes it hard to remove.\r\n     * @method renderlet\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @deprecated\r\n     * @example\r\n     * // do this instead of .renderlet(function(chart) { ... })\r\n     * chart.on(\"renderlet\", function(chart){\r\n     *     // mix of dc API and d3 manipulation\r\n     *     chart.select('g.y').style('display', 'none');\r\n     *     // its a closure so you can also access other chart variable available in the closure scope\r\n     *     moveChart.filter(chart.filter());\r\n     * });\r\n     * @param {Function} renderletFunction\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\r\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\r\n     * together since it is expected they share the same underlying crossfilter data set.\r\n     * @method chartGroup\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @param {String} [chartGroup]\r\n     * @returns {String|dc.baseMixin}\r\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\r\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\r\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\r\n     * function or reset group or dimension after rendering, it is a good idea to\r\n     * clear the cache to make sure charts are rendered properly.\r\n     * @method expireCache\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\r\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\r\n     * based on the color setting and names associated with each group.\r\n     * @method legend\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\r\n     * @param {dc.legend} [legend]\r\n     * @returns {dc.legend|dc.baseMixin}\r\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\r\n     * Returns the internal numeric ID of the chart.\r\n     * @method chartID\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @returns {String}\r\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\r\n     * Set chart options using a configuration object. Each key in the object will cause the method of\r\n     * the same name to be called with the value to set that attribute for the chart.\r\n     * @method options\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @example\r\n     * chart.options({dimension: myDimension, group: myGroup});\r\n     * @param {{}} opts\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.options = function (opts) {\n        var applyOptions = ['anchor', 'group', 'xAxisLabel', 'yAxisLabel', 'stack', 'title', 'point', 'getColor', 'overlayGeoJson'];\n\n        for (var o in opts) {\n            if (typeof _chart[o] === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\r\n     * All dc chart instance supports the following listeners.\r\n     * Supports the following events:\r\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\r\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\r\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\r\n     * * `preRender` - This listener function will be invoked before chart rendering.\r\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\r\n     * all renderlets' logic.\r\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\r\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\r\n     * including all renderlets' logic.\r\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\r\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\r\n     * @method on\r\n     * @memberof dc.baseMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-dispatch/blob/master/README.md#dispatch_on d3.dispatch.on}\r\n     * @example\r\n     * .on('renderlet', function(chart, filter){...})\r\n     * .on('pretransition', function(chart, filter){...})\r\n     * .on('preRender', function(chart){...})\r\n     * .on('postRender', function(chart){...})\r\n     * .on('preRedraw', function(chart){...})\r\n     * .on('postRedraw', function(chart){...})\r\n     * .on('filtered', function(chart, filter){...})\r\n     * .on('zoomed', function(chart, filter){...})\r\n     * @param {String} event\r\n     * @param {Function} listener\r\n     * @returns {dc.baseMixin}\r\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n\n/**\r\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\r\n * Charts.\r\n * @name marginMixin\r\n * @memberof dc\r\n * @mixin\r\n * @param {Object} _chart\r\n * @returns {dc.marginMixin}\r\n */\ndc.marginMixin = function (_chart) {\n    var _margin = { top: 10, right: 50, bottom: 30, left: 30 };\n\n    /**\r\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\r\n     * an associative Javascript array.\r\n     * @method margins\r\n     * @memberof dc.marginMixin\r\n     * @instance\r\n     * @example\r\n     * var leftMargin = chart.margins().left; // 30 by default\r\n     * chart.margins().left = 50;\r\n     * leftMargin = chart.margins().left; // now 50\r\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\r\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\r\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n\n/**\r\n * The Color Mixin is an abstract chart functional class providing universal coloring support\r\n * as a mix-in for any concrete chart implementation.\r\n * @name colorMixin\r\n * @memberof dc\r\n * @mixin\r\n * @param {Object} _chart\r\n * @returns {dc.colorMixin}\r\n */\ndc.colorMixin = function (_chart) {\n    var _colors = _d.d3.scaleOrdinal(dc.config.defaultColors());\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function _colorAccessor(d) {\n        return _chart.keyAccessor()(d);\n    };\n\n    /**\r\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\r\n     * operates like a d3 scale.\r\n     * @method colors\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @example\r\n     * // alternate categorical scale\r\n     * chart.colors(d3.scale.category20b());\r\n     * // ordinal scale\r\n     * chart.colors(d3.scaleOrdinal().range(['red','green','blue']));\r\n     * // convenience method, the same as above\r\n     * chart.ordinalColors(['red','green','blue']);\r\n     * // set a linear scale\r\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\r\n     * @param {d3.scale} [colorScale=d3.scaleOrdinal(d3.schemeCategory20c)]\r\n     * @returns {d3.scale|dc.colorMixin}\r\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = _d.d3.scaleQuantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = typeof colorScale === 'function' ? colorScale : dc.utils.constant(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Convenience method to set the color scale to\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal} with\r\n     * range `r`.\r\n     * @method ordinalColors\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @param {Array<String>} r\r\n     * @returns {dc.colorMixin}\r\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(_d.d3.scaleOrdinal().range(r));\n    };\n\n    /**\r\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\r\n     * @method linearColors\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @param {Array<Number>} r\r\n     * @returns {dc.colorMixin}\r\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(_d.d3.scaleLinear().range(r).interpolate(_d.d3.interpolateHcl));\n    };\n\n    /**\r\n     * Set or the get color accessor function. This function will be used to map a data point in a\r\n     * crossfilter group to a color value on the color scale. The default function uses the key\r\n     * accessor.\r\n     * @method colorAccessor\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @example\r\n     * // default index based color accessor\r\n     * .colorAccessor(function (d, i){return i;})\r\n     * // color accessor for a multi-value crossfilter reduction\r\n     * .colorAccessor(function (d){return d.value.absGain;})\r\n     * @param {Function} [colorAccessor]\r\n     * @returns {Function|dc.colorMixin}\r\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\r\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\r\n     * array.\r\n     *\r\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\r\n     * set by {@link dc.colorMixin#colors .colors}.\r\n     * @method colorDomain\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @param {Array<String>} [domain]\r\n     * @returns {Array<String>|dc.colorMixin}\r\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\r\n     * Set the domain by determining the min and max values as retrieved by\r\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\r\n     * @method calculateColorDomain\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @returns {dc.colorMixin}\r\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [_d.d3.min(_chart.data(), _chart.colorAccessor()), _d.d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\r\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\r\n     * @method getColor\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @param {*} d\r\n     * @param {Number} [i]\r\n     * @returns {String}\r\n     */\n    _chart.getColor = function (d, i) {\n        return _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\r\n     * **Deprecated.** Get/set the color calculator. This actually replaces the\r\n     * {@link dc.colorMixin#getColor getColor} method!\r\n     *\r\n     * This is not recommended, since using a {@link dc.colorMixin#colorAccessor colorAccessor} and\r\n     * color scale ({@link dc.colorMixin#colors .colors}) is more powerful and idiomatic d3.\r\n     * @method colorCalculator\r\n     * @memberof dc.colorMixin\r\n     * @instance\r\n     * @param {*} [colorCalculator]\r\n     * @returns {Function|dc.colorMixin}\r\n     */\n    _chart.colorCalculator = dc.logger.deprecate(function (colorCalculator) {\n        if (!arguments.length) {\n            return _chart.getColor;\n        }\n        _chart.getColor = colorCalculator;\n        return _chart;\n    }, 'colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead');\n\n    return _chart;\n};\n\n/**\r\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\r\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\r\n * @name coordinateGridMixin\r\n * @memberof dc\r\n * @mixin\r\n * @mixes dc.colorMixin\r\n * @mixes dc.marginMixin\r\n * @mixes dc.baseMixin\r\n * @param {Object} _chart\r\n * @returns {dc.coordinateGridMixin}\r\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var CUSTOM_BRUSH_HANDLE_CLASS = 'custom-brush-handle';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(_d.d3.scaleOrdinal(_d.d3.schemeCategory10));\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _origX; // Will hold orginial scale in case of zoom\n    var _xOriginalDomain;\n    var _xAxis = _d.d3.axisBottom();\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = _d.d3.timeDay;\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = null;\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = _d.d3.brushX();\n    var _gBrush;\n    var _brushOn = true;\n    var _parentBrushOn = false;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = _d.d3.zoom().on('zoom', onZoom);\n    var _nullZoom = _d.d3.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\r\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\r\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\r\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\r\n     * no effect on elastic scales.)\r\n     * @method rescale\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {dc.coordinateGridMixin}\r\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\r\n     * Get or set the range selection chart associated with this instance. Setting the range selection\r\n     * chart using this function will automatically update its selection brush when the current chart\r\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\r\n     * chart hence zoom in when range brush updates.\r\n     *\r\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\r\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\r\n     * the focus chart.\r\n     *\r\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\r\n     * @method rangeChart\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {dc.coordinateGridMixin} [rangeChart]\r\n     * @returns {dc.coordinateGridMixin}\r\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the scale extent for mouse zooms.\r\n     * @method zoomScale\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\r\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\r\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\r\n     * @method zoomOutRestrict\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [zoomOutRestrict=true]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body').attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')').attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\r\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\r\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\r\n     * by dc.js internals, and resetting it might produce unpredictable result.\r\n     * @method g\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {SVGElement} [gElement]\r\n     * @returns {SVGElement|dc.coordinateGridMixin}\r\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\r\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\r\n     * the range selection brush on the associated range selector chart.\r\n     * @method mouseZoomable\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [mouseZoomable=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\r\n     * Retrieve the svg group for the chart body.\r\n     * @method chartBodyG\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {SVGElement} [chartBodyG]\r\n     * @returns {SVGElement}\r\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Get or set the x scale. The x scale can be any d3\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale} or\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales ordinal scale}\r\n     * @method x\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @example\r\n     * // set x to a linear scale\r\n     * chart.x(d3.scaleLinear().domain([-2500, 2500]))\r\n     * // set x to a time scale to generate histogram\r\n     * chart.x(d3.scaleTime().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\r\n     * @param {d3.scale} [xScale]\r\n     * @returns {d3.scale|dc.coordinateGridMixin}\r\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\r\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\r\n     * the number of data projections on the x axis such as the number of bars for a bar chart or the\r\n     * number of dots for a line chart.\r\n     *\r\n     * This function is expected to return a Javascript array of all data points on the x axis, or\r\n     * the number of points on the axis. d3 time range functions [d3.timeDays, d3.timeMonths, and\r\n     * d3.timeYears](https://github.com/d3/d3-time/blob/master/README.md#intervals) are all valid\r\n     * xUnits functions.\r\n     *\r\n     * dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\r\n     * a list of built-in units functions.\r\n     *\r\n     * Note that as of dc.js 3.0, `dc.units.ordinal` is not a real function, because it is not\r\n     * possible to define this function compliant with the d3 range functions. It was already a\r\n     * magic value which caused charts to behave differently, and now it is completely so.\r\n     * @method xUnits\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @example\r\n     * // set x units to count days\r\n     * chart.xUnits(d3.timeDays);\r\n     * // set x units to count months\r\n     * chart.xUnits(d3.timeMonths);\r\n     *\r\n     * // A custom xUnits function can be used as long as it follows the following interface:\r\n     * // units in integer\r\n     * function(start, end) {\r\n     *      // simply calculates how many integers in the domain\r\n     *      return Math.abs(end - start);\r\n     * }\r\n     *\r\n     * // fixed units\r\n     * function(start, end) {\r\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\r\n     *      return 1000;\r\n     * }\r\n     * @param {Function} [xUnits=dc.units.integers]\r\n     * @returns {Function|dc.coordinateGridMixin}\r\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\r\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\r\n     * {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3 bottom axis object};\r\n     * therefore it supports any valid d3 axisBottom manipulation.\r\n     *\r\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\r\n     * it returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\r\n     * @method xAxis\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3.axisBottom}\r\n     * @example\r\n     * // customize x axis tick format\r\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\r\n     * // customize x axis tick values\r\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axis} [xAxis=d3.axisBottom()]\r\n     * @returns {d3.axis|dc.coordinateGridMixin}\r\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\r\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\r\n     * @method elasticX\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [elasticX=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\r\n     * axis if elasticX is turned on; otherwise it is ignored.\r\n     *\r\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\r\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\r\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\r\n     * xAxisPaddingUnit variable.\r\n     * @method xAxisPadding\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Number|String} [padding=0]\r\n     * @returns {Number|String|dc.coordinateGridMixin}\r\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\r\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\r\n     * otherwise it is ignored.\r\n     *\r\n     * The padding unit should be a\r\n     * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\r\n     * For backward compatibility with dc.js 2.0, it can also be the name of a d3 time interval\r\n     * ('day', 'hour', etc). Available arguments are the\r\n     * [d3 time intervals](https://github.com/d3/d3-time/blob/master/README.md#intervals d3.timeInterval).\r\n     * @method xAxisPaddingUnit\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {String} [unit=d3.timeDay]\r\n     * @returns {String|dc.coordinateGridMixin}\r\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\r\n     * Returns the number of units displayed on the x axis. If the x axis is ordinal (`xUnits` is\r\n     * `dc.units.ordinal`), this is the number of items in the domain of the x scale. Otherwise, the\r\n     * x unit count is calculated using the {@link dc.coordinateGridMixin#xUnits xUnits} function.\r\n     * @method xUnitCount\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {Number}\r\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            if (_chart.isOrdinal()) {\n                // In this case it number of items in domain\n                _unitCount = _chart.x().domain().length;\n            } else {\n                _unitCount = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1]);\n\n                // Sometimes xUnits() may return an array while sometimes directly the count\n                if (_unitCount instanceof Array) {\n                    _unitCount = _unitCount.length;\n                }\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\r\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\r\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\r\n     * chart.\r\n     * @method useRightYAxis\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [useRightYAxis=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n\n        // We need to warn if value is changing after _yAxis was created\n        if (_useRightYAxis !== useRightYAxis && _yAxis) {\n            dc.logger.warn('Value of useRightYAxis has been altered, after yAxis was created. ' + 'You might get unexpected yAxis behavior. ' + 'Make calls to useRightYAxis sooner in your chart creation process.');\n        }\n\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\r\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\r\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\r\n     * trigger the appropriate logic.\r\n     * @method isOrdinal\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {Boolean}\r\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function prepareXAxis(g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else {\n            // _chart.isOrdinal()\n            // D3v4 - Ordinal charts would need scaleBand\n            // bandwidth is a method in scaleBand\n            // (https://github.com/d3/d3-scale/blob/master/README.md#scaleBand)\n            if (!_x.bandwidth) {\n                // If _x is not a scaleBand create a new scale and\n                // copy the original domain to the new scale\n                dc.logger.warn('For compatibility with d3v4+, dc.js d3.0 ordinal bar/line/bubble charts need ' + 'd3.scaleBand() for the x scale, instead of d3.scaleOrdinal(). ' + 'Replacing .x() with a d3.scaleBand with the same domain - ' + 'make the same change in your code to avoid this warning!');\n                _x = _d.d3.scaleBand().domain(_x.domain());\n            }\n\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || !dc.utils.arraysEqual(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.range([0, _chart.xAxisLength()]).paddingInner(_rangeBandPadding).paddingOuter(_chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g').attr('class', 'axis x').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text').attr('class', X_AXIS_LABEL_CLASS).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')').attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')').call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines(g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() : typeof _x.ticks === 'function' ? _x.ticks.apply(_x, _xAxis.tickArguments()) : _x.domain();\n\n            var lines = gridLineG.selectAll('line').data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter().append('line').attr('x1', function (d) {\n                return _x(d);\n            }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n                return _x(d);\n            }).attr('y2', 0).attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1);\n\n            // update\n            var linesGEnterUpdate = linesGEnter.merge(lines);\n            dc.transition(linesGEnterUpdate, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', function (d) {\n                return _x(d);\n            }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n                return _x(d);\n            }).attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return _chart.height() - _chart.margins().bottom;\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\r\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\r\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\r\n     * @method xAxisLabel\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {String} [labelText]\r\n     * @param {Number} [padding=12]\r\n     * @returns {String}\r\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    function createYAxis() {\n        return _useRightYAxis ? _d.d3.axisRight() : _d.d3.axisLeft();\n    }\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = _d.d3.scaleLinear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n\n        if (!_yAxis) {\n            _yAxis = createYAxis();\n        }\n\n        _yAxis.scale(_y);\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = _chart.margins().top + _chart.yAxisHeight() / 2;\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text').attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')').attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label').attr('text-anchor', 'middle').text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g').attr('class', 'axis ' + axisClass).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')').call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? _chart.width() - _chart.margins().right : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? _chart.width() - _yAxisLabelPadding : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            // see https://github.com/d3/d3-axis/blob/master/src/axis.js#L48\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks ? scale.ticks.apply(scale, axis.tickArguments()) : scale.domain();\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line').data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter().append('line').attr('x1', 1).attr('y1', function (d) {\n                return scale(d);\n            }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n                return scale(d);\n            }).attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1);\n\n            // update\n            var linesGEnterUpdate = linesGEnter.merge(lines);\n            dc.transition(linesGEnterUpdate, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', 1).attr('y1', function (d) {\n                return scale(d);\n            }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n                return scale(d);\n            });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\r\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\r\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\r\n     * text height.\r\n     * @method yAxisLabel\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {String} [labelText]\r\n     * @param {Number} [padding=12]\r\n     * @returns {String|dc.coordinateGridMixin}\r\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\r\n     * @method y\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [yScale]\r\n     * @returns {d3.scale|dc.coordinateGridMixin}\r\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\r\n     * when y axis customization is required. Depending on `useRightYAxis` the y axis in dc.js is an instance of\r\n     * either [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft) or\r\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight); therefore it supports any\r\n     * valid d3 axis manipulation.\r\n     *\r\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\r\n     * returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\r\n     * In addition, depending on whether you are going to use the axis on left or right\r\n     * you need to appropriately pass [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft)\r\n     * or [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight)\r\n     * @method yAxis\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\r\n     * @example\r\n     * // customize y axis tick format\r\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\r\n     * // customize y axis tick values\r\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axisLeft|d3.axisRight} [yAxis]\r\n     * @returns {d3.axisLeft|d3.axisRight|dc.coordinateGridMixin}\r\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            if (!_yAxis) {\n                _yAxis = createYAxis();\n            }\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\r\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\r\n     * @method elasticY\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [elasticY=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off horizontal grid lines.\r\n     * @method renderHorizontalGridLines\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [renderHorizontalGridLines=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off vertical grid lines.\r\n     * @method renderVerticalGridLines\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [renderVerticalGridLines=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\r\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\r\n     * @method xAxisMin\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {*}\r\n     */\n    _chart.xAxisMin = function () {\n        var min = _d.d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\r\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\r\n     * @method xAxisMax\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {*}\r\n     */\n    _chart.xAxisMax = function () {\n        var max = _d.d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\r\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\r\n     * @method yAxisMin\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {*}\r\n     */\n    _chart.yAxisMin = function () {\n        var min = _d.d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\r\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\r\n     * @method yAxisMax\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @returns {*}\r\n     */\n    _chart.yAxisMax = function () {\n        var max = _d.d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\r\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\r\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\r\n     *\r\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\r\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\r\n     * and a percentage string will be treated the same as an integer.\r\n     * @method yAxisPadding\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Number|String} [padding=0]\r\n     * @returns {Number|dc.coordinateGridMixin}\r\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\r\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\r\n     * @method round\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @example\r\n     * // set x unit round to by month, this will make sure range selection brush will\r\n     * // select whole months\r\n     * chart.round(d3.timeMonth.round);\r\n     * @param {Function} [round]\r\n     * @returns {Function|dc.coordinateGridMixin}\r\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        _chart.redrawBrush(_, false);\n\n        return _chart;\n    });\n\n    /**\r\n     * Get or set the brush. Brush must be an instance of d3 brushes\r\n     * https://github.com/d3/d3-brush/blob/master/README.md\r\n     * You will use this only if you are writing a new chart type that supports brushing.\r\n     *\r\n     * **Caution**: dc creates and manages brushes internally. Go through and understand the source code\r\n     * if you want to pass a new brush object. Even if you are only using the getter,\r\n     * the brush object may not behave the way you expect.\r\n     *\r\n     * @method brush\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {d3.brush} [_]\r\n     * @returns {d3.brush|dc.coordinateGridMixin}\r\n     */\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    _chart.renderBrush = function (g, doTransition) {\n        if (_brushOn) {\n            _brush.on('start brush end', _chart._brushing);\n\n            // To retrieve selection we need _gBrush\n            _gBrush = g.append('g').attr('class', 'brush').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n            _chart.setBrushExtents();\n\n            _chart.createBrushHandlePaths(_gBrush, doTransition);\n\n            _chart.redrawBrush(_chart.filter(), doTransition);\n        }\n    };\n\n    _chart.createBrushHandlePaths = function (gBrush) {\n        var brushHandles = gBrush.selectAll('path.' + CUSTOM_BRUSH_HANDLE_CLASS).data([{ type: 'w' }, { type: 'e' }]);\n\n        brushHandles = brushHandles.enter().append('path').attr('class', CUSTOM_BRUSH_HANDLE_CLASS).merge(brushHandles);\n\n        brushHandles.attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function (brushSelection) {\n        if (brushSelection && _chart.round()) {\n            brushSelection[0] = _chart.round()(brushSelection[0]);\n            brushSelection[1] = _chart.round()(brushSelection[1]);\n        }\n        return brushSelection;\n    };\n\n    _chart.brushIsEmpty = function (brushSelection) {\n        return !brushSelection || brushSelection[1] <= brushSelection[0];\n    };\n\n    _chart._brushing = function () {\n        // Avoids infinite recursion (mutual recursion between range and focus operations)\n        // Source Event will be null when brush.move is called programmatically (see below as well).\n        if (!_d.d3.event.sourceEvent) {\n            return;\n        }\n\n        // Ignore event if recursive event - i.e. not directly generated by user action (like mouse/touch etc.)\n        // In this case we are more worried about this handler causing brush move programmatically which will\n        // cause this handler to be invoked again with a new d3.event (and current event set as sourceEvent)\n        // This check avoids recursive calls\n        if (_d.d3.event.sourceEvent.type && ['start', 'brush', 'end'].indexOf(_d.d3.event.sourceEvent.type) !== -1) {\n            return;\n        }\n\n        var brushSelection = _d.d3.event.selection;\n        if (brushSelection) {\n            brushSelection = brushSelection.map(_chart.x().invert);\n        }\n\n        brushSelection = _chart.extendBrush(brushSelection);\n\n        _chart.redrawBrush(brushSelection, false);\n\n        var rangedFilter = _chart.brushIsEmpty(brushSelection) ? null : dc.filters.RangedFilter(brushSelection[0], brushSelection[1]);\n\n        dc.events.trigger(function () {\n            _chart.applyBrushSelection(rangedFilter);\n        }, dc.constants.EVENT_DELAY);\n    };\n\n    // This can be overridden in a derived chart. For example Composite chart overrides it\n    _chart.applyBrushSelection = function (rangedFilter) {\n        _chart.replaceFilter(rangedFilter);\n        _chart.redrawGroup();\n    };\n\n    _chart.setBrushExtents = function (doTransition) {\n        // Set boundaries of the brush, must set it before applying to _gBrush\n        _brush.extent([[0, 0], [_chart.effectiveWidth(), _chart.effectiveHeight()]]);\n\n        _gBrush.call(_brush);\n    };\n\n    _chart.redrawBrush = function (brushSelection, doTransition) {\n        if (_brushOn && _gBrush) {\n            if (_resizing) {\n                _chart.setBrushExtents(doTransition);\n            }\n\n            if (!brushSelection) {\n                _gBrush.call(_brush.move, null);\n\n                _gBrush.selectAll('path.' + CUSTOM_BRUSH_HANDLE_CLASS).attr('display', 'none');\n            } else {\n                var scaledSelection = [_x(brushSelection[0]), _x(brushSelection[1])];\n\n                var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(_gBrush);\n\n                gBrush.call(_brush.move, scaledSelection);\n\n                gBrush.selectAll('path.' + CUSTOM_BRUSH_HANDLE_CLASS).attr('display', null).attr('transform', function (d, i) {\n                    return 'translate(' + _x(brushSelection[i]) + ', 0)';\n                }).attr('d', _chart.resizeHandlePath);\n            }\n        }\n        _chart.fadeDeselectedArea(brushSelection);\n    };\n\n    _chart.fadeDeselectedArea = function (brushSelection) {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        d = d.type;\n        var e = +(d === 'e'),\n            x = e ? 1 : -1,\n            y = _chart.effectiveHeight() / 3;\n        return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);\n    };\n\n    function getClipPathId() {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\r\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\r\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\r\n     * will be exactly the chart body area minus the margins.\r\n     * @method clipPadding\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Number} [padding=5]\r\n     * @returns {Number|dc.coordinateGridMixin}\r\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath() {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect').attr('width', _chart.xAxisLength() + padding).attr('height', _chart.yAxisHeight() + padding).attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart(render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            // Animate the brush only while resizing\n            _chart.redrawBrush(_chart.filter(), _resizing);\n        }\n        _chart.fadeDeselectedArea(_chart.filter());\n        _resizing = false;\n    }\n\n    function configureMouseZoom() {\n        // Save a copy of original x scale\n        _origX = _x.copy();\n\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n\n        var extent = [[0, 0], [_chart.effectiveWidth(), _chart.effectiveHeight()]];\n\n        _zoom.scaleExtent(_zoomScale).extent(extent).duration(_chart.transitionDuration());\n\n        if (_zoomOutRestrict) {\n            // Ensure minimum zoomScale is at least 1\n            var zoomScaleMin = Math.max(_zoomScale[0], 1);\n            _zoom.translateExtent(extent).scaleExtent([zoomScaleMin, _zoomScale[1]]);\n        }\n\n        _chart.root().call(_zoom);\n\n        // Tell D3 zoom our current zoom/pan status\n        updateD3zoomTransform();\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler(newDomain, noRaiseEvents) {\n        var domFilter;\n\n        if (hasRangeSelected(newDomain)) {\n            _chart.x().domain(newDomain);\n            domFilter = dc.filters.RangedFilter(newDomain[0], newDomain[1]);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n            domFilter = null;\n        }\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (!noRaiseEvents) {\n            if (_rangeChart && !dc.utils.arraysEqual(_chart.filter(), _rangeChart.filter())) {\n                dc.events.trigger(function () {\n                    _rangeChart.replaceFilter(domFilter);\n                    _rangeChart.redraw();\n                });\n            }\n\n            _chart._invokeZoomedListener();\n            dc.events.trigger(function () {\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    }\n\n    // event.transform.rescaleX(_origX).domain() should give back newDomain\n    function domainToZoomTransform(newDomain, origDomain, xScale) {\n        var k = (origDomain[1] - origDomain[0]) / (newDomain[1] - newDomain[0]);\n        var xt = -1 * xScale(newDomain[0]);\n\n        return _d.d3.zoomIdentity.scale(k).translate(xt, 0);\n    }\n\n    // If we changing zoom status (for example by calling focus), tell D3 zoom about it\n    function updateD3zoomTransform() {\n        if (_zoom) {\n            _zoom.transform(_chart.root(), domainToZoomTransform(_chart.x().domain(), _xOriginalDomain, _origX));\n        }\n    }\n\n    function onZoom() {\n        // Avoids infinite recursion (mutual recursion between range and focus operations)\n        // Source Event will be null when zoom is called programmatically (see below as well).\n        if (!_d.d3.event.sourceEvent) {\n            return;\n        }\n\n        // Ignore event if recursive event - i.e. not directly generated by user action (like mouse/touch etc.)\n        // In this case we are more worried about this handler causing zoom programmatically which will\n        // cause this handler to be invoked again with a new d3.event (and current event set as sourceEvent)\n        // This check avoids recursive calls\n        if (_d.d3.event.sourceEvent.type && ['start', 'zoom', 'end'].indexOf(_d.d3.event.sourceEvent.type) !== -1) {\n            return;\n        }\n\n        var newDomain = _d.d3.event.transform.rescaleX(_origX).domain();\n        _chart.focus(newDomain, false);\n    }\n\n    function checkExtents(ext, outerLimits) {\n        if (!ext || ext.length !== 2 || !outerLimits || outerLimits.length !== 2) {\n            return ext;\n        }\n\n        if (ext[0] > outerLimits[1] || ext[1] < outerLimits[0]) {\n            console.warn('Could not intersect extents, will reset');\n        }\n        // Math.max does not work (as the values may be dates as well)\n        return [ext[0] > outerLimits[0] ? ext[0] : outerLimits[0], ext[1] < outerLimits[1] ? ext[1] : outerLimits[1]];\n    }\n\n    /**\r\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\r\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\r\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\r\n     * otherwise focus will be ignored.\r\n     *\r\n     * To avoid ping-pong volley of events between a pair of range and focus charts please set\r\n     * `noRaiseEvents` to `true`. In that case it will update this chart but will not fire `zoom` event\r\n     * and not try to update back the associated range chart.\r\n     * If you are calling it manually - typically you will leave it to `false` (the default).\r\n     *\r\n     * @method focus\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @example\r\n     * chart.on('renderlet', function(chart) {\r\n     *     // smooth the rendering through event throttling\r\n     *     dc.events.trigger(function(){\r\n     *          // focus some other chart to the range selected by user on this chart\r\n     *          someOtherChart.focus(chart.filter());\r\n     *     });\r\n     * })\r\n     * @param {Array<Number>} [range]\r\n     * @param {Boolean} [noRaiseEvents = false]\r\n     */\n    _chart.focus = function (range, noRaiseEvents) {\n        if (_zoomOutRestrict) {\n            // ensure range is within _xOriginalDomain\n            range = checkExtents(range, _xOriginalDomain);\n\n            // If it has an associated range chart ensure range is within domain of that rangeChart\n            if (_rangeChart) {\n                range = checkExtents(range, _rangeChart.x().domain());\n            }\n        }\n\n        zoomHandler(range, noRaiseEvents);\n        updateD3zoomTransform();\n    };\n\n    _chart.refocused = function () {\n        return !dc.utils.arraysEqual(_chart.x().domain(), _xOriginalDomain);\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered.dcjs-range-chart', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain(), true);\n                });\n            } else if (!dc.utils.arraysEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter(), true);\n                });\n            }\n        });\n        return _chart;\n    };\n\n    /**\r\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\r\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\r\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\r\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\r\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\r\n     * if enabled, but only via scrolling (panning will be disabled.)\r\n     * @method brushOn\r\n     * @memberof dc.coordinateGridMixin\r\n     * @instance\r\n     * @param {Boolean} [brushOn=true]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    /**\r\n     * This will be internally used by composite chart onto children. Please go not invoke directly.\r\n     *\r\n     * @method parentBrushOn\r\n     * @memberof dc.coordinateGridMixin\r\n     * @protected\r\n     * @instance\r\n     * @param {Boolean} [brushOn=false]\r\n     * @returns {Boolean|dc.coordinateGridMixin}\r\n     */\n    _chart.parentBrushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _parentBrushOn;\n        }\n        _parentBrushOn = brushOn;\n        return _chart;\n    };\n\n    // Get the SVG rendered brush\n    _chart.gBrush = function () {\n        return _gBrush;\n    };\n\n    function hasRangeSelected(range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n\n/**\r\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.stackD3v3.\r\n * @name stackMixin\r\n * @memberof dc\r\n * @mixin\r\n * @param {Object} _chart\r\n * @returns {dc.stackMixin}\r\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues(layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        var allValues = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.domainValues = allValues.filter(domainFilter());\n        layer.values = _chart.evadeDomainFilter() ? allValues : layer.domainValues;\n    }\n\n    var _stackLayout = _d.d3.stack();\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter() {\n        if (!_chart.x()) {\n            return dc.utils.constant(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () {\n                return true;\n            };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\r\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\r\n     * in the same chart will share the same key accessor and therefore the same set of keys.\r\n     *\r\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\r\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\r\n     * generate the legend label.\r\n     * @method stack\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\r\n     * @example\r\n     * // stack group using default accessor\r\n     * chart.stack(valueSumGroup)\r\n     * // stack group using custom accessor\r\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\r\n     * @param {crossfilter.group} group\r\n     * @param {String} [name]\r\n     * @param {Function} [accessor]\r\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\r\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = { group: group };\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\r\n     * Allow named stacks to be hidden or shown by clicking on legend items.\r\n     * This does not affect the behavior of hideStack or showStack.\r\n     * @method hidableStacks\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @param {Boolean} [hidableStacks=false]\r\n     * @returns {Boolean|dc.stackMixin}\r\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName(n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\r\n     * Hide all stacks on the chart with the given name.\r\n     * The chart must be re-rendered for this change to appear.\r\n     * @method hideStack\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @param {String} stackName\r\n     * @returns {dc.stackMixin}\r\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Show all stacks on the chart with the given name.\r\n     * The chart must be re-rendered for this change to appear.\r\n     * @method showStack\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @param {String} stackName\r\n     * @returns {dc.stackMixin}\r\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = _d.d3.min(flattenStack(), function (p) {\n            return p.y < 0 ? p.y + p.y0 : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var max = _d.d3.max(flattenStack(), function (p) {\n            return p.y > 0 ? p.y + p.y0 : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack() {\n        var valueses = _chart.data().map(function (layer) {\n            return layer.domainValues;\n        });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = _d.d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = _d.d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\r\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\r\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\r\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\r\n     * use title otherwise the brush layer will block tooltip trigger.\r\n     *\r\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\r\n     * is not provided, the first stack is implied.\r\n     * @method title\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @example\r\n     * // set a title function on 'first stack'\r\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\r\n     * // get a title function from 'second stack'\r\n     * var secondTitleFunction = chart.title('second stack');\r\n     * @param {String} [stackName]\r\n     * @param {Function} [titleAccessor]\r\n     * @returns {String|dc.stackMixin}\r\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\r\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\r\n     * propagates it to the next.\r\n     * @method stackLayout\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.stackD3v3}\r\n     * @param {Function} [stack=d3.stackD3v3]\r\n     * @returns {Function|dc.stackMixin}\r\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        return _chart;\n    };\n\n    /**\r\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\r\n     * where points are filtered to the current domain. While this is a useful optimization, it is\r\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\r\n     * that are clipped to the bounds, as well as bars that are partly clipped.\r\n     *\r\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\r\n     * that fix is published, so set this flag to skip any filtering of points.\r\n     *\r\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\r\n     * @method evadeDomainFilter\r\n     * @memberof dc.stackMixin\r\n     * @instance\r\n     * @param {Boolean} [evadeDomainFilter=false]\r\n     * @returns {Boolean|dc.stackMixin}\r\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visibility(l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visibility);\n        if (!layers.length) {\n            return [];\n        }\n        layers.forEach(prepareValues);\n        var v4data = layers[0].values.map(function (v, i) {\n            var col = { x: v.x };\n            layers.forEach(function (layer) {\n                col[layer.name] = layer.values[i].y;\n            });\n            return col;\n        });\n        var keys = layers.map(function (layer) {\n            return layer.name;\n        });\n        var v4result = _chart.stackLayout().keys(keys)(v4data);\n        v4result.forEach(function (series, i) {\n            series.forEach(function (ys, j) {\n                layers[i].values[j].y0 = ys[0];\n                layers[i].values[j].y1 = ys[1];\n            });\n        });\n        return layers;\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n\n/**\r\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\r\n * Row and Pie Charts.\r\n *\r\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\r\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\r\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\r\n * others* element is clicked.\r\n * @name capMixin\r\n * @memberof dc\r\n * @mixin\r\n * @param {Object} _chart\r\n * @returns {dc.capMixin}\r\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity,\n        _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function _othersGrouper(topItems, restItems) {\n        var restItemsSum = _d.d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(),\n                rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\r\n     * Get or set the count of elements to that will be included in the cap. If there is an\r\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\r\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\r\n     *\r\n     * As of dc.js 2.1 and onward, the capped charts use\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\r\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\r\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\r\n     * to keep, from which end of the resulting array.\r\n     *\r\n     * **Migration note:** Up through dc.js 2.0.*, capping used\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\r\n     * which selects the largest items according to\r\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\r\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\r\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\r\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\r\n     *\r\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\r\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\r\n     *\r\n     * If you want to cap by one ordering but sort by another, please\r\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\r\n     * need to work up an example.\r\n     * @method cap\r\n     * @memberof dc.capMixin\r\n     * @instance\r\n     * @param {Number} [count=Infinity]\r\n     * @returns {Number|dc.capMixin}\r\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the direction of capping. If set, the chart takes the first\r\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\r\n     * it takes the last `cap` elements.\r\n     * @method takeFront\r\n     * @memberof dc.capMixin\r\n     * @instance\r\n     * @param {Boolean} [takeFront=true]\r\n     * @returns {Boolean|dc.capMixin}\r\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the label for *Others* slice when slices cap is specified.\r\n     * @method othersLabel\r\n     * @memberof dc.capMixin\r\n     * @instance\r\n     * @param {String} [label=\"Others\"]\r\n     * @returns {String|dc.capMixin}\r\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\r\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\r\n     *\r\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\r\n     * the items. By default the grouper function computes the sum of the rest.\r\n     * @method othersGrouper\r\n     * @memberof dc.capMixin\r\n     * @instance\r\n     * @example\r\n     * // Do not show others\r\n     * chart.othersGrouper(null);\r\n     * // Default others grouper\r\n     * chart.othersGrouper(function (topItems, restItems) {\r\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\r\n     *         restKeys = restItems.map(_chart.keyAccessor());\r\n     *     if (restItemsSum > 0) {\r\n     *         return topItems.concat([{\r\n     *             others: restKeys,\r\n     *             key: _chart.othersLabel(),\r\n     *             value: restItemsSum\r\n     *         }]);\r\n     *     }\r\n     *     return topItems;\r\n     * });\r\n     * @param {Function} [grouperFunction]\r\n     * @returns {Function|dc.capMixin}\r\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n\n/**\r\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\r\n * @name bubbleMixin\r\n * @memberof dc\r\n * @mixin\r\n * @mixes dc.colorMixin\r\n * @param {Object} _chart\r\n * @returns {dc.bubbleMixin}\r\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) {\n                return _d.d3.descending(radiusAccessor(a), radiusAccessor(b));\n            });\n        }\n        return data;\n    });\n\n    var _r = _d.d3.scaleLinear().domain([0, 100]);\n\n    var _rValueAccessor = function _rValueAccessor(d) {\n        return d.r;\n    };\n\n    /**\r\n     * Get or set the bubble radius scale. By default the bubble chart uses\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleLinear d3.scaleLinear().domain([0, 100])}\r\n     * as its radius scale.\r\n     * @method r\r\n     * @memberof dc.bubbleMixin\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [bubbleRadiusScale=d3.scaleLinear().domain([0, 100])]\r\n     * @returns {d3.scale|dc.bubbleMixin}\r\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\r\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\r\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\r\n     * @method elasticRadius\r\n     * @memberof dc.bubbleChart\r\n     * @instance\r\n     * @param {Boolean} [elasticRadius=false]\r\n     * @returns {Boolean|dc.bubbleChart}\r\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\r\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\r\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\r\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\r\n     * size.\r\n     * @method radiusValueAccessor\r\n     * @memberof dc.bubbleMixin\r\n     * @instance\r\n     * @param {Function} [radiusValueAccessor]\r\n     * @returns {Function|dc.bubbleMixin}\r\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = _d.d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = _d.d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function labelFunction(d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function shouldLabel(d) {\n        return _chart.bubbleR(d) > _minRadiusWithLabel;\n    };\n\n    var labelOpacity = function labelOpacity(d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function labelPointerEvent(d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text').attr('text-anchor', 'middle').attr('dy', '.3em').on('click', _chart.onClick);\n            }\n\n            label.attr('opacity', 0).attr('pointer-events', labelPointerEvent).text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text').attr('pointer-events', labelPointerEvent).text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function titleFunction(d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\r\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\r\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\r\n     * @method sortBubbleSize\r\n     * @memberof dc.bubbleChart\r\n     * @instance\r\n     * @param {Boolean} [sortBubbleSize=false]\r\n     * @returns {Boolean|dc.bubbleChart}\r\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\r\n     * @method minRadius\r\n     * @memberof dc.bubbleMixin\r\n     * @instance\r\n     * @param {Number} [radius=10]\r\n     * @returns {Number|dc.bubbleMixin}\r\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\r\n     * then no label will be rendered.\r\n     * @method minRadiusWithLabel\r\n     * @memberof dc.bubbleMixin\r\n     * @instance\r\n     * @param {Number} [radius=10]\r\n     * @returns {Number|dc.bubbleMixin}\r\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\r\n     * when the difference in radius between bubbles is too great.\r\n     * @method maxBubbleRelativeSize\r\n     * @memberof dc.bubbleMixin\r\n     * @instance\r\n     * @param {Number} [relativeSize=0.3]\r\n     * @returns {Number|dc.bubbleMixin}\r\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function (selection) {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n\n/**\r\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\r\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\r\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\r\n * which defaults to sorting by key.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @class pieChart\r\n * @memberof dc\r\n * @mixes dc.capMixin\r\n * @mixes dc.colorMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a pie chart under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.pieChart('#chart-container1');\r\n * // create a pie chart under #chart-container2 element using chart group A\r\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.pieChart}\r\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius,\n        // specified radius, if any\n    _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\r\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\r\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\r\n     * @method slicesCap\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [cap]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart() {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius = _d.d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (_d.d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{ key: _emptyTitle, value: 1, others: [_emptyTitle] }]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass).selectAll('g.' + _sliceCssClass).data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass).selectAll('text.' + _labelCssClass).data(pieData);\n\n            removeElements(slices, labels);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements(slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes(slices) {\n        var slicesEnter = slices.enter().append('g').attr('class', function (d, i) {\n            return _sliceCssClass + ' _' + i;\n        });\n        return slicesEnter;\n    }\n\n    function createSlicePath(slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path').attr('fill', fill).on('click', onClick).attr('d', function (d, i) {\n            return safeArc(d, i, arc);\n        });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles(slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels.text(function (d) {\n            var data = d.data;\n            if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                return '';\n            }\n            return _chart.label()(d.data);\n        });\n    };\n\n    function positionLabels(labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', function (d) {\n            return labelPosition(d, arc);\n        }).attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice(i, whether) {\n        _chart.select('g.pie-slice._' + i).classed('highlight', whether);\n    }\n\n    function createLabels(labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels.enter().append('text').attr('class', function (d, i) {\n                var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                if (_externalLabelRadius) {\n                    classes += ' external';\n                }\n                return classes;\n            }).on('click', onClick).on('mouseover', function (d, i) {\n                highlightSlice(i, true);\n            }).on('mouseout', function (d, i) {\n                highlightSlice(i, false);\n            });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths(pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass).data(pieData);\n\n        polyline.exit().remove();\n\n        polyline = polyline.enter().append('polyline').attr('class', function (d, i) {\n            return 'pie-path _' + i + ' ' + _sliceCssClass;\n        }).on('click', onClick).on('mouseover', function (d, i) {\n            highlightSlice(i, true);\n        }).on('mouseout', function (d, i) {\n            highlightSlice(i, false);\n        }).merge(polyline);\n\n        var arc2 = _d.d3.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition.attrTween('points', function (d) {\n                var current = this._current || d;\n                current = { startAngle: current.startAngle, endAngle: current.endAngle };\n                var interpolate = _d.d3.interpolate(current, d);\n                this._current = interpolate(0);\n                return function (t) {\n                    var d2 = interpolate(t);\n                    return [arc.centroid(d2), arc2.centroid(d2)];\n                };\n            });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n    }\n\n    function updateElements(pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths(pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass).data(pieData).select('path').attr('d', function (d, i) {\n            return safeArc(d, i, arc);\n        });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels(pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass).data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles(pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass).data(pieData).select('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    function removeElements(slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter() {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\r\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\r\n     * pie chart to become smaller or larger depending on the value.\r\n     * @method externalRadiusPadding\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [externalRadiusPadding=0]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\r\n     * pie chart will be rendered as a doughnut chart.\r\n     * @method innerRadius\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [innerRadius=0]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\r\n     * chart width and height.\r\n     * @method radius\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [radius]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set center x coordinate position. Default is center of svg.\r\n     * @method cx\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [cx]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return _cx || _chart.width() / 2;\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set center y coordinate position. Default is center of svg.\r\n     * @method cy\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [cy]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return _cy || _chart.height() / 2;\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs() {\n        return _d.d3.arc().outerRadius(_radius - _externalRadiusPadding).innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\r\n     * display a slice label.\r\n     * @method minAngleForLabel\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [minAngleForLabel=0.5]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout() {\n        return _d.d3.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall(d) {\n        var angle = d.endAngle - d.startAngle;\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData(d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie(b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = { startAngle: 0, endAngle: 0 };\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = { startAngle: current.startAngle, endAngle: current.endAngle };\n        }\n        var i = _d.d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas(current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill(d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick(d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc(d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\r\n     * Title to use for the only slice when there is no data.\r\n     * @method emptyTitle\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {String} [title]\r\n     * @returns {String|dc.pieChart}\r\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\r\n     * Position slice labels offset from the outer edge of the chart.\r\n     *\r\n     * The argument specifies the extra radius to be added for slice labels.\r\n     * @method externalLabels\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Number} [externalLabelRadius]\r\n     * @returns {Number|dc.pieChart}\r\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\r\n     * Get or set whether to draw lines from pie slices to their labels.\r\n     *\r\n     * @method drawPaths\r\n     * @memberof dc.pieChart\r\n     * @instance\r\n     * @param {Boolean} [drawPaths]\r\n     * @returns {Boolean|dc.pieChart}\r\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition(d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = _d.d3.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = { name: d.key, data: d.value, others: d.others, chart: _chart };\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({ key: d.name, others: d.others });\n    };\n\n    function highlightSliceFromLegendable(legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                _d.d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The sunburst chart implementation is usually used to visualize a small tree distribution.  The sunburst\r\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\r\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering} which defaults to sorting\r\n * by key.\r\n *\r\n * The keys used in the sunburst chart should be arrays, representing paths in the tree.\r\n *\r\n * When filtering, the sunburst chart creates instances of {@link dc.filters.HierarchyFilter HierarchyFilter}.\r\n *\r\n * @class sunburstChart\r\n * @memberof dc\r\n * @mixes dc.capMixin\r\n * @mixes dc.colorMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a sunburst chart under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.sunburstChart('#chart-container1');\r\n * // create a sunburst chart under #chart-container2 element using chart group A\r\n * var chart2 = dc.sunburstChart('#chart-container2', 'chartGroupA');\r\n *\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.sunburstChart}\r\n **/\ndc.sunburstChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _innerRadius = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    // Handle cases if value corresponds to generated parent nodes\n    function extendedValueAccessor(d) {\n        if (d.path) {\n            return d.value;\n        }\n        return _chart.cappedValueAccessor(d);\n    }\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + extendedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n\n    _chart.filterHandler(function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    });\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart() {\n        // set radius on basis of chart dimension if missing\n        _radius = _radius ? _radius : _d.d3.min([_chart.width(), _chart.height()]) / 2;\n\n        var arc = buildArcs();\n\n        var sunburstData, cdata;\n        // if we have data...\n        if (_d.d3.sum(_chart.data(), _chart.valueAccessor())) {\n            cdata = dc.utils.toHierarchy(_chart.data(), _chart.valueAccessor());\n            sunburstData = partitionNodes(cdata);\n            // First one is the root, which is not needed\n            sunburstData.shift();\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            cdata = dc.utils.toHierarchy([], function (d) {\n                return d.value;\n            });\n            sunburstData = partitionNodes(cdata);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.selectAll('g.' + _sliceCssClass).data(sunburstData);\n            createElements(slices, arc, sunburstData);\n\n            updateElements(sunburstData, arc);\n\n            removeElements(slices);\n\n            highlightFilter();\n        }\n    }\n\n    function createElements(slices, arc, sunburstData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n        createTitles(slicesEnter);\n        createLabels(sunburstData, arc);\n    }\n\n    function createSliceNodes(slices) {\n        var slicesEnter = slices.enter().append('g').attr('class', function (d, i) {\n            return _sliceCssClass + ' _' + i + ' ' + _sliceCssClass + '-level-' + d.depth;\n        });\n        return slicesEnter;\n    }\n\n    function createSlicePath(slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path').attr('fill', fill).on('click', onClick).attr('d', function (d, i) {\n            return safeArc(d, i, arc);\n        });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenSlice);\n        }\n    }\n\n    function createTitles(slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    function positionLabels(labelsEnter, arc) {\n        dc.transition(labelsEnter, _chart.transitionDuration()).attr('transform', function (d) {\n            return labelPosition(d, arc);\n        }).attr('text-anchor', 'middle').text(function (d) {\n            // position label...\n            if (sliceHasNoData(d) || sliceTooSmall(d)) {\n                return '';\n            }\n            return _chart.label()(d);\n        });\n    }\n\n    function createLabels(sunburstData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _sliceCssClass).data(sunburstData);\n\n            labels.exit().remove();\n\n            var labelsEnter = labels.enter().append('text').attr('class', function (d, i) {\n                var classes = _sliceCssClass + ' _' + i;\n                if (_externalLabelRadius) {\n                    classes += ' external';\n                }\n                return classes;\n            }).on('click', onClick);\n            positionLabels(labelsEnter, arc);\n        }\n    }\n\n    function updateElements(sunburstData, arc) {\n        updateSlicePaths(sunburstData, arc);\n        updateLabels(sunburstData, arc);\n        updateTitles(sunburstData);\n    }\n\n    function updateSlicePaths(sunburstData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass).data(sunburstData).select('path').attr('d', function (d, i) {\n            return safeArc(d, i, arc);\n        });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenSlice);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels(sunburstData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _sliceCssClass).data(sunburstData);\n            positionLabels(labels, arc);\n        }\n    }\n\n    function updateTitles(sunburstData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass).data(sunburstData).select('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    function removeElements(slices) {\n        slices.exit().remove();\n    }\n\n    function highlightFilter() {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\r\n     * Get or set the inner radius of the sunburst chart. If the inner radius is greater than 0px then the\r\n     * sunburst chart will be rendered as a doughnut chart. Default inner radius is 0px.\r\n     * @method innerRadius\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [innerRadius=0]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\r\n     * chart width and height.\r\n     * @method radius\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [radius]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _radius;\n        }\n        _radius = radius;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set center x coordinate position. Default is center of svg.\r\n     * @method cx\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [cx]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return _cx || _chart.width() / 2;\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set center y coordinate position. Default is center of svg.\r\n     * @method cy\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [cy]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return _cy || _chart.height() / 2;\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\r\n     * display a slice label.\r\n     * @method minAngleForLabel\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [minAngleForLabel=0.5]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    /**\r\n     * Title to use for the only slice when there is no data.\r\n     * @method emptyTitle\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {String} [title]\r\n     * @returns {String|dc.sunburstChart}\r\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\r\n     * Position slice labels offset from the outer edge of the chart.\r\n     *\r\n     * The argument specifies the extra radius to be added for slice labels.\r\n     * @method externalLabels\r\n     * @memberof dc.sunburstChart\r\n     * @instance\r\n     * @param {Number} [externalLabelRadius]\r\n     * @returns {Number|dc.sunburstChart}\r\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    function buildArcs() {\n        return _d.d3.arc().startAngle(function (d) {\n            return d.x0;\n        }).endAngle(function (d) {\n            return d.x1;\n        }).innerRadius(function (d) {\n            return d.data.path && d.data.path.length === 1 ? _innerRadius : Math.sqrt(d.y0);\n        }).outerRadius(function (d) {\n            return Math.sqrt(d.y1);\n        });\n    }\n\n    function isSelectedSlice(d) {\n        return isPathFiltered(d.path);\n    }\n\n    function isPathFiltered(path) {\n        for (var i = 0; i < _chart.filters().length; i++) {\n            var currentFilter = _chart.filters()[i];\n            if (currentFilter.isFiltered(path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // returns all filters that are a parent or child of the path\n    function filtersForPath(path) {\n        var pathFilter = dc.filters.HierarchyFilter(path);\n        var filters = [];\n        for (var i = 0; i < _chart.filters().length; i++) {\n            var currentFilter = _chart.filters()[i];\n            if (currentFilter.isFiltered(path) || pathFilter.isFiltered(currentFilter)) {\n                filters.push(currentFilter);\n            }\n        }\n        return filters;\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    function partitionNodes(data) {\n        // The changes picked up from https://github.com/d3/d3-hierarchy/issues/50\n        var hierarchy = _d.d3.hierarchy(data).sum(function (d) {\n            return d.children ? 0 : extendedValueAccessor(d);\n        }).sort(function (a, b) {\n            return _d.d3.ascending(a.data.path, b.data.path);\n        });\n\n        var partition = _d.d3.partition().size([2 * Math.PI, _radius * _radius]);\n\n        partition(hierarchy);\n\n        // In D3v4 the returned data is slightly different, change it enough to suit our purposes.\n        var nodes = hierarchy.descendants().map(function (d) {\n            d.key = d.data.key;\n            d.path = d.data.path;\n            return d;\n        });\n\n        return nodes;\n    }\n\n    function sliceTooSmall(d) {\n        var angle = d.x1 - d.x0;\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData(d) {\n        return extendedValueAccessor(d) === 0;\n    }\n\n    function tweenSlice(b) {\n        b.innerRadius = _innerRadius; //?\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = { x: 0, y: 0, dx: 0, dy: 0 };\n        }\n        // unfortunally, we can't tween an entire hierarchy since it has 2 way links.\n        var tweenTarget = { x: b.x, y: b.y, dx: b.dx, dy: b.dy };\n        var i = _d.d3.interpolate(current, tweenTarget);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(Object.assign({}, b, i(t)), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas(current) {\n        return !current || isNaN(current.dx) || isNaN(current.dy);\n    }\n\n    function fill(d, i) {\n        return _chart.getColor(d, i);\n    }\n\n    function _onClick(d) {\n        // Clicking on Legends do not filter, it throws exception\n        // Must be better way to handle this, in legends we need to access `d.key`\n        var path = d.path || d.key;\n        var filter = dc.filters.HierarchyFilter(path);\n\n        // filters are equal to, parents or children of the path.\n        var filters = filtersForPath(path);\n        var exactMatch = false;\n        // clear out any filters that cover the path filtered.\n        for (var i = filters.length - 1; i >= 0; i--) {\n            var currentFilter = filters[i];\n            if (dc.utils.arraysIdentical(currentFilter, path)) {\n                exactMatch = true;\n            }\n            _chart.filter(filters[i]);\n        }\n        dc.events.trigger(function () {\n            // if it is a new filter - put it in.\n            if (!exactMatch) {\n                _chart.filter(filter);\n            }\n            _chart.redrawGroup();\n        });\n    }\n\n    _chart.onClick = onClick;\n\n    function onClick(d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _onClick(d, i);\n        }\n    }\n\n    function safeArc(d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    function labelPosition(d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = _d.d3.svg.arc().outerRadius(_radius + _externalLabelRadius).innerRadius(_radius + _externalLabelRadius).centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = { name: d.key, data: d.value, others: d.others, chart: _chart };\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({ key: d.name, others: d.others });\n    };\n\n    function highlightSliceFromLegendable(legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.key) {\n                _d.d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Concrete bar chart/histogram implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @class barChart\r\n * @memberof dc\r\n * @mixes dc.stackMixin\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a bar chart under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.barChart('#chart-container1');\r\n * // create a bar chart under #chart-container2 element using chart group A\r\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\r\n * // create a sub-chart under a composite parent chart\r\n * var chart3 = dc.barChart(compositeChart);\r\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\r\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\r\n * composite chart instance instead.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.barChart}\r\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' + 'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack').data(_chart.data());\n\n        calculateBarWidth();\n\n        layers = layers.enter().append('g').attr('class', function (d, i) {\n            return 'stack ' + '_' + i;\n        }).merge(layers);\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = _d.d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight(d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function labelXPos(d) {\n        var x = _chart.x()(d.x);\n        if (!_centerBar) {\n            x += _barWidth / 2;\n        }\n        if (_chart.isOrdinal() && _gap !== undefined) {\n            x += _gap / 2;\n        }\n        return dc.utils.safeNumber(x);\n    }\n\n    function labelYPos(d) {\n        var y = _chart.y()(d.y + d.y0);\n\n        if (d.y < 0) {\n            y -= barHeight(d);\n        }\n\n        return dc.utils.safeNumber(y - LABEL_PADDING);\n    }\n\n    function renderLabels(layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel').data(d.values, dc.pluck('x'));\n\n        var labelsEnterUpdate = labels.enter().append('text').attr('class', 'barLabel').attr('text-anchor', 'middle').attr('x', labelXPos).attr('y', labelYPos).merge(labels);\n\n        if (_chart.isOrdinal()) {\n            labelsEnterUpdate.on('click', _chart.onClick);\n            labelsEnterUpdate.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labelsEnterUpdate, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', labelXPos).attr('y', labelYPos).text(function (d) {\n            return _chart.label()(d);\n        });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('height', 0).remove();\n    }\n\n    function barXPos(d) {\n        var x = _chart.x()(d.x);\n        if (_centerBar) {\n            x -= _barWidth / 2;\n        }\n        if (_chart.isOrdinal() && _gap !== undefined) {\n            x += _gap / 2;\n        }\n        return dc.utils.safeNumber(x);\n    }\n\n    function renderBars(layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar').data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter().append('rect').attr('class', 'bar').attr('fill', dc.pluck('data', _chart.getColor)).attr('x', barXPos).attr('y', _chart.yAxisHeight()).attr('height', 0);\n\n        var barsEnterUpdate = enter.merge(bars);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            barsEnterUpdate.on('click', _chart.onClick);\n        }\n\n        dc.transition(barsEnterUpdate, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', barXPos).attr('y', function (d) {\n            var y = _chart.y()(d.y + d.y0);\n\n            if (d.y < 0) {\n                y -= barHeight(d);\n            }\n\n            return dc.utils.safeNumber(y);\n        }).attr('width', _barWidth).attr('height', function (d) {\n            return barHeight(d);\n        }).attr('fill', dc.pluck('data', _chart.getColor)).select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n            return _chart.x()(d.x);\n        }).attr('width', _barWidth * 0.9).remove();\n    }\n\n    function calculateBarWidth() {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().bandwidth());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function (brushSelection) {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else if (_chart.brushOn() || _chart.parentBrushOn()) {\n            if (!_chart.brushIsEmpty(brushSelection)) {\n                var start = brushSelection[0];\n                var end = brushSelection[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\r\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\r\n     * @method centerBar\r\n     * @memberof dc.barChart\r\n     * @instance\r\n     * @param {Boolean} [centerBar=false]\r\n     * @returns {Boolean|dc.barChart}\r\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\r\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\r\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\r\n     * for a visual description of how the padding is applied.\r\n     * @method barPadding\r\n     * @memberof dc.barChart\r\n     * @instance\r\n     * @param {Number} [barPadding=0]\r\n     * @returns {Number|dc.barChart}\r\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\r\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\r\n     * Will pad the width by `padding * barWidth` on each side of the chart.\r\n     * @method outerPadding\r\n     * @memberof dc.barChart\r\n     * @instance\r\n     * @param {Number} [padding=0.5]\r\n     * @returns {Number|dc.barChart}\r\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\r\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\r\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\r\n     * based on the number of data points and the length of the x axis.\r\n     * @method gap\r\n     * @memberof dc.barChart\r\n     * @instance\r\n     * @param {Number} [gap=2]\r\n     * @returns {Number|dc.barChart}\r\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function (brushSelection) {\n        if (brushSelection && _chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            brushSelection[0] = _chart.round()(brushSelection[0]);\n            brushSelection[1] = _chart.round()(brushSelection[1]);\n        }\n        return brushSelection;\n    };\n\n    /**\r\n     * Set or get whether rounding is enabled when bars are centered. If false, using\r\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\r\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\r\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\r\n     * centered bars since the bars are offset.  The rounding function must add an offset to\r\n     * compensate, such as in the following example.\r\n     * @method alwaysUseRounding\r\n     * @memberof dc.barChart\r\n     * @instance\r\n     * @example\r\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\r\n     * @param {Boolean} [alwaysUseRounding=false]\r\n     * @returns {Boolean|dc.barChart}\r\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter(color, inv) {\n        return function () {\n            var item = _d.d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar').classed('highlight', colorFilter(d.color)).classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar').classed('highlight', false).classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Concrete line/area chart implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @class lineChart\r\n * @memberof dc\r\n * @mixes dc.stackMixin\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a line chart under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.lineChart('#chart-container1');\r\n * // create a line chart under #chart-container2 element using chart group A\r\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\r\n * // create a sub-chart under a composite parent chart\r\n * var chart3 = dc.lineChart(compositeChart);\r\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\r\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\r\n * composite chart instance instead.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.lineChart}\r\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _curve = null;\n    var _interpolate = null; // d3.curveLinear;  // deprecated in 3.0\n    var _tension = null; // deprecated in 3.0\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers.enter().append('g').attr('class', function (d, i) {\n            return 'stack ' + '_' + i;\n        });\n\n        layers = layersEnter.merge(layers);\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\r\n     * Gets or sets the curve factory to use for lines and areas drawn, allowing e.g. step\r\n     * functions, splines, and cubic interpolation. Typically you would use one of the interpolator functions\r\n     * provided by {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curves}.\r\n     *\r\n     * Replaces the use of {@link dc.lineChart#interpolate} and {@link dc.lineChart#tension}\r\n     * in dc.js < 3.0\r\n     *\r\n     * This is passed to\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve} and\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}.\r\n     * @example\r\n     * // default\r\n     * chart\r\n     *     .curve(d3.curveLinear);\r\n     * // Add tension to curves that support it\r\n     * chart\r\n     *     .curve(d3.curveCardinal.tension(0.5));\r\n     * // You can use some specialized variation like\r\n     * // https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\r\n     * chart\r\n     *     .curve(d3.curveCatmullRom.alpha(0.5));\r\n     * @method curve\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve}\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}\r\n     * @param  {d3.curve} [curve=d3.curveLinear]\r\n     * @returns {d3.curve|dc.lineChart}\r\n     */\n    _chart.curve = function (curve) {\n        if (!arguments.length) {\n            return _curve;\n        }\n        _curve = curve;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\r\n     * functions, splines, and cubic interpolation.\r\n     *\r\n     * Possible values are: 'linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis',\r\n     * 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', and\r\n     * 'monotone'.\r\n     *\r\n     * This function exists for backward compatibility. Use {@link dc.lineChart#curve}\r\n     * which is generic and provides more options.\r\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\r\n     * @method interpolate\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @deprecated since version 3.0 use {@link dc.lineChart#curve} instead\r\n     * @see {@link dc.lineChart#curve}\r\n     * @param  {d3.curve} [interpolate=d3.curveLinear]\r\n     * @returns {d3.curve|dc.lineChart}\r\n     */\n    _chart.interpolate = dc.logger.deprecate(function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    }, 'dc.lineChart.interpolate has been deprecated since version 3.0 use dc.lineChart.curve instead');\n\n    /**\r\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\r\n     *\r\n     * Passed to the {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curve function}\r\n     * if it provides a `.tension` function. Example:\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#curveCardinal_tension curveCardinal.tension}.\r\n     *\r\n     * This function exists for backward compatibility. Use {@link dc.lineChart#curve}\r\n     * which is generic and provides more options.\r\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\r\n     * @method tension\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @deprecated since version 3.0 use {@link dc.lineChart#curve} instead\r\n     * @see {@link dc.lineChart#curve}\r\n     * @param  {Number} [tension=0]\r\n     * @returns {Number|dc.lineChart}\r\n     */\n    _chart.tension = dc.logger.deprecate(function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    }, 'dc.lineChart.tension has been deprecated since version 3.0 use dc.lineChart.curve instead');\n\n    /**\r\n     * Gets or sets a function that will determine discontinuities in the line which should be\r\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\r\n     * This function is passed to\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\r\n     *\r\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\r\n     * custom reduce functions to get this to work, depending on your data. See\r\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\r\n     * for more details and an example.\r\n     * @method defined\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\r\n     * @param  {Function} [defined]\r\n     * @returns {Function|dc.lineChart}\r\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\r\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\r\n     * array (solid line).\r\n     * @method dashStyle\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\r\n     * @example\r\n     * // create a Dash Dot Dot Dot\r\n     * chart.dashStyle([3,1,1,1]);\r\n     * @param  {Array<Number>} [dashStyle=[]]\r\n     * @returns {Array<Number>|dc.lineChart}\r\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\r\n     * beneath each line and the line chart effectively becomes an area chart.\r\n     * @method renderArea\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @param  {Boolean} [renderArea=false]\r\n     * @returns {Boolean|dc.lineChart}\r\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors(d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    // To keep it backward compatible, this covers multiple cases\n    // See https://github.com/dc-js/dc.js/issues/1376\n    // It will be removed when interpolate and tension are removed.\n    function getCurveFactory() {\n        var curve = null;\n\n        // _curve takes precedence\n        if (_curve) {\n            return _curve;\n        }\n\n        // Approximate the D3v3 behavior\n        if (typeof _interpolate === 'function') {\n            curve = _interpolate;\n        } else {\n            // If _interpolate is string\n            var mapping = {\n                'linear': _d.d3.curveLinear,\n                'linear-closed': _d.d3.curveLinearClosed,\n                'step': _d.d3.curveStep,\n                'step-before': _d.d3.curveStepBefore,\n                'step-after': _d.d3.curveStepAfter,\n                'basis': _d.d3.curveBasis,\n                'basis-open': _d.d3.curveBasisOpen,\n                'basis-closed': _d.d3.curveBasisClosed,\n                'bundle': _d.d3.curveBundle,\n                'cardinal': _d.d3.curveCardinal,\n                'cardinal-open': _d.d3.curveCardinalOpen,\n                'cardinal-closed': _d.d3.curveCardinalClosed,\n                'monotone': _d.d3.curveMonotoneX\n            };\n            curve = mapping[_interpolate];\n        }\n\n        // Default value\n        if (!curve) {\n            curve = _d.d3.curveLinear;\n        }\n\n        if (_tension !== null) {\n            if (typeof curve.tension !== 'function') {\n                dc.logger.warn('tension was specified but the curve/interpolate does not support it.');\n            } else {\n                curve = curve.tension(_tension);\n            }\n        }\n        return curve;\n    }\n\n    function drawLine(layersEnter, layers) {\n        var line = _d.d3.line().x(function (d) {\n            return _chart.x()(d.x);\n        }).y(function (d) {\n            return _chart.y()(d.y + d.y0);\n        }).curve(getCurveFactory());\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path').attr('class', 'line').attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n        //.ease('linear')\n        .attr('stroke', colors).attr('d', function (d) {\n            return safeD(line(d.values));\n        });\n    }\n\n    function drawArea(layersEnter, layers) {\n        if (_renderArea) {\n            var area = _d.d3.area().x(function (d) {\n                return _chart.x()(d.x);\n            }).y1(function (d) {\n                return _chart.y()(d.y + d.y0);\n            }).y0(function (d) {\n                return _chart.y()(d.y0);\n            }).curve(getCurveFactory());\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path').attr('class', 'area').attr('fill', colors).attr('d', function (d) {\n                return safeD(area(d.values));\n            });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('fill', colors).attr('d', function (d) {\n                return safeD(area(d.values));\n            });\n        }\n    }\n\n    function safeD(d) {\n        return !d || d.indexOf('NaN') >= 0 ? 'M0,0' : d;\n    }\n\n    function drawDots(chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || !(_chart.brushOn() || _chart.parentBrushOn()) && _chart.xyTipsOn()) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS).data(points, dc.pluck('x'));\n\n                var dotsEnterModify = dots.enter().append('circle').attr('class', DOT_CIRCLE_CLASS).attr('cx', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                }).attr('cy', function (d) {\n                    return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                }).attr('r', getDotRadius()).style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('fill', _chart.getColor).attr('stroke', _chart.getColor).on('mousemove', function () {\n                    var dot = _d.d3.select(this);\n                    showDot(dot);\n                    showRefLines(dot, g);\n                }).on('mouseout', function () {\n                    var dot = _d.d3.select(this);\n                    hideDot(dot);\n                    hideRefLines(g);\n                }).merge(dots);\n\n                dotsEnterModify.call(renderTitle, d);\n\n                dc.transition(dotsEnterModify, _chart.transitionDuration()).attr('cx', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                }).attr('cy', function (d) {\n                    return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                }).attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels(layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = _d.d3.select(this);\n            var labels = layer.selectAll('text.lineLabel').data(d.values, dc.pluck('x'));\n\n            var labelsEnterModify = labels.enter().append('text').attr('class', 'lineLabel').attr('text-anchor', 'middle').merge(labels);\n\n            dc.transition(labelsEnterModify, _chart.transitionDuration()).attr('x', function (d) {\n                return dc.utils.safeNumber(_chart.x()(d.x));\n            }).attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                return dc.utils.safeNumber(y);\n            }).text(function (d) {\n                return _chart.label()(d);\n            });\n\n            dc.transition(labels.exit(), _chart.transitionDuration()).attr('height', 0).remove();\n        });\n    }\n\n    function createRefLines(g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot(dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines(dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = _chart._yAxisX() - _chart.margins().left;\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + x + ' ' + y;\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius() {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot(dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('r', getDotRadius());\n    }\n\n    function hideRefLines(g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle(dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\r\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\r\n     * dashed lines back to each respective axis.  This is ignored if the chart\r\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\r\n     * @method xyTipsOn\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @param  {Boolean} [xyTipsOn=false]\r\n     * @returns {Boolean|dc.lineChart}\r\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the radius (in px) for dots displayed on the data points.\r\n     * @method dotRadius\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @param  {Number} [dotRadius=5]\r\n     * @returns {Number|dc.lineChart}\r\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\r\n     * Always show individual dots for each datapoint.\r\n     *\r\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\r\n     * current `options` values are instead returned.\r\n     * @method renderDataPoints\r\n     * @memberof dc.lineChart\r\n     * @instance\r\n     * @example\r\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\r\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\r\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\r\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter(color, dashstyle, inv) {\n        return function () {\n            var item = _d.d3.select(this);\n            var match = item.attr('stroke') === color && item.attr('stroke-dasharray') === (dashstyle instanceof Array ? dashstyle.join(',') : null) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area').classed('highlight', colorFilter(d.color, d.dashstyle)).classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area').classed('highlight', false).classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The data count widget is a simple widget designed to display the number of records selected by the\r\n * current filters out of the total number of records in the data set. Once created the data count widget\r\n * will automatically update the text content of child elements with the following classes:\r\n *\r\n * * `.total-count` - total number of records\r\n * * `.filter-count` - number of records matched by the current filters\r\n *\r\n * Note: this widget works best for the specific case of showing the number of records out of a\r\n * total. If you want a more general-purpose numeric display, please use the\r\n * {@link dc.numberDisplay} widget instead.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @class dataCount\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @example\r\n * var ndx = crossfilter(data);\r\n * var all = ndx.groupAll();\r\n *\r\n * dc.dataCount('.dc-data-count')\r\n *     .dimension(ndx)\r\n *     .group(all);\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.dataCount}\r\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = _d.d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = { some: '', all: '' };\n\n    /**\r\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\r\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\r\n     * `%filter-count` will be replaced with the number of selected records.\r\n     * - all: HTML template to use if all items are selected\r\n     * - some: HTML template to use if not all items are selected\r\n     * @method html\r\n     * @memberof dc.dataCount\r\n     * @instance\r\n     * @example\r\n     * counter.html({\r\n     *      some: '%filter-count out of %total-count records selected',\r\n     *      all: 'All records selected. Click on charts to apply filters'\r\n     * })\r\n     * @param {{some:String, all: String}} [options]\r\n     * @returns {{some:String, all: String}|dc.dataCount}\r\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets an optional function to format the filter count and total count.\r\n     * @method formatNumber\r\n     * @memberof dc.dataCount\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\r\n     * @example\r\n     * counter.formatNumber(d3.format('.2g'))\r\n     * @param {Function} [formatter=d3.format('.2g')]\r\n     * @returns {Function|dc.dataCount}\r\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if (tot === val && _html.all !== '') {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\r\n * filtered) in a good old tabular fashion.\r\n *\r\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\r\n * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\r\n * together in groups.  Do not pass in a crossfilter group as this will not work.\r\n *\r\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\r\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\r\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\r\n * supported on the crossfilter group as the crossfilter dimension.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\r\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\r\n * @class dataTable\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.dataTable}\r\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function _sortBy(d) {\n        return d;\n    };\n    var _order = _d.d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return typeof v === 'function' ? v(d) : // v as function\n        typeof v === 'string' ? d[v] : // v is field name string\n        v.format(d) // v is Object, use fn (element 2)\n        ;\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return typeof d === 'function' ? _chart._doColumnHeaderFnToString(d) : typeof d === 'string' ? _chart._doColumnHeaderCapitalize(d) : String(d.label);\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups() {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & typeof f === 'function';\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.exit().remove();\n            thead = thead.enter().append('thead').merge(thead);\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.exit().remove();\n            headrow = headrow.enter().append('tr').merge(headrow);\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th').data(_columns);\n            headcols.exit().remove();\n            headcols.enter().append('th').merge(headcols).attr('class', HEAD_CSS_CLASS).html(function (d) {\n                return _chart._doColumnHeaderFormat(d);\n            });\n        }\n\n        var groups = _chart.root().selectAll('tbody').data(nestEntries(), function (d) {\n            return _chart.keyAccessor()(d);\n        });\n\n        var rowGroup = groups.enter().append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup.append('tr').attr('class', GROUP_CSS_CLASS).append('td').attr('class', LABEL_CSS_CLASS).attr('colspan', _columns.length).html(function (d) {\n                return _chart.keyAccessor()(d);\n            });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries() {\n        var entries;\n        if (_order === _d.d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return _d.d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n            return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows(groups) {\n        var rows = groups.order().selectAll('tr.' + ROW_CSS_CLASS).data(function (d) {\n            return d.values;\n        });\n\n        var rowEnter = rows.enter().append('tr').attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td').attr('class', COLUMN_CSS_CLASS + ' _' + i).html(function (d) {\n                return _chart._doColumnValueFormat(v, d);\n            });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\r\n     * Get or set the group function for the data table. The group function takes a data row and\r\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\r\n     * to split rows into groups.\r\n     *\r\n     * Do not pass in a crossfilter group as this will not work.\r\n     * @method group\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @example\r\n     * // group rows by the value of their field\r\n     * chart\r\n     *     .group(function(d) { return d.field; })\r\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\r\n     * @returns {Function|dc.dataTable}\r\n     */\n\n    /**\r\n     * Get or set the table size which determines the number of rows displayed by the widget.\r\n     * @method size\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @param {Number} [size=25]\r\n     * @returns {Number|dc.dataTable}\r\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the index of the beginning slice which determines which entries get displayed\r\n     * by the widget. Useful when implementing pagination.\r\n     *\r\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\r\n       * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\r\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\r\n     * @method beginSlice\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @param {Number} [beginSlice=0]\r\n     * @returns {Number|dc.dataTable}\r\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the index of the end slice which determines which entries get displayed by the\r\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\r\n     * @method endSlice\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @param {Number|undefined} [endSlice=undefined]\r\n     * @returns {Number|dc.dataTable}\r\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set column functions. The data table widget supports several methods of specifying the\r\n     * columns to display.\r\n     *\r\n     * The original method uses an array of functions to generate dynamic columns. Column functions\r\n     * are simple javascript functions with only one input argument `d` which represents a row in\r\n     * the data set. The return value of these functions will be used to generate the content for\r\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\r\n     * headers.\r\n     *\r\n     * <pre><code>chart.columns([\r\n     *     function(d) { return d.date; },\r\n     *     function(d) { return d.open; },\r\n     *     function(d) { return d.close; },\r\n     *     function(d) { return numberFormat(d.close - d.open); },\r\n     *     function(d) { return d.volume; }\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * In the second method, you can list the columns to read from the data without specifying it as\r\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\r\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\r\n     * using the third `{label, format}` form, as shown below.\r\n     *\r\n     * <pre><code>chart.columns([\r\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\r\n     *     \"open\",    // ...\r\n     *     \"close\",   // ...\r\n     *     {\r\n     *         label: \"Change\",\r\n     *         format: function (d) {\r\n     *             return numberFormat(d.close - d.open);\r\n     *         }\r\n     *     },\r\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * In the third example, we specify all fields using the `{label, format}` method:\r\n     * <pre><code>chart.columns([\r\n     *     {\r\n     *         label: \"Date\",\r\n     *         format: function (d) { return d.date; }\r\n     *     },\r\n     *     {\r\n     *         label: \"Open\",\r\n     *         format: function (d) { return numberFormat(d.open); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Close\",\r\n     *         format: function (d) { return numberFormat(d.close); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Change\",\r\n     *         format: function (d) { return numberFormat(d.close - d.open); }\r\n     *     },\r\n     *     {\r\n     *         label: \"Volume\",\r\n     *         format: function (d) { return d.volume; }\r\n     *     }\r\n     * ]);\r\n     * </code></pre>\r\n     *\r\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\r\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\r\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\r\n     * second is used to transform a stringified function into something displayable. For the Stock\r\n     * example, the function for Change becomes the table header **d.close - d.open**.\r\n     *\r\n     * Finally, you can even specify a completely different form of column definition. To do this,\r\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\r\n     * fields without numberFormat specification will be displayed just as they are stored in the\r\n     * data, unformatted.\r\n     * @method columns\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @param {Array<Function>} [columns=[]]\r\n     * @returns {Array<Function>}|dc.dataTable}\r\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\r\n     * particular field to be sorted by.\r\n     * @method sortBy\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @example\r\n     * chart.sortBy(function(d) {\r\n     *     return d.date;\r\n     * });\r\n     * @param {Function} [sortBy=identity function]\r\n     * @returns {Function|dc.dataTable}\r\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\r\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\r\n     * @method order\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.order(d3.descending);\r\n     * @param {Function} [order=d3.ascending]\r\n     * @returns {Function|dc.dataTable}\r\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\r\n     * function must be specified even if groups are not shown.\r\n     * @method showGroups\r\n     * @memberof dc.dataTable\r\n     * @instance\r\n     * @example\r\n     * chart\r\n     *     .group([value], [name])\r\n     *     .showGroups(true|false);\r\n     * @param {Boolean} [showGroups=true]\r\n     * @returns {Boolean|dc.dataTable}\r\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Data grid is a simple widget designed to list the filtered records, providing\r\n * a simple way to define how the items are displayed.\r\n *\r\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\r\n * for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data together in groups.\r\n * Do not pass in a crossfilter group as this will not work.\r\n *\r\n * Examples:\r\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\r\n * @class dataGrid\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.dataGrid}\r\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function _html(d) {\n        return 'you need to provide an html() handling param:  ' + JSON.stringify(d);\n    };\n    var _sortBy = function _sortBy(d) {\n        return d;\n    };\n    var _order = _d.d3.ascending;\n    var _beginSlice = 0,\n        _endSlice;\n\n    var _htmlGroup = function _htmlGroup(d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' + _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups() {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS).data(nestEntries(), function (d) {\n            return _chart.keyAccessor()(d);\n        });\n\n        var itemGroup = groups.enter().append('div').attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup.html(function (d) {\n                return _htmlGroup(d);\n            });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries() {\n        var entries = _chart.dimension().top(_size);\n\n        return _d.d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n            return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems(groups) {\n        var items = groups.order().selectAll('div.' + ITEM_CSS_CLASS).data(function (d) {\n            return d.values;\n        });\n\n        items.exit().remove();\n\n        items = items.enter().append('div').attr('class', ITEM_CSS_CLASS).html(function (d) {\n            return _html(d);\n        }).merge(items);\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\r\n     * Get or set the group function for the data grid. The group function takes a data row and\r\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\r\n     * to split rows into groups.\r\n     *\r\n     * Do not pass in a crossfilter group as this will not work.\r\n     * @method group\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @example\r\n     * // group rows by the value of their field\r\n     * chart\r\n     *     .group(function(d) { return d.field; })\r\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\r\n     * @returns {Function|dc.dataTable}\r\n     */\n\n    /**\r\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\r\n     * Useful when implementing pagination.\r\n     * @method beginSlice\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @param {Number} [beginSlice=0]\r\n     * @returns {Number|dc.dataGrid}\r\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\r\n     * Useful when implementing pagination.\r\n     * @method endSlice\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @param {Number} [endSlice]\r\n     * @returns {Number|dc.dataGrid}\r\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the grid size which determines the number of items displayed by the widget.\r\n     * @method size\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @param {Number} [size=999]\r\n     * @returns {Number|dc.dataGrid}\r\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the function that formats an item. The data grid widget uses a\r\n     * function to generate dynamic html. Use your favourite templating engine or\r\n     * generate the string directly.\r\n     * @method html\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @example\r\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\r\n     * @param {Function} [html]\r\n     * @returns {Function|dc.dataGrid}\r\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the function that formats a group label.\r\n     * @method htmlGroup\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @example\r\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\r\n     * @param {Function} [htmlGroup]\r\n     * @returns {Function|dc.dataGrid}\r\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set sort-by function. This function works as a value accessor at the item\r\n     * level and returns a particular field to be sorted.\r\n     * @method sortBy\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @example\r\n     * chart.sortBy(function(d) {\r\n     *     return d.date;\r\n     * });\r\n     * @param {Function} [sortByFunction]\r\n     * @returns {Function|dc.dataGrid}\r\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set sort the order function.\r\n     * @method order\r\n     * @memberof dc.dataGrid\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.order(d3.descending);\r\n     * @param {Function} [order=d3.ascending]\r\n     * @returns {Function|dc.dataGrid}\r\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\r\n * following dimensions:\r\n * - x axis position\r\n * - y axis position\r\n * - bubble radius\r\n * - color\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\r\n * @class bubbleChart\r\n * @memberof dc\r\n * @mixes dc.bubbleMixin\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a bubble chart under #chart-container1 element using the default global chart group\r\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\r\n * // create a bubble chart under #chart-container2 element using chart group A\r\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.bubbleChart}\r\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function bubbleLocator(d) {\n        return 'translate(' + bubbleX(d) + ',' + bubbleY(d) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS).data(data, function (d) {\n            return d.key;\n        });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        removeNodes(bubbleG);\n\n        bubbleG = renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        _chart.fadeDeselectedArea(_chart.filter());\n    };\n\n    function renderNodes(bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter.attr('class', _chart.BUBBLE_NODE_CLASS).attr('transform', bubbleLocator).append('circle').attr('class', function (d, i) {\n            return _chart.BUBBLE_CLASS + ' _' + i;\n        }).on('click', _chart.onClick).attr('fill', _chart.getColor).attr('r', 0);\n\n        bubbleG = bubbleGEnter.merge(bubbleG);\n\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).select('circle.' + _chart.BUBBLE_CLASS).attr('r', function (d) {\n            return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n            return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n\n        return bubbleG;\n    }\n\n    function updateNodes(bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', bubbleLocator).select('circle.' + _chart.BUBBLE_CLASS).attr('fill', _chart.getColor).attr('r', function (d) {\n            return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n            return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes(bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX(d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x) || !isFinite(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY(d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y) || !isFinite(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function (brushSelection, doTransition) {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea(brushSelection);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\r\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\r\n * achieve some quite flexible charting effects.\r\n * @class compositeChart\r\n * @memberof dc\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a composite chart under #chart-container1 element using the default global chart group\r\n * var compositeChart1 = dc.compositeChart('#chart-container1');\r\n * // create a composite chart under #chart-container2 element using chart group A\r\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.compositeChart}\r\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = _d.d3.axisRight(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.parentBrushOn(_chart.brushOn());\n            child.brushOn(false);\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart.on('filtered.dcjs-composite-chart', function (chart) {\n        // Propagate the filters onto the children\n        // Notice that on children the call is .replaceFilter and not .filter\n        //   the reason is that _chart.filter() returns the entire current set of filters not just the last added one\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(_chart.filter());\n        }\n    });\n\n    _chart._prepareYAxis = function () {\n        var left = leftYAxisChildren().length !== 0;\n        var right = rightYAxisChildren().length !== 0;\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) {\n            prepareLeftYAxis(ranges);\n        }\n        if (right) {\n            prepareRightYAxis(ranges);\n        }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges(left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis(ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(_d.d3.scaleLinear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        // In D3v4 create a RightAxis\n        // _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis(ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(_d.d3.scaleLinear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        // In D3v4 create a LeftAxis\n        // _chart.yAxis().orient('left');\n    }\n\n    function generateChildG(child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\r\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\r\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\r\n     * are present.\r\n     * @method useRightAxisGridLines\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {Boolean} [useRightAxisGridLines=false]\r\n     * @returns {Boolean|dc.compositeChart}\r\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\r\n     * {@link dc.baseMixin#options .options} on each child chart.\r\n     *\r\n     * Note: currently you must call this before `compose` in order for the options to be propagated.\r\n     * @method childOptions\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {Object} [childOptions]\r\n     * @returns {Object|dc.compositeChart}\r\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function (brushSelection) {\n        if (_chart.brushOn()) {\n            for (var i = 0; i < _children.length; ++i) {\n                var child = _children[i];\n                child.fadeDeselectedArea(brushSelection);\n            }\n        }\n    };\n\n    /**\r\n     * Set or get the right y axis label.\r\n     * @method rightYAxisLabel\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {String} [rightYAxisLabel]\r\n     * @param {Number} [padding]\r\n     * @returns {String|dc.compositeChart}\r\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = padding === undefined ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\r\n     * Combine the given charts into one single composite coordinate grid chart.\r\n     *\r\n     * Note: currently due to the way it is implemented, you must call this function at the end of\r\n     * initialization of the composite chart, in particular after `shareTitle`, `childOptions`,\r\n     * `width`, `height`, and `margins`, in order for the settings to get propagated to the children\r\n     * correctly.\r\n     * @method compose\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @example\r\n     * moveChart.compose([\r\n     *     // when creating sub-chart you need to pass in the parent chart\r\n     *     dc.lineChart(moveChart)\r\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\r\n     *         .valueAccessor(function (d){return d.value.avg;})\r\n     *         // most of the normal functions will continue to work in a composed chart\r\n     *         .renderArea(true)\r\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\r\n     *         .title(function (d){\r\n     *             var value = d.value.avg?d.value.avg:d.value;\r\n     *             if(isNaN(value)) value = 0;\r\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\r\n     *         }),\r\n     *     dc.barChart(moveChart)\r\n     *         .group(volumeByMonthGroup)\r\n     *         .centerBar(true)\r\n     * ]);\r\n     * @param {Array<Chart>} [subChartArray]\r\n     * @returns {dc.compositeChart}\r\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\r\n     * Returns the child charts which are composed into the composite chart.\r\n     * @method children\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @returns {Array<dc.baseMixin>}\r\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\r\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\r\n     * will be shared with composed children. Additionally if the child chart implements\r\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\r\n     * specific to its order in the composition.\r\n     * @method shareColors\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {Boolean} [shareColors=false]\r\n     * @returns {Boolean|dc.compositeChart}\r\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\r\n     * this chart will be shared with composed children.\r\n     *\r\n     * Note: currently you must call this before `compose` or the child will still get the parent's\r\n     * `title` function!\r\n     * @method shareTitle\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {Boolean} [shareTitle=true]\r\n     * @returns {Boolean|dc.compositeChart}\r\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\r\n     * generated by the chart implementation.\r\n     * @method rightY\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [yScale]\r\n     * @returns {d3.scale|dc.compositeChart}\r\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\r\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\r\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\r\n     * @method alignYAxes\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @param {Boolean} [alignYAxes=false]\r\n     * @returns {Chart}\r\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren() {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren() {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin(charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin() {\n        return _d.d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin() {\n        return _d.d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax(charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax() {\n        return dc.utils.add(_d.d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax() {\n        return dc.utils.add(_d.d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts() {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(_d.d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    });\n\n    function getAllXAxisMaxFromChildCharts() {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(_d.d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\r\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\r\n     * axis customization is required. The y axis in dc.js is an instance of a\r\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight) therefore it supports any valid\r\n     * d3 axis manipulation.\r\n     *\r\n     * **Caution**: The right y axis is usually generated internally by dc; resetting it may cause\r\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\r\n     * returns the axis, not the chart,\r\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\r\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\r\n     * @method rightYAxis\r\n     * @memberof dc.compositeChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisRight}\r\n     * @example\r\n     * // customize y axis tick format\r\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\r\n     * // customize y axis tick values\r\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\r\n     * @param {d3.axisRight} [rightYAxis]\r\n     * @returns {d3.axisRight|dc.compositeChart}\r\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\r\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\r\n * composite features other than recomposing the chart.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\r\n * @class seriesChart\r\n * @memberof dc\r\n * @mixes dc.compositeChart\r\n * @example\r\n * // create a series chart under #chart-container1 element using the default global chart group\r\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\r\n * // create a series chart under #chart-container2 element using chart group A\r\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.seriesChart}\r\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort(a, b) {\n        return _d.d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = _d.d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = _d.d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children = nesting.map(function (sub, i) {\n            var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n            if (!_charts[sub.key]) {\n                childrenChanged = true;\n            }\n            _charts[sub.key] = subChart;\n            keep.push(sub.key);\n            return subChart.dimension(_chart.dimension()).group({\n                all: typeof sub.values === 'function' ? sub.values : dc.utils.constant(sub.values)\n            }, sub.key).keyAccessor(_chart.keyAccessor()).valueAccessor(_chart.valueAccessor()).brushOn(false);\n        });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts).filter(function (c) {\n            return keep.indexOf(c) === -1;\n        }).forEach(function (c) {\n            clearChart(c);\n            childrenChanged = true;\n        });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart(c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren() {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\r\n     * Get or set the chart function, which generates the child charts.\r\n     * @method chart\r\n     * @memberof dc.seriesChart\r\n     * @instance\r\n     * @example\r\n     * // put curve on the line charts used for the series\r\n     * chart.chart(function(c) { return dc.lineChart(c).curve(d3.curveBasis); })\r\n     * // do a scatter series chart\r\n     * chart.chart(dc.scatterPlot)\r\n     * @param {Function} [chartFunction=dc.lineChart]\r\n     * @returns {Function|dc.seriesChart}\r\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Get or set accessor function for the displayed series. Given a datum, this function\r\n     * should return the series that datum belongs to.\r\n     * @method seriesAccessor\r\n     * @memberof dc.seriesChart\r\n     * @instance\r\n     * @example\r\n     * // simple series accessor\r\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\r\n     * @param {Function} [accessor]\r\n     * @returns {Function|dc.seriesChart}\r\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\r\n     * Get or set a function to sort the list of series by, given series values.\r\n     * @method seriesSort\r\n     * @memberof dc.seriesChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * chart.seriesSort(d3.descending);\r\n     * @param {Function} [sortFunction=d3.ascending]\r\n     * @returns {Function|dc.seriesChart}\r\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\r\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\r\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\r\n     * rather than haphazardly.\r\n     * @method valueSort\r\n     * @memberof dc.seriesChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\r\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\r\n     * @example\r\n     * // Default value sort\r\n     * _chart.valueSort(function keySort (a, b) {\r\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\r\n     * });\r\n     * @param {Function} [sortFunction]\r\n     * @returns {Function|dc.seriesChart}\r\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n\n/**\r\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\r\n * from GeoJson data. This chart implementation was inspired by\r\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\r\n * @class geoChoroplethChart\r\n * @memberof dc\r\n * @mixes dc.colorMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a choropleth chart under '#us-chart' element using the default global chart group\r\n * var chart1 = dc.geoChoroplethChart('#us-chart');\r\n * // create a choropleth chart under '#us-chart2' element using chart group A\r\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.geoChoroplethChart}\r\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = _d.d3.geoPath();\n    var _projectionFlag;\n    var _projection;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g').attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name).data(geoJson(layerIndex).data);\n\n            regionG = regionG.enter().append('g').attr('class', geoJson(layerIndex).name).merge(regionG);\n\n            regionG.append('path').attr('fill', 'white').attr('d', _getGeoPath());\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData(layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData() {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer(layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG(layerIndex) {\n        var regionG = _chart.svg().selectAll(layerSelector(layerIndex)).classed('selected', function (d) {\n            return isSelected(layerIndex, d);\n        }).classed('deselected', function (d) {\n            return isDeselected(layerIndex, d);\n        }).attr('class', function (d) {\n            var layerNameClass = geoJson(layerIndex).name;\n            var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n            var baseClasses = layerNameClass + ' ' + regionClass;\n            if (isSelected(layerIndex, d)) {\n                baseClasses += ' selected';\n            }\n            if (isDeselected(layerIndex, d)) {\n                baseClasses += ' deselected';\n            }\n            return baseClasses;\n        });\n        return regionG;\n    }\n\n    function layerSelector(layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected(layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected(layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey(layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson(index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths(regionG, layerIndex, data) {\n        var paths = regionG.select('path').attr('fill', function () {\n            var currentFill = _d.d3.select(this).attr('fill');\n            if (currentFill) {\n                return currentFill;\n            }\n            return 'none';\n        }).on('click', function (d) {\n            return _chart.onClick(d, layerIndex);\n        });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle(regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({ key: key, value: value });\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _getGeoPath());\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\r\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\r\n     * layers with the same name the new overlay will override the existing one.\r\n     * @method overlayGeoJson\r\n     * @memberof dc.geoChoroplethChart\r\n     * @instance\r\n     * @see {@link http://geojson.org/ GeoJSON}\r\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\r\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\r\n     * @example\r\n     * // insert a layer for rendering US states\r\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\r\n     *      return d.properties.name;\r\n     * });\r\n     * @param {geoJson} json - a geojson feed\r\n     * @param {String} name - name of the layer\r\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\r\n     * this function should match the keys returned by the crossfilter groups.\r\n     * @returns {dc.geoChoroplethChart}\r\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({ name: name, data: json, keyAccessor: keyAccessor });\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets a custom geo projection function. See the available\r\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3 geo projection functions}.\r\n     *\r\n     * Starting version 3.0 it has been deprecated to rely on the default projection being\r\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#geoAlbersUsa d3.geoAlbersUsa()}. Please\r\n     * set it explicitly. {@link https://bl.ocks.org/mbostock/5557726\r\n     * Considering that `null` is also a valid value for projection}, if you need\r\n     * projection to be `null` please set it explicitly to `null`.\r\n     * @method projection\r\n     * @memberof dc.geoChoroplethChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3.projection}\r\n     * @see {@link https://github.com/d3/d3-geo-projection d3-geo-projection}\r\n     * @param {d3.projection} [projection=d3.geoAlbersUsa()]\r\n     * @returns {d3.projection|dc.geoChoroplethChart}\r\n     */\n    _chart.projection = function (projection) {\n        if (!arguments.length) {\n            return _projection;\n        }\n\n        _projection = projection;\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    var _getGeoPath = function _getGeoPath() {\n        if (_projection === undefined) {\n            dc.logger.warn('choropleth projection default of geoAlbers is deprecated,' + ' in next version projection will need to be set explicitly');\n            return _geoPath.projection(_d.d3.geoAlbersUsa());\n        }\n\n        return _geoPath.projection(_projection);\n    };\n\n    /**\r\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\r\n     * reference to this chart's internal data structure, so any modification to this array will also\r\n     * modify this chart's internal registration.\r\n     * @method geoJsons\r\n     * @memberof dc.geoChoroplethChart\r\n     * @instance\r\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\r\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\r\n     * Returns the {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath} object used to\r\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\r\n     * feature set and thus a way to calculate scale and translation for the projection.\r\n     * @method geoPath\r\n     * @memberof dc.geoChoroplethChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath}\r\n     * @returns {d3.geoPath}\r\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\r\n     * Remove a GeoJson layer from this chart by name\r\n     * @method removeGeoJson\r\n     * @memberof dc.geoChoroplethChart\r\n     * @instance\r\n     * @param {String} name\r\n     * @returns {dc.geoChoroplethChart}\r\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\r\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\r\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\r\n * and coloring.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @class bubbleOverlay\r\n * @memberof dc\r\n * @mixes dc.bubbleMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\r\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\r\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\r\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.bubbleOverlay}\r\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\r\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\r\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\r\n     * @method svg\r\n     * @memberof dc.bubbleOverlay\r\n     * @instance\r\n     * @example\r\n     * // set up underlying svg element\r\n     * chart.svg(d3.select('#chart svg'));\r\n     * @param {SVGElement|d3.selection} [imageElement]\r\n     * @returns {dc.bubbleOverlay}\r\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\r\n     * **mandatory**\r\n     *\r\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\r\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\r\n     * then a bubble will be generated at the position specified by the function. x and y\r\n     * value specified here are relative to the underlying svg.\r\n     * @method point\r\n     * @memberof dc.bubbleOverlay\r\n     * @instance\r\n     * @param {String} name\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @returns {dc.bubbleOverlay}\r\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({ name: name, x: x, y: y });\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea(_chart.filter());\n\n        return _chart;\n    };\n\n    function initOverlayG() {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles() {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle').attr('class', BUBBLE_CLASS).attr('r', 0).attr('fill', _chart.getColor).on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n                return _chart.bubbleR(d);\n            });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData() {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG(point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g').attr('class', bubbleNodeClass).attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea(_chart.filter());\n\n        return _chart;\n    };\n\n    function updateBubbles() {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n                return _chart.bubbleR(d);\n            }).attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg().append('g').attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text').attr('x', 10).attr('y', 20);\n\n            debugG.append('rect').attr('width', _chart.width()).attr('height', _chart.height()).on('mousemove', function () {\n                var position = _d.d3.mouse(debugG.node());\n                var msg = position[0] + ', ' + position[1];\n                debugText.text(msg);\n            });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n\n/**\r\n * Concrete row chart implementation.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * @class rowChart\r\n * @memberof dc\r\n * @mixes dc.capMixin\r\n * @mixes dc.marginMixin\r\n * @mixes dc.colorMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a row chart under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.rowChart('#chart-container1');\r\n * // create a row chart under #chart-container2 element using chart group A\r\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.rowChart}\r\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = _d.d3.axisBottom();\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale() {\n        if (!_x || _elasticX) {\n            var extent = _d.d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = _d.d3.scaleLinear().domain(extent).range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis() {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay()).call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\r\n     * Gets or sets the x scale. The x scale can be any d3\r\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}.\r\n     * @method x\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\r\n     * @param {d3.scale} [scale]\r\n     * @returns {d3.scale|dc.rowChart}\r\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines() {\n        _g.selectAll('g.tick').select('line.grid-line').remove();\n\n        _g.selectAll('g.tick').append('line').attr('class', 'grid-line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', function () {\n            return -_chart.effectiveHeight();\n        });\n    }\n\n    function drawChart() {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass).data(_rowData);\n\n        removeElements(rows);\n        rows = createElements(rows).merge(rows);\n        updateElements(rows);\n    }\n\n    function createElements(rows) {\n        var rowEnter = rows.enter().append('g').attr('class', function (d, i) {\n            return _rowCssClass + ' _' + i;\n        });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n\n        return rowEnter;\n    }\n\n    function removeElements(rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue() {\n        var root = _x(0);\n        return root === -Infinity || root !== root ? _x(1) : root;\n    }\n\n    function updateElements(rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n            return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n        }).select('rect').attr('height', height).attr('fill', _chart.getColor).on('click', onClick).classed('deselected', function (d) {\n            return _chart.hasFilter() ? !isSelectedRow(d) : false;\n        }).classed('selected', function (d) {\n            return _chart.hasFilter() ? isSelectedRow(d) : false;\n        });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay()).attr('width', function (d) {\n            return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n        }).attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles(rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels(rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text').on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text').attr('class', _titleRowCssClass).on('click', onClick);\n        }\n    }\n\n    function updateLabels(rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text').attr('x', _labelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).on('click', onClick).attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            }).text(function (d) {\n                return _chart.label()(d);\n            });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass).attr('x', _chart.effectiveWidth() - _titleLabelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).attr('text-anchor', 'end').on('click', onClick).attr('class', function (d, i) {\n                return _titleRowCssClass + ' _' + i;\n            }).text(function (d) {\n                return _chart.title()(d);\n            });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n    }\n\n    /**\r\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\r\n     * @method renderTitleLabel\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Boolean} [renderTitleLabel=false]\r\n     * @returns {Boolean|dc.rowChart}\r\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick(d) {\n        _chart.onClick(d);\n    }\n\n    function translateX(d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\r\n     * Get or sets the x axis for the row chart instance.\r\n     * See the {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\r\n     * documention for more information.\r\n     * @method xAxis\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @example\r\n     * // customize x axis tick format\r\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\r\n     * // customize x axis tick values\r\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\r\n     * // use a top-oriented axis. Note: position of the axis and grid lines will need to\r\n     * // be set manually, see https://dc-js.github.io/dc.js/examples/row-top-axis.html\r\n     * chart.xAxis(d3.axisTop())\r\n     * @returns {d3.axis}\r\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return this;\n    };\n\n    /**\r\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\r\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\r\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\r\n     * your vertical gap space).\r\n     * @method fixedBarHeight\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @example\r\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\r\n     * @param {Boolean|Number} [fixedBarHeight=false]\r\n     * @returns {Boolean|Number|dc.rowChart}\r\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the vertical gap space between rows on a particular row chart instance.\r\n     * @method gap\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Number} [gap=5]\r\n     * @returns {Number|dc.rowChart}\r\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\r\n     * data range when filtered.\r\n     * @method elasticX\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Boolean} [elasticX]\r\n     * @returns {Boolean|dc.rowChart}\r\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\r\n     * @method labelOffsetX\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Number} [labelOffsetX=10]\r\n     * @returns {Number|dc.rowChart}\r\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\r\n     * @method labelOffsetY\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Number} [labelOffsety=15]\r\n     * @returns {Number|dc.rowChart}\r\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\r\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\r\n     * @method titleLabelOffsetX\r\n     * @memberof dc.rowChart\r\n     * @instance\r\n     * @param {Number} [titleLabelOffsetX=2]\r\n     * @returns {Number|dc.rowChart}\r\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\r\n * labels.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\r\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\r\n * @class legend\r\n * @memberof dc\r\n * @example\r\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\r\n * @returns {dc.legend}\r\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g').attr('class', 'dc-legend').attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item').data(legendables).enter().append('g').attr('class', 'dc-legend-item').on('mouseover', function (d) {\n            _parent.legendHighlight(d);\n        }).on('mouseout', function (d) {\n            _parent.legendReset(d);\n        }).on('click', function (d) {\n            d.chart.legendToggle(d);\n        });\n\n        _g.selectAll('g.dc-legend-item').classed('fadeout', function (d) {\n            return d.chart.isLegendableHidden(d);\n        });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter.append('line').attr('x1', 0).attr('y1', _itemHeight / 2).attr('x2', _itemHeight).attr('y2', _itemHeight / 2).attr('stroke-width', 2).attr('stroke-dasharray', dc.pluck('dashstyle')).attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter.append('rect').attr('width', _itemHeight).attr('height', _itemHeight).attr('fill', function (d) {\n                return d ? d.color : 'blue';\n            });\n        }\n\n        itemEnter.append('text').text(_legendText).attr('x', _itemHeight + LABEL_GAP).attr('y', function () {\n            return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n        });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if (_cumulativeLegendTextWidth + itemWidth > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight() {\n        return _gap + _itemHeight;\n    }\n\n    /**\r\n     * Set or get x coordinate for legend widget.\r\n     * @method x\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [x=0]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\r\n     * Set or get y coordinate for legend widget.\r\n     * @method y\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [y=0]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\r\n     * Set or get gap between legend items.\r\n     * @method gap\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [gap=5]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\r\n     * Set or get legend item height.\r\n     * @method itemHeight\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [itemHeight=12]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\r\n     * Position legend horizontally instead of vertically.\r\n     * @method horizontal\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Boolean} [horizontal=false]\r\n     * @returns {Boolean|dc.legend}\r\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\r\n     * Maximum width for horizontal legend.\r\n     * @method legendWidth\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [legendWidth=500]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\r\n     * Legend item width for horizontal legend.\r\n     * @method itemWidth\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [itemWidth=70]\r\n     * @returns {Number|dc.legend}\r\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\r\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\r\n     * This setting takes into account the {@link dc.legend#gap gap}.\r\n     * @method autoItemWidth\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Boolean} [autoItemWidth=false]\r\n     * @returns {Boolean|dc.legend}\r\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\r\n     * Set or get the legend text function. The legend widget uses this function to render the legend\r\n     * text for each item. If no function is specified the legend widget will display the names\r\n     * associated with each group.\r\n     * @method legendText\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Function} [legendText]\r\n     * @returns {Function|dc.legend}\r\n     * @example\r\n     * // default legendText\r\n     * legend.legendText(dc.pluck('name'))\r\n     *\r\n     * // create numbered legend items\r\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\r\n     *\r\n     * // create legend displaying group counts\r\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\r\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\r\n     * Maximum number of legend items to display\r\n     * @method maxItems\r\n     * @memberof dc.legend\r\n     * @instance\r\n     * @param  {Number} [maxItems]\r\n     * @return {dc.legend}\r\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\r\n * htmlLegend is a attachable widget that can be added to other dc charts to render horizontal/vertical legend\r\n * labels.\r\n *\r\n * @class htmlLegend\r\n * @memberof dc\r\n * @example\r\n * chart.legend(dc.htmlLegend().container(legendContainerElement).horizontal(false))\r\n * @returns {dc.htmlLegend}\r\n */\ndc.htmlLegend = function () {\n    var _legend = {},\n        _htmlLegendDivCssClass = 'dc-html-legend',\n        _legendItemCssClassHorizontal = 'dc-legend-item-horizontal',\n        _legendItemCssClassVertical = 'dc-legend-item-vertical',\n        _parent,\n        _container,\n        _legendText = dc.pluck('name'),\n        _maxItems,\n        _horizontal = false,\n        _legendItemClass,\n        _highlightSelected = false;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        var _defaultLegendItemCssClass = _horizontal ? _legendItemCssClassHorizontal : _legendItemCssClassVertical;\n        _container.select('div.dc-html-legend').remove();\n\n        var _l = _container.append('div').attr('class', _htmlLegendDivCssClass);\n        _l.attr('style', 'max-width:' + _container.nodes()[0].style.width);\n\n        var legendables = _parent.legendables();\n        var filters = _parent.filters();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var legendItemClassName = _legendItemClass ? _legendItemClass : _defaultLegendItemCssClass;\n\n        var itemEnter = _l.selectAll('div.' + legendItemClassName).data(legendables).enter().append('div').classed(legendItemClassName, true).on('mouseover', _parent.legendHighlight).on('mouseout', _parent.legendReset).on('click', _parent.legendToggle);\n\n        if (_highlightSelected) {\n            itemEnter.classed(dc.constants.SELECTED_CLASS, function (d) {\n                return filters.indexOf(d.name) !== -1;\n            });\n        }\n\n        itemEnter.append('span').attr('class', 'dc-legend-item-color').style('background-color', dc.pluck('color'));\n\n        itemEnter.append('span').attr('class', 'dc-legend-item-label').attr('title', _legendText).text(_legendText);\n    };\n\n    /**\r\n     #### .container([selector])\r\n     Set the container selector for the legend widget. Required.\r\n     **/\n    _legend.container = function (c) {\n        if (!arguments.length) {\n            return _container;\n        }\n        _container = _d.d3.select(c);\n        return _legend;\n    };\n\n    /**\r\n     #### .legendItemClass([selector])\r\n     This can be optionally used to override class for legenditem and just use this class style.\r\n     The reason to have this is so this can be done for a particular chart rather than overriding the style for all charts\r\n     Setting this will disable the highlighting of selected items also.\r\n     **/\n    _legend.legendItemClass = function (c) {\n        if (!arguments.length) {\n            return _legendItemClass;\n        }\n        _legendItemClass = c;\n        return _legend;\n    };\n\n    /**\r\n     #### .highlightSelected([boolean])\r\n     This can be optionally used to enable highlighting legends for the selections/filters for the chart.\r\n     **/\n    _legend.highlightSelected = function (c) {\n        if (!arguments.length) {\n            return _highlightSelected;\n        }\n        _highlightSelected = c;\n        return _legend;\n    };\n\n    /**\r\n     #### .horizontal([boolean])\r\n     Display the legend horizontally instead of horizontally\r\n     **/\n    _legend.horizontal = function (b) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = b;\n        return _legend;\n    };\n\n    /**\r\n     * Set or get the legend text function. The legend widget uses this function to render the legend\r\n     * text for each item. If no function is specified the legend widget will display the names\r\n     * associated with each group.\r\n     * @method legendText\r\n     * @memberof dc.htmlLegend\r\n     * @instance\r\n     * @param  {Function} [legendText]\r\n     * @returns {Function|dc.htmlLegend}\r\n     * @example\r\n     * // default legendText\r\n     * legend.legendText(dc.pluck('name'))\r\n     *\r\n     * // create numbered legend items\r\n     * chart.legend(dc.htmlLegend().legendText(function(d, i) { return i + '. ' + d.name; }))\r\n     *\r\n     * // create legend displaying group counts\r\n     * chart.legend(dc.htmlLegend().legendText(function(d) { return d.name + ': ' d.data; }))\r\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\r\n     * Maximum number of legend items to display\r\n     * @method maxItems\r\n     * @memberof dc.htmlLegend\r\n     * @instance\r\n     * @param  {Number} [maxItems]\r\n     * @return {dc.htmlLegend}\r\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n\n/**\r\n * A scatter plot chart\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\r\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\r\n * @class scatterPlot\r\n * @memberof dc\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a scatter plot under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.scatterPlot('#chart-container1');\r\n * // create a scatter plot under #chart-container2 element using chart group A\r\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\r\n * // create a sub-chart under a composite parent chart\r\n * var chart3 = dc.scatterPlot(compositeChart);\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.scatterPlot}\r\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = _d.d3.symbol();\n\n    var _existenceAccessor = function _existenceAccessor(d) {\n        return d.value;\n    };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) {\n        return originalKeyAccessor(d)[0];\n    });\n    _chart.valueAccessor(function (d) {\n        return originalKeyAccessor(d)[1];\n    });\n    _chart.colorAccessor(function () {\n        return _chart._groupName;\n    });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' + _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function _locator(d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' + _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    // Use a 2 dimensional brush\n    _chart.brush(_d.d3.brush());\n\n    function elementSize(d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol').data(_chart.data());\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 0).remove();\n\n        symbols = symbols.enter().append('path').attr('class', 'symbol').attr('opacity', 0).attr('fill', \"_chart.getColor\").attr('transform', _locator).merge(symbols);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([_chart.keyAccessor()(d), _chart.valueAccessor()(d)]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', function (d, i) {\n            if (!_existenceAccessor(d)) {\n                return _emptyOpacity;\n            } else if (_filtered[i]) {\n                return _nonemptyOpacity;\n            } else {\n                return _chart.excludedOpacity();\n            }\n        }).attr('fill', function (d, i) {\n            if (_emptyColor && !_existenceAccessor(d)) {\n                return _emptyColor;\n            } else if (_chart.excludedColor() && !_filtered[i]) {\n                return _chart.excludedColor();\n            } else {\n                return _chart.getColor(d);\n            }\n        }).attr('transform', _locator).attr('d', _symbol);\n    };\n\n    function renderTitles(symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\r\n     * Get or set the existence accessor.  If a point exists, it is drawn with\r\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\r\n     * opacity 1; if it does not exist, it is drawn with\r\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\r\n     * the existence accessor checks if the reduced value is truthy.\r\n     * @method existenceAccessor\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\r\n     * @see {@link dc.scatterPlot#emptySize emptySize}\r\n     * @example\r\n     * // default accessor\r\n     * chart.existenceAccessor(function (d) { return d.value; });\r\n     * @param {Function} [accessor]\r\n     * @returns {Function|dc.scatterPlot}\r\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\r\n     * Get or set the symbol type used for each point. By default the symbol is a circle (d3.symbolCircle).\r\n     * Type can be a constant or an accessor.\r\n     * @method symbol\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_type symbol.type}\r\n     * @example\r\n     * // Circle type\r\n     * chart.symbol(d3.symbolCircle);\r\n     * // Square type\r\n     * chart.symbol(d3.symbolSquare);\r\n     * @param {Function} [type=d3.symbolCircle]\r\n     * @returns {Function|dc.scatterPlot}\r\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol()}\r\n     * to generate symbols. `dc.scatterPlot` will set the\r\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size symbol size accessor}\r\n     * on the symbol generator.\r\n     * @method customSymbol\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol}\r\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\r\n     * @param {String|Function} [customSymbol=d3.symbol()]\r\n     * @returns {String|Function|dc.scatterPlot}\r\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\r\n     * Set or get radius for symbols.\r\n     * @method symbolSize\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [symbolSize=3]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get radius for highlighted symbols.\r\n     * @method highlightedSize\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [highlightedSize=5]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get size for symbols excluded from this chart's filter. If null, no\r\n     * special size is applied for symbols based on their filter status.\r\n     * @method excludedSize\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [excludedSize=null]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get color for symbols excluded from this chart's filter. If null, no\r\n     * special color is applied for symbols based on their filter status.\r\n     * @method excludedColor\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @param {Number} [excludedColor=null]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get opacity for symbols excluded from this chart's filter.\r\n     * @method excludedOpacity\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @param {Number} [excludedOpacity=1.0]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get radius for symbols when the group is empty.\r\n     * @method emptySize\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\r\n     * @param {Number} [emptySize=0]\r\n     * @returns {Number|dc.scatterPlot}\r\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get color for symbols when the group is empty. If null, just use the\r\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\r\n     * @name emptyColor\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @param {String} [emptyColor=null]\r\n     * @return {String}\r\n     * @return {dc.scatterPlot}/\r\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get opacity for symbols when the group is empty.\r\n     * @name emptyOpacity\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @param {Number} [emptyOpacity=0]\r\n     * @return {Number}\r\n     * @return {dc.scatterPlot}\r\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get opacity for symbols when the group is not empty.\r\n     * @name nonemptyOpacity\r\n     * @memberof dc.scatterPlot\r\n     * @instance\r\n     * @param {Number} [nonemptyOpacity=1]\r\n     * @return {Number}\r\n     * @return {dc.scatterPlot}\r\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{ chart: _chart, name: _chart._groupName, color: _chart.getColor() }];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return _d.d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return _d.d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere(condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(_d.d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.createBrushHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function (brushSelection) {\n        if (_chart.round()) {\n            brushSelection[0] = brushSelection[0].map(_chart.round());\n            brushSelection[1] = brushSelection[1].map(_chart.round());\n        }\n        return brushSelection;\n    };\n\n    _chart.brushIsEmpty = function (brushSelection) {\n        return !brushSelection || brushSelection[0][0] >= brushSelection[1][0] || brushSelection[0][1] >= brushSelection[1][1];\n    };\n\n    _chart._brushing = function () {\n        // Avoids infinite recursion (mutual recursion between range and focus operations)\n        // Source Event will be null when brush.move is called programmatically (see below as well).\n        if (!_d.d3.event.sourceEvent) {\n            return;\n        }\n\n        // Ignore event if recursive event - i.e. not directly generated by user action (like mouse/touch etc.)\n        // In this case we are more worried about this handler causing brush move programmatically which will\n        // cause this handler to be invoked again with a new d3.event (and current event set as sourceEvent)\n        // This check avoids recursive calls\n        if (_d.d3.event.sourceEvent.type && ['start', 'brush', 'end'].indexOf(_d.d3.event.sourceEvent.type) !== -1) {\n            return;\n        }\n\n        var brushSelection = _d.d3.event.selection;\n\n        // Testing with pixels is more reliable\n        var brushIsEmpty = _chart.brushIsEmpty(brushSelection);\n\n        if (brushSelection) {\n            brushSelection = brushSelection.map(function (point) {\n                return point.map(function (coord, i) {\n                    var scale = i === 0 ? _chart.x() : _chart.y();\n                    return scale.invert(coord);\n                });\n            });\n\n            brushSelection = _chart.extendBrush(brushSelection);\n\n            // The rounding process might have made brushSelection empty, so we need to recheck\n            brushIsEmpty = brushIsEmpty && _chart.brushIsEmpty(brushSelection);\n        }\n\n        _chart.redrawBrush(brushSelection, false);\n\n        var ranged2DFilter = brushIsEmpty ? null : dc.filters.RangedTwoDimensionalFilter(brushSelection);\n\n        dc.events.trigger(function () {\n            _chart.replaceFilter(ranged2DFilter);\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n    };\n\n    _chart.redrawBrush = function (brushSelection, doTransition) {\n        // override default x axis brush from parent chart\n        var _brush = _chart.brush();\n        var _gBrush = _chart.gBrush();\n\n        if (_chart.brushOn() && _gBrush) {\n            if (_chart.resizing()) {\n                _chart.setBrushExtents(doTransition);\n            }\n\n            if (!brushSelection) {\n                _gBrush.call(_brush.move, brushSelection);\n            } else {\n                brushSelection = brushSelection.map(function (point) {\n                    return point.map(function (coord, i) {\n                        var scale = i === 0 ? _chart.x() : _chart.y();\n                        return scale(coord);\n                    });\n                });\n\n                var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(_gBrush);\n\n                gBrush.call(_brush.move, brushSelection);\n            }\n        }\n\n        _chart.fadeDeselectedArea(brushSelection);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * A display of a single numeric value.\r\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\r\n * a valueAccessor that returns a single value.\r\n * @class numberDisplay\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a number display under #chart-container1 element using the default global chart group\r\n * var display1 = dc.numberDisplay('#chart-container1');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.numberDisplay}\r\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = _d.d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = { one: '', some: '', none: '' };\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) {\n        return kv.value;\n    });\n\n    /**\r\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\r\n     * displayed.  The text `%number` will be replaced with the current value.\r\n     * - one: HTML template to use if the number is 1\r\n     * - zero: HTML template to use if the number is 0\r\n     * - some: HTML template to use otherwise\r\n     * @method html\r\n     * @memberof dc.numberDisplay\r\n     * @instance\r\n     * @example\r\n     * numberWidget.html({\r\n     *      one:'%number record',\r\n     *      some:'%number records',\r\n     *      none:'no records'})\r\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\r\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\r\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none; //if none available\n        } else if (html.one) {\n            _html.none = html.one; //if none not available use one\n        } else if (html.some) {\n            _html.none = html.some; //if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one; //if one available\n        } else if (html.some) {\n            _html.one = html.some; //if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some; //if some available\n        } else if (html.one) {\n            _html.some = html.one; //if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Calculate and return the underlying value of the display.\r\n     * @method value\r\n     * @memberof dc.numberDisplay\r\n     * @instance\r\n     * @returns {Number}\r\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin(all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0]).enter().append('span').attr('class', SPAN_CLASS).merge(span);\n        }\n\n        span.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).ease(_d.d3.easeQuad).tween('text', function () {\n            // [XA] don't try and interpolate from Infinity, else this breaks.\n            var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n            var interp = _d.d3.interpolateNumber(interpStart || 0, newValue);\n            _lastValue = newValue;\n\n            // need to save it in D3v4\n            var node = this;\n            return function (t) {\n                var html = null,\n                    num = _chart.formatNumber()(interp(t));\n                if (newValue === 0 && _html.none !== '') {\n                    html = _html.none;\n                } else if (newValue === 1 && _html.one !== '') {\n                    html = _html.one;\n                } else if (_html.some !== '') {\n                    html = _html.some;\n                }\n                node.innerHTML = html ? html.replace('%number', num) : num;\n            };\n        });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\r\n     * Get or set a function to format the value for the display.\r\n     * @method formatNumber\r\n     * @memberof dc.numberDisplay\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\r\n     * @param {Function} [formatter=d3.format('.2s')]\r\n     * @returns {Function|dc.numberDisplay}\r\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * A heat map is matrix that represents the values of two dimensions of data using colors.\r\n * @class heatMap\r\n * @memberof dc\r\n * @mixes dc.colorMixin\r\n * @mixes dc.marginMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a heat map under #chart-container1 element using the default global chart group\r\n * var heatMap1 = dc.heatMap('#chart-container1');\r\n * // create a heat map under #chart-container2 element using chart group A\r\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.heatMap}\r\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = _d.d3.ascending;\n    var _rowOrdering = _d.d3.ascending;\n    var _colScale = _d.d3.scaleBand();\n    var _rowScale = _d.d3.scaleBand();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function _colsLabel(d) {\n        return d;\n    };\n    var _rowsLabel = function _rowsLabel(d) {\n        return d;\n    };\n\n    /**\r\n     * Set or get the column label function. The chart class uses this function to render\r\n     * column labels on the X axis. It is passed the column name.\r\n     * @method colsLabel\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @example\r\n     * // the default label function just returns the name\r\n     * chart.colsLabel(function(d) { return d; });\r\n     * @param  {Function} [labelFunction=function(d) { return d; }]\r\n     * @returns {Function|dc.heatMap}\r\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\r\n     * Set or get the row label function. The chart class uses this function to render\r\n     * row labels on the Y axis. It is passed the row name.\r\n     * @method rowsLabel\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @example\r\n     * // the default label function just returns the name\r\n     * chart.rowsLabel(function(d) { return d; });\r\n     * @param  {Function} [labelFunction=function(d) { return d; }]\r\n     * @returns {Function|dc.heatMap}\r\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function _xAxisOnClick(d) {\n        filterAxis(0, d);\n    };\n    var _yAxisOnClick = function _yAxisOnClick(d) {\n        filterAxis(1, d);\n    };\n    var _boxOnClick = function _boxOnClick(d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis(axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\r\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\r\n     * the values will be fetched from the data using the value accessor.\r\n     * @method rows\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Array<String|Number>} [rows]\r\n     * @returns {Array<String|Number>|dc.heatMap}\r\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\r\n     #### .rowOrdering([orderFunction])\r\n     Get or set an accessor to order the rows.  Default is d3.ascending.\r\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\r\n     * the values will be fetched from the data using the key accessor.\r\n     * @method cols\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Array<String|Number>} [cols]\r\n     * @returns {Array<String|Number>|dc.heatMap}\r\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\r\n     #### .colOrdering([orderFunction])\r\n     Get or set an accessor to order the cols.  Default is ascending.\r\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg().append('g').attr('class', 'heatmap').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRound([0, _chart.effectiveWidth()]);\n        rows.rangeRound([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n\n        boxes.exit().remove();\n\n        var gEnter = boxes.enter().append('g').attr('class', 'box-group');\n\n        gEnter.append('rect').attr('class', 'heat-box').attr('fill', 'white').attr('x', function (d, i) {\n            return cols(_chart.keyAccessor()(d, i));\n        }).attr('y', function (d, i) {\n            return rows(_chart.valueAccessor()(d, i));\n        }).on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        boxes = gEnter.merge(boxes);\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d, i) {\n            return cols(_chart.keyAccessor()(d, i));\n        }).attr('y', function (d, i) {\n            return rows(_chart.valueAccessor()(d, i));\n        }).attr('rx', _xBorderRadius).attr('ry', _yBorderRadius).attr('fill', _chart.getColor).attr('width', boxWidth).attr('height', boxHeight);\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n\n        gColsText.exit().remove();\n\n        gColsText = gColsText.enter().append('text').attr('x', function (d) {\n            return cols(d) + boxWidth / 2;\n        }).style('text-anchor', 'middle').attr('y', _chart.effectiveHeight()).attr('dy', 12).on('click', _chart.xAxisOnClick()).text(_chart.colsLabel()).merge(gColsText);\n\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.colsLabel()).attr('x', function (d) {\n            return cols(d) + boxWidth / 2;\n        }).attr('y', _chart.effectiveHeight());\n\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n\n        gRowsText.exit().remove();\n\n        gRowsText = gRowsText.enter().append('text').style('text-anchor', 'end').attr('x', 0).attr('dx', -2).attr('y', function (d) {\n            return rows(d) + boxHeight / 2;\n        }).attr('dy', 6).on('click', _chart.yAxisOnClick()).text(_chart.rowsLabel()).merge(gRowsText);\n\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.rowsLabel()).attr('y', function (d) {\n            return rows(d) + boxHeight / 2;\n        });\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\r\n     * By default, filtering of the cell will be toggled.\r\n     * @method boxOnClick\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @example\r\n     * // default box on click handler\r\n     * chart.boxOnClick(function (d) {\r\n     *     var filter = d.key;\r\n     *     dc.events.trigger(function () {\r\n     *         _chart.filter(filter);\r\n     *         _chart.redrawGroup();\r\n     *     });\r\n     * });\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|dc.heatMap}\r\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\r\n     * By default, if any cells in the column are unselected, the whole column will be selected,\r\n     * otherwise the whole column will be unselected.\r\n     * @method xAxisOnClick\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|dc.heatMap}\r\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\r\n     * By default, if any cells in the row are unselected, the whole row will be selected,\r\n     * otherwise the whole row will be unselected.\r\n     * @method yAxisOnClick\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Function} [handler]\r\n     * @returns {Function|dc.heatMap}\r\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\r\n     * @method xBorderRadius\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Number} [xBorderRadius=6.75]\r\n     * @returns {Number|dc.heatMap}\r\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\r\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\r\n     * @method yBorderRadius\r\n     * @memberof dc.heatMap\r\n     * @instance\r\n     * @param  {Number} [yBorderRadius=6.75]\r\n     * @returns {Number|dc.heatMap}\r\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// https://github.com/d3/d3-plugins/blob/master/box/box.js\n// * Original source March 22, 2013\n// * Enhancements integrated on May 13, 2018 for dc.js library only\n\n// https://github.com/d3/d3-plugins/blob/master/LICENSE\n// Copyright (c) 2012-2015, Michael Bostock\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice, this\n//   list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// * The name Michael Bostock may not be used to endorse or promote products\n//   derived from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    _d.d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null,\n\n\n        // Enhanced attributes\n        renderDataPoints = false,\n            dataRadius = 3,\n            dataOpacity = 0.3,\n            dataWidthPortion = 0.8,\n            renderTitle = false,\n            showOutliers = true,\n            boldOutlier = false;\n\n        // For each small multiple…\n        function box(g) {\n            /* jshint -W074 */\n            g.each(function (d, i) {\n                d = d.map(value).sort(_d.d3.ascending);\n                var g = _d.d3.select(this),\n                    n = d.length,\n                    min,\n                    max;\n\n                // Leave if there are no items.\n                if (n === 0) {\n                    return;\n                }\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) {\n                    return d[i];\n                });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ? _d.d3.range(0, whiskerIndices[0]).concat(_d.d3.range(whiskerIndices[1] + 1, n)) : _d.d3.range(n);\n\n                // Determine the maximum value based on if outliers are shown\n                if (showOutliers) {\n                    min = d[0];\n                    max = d[n - 1];\n                } else {\n                    min = d[whiskerIndices[0]];\n                    max = d[whiskerIndices[1]];\n                }\n                var pointIndices = _d.d3.range(whiskerIndices[0], whiskerIndices[1] + 1);\n\n                // Compute the new x-scale.\n                var x1 = _d.d3.scaleLinear().domain(domain && domain.call(this, d, i) || [min, max]).range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || _d.d3.scaleLinear().domain([0, Infinity]).range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center').data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect').attr('class', 'center').attr('x1', width / 2).attr('y1', function (d) {\n                    return x0(d[0]);\n                }).attr('x2', width / 2).attr('y2', function (d) {\n                    return x0(d[1]);\n                }).style('opacity', 1e-6).transition().duration(duration).delay(delay).style('opacity', 1).attr('y1', function (d) {\n                    return x1(d[0]);\n                }).attr('y2', function (d) {\n                    return x1(d[1]);\n                });\n\n                center.transition().duration(duration).delay(delay).style('opacity', 1).attr('x1', width / 2).attr('x2', width / 2).attr('y1', function (d) {\n                    return x1(d[0]);\n                }).attr('y2', function (d) {\n                    return x1(d[1]);\n                });\n\n                center.exit().transition().duration(duration).delay(delay).style('opacity', 1e-6).attr('y1', function (d) {\n                    return x1(d[0]);\n                }).attr('y2', function (d) {\n                    return x1(d[1]);\n                }).remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box').data([quartileData]);\n\n                box.enter().append('rect').attr('class', 'box').attr('x', 0).attr('y', function (d) {\n                    return x0(d[2]);\n                }).attr('width', width).attr('height', function (d) {\n                    return x0(d[0]) - x0(d[2]);\n                }).style('fill-opacity', renderDataPoints ? 0.1 : 1).transition().duration(duration).delay(delay).attr('y', function (d) {\n                    return x1(d[2]);\n                }).attr('height', function (d) {\n                    return x1(d[0]) - x1(d[2]);\n                });\n\n                box.transition().duration(duration).delay(delay).attr('width', width).attr('y', function (d) {\n                    return x1(d[2]);\n                }).attr('height', function (d) {\n                    return x1(d[0]) - x1(d[2]);\n                });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median').data([quartileData[1]]);\n\n                medianLine.enter().append('line').attr('class', 'median').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1);\n\n                medianLine.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker').data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n\n                whisker.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n\n                whisker.exit().transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1e-6).remove();\n\n                // Update outliers.\n                if (showOutliers) {\n                    var outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n                    var outlierSize = boldOutlier ? 3 : 5;\n                    var outlierX = boldOutlier ? function () {\n                        return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n                    } : function () {\n                        return width / 2;\n                    };\n\n                    var outlier = g.selectAll('circle.' + outlierClass).data(outlierIndices, Number);\n\n                    outlier.enter().insert('circle', 'text').attr('class', outlierClass).attr('r', outlierSize).attr('cx', outlierX).attr('cy', function (i) {\n                        return x0(d[i]);\n                    }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                        return x1(d[i]);\n                    }).style('opacity', 0.6);\n\n                    if (renderTitle) {\n                        outlier.selectAll('title').remove();\n                        outlier.append('title').text(function (i) {\n                            return d[i];\n                        });\n                    }\n\n                    outlier.transition().duration(duration).delay(delay).attr('cx', outlierX).attr('cy', function (i) {\n                        return x1(d[i]);\n                    }).style('opacity', 0.6);\n\n                    outlier.exit().transition().duration(duration).delay(delay).attr('cy', 0) //function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6).remove();\n                }\n\n                // Update Values\n                if (renderDataPoints) {\n                    var point = g.selectAll('circle.data').data(pointIndices);\n\n                    point.enter().insert('circle', 'text').attr('class', 'data').attr('r', dataRadius).attr('cx', function () {\n                        return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n                    }).attr('cy', function (i) {\n                        return x0(d[i]);\n                    }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                        return x1(d[i]);\n                    }).style('opacity', dataOpacity);\n\n                    if (renderTitle) {\n                        point.selectAll('title').remove();\n                        point.append('title').text(function (i) {\n                            return d[i];\n                        });\n                    }\n\n                    point.transition().duration(duration).delay(delay).attr('cx', function () {\n                        return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n                    }).attr('cy', function (i) {\n                        return x1(d[i]);\n                    }).style('opacity', dataOpacity);\n\n                    point.exit().transition().duration(duration).delay(delay).attr('cy', 0).style('opacity', 1e-6).remove();\n                }\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box').data(quartileData);\n\n                boxTick.enter().append('text').attr('class', 'box').attr('dy', '.3em').attr('dx', function (d, i) {\n                    return i & 1 ? 6 : -6;\n                }).attr('x', function (d, i) {\n                    return i & 1 ? width : 0;\n                }).attr('y', x0).attr('text-anchor', function (d, i) {\n                    return i & 1 ? 'start' : 'end';\n                }).text(format).transition().duration(duration).delay(delay).attr('y', x1);\n\n                boxTick.transition().duration(duration).delay(delay).text(format).attr('x', function (d, i) {\n                    return i & 1 ? width : 0;\n                }).attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker').data(whiskerData || []);\n\n                whiskerTick.enter().append('text').attr('class', 'whisker').attr('dy', '.3em').attr('dx', 6).attr('x', width).attr('y', x0).text(format).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1);\n\n                whiskerTick.transition().duration(duration).delay(delay).text(format).attr('x', width).attr('y', x1).style('opacity', 1);\n\n                whiskerTick.exit().transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1e-6).remove();\n\n                // Remove temporary quartiles element from within data array.\n                delete d.quartiles;\n            });\n            /* jshint +W074 */\n            _d.d3.timerFlush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.showOutliers = function (x) {\n            if (!arguments.length) {\n                return showOutliers;\n            }\n            showOutliers = x;\n            return box;\n        };\n\n        box.boldOutlier = function (x) {\n            if (!arguments.length) {\n                return boldOutlier;\n            }\n            boldOutlier = x;\n            return box;\n        };\n\n        box.renderDataPoints = function (x) {\n            if (!arguments.length) {\n                return renderDataPoints;\n            }\n            renderDataPoints = x;\n            return box;\n        };\n\n        box.renderTitle = function (x) {\n            if (!arguments.length) {\n                return renderTitle;\n            }\n            renderTitle = x;\n            return box;\n        };\n\n        box.dataOpacity = function (x) {\n            if (!arguments.length) {\n                return dataOpacity;\n            }\n            dataOpacity = x;\n            return box;\n        };\n\n        box.dataWidthPortion = function (x) {\n            if (!arguments.length) {\n                return dataWidthPortion;\n            }\n            dataWidthPortion = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : typeof x === 'function' ? x : dc.utils.constant(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers(d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles(d) {\n        return [_d.d3.quantile(d, 0.25), _d.d3.quantile(d, 0.5), _d.d3.quantile(d, 0.75)];\n    }\n})();\n\n/**\r\n * A box plot is a chart that depicts numerical data via their quartile ranges.\r\n *\r\n * Examples:\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-basic.html Boxplot Basic example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-enhanced.html Boxplot Enhanced example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-render-data.html Boxplot Render Data example}\r\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-time.html Boxplot time example}\r\n * @class boxPlot\r\n * @memberof dc\r\n * @mixes dc.coordinateGridMixin\r\n * @example\r\n * // create a box plot under #chart-container1 element using the default global chart group\r\n * var boxPlot1 = dc.boxPlot('#chart-container1');\r\n * // create a box plot under #chart-container2 element using chart group A\r\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.boxPlot}\r\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR(k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do {\n                ++i;\n            } while (d[i] < q1 - iqr);\n            do {\n                --j;\n            } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = _d.d3.box();\n    var _tickFormat = null;\n    var _renderDataPoints = false;\n    var _dataOpacity = 0.3;\n    var _dataWidthPortion = 0.8;\n    var _showOutliers = true;\n    var _boldOutlier = false;\n\n    // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n    // so the min and max data points/whiskers are within the chart\n    var _yRangePadding = 8;\n\n    var _boxWidth = function _boxWidth(innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().bandwidth();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default to ordinal\n    _chart.x(_d.d3.scaleBand());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) {\n                return accessor.call(d, d);\n            };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\r\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\r\n     * See the {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\r\n     * for a visual description of how the padding is applied.\r\n     * @method boxPadding\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3.scaleBand}\r\n     * @param {Number} [padding=0.8]\r\n     * @returns {Number|dc.boxPlot}\r\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\r\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\r\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\r\n     * `padding * barWidth` on each side of the chart.\r\n     * @method outerPadding\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Number} [padding=0.5]\r\n     * @returns {Number|dc.boxPlot}\r\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\r\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\r\n     * parameters the chart width excluding the right and left margins, as well as the number of x\r\n     * units.\r\n     * @example\r\n     * // Using numerical parameter\r\n     * chart.boxWidth(10);\r\n     * // Using function\r\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\r\n     * @method boxWidth\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Number|Function} [boxWidth=0.5]\r\n     * @returns {Number|Function|dc.boxPlot}\r\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = typeof boxWidth === 'function' ? boxWidth : dc.utils.constant(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function boxTransform(d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers).width(_calculatedBoxWidth).height(_chart.effectiveHeight()).value(_chart.valueAccessor()).domain(_chart.y().domain()).duration(_chart.transitionDuration()).tickFormat(_tickFormat).renderDataPoints(_renderDataPoints).dataOpacity(_dataOpacity).dataWidthPortion(_dataWidthPortion).renderTitle(_chart.renderTitle()).showOutliers(_showOutliers).boldOutlier(_boldOutlier);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        var boxesGEnterUpdate = renderBoxes(boxesG);\n        updateBoxes(boxesGEnterUpdate);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea(_chart.filter());\n    };\n\n    function renderBoxes(boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter.attr('class', 'box').attr('transform', boxTransform).call(_box).on('click', function (d) {\n            _chart.filter(_chart.keyAccessor()(d));\n            _chart.redrawGroup();\n        });\n        return boxesGEnter.merge(boxesG);\n    }\n\n    function updateBoxes(boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', boxTransform).call(_box).each(function (d) {\n            var color = _chart.getColor(d, 0);\n            _d.d3.select(this).select('rect.box').attr('fill', color);\n            _d.d3.select(this).selectAll('circle.data').attr('fill', color);\n        });\n    }\n\n    function removeBoxes(boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    function minDataValue() {\n        return _d.d3.min(_chart.data(), function (e) {\n            return _d.d3.min(_chart.valueAccessor()(e));\n        });\n    }\n\n    function maxDataValue() {\n        return _d.d3.max(_chart.data(), function (e) {\n            return _d.d3.max(_chart.valueAccessor()(e));\n        });\n    }\n\n    function yAxisRangeRatio() {\n        return (maxDataValue() - minDataValue()) / _chart.effectiveHeight();\n    }\n\n    _chart.fadeDeselectedArea = function (brushSelection) {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                if (!(_chart.brushOn() || _chart.parentBrushOn())) {\n                    return;\n                }\n                var start = brushSelection[0];\n                var end = brushSelection[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.subtract(minDataValue() - padding, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.add(maxDataValue() + padding, _chart.yAxisPadding());\n    };\n\n    /**\r\n     * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\r\n     * to integer formatting.\r\n     * @example\r\n     * // format ticks to 2 decimal places\r\n     * chart.tickFormat(d3.format('.2f'));\r\n     * @method tickFormat\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Function} [tickFormat]\r\n     * @returns {Number|Function|dc.boxPlot}\r\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the amount of padding to add, in pixel coordinates, to the top and\r\n     * bottom of the chart to accommodate box/whisker labels.\r\n     * @example\r\n     * // allow more space for a bigger whisker font\r\n     * chart.yRangePadding(12);\r\n     * @method yRangePadding\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Function} [yRangePadding = 8]\r\n     * @returns {Number|Function|dc.boxPlot}\r\n     */\n    _chart.yRangePadding = function (yRangePadding) {\n        if (!arguments.length) {\n            return _yRangePadding;\n        }\n        _yRangePadding = yRangePadding;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set whether individual data points will be rendered.\r\n     * @example\r\n     * // Enable rendering of individual data points\r\n     * chart.renderDataPoints(true);\r\n     * @method renderDataPoints\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Boolean} [show=false]\r\n     * @returns {Boolean|dc.boxPlot}\r\n     */\n    _chart.renderDataPoints = function (show) {\n        if (!arguments.length) {\n            return _renderDataPoints;\n        }\n        _renderDataPoints = show;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the opacity when rendering data.\r\n     * @example\r\n     * // If individual data points are rendered increase the opacity.\r\n     * chart.dataOpacity(0.7);\r\n     * @method dataOpacity\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Number} [opacity=0.3]\r\n     * @returns {Number|dc.boxPlot}\r\n     */\n    _chart.dataOpacity = function (opacity) {\n        if (!arguments.length) {\n            return _dataOpacity;\n        }\n        _dataOpacity = opacity;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the portion of the width of the box to show data points.\r\n     * @example\r\n     * // If individual data points are rendered increase the data box.\r\n     * chart.dataWidthPortion(0.9);\r\n     * @method dataWidthPortion\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Number} [percentage=0.8]\r\n     * @returns {Number|dc.boxPlot}\r\n     */\n    _chart.dataWidthPortion = function (percentage) {\n        if (!arguments.length) {\n            return _dataWidthPortion;\n        }\n        _dataWidthPortion = percentage;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set whether outliers will be rendered.\r\n     * @example\r\n     * // Disable rendering of outliers\r\n     * chart.showOutliers(false);\r\n     * @method showOutliers\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Boolean} [show=true]\r\n     * @returns {Boolean|dc.boxPlot}\r\n     */\n    _chart.showOutliers = function (show) {\n        if (!arguments.length) {\n            return _showOutliers;\n        }\n        _showOutliers = show;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set whether outliers will be drawn bold.\r\n     * @example\r\n     * // If outliers are rendered display as bold\r\n     * chart.boldOutlier(true);\r\n     * @method boldOutlier\r\n     * @memberof dc.boxPlot\r\n     * @instance\r\n     * @param {Boolean} [show=false]\r\n     * @returns {Boolean|dc.boxPlot}\r\n     */\n    _chart.boldOutlier = function (show) {\n        if (!arguments.length) {\n            return _boldOutlier;\n        }\n        _boldOutlier = show;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\r\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\r\n * @class selectMenu\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a select menu under #select-container using the default global chart group\r\n * var select = dc.selectMenu('#select-container')\r\n *                .dimension(states)\r\n *                .group(stateGroup);\r\n * // the option text can be set via the title() function\r\n * // by default the option text is '`key`: `value`'\r\n * select.title(function (d){\r\n *     return 'STATE: ' + d.key;\r\n * })\r\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\r\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\r\n * Interaction with the widget will only trigger events and redraws within its group.\r\n * @returns {selectMenu}\r\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function _order(a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ? 1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ? -1 : 0;\n    };\n\n    var _filterDisplayed = function _filterDisplayed(d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select').classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n    // Fixing IE 11 crash when redrawing the chart\n    // see here for list of IE user Agents :\n    // http://www.useragentstring.com/pages/useragentstring.php?name=Internet+Explorer\n    var ua = window.navigator.userAgent;\n    // test for IE 11 but not a lower version (which contains MSIE in UA)\n    if (ua.indexOf('Trident/') > 0 && ua.indexOf('MSIE') === -1) {\n        _chart.redraw = _chart.render;\n    }\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option').property('selected', function (d) {\n                return typeof d !== 'undefined' && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n            });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions() {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS).data(_chart.data(), function (d) {\n            return _chart.keyAccessor()(d);\n        });\n\n        options.exit().remove();\n\n        options.enter().append('option').classed(OPTION_CSS_CLASS, true).attr('value', function (d) {\n            return _chart.keyAccessor()(d);\n        }).merge(options).text(_chart.title());\n\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n    }\n\n    function onChange(d, i) {\n        var values;\n        var target = _d.d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else {\n            // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(_d.d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes() {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\r\n     * Get or set the function that controls the ordering of option tags in the\r\n     * select menu. By default options are ordered by the group key in ascending\r\n     * order.\r\n     * @name order\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {Function} [order]\r\n     * @example\r\n     * // order by the group's value\r\n     * chart.order(function (a,b) {\r\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\r\n     * });\r\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the text displayed in the options used to prompt selection.\r\n     * @name promptText\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {String} [promptText='Select all']\r\n     * @example\r\n     * chart.promptText('All states');\r\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the function that filters option tags prior to display. By default options\r\n     * with a value of < 1 are not displayed.\r\n     * @name filterDisplayed\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {function} [filterDisplayed]\r\n     * @example\r\n     * // display all options override the `filterDisplayed` function:\r\n     * chart.filterDisplayed(function () {\r\n     *     return true;\r\n     * });\r\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\r\n     * Controls the type of select menu. Setting it to true converts the underlying\r\n     * HTML tag into a multiple select.\r\n     * @name multiple\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {boolean} [multiple=false]\r\n     * @example\r\n     * chart.multiple(true);\r\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\r\n     * Controls the default value to be used for\r\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\r\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\r\n     * just the prompt is selected.\r\n     * @name promptValue\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {?*} [promptValue=null]\r\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\r\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\r\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\r\n     * the `select` element. If `null` (the default), uses the browser's default height.\r\n     * @name numberItems\r\n     * @memberof dc.selectMenu\r\n     * @instance\r\n     * @param {?number} [numberVisible=null]\r\n     * @example\r\n     * chart.numberVisible(10);\r\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * Text Filter Widget\r\n *\r\n * The text filter widget is a simple widget designed to display an input field allowing to filter\r\n * data that matches the text typed.\r\n * As opposed to the other charts, this doesn't display any result and doesn't update its display,\r\n * it's just to input an filter other charts.\r\n *\r\n * @class textFilterWidget\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @example\r\n *\r\n * var data = [{\"firstName\":\"John\",\"lastName\":\"Coltrane\"}{\"firstName\":\"Miles\",lastName:\"Davis\"}]\r\n * var ndx = crossfilter(data);\r\n * var dimension = ndx.dimension(function(d) {\r\n *     return d.lastName.toLowerCase() + ' ' + d.firstName.toLowerCase();\r\n * });\r\n *\r\n * dc.textFilterWidget('#search')\r\n *     .dimension(dimension);\r\n *     // you don't need the group() function\r\n *\r\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\r\n * specifying a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.textFilterWidget}\r\n **/\n\ndc.textFilterWidget = function (parent, chartGroup) {\n    var INPUT_CSS_CLASS = 'dc-text-filter-input';\n\n    var _chart = dc.baseMixin({});\n\n    var _normalize = function _normalize(s) {\n        return s.toLowerCase();\n    };\n\n    var _filterFunctionFactory = function _filterFunctionFactory(query) {\n        query = _normalize(query);\n        return function (d) {\n            return _normalize(d).indexOf(query) !== -1;\n        };\n    };\n\n    var _placeHolder = 'search';\n\n    _chart.group(function () {\n        throw 'the group function on textFilterWidget should never be called, please report the issue';\n    });\n\n    _chart._doRender = function () {\n        _chart.select('input').remove();\n\n        var _input = _chart.root().append('input').classed(INPUT_CSS_CLASS, true);\n\n        _input.on('input', function () {\n            _chart.dimension().filterFunction(_filterFunctionFactory(this.value));\n            dc.events.trigger(function () {\n                dc.redrawAll();\n            }, dc.constants.EVENT_DELAY);\n        });\n\n        _chart._doRedraw();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart.root().selectAll('input').attr('placeholder', _placeHolder);\n\n        return _chart;\n    };\n\n    /**\r\n     * This function will be called on values before calling the filter function.\r\n     * @name normalize\r\n     * @memberof dc.textFilterWidget\r\n     * @instance\r\n     * @example\r\n     * // This is the default\r\n     * chart.normalize(function (s) {\r\n     *   return s.toLowerCase();\r\n     * });\r\n     * @param {function} [normalize]\r\n     * @returns {dc.textFilterWidget|function}\r\n     **/\n    _chart.normalize = function (normalize) {\n        if (!arguments.length) {\n            return _normalize;\n        }\n        _normalize = normalize;\n        return _chart;\n    };\n\n    /**\r\n     * Placeholder text in the search box.\r\n     * @name placeHolder\r\n     * @memberof dc.textFilterWidget\r\n     * @instance\r\n     * @example\r\n     * // This is the default\r\n     * chart.placeHolder('type to filter');\r\n     * @param {function} [placeHolder='search']\r\n     * @returns {dc.textFilterWidget|string}\r\n     **/\n    _chart.placeHolder = function (placeHolder) {\n        if (!arguments.length) {\n            return _placeHolder;\n        }\n        _placeHolder = placeHolder;\n        return _chart;\n    };\n\n    /**\r\n     * This function will be called with the search text, it needs to return a function that will be used to\r\n     * filter the data. The default function checks presence of the search text.\r\n     * @name filterFunctionFactory\r\n     * @memberof dc.textFilterWidget\r\n     * @instance\r\n     * @example\r\n     * // This is the default\r\n     * function (query) {\r\n     *     query = _normalize(query);\r\n     *     return function (d) {\r\n     *         return _normalize(d).indexOf(query) !== -1;\r\n     *     };\r\n     * };\r\n     * @param {function} [filterFunctionFactory]\r\n     * @returns {dc.textFilterWidget|function}\r\n     **/\n    _chart.filterFunctionFactory = function (filterFunctionFactory) {\n        if (!arguments.length) {\n            return _filterFunctionFactory;\n        }\n        _filterFunctionFactory = filterFunctionFactory;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n/**\r\n * The cboxMenu is a simple widget designed to filter a dimension by\r\n * selecting option(s) from a set of HTML `<input />` elements. The menu can be\r\n * made into a set of radio buttons (single select) or checkboxes (multiple).\r\n * @class cboxMenu\r\n * @memberof dc\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create a cboxMenu under #cbox-container using the default global chart group\r\n * var cbox = dc.cboxMenu('#cbox-container')\r\n *                .dimension(states)\r\n *                .group(stateGroup);\r\n * // the option text can be set via the title() function\r\n * // by default the option text is '`key`: `value`'\r\n * cbox.title(function (d){\r\n *     return 'STATE: ' + d.key;\r\n * })\r\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\r\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\r\n * Interaction with the widget will only trigger events and redraws within its group.\r\n * @returns {cboxMenu}\r\n **/\ndc.cboxMenu = function (parent, chartGroup) {\n    var GROUP_CSS_CLASS = 'dc-cbox-group';\n    var ITEM_CSS_CLASS = 'dc-cbox-item';\n\n    var _chart = dc.baseMixin({});\n\n    var _cbox;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _inputType = 'radio';\n    var _promptValue = null;\n    // generate a random number to use as an ID\n    var _randVal = Math.floor(Math.random() * 100000) + 1;\n    var _order = function _order(a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ? 1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ? -1 : 0;\n    };\n\n    var _filterDisplayed = function _filterDisplayed(d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        return _chart._doRedraw();\n    };\n    /*\r\n    // IS THIS NEEDED?\r\n    // Fixing IE 11 crash when redrawing the chart\r\n    // see here for list of IE user Agents :\r\n    // http://www.useragentstring.com/pages/useragentstring.php?name=Internet+Explorer\r\n    var ua = window.navigator.userAgent;\r\n    // test for IE 11 but not a lower version (which contains MSIE in UA)\r\n    if (ua.indexOf('Trident/') > 0 && ua.indexOf('MSIE') === -1) {\r\n        _chart.redraw = _chart.render;\r\n    }\r\n    */\n    _chart._doRedraw = function () {\n        _chart.select('ul').remove();\n        _cbox = _chart.root().append('ul').classed(GROUP_CSS_CLASS, true);\n        renderOptions();\n\n        if (_chart.hasFilter() && _multiple) {\n            _cbox.selectAll('input').property('checked', function (d) {\n                // adding `false` avoids failing test cases in phantomjs\n                return d && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0 || false;\n            });\n        } else if (_chart.hasFilter()) {\n            _cbox.selectAll('input').property('checked', function (d) {\n                if (!d) {\n                    return false;\n                }\n                return _chart.keyAccessor()(d) === _chart.filter();\n            });\n        }\n        return _chart;\n    };\n\n    function renderOptions() {\n        var options = _cbox.selectAll('li.' + ITEM_CSS_CLASS).data(_chart.data(), function (d) {\n            return _chart.keyAccessor()(d);\n        });\n\n        options.exit().remove();\n\n        options = options.enter().append('li').classed(ITEM_CSS_CLASS, true).merge(options);\n\n        options.append('input').attr('type', _inputType).attr('value', function (d) {\n            return _chart.keyAccessor()(d);\n        }).attr('name', 'domain_' + _randVal).attr('id', function (d, i) {\n            return 'input_' + _randVal + '_' + i;\n        });\n        options.append('label').attr('for', function (d, i) {\n            return 'input_' + _randVal + '_' + i;\n        }).text(_chart.title());\n\n        // 'all' option\n        if (_multiple) {\n            _cbox.append('li').append('input').attr('type', 'reset').text(_promptText).on('click', onChange);\n        } else {\n            var li = _cbox.append('li');\n            li.append('input').attr('type', _inputType).attr('value', _promptValue).attr('name', 'domain_' + _randVal).attr('id', function (d, i) {\n                return 'input_' + _randVal + '_all';\n            }).property('checked', true);\n            li.append('label').attr('for', function (d, i) {\n                return 'input_' + _randVal + '_all';\n            }).text(_promptText);\n        }\n\n        _cbox.selectAll('li.' + ITEM_CSS_CLASS).sort(_order);\n\n        _cbox.on('change', onChange);\n        return options;\n    }\n\n    function onChange(d, i) {\n        var values,\n            target = _d.d3.select(_d.d3.event.target),\n            options;\n\n        if (!target.datum()) {\n            values = _promptValue || null;\n        } else {\n            options = _d.d3.select(this).selectAll('input').filter(function (o) {\n                if (o) {\n                    return this.checked;\n                }\n            });\n            values = options.nodes().map(function (option) {\n                return option.value;\n            });\n            // check if only prompt option is selected\n            if (!_multiple && values.length === 1) {\n                values = values[0];\n            }\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\r\n     * Get or set the function that controls the ordering of option tags in the\r\n     * cbox menu. By default options are ordered by the group key in ascending\r\n     * order.\r\n     * @name order\r\n     * @memberof dc.cboxMenu\r\n     * @instance\r\n     * @param {Function} [order]\r\n     * @example\r\n     * // order by the group's value\r\n     * chart.order(function (a,b) {\r\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\r\n     * });\r\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the text displayed in the options used to prompt selection.\r\n     * @name promptText\r\n     * @memberof dc.cboxMenu\r\n     * @instance\r\n     * @param {String} [promptText='Select all']\r\n     * @example\r\n     * chart.promptText('All states');\r\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\r\n     * Get or set the function that filters options prior to display. By default options\r\n     * with a value of < 1 are not displayed.\r\n     * @name filterDisplayed\r\n     * @memberof dc.cboxMenu\r\n     * @instance\r\n     * @param {function} [filterDisplayed]\r\n     * @example\r\n     * // display all options override the `filterDisplayed` function:\r\n     * chart.filterDisplayed(function () {\r\n     *     return true;\r\n     * });\r\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\r\n     * Controls the type of input element. Setting it to true converts\r\n     * the HTML `input` tags from radio buttons to checkboxes.\r\n     * @name multiple\r\n     * @memberof dc.cboxMenu\r\n     * @instance\r\n     * @param {boolean} [multiple=false]\r\n     * @example\r\n     * chart.multiple(true);\r\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n        if (_multiple) {\n            _inputType = 'checkbox';\n        } else {\n            _inputType = 'radio';\n        }\n        return _chart;\n    };\n\n    /**\r\n     * Controls the default value to be used for\r\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\r\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\r\n     * just the prompt is selected.\r\n     * @name promptValue\r\n     * @memberof dc.cboxMenu\r\n     * @instance\r\n     * @param {?*} [promptValue=null]\r\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = _d.d3;\ndc.crossfilter = _crossfilter.crossfilter;\n\nexports.dc = dc;\n\n//# sourceMappingURL=dc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/dc.js\n");

/***/ }),

/***/ "./src/vendor/slick.dataview.js":
/*!**************************************!*\
  !*** ./src/vendor/slick.dataview.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Aggregators = exports.DataView = undefined;\n\nvar _slickGrid = __webpack_require__(/*! ./slick.grid.js */ \"./src/vendor/slick.grid.js\");\n\n/***\r\n * A sample Model implementation.\r\n * Provides a filtered view of the underlying data.\r\n *\r\n * Relies on the data item having an \"id\" property uniquely identifying it.\r\n */\nfunction DataView(options) {\n  var self = this;\n\n  var defaults = {\n    groupItemMetadataProvider: null,\n    inlineFilters: false\n  };\n\n  // private\n  var idProperty = \"id\"; // property holding a unique row id\n  var items = []; // data by index\n  var rows = []; // data by row\n  var idxById = {}; // indexes by id\n  var rowsById = null; // rows by id; lazy-calculated\n  var filter = null; // filter function\n  var updated = null; // updated item ids\n  var suspend = false; // suspends the recalculation\n  var sortAsc = true;\n  var fastSortField;\n  var sortComparer;\n  var refreshHints = {};\n  var prevRefreshHints = {};\n  var filterArgs;\n  var filteredItems = [];\n  var compiledFilter;\n  var compiledFilterWithCaching;\n  var filterCache = [];\n\n  // grouping\n  var groupingInfoDefaults = {\n    getter: null,\n    formatter: null,\n    comparer: function comparer(a, b) {\n      return a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\n    },\n    predefinedValues: [],\n    aggregators: [],\n    aggregateEmpty: false,\n    aggregateCollapsed: false,\n    aggregateChildGroups: false,\n    collapsed: false,\n    displayTotalsRow: true,\n    lazyTotalsCalculation: false\n  };\n  var groupingInfos = [];\n  var groups = [];\n  var toggledGroupsByLevel = [];\n  var groupingDelimiter = ':|:';\n\n  var pagesize = 0;\n  var pagenum = 0;\n  var totalRows = 0;\n\n  // events\n  var onRowCountChanged = new _slickGrid.Slick.Event();\n  var onRowsChanged = new _slickGrid.Slick.Event();\n  var onPagingInfoChanged = new _slickGrid.Slick.Event();\n\n  options = $.extend(true, {}, defaults, options);\n\n  function beginUpdate() {\n    suspend = true;\n  }\n\n  function endUpdate() {\n    suspend = false;\n    refresh();\n  }\n\n  function setRefreshHints(hints) {\n    refreshHints = hints;\n  }\n\n  function setFilterArgs(args) {\n    filterArgs = args;\n  }\n\n  function updateIdxById(startingIndex) {\n    startingIndex = startingIndex || 0;\n    var id;\n    for (var i = startingIndex, l = items.length; i < l; i++) {\n      id = items[i][idProperty];\n      if (id === undefined) {\n        throw new Error(\"Each data element must implement a unique 'id' property\");\n      }\n      idxById[id] = i;\n    }\n  }\n\n  function ensureIdUniqueness() {\n    var id;\n    for (var i = 0, l = items.length; i < l; i++) {\n      id = items[i][idProperty];\n      if (id === undefined || idxById[id] !== i) {\n        throw new Error(\"Each data element must implement a unique 'id' property\");\n      }\n    }\n  }\n\n  function getItems() {\n    return items;\n  }\n\n  function setItems(data, objectIdProperty) {\n    if (objectIdProperty !== undefined) {\n      idProperty = objectIdProperty;\n    }\n    items = filteredItems = data;\n    idxById = {};\n    updateIdxById();\n    ensureIdUniqueness();\n    refresh();\n  }\n\n  function setPagingOptions(args) {\n    if (args.pageSize != undefined) {\n      pagesize = args.pageSize;\n      pagenum = pagesize ? Math.min(pagenum, Math.max(0, Math.ceil(totalRows / pagesize) - 1)) : 0;\n    }\n\n    if (args.pageNum != undefined) {\n      pagenum = Math.min(args.pageNum, Math.max(0, Math.ceil(totalRows / pagesize) - 1));\n    }\n\n    onPagingInfoChanged.notify(getPagingInfo(), null, self);\n\n    refresh();\n  }\n\n  function getPagingInfo() {\n    var totalPages = pagesize ? Math.max(1, Math.ceil(totalRows / pagesize)) : 1;\n    return { pageSize: pagesize, pageNum: pagenum, totalRows: totalRows, totalPages: totalPages, dataView: self };\n  }\n\n  function sort(comparer, ascending) {\n    sortAsc = ascending;\n    sortComparer = comparer;\n    fastSortField = null;\n    if (ascending === false) {\n      items.reverse();\n    }\n    items.sort(comparer);\n    if (ascending === false) {\n      items.reverse();\n    }\n    idxById = {};\n    updateIdxById();\n    refresh();\n  }\n\n  /***\r\n   * Provides a workaround for the extremely slow sorting in IE.\r\n   * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\r\n   * to return the value of that field and then doing a native Array.sort().\r\n   */\n  function fastSort(field, ascending) {\n    sortAsc = ascending;\n    fastSortField = field;\n    sortComparer = null;\n    var oldToString = Object.prototype.toString;\n    Object.prototype.toString = typeof field == \"function\" ? field : function () {\n      return this[field];\n    };\n    // an extra reversal for descending sort keeps the sort stable\n    // (assuming a stable native sort implementation, which isn't true in some cases)\n    if (ascending === false) {\n      items.reverse();\n    }\n    items.sort();\n    Object.prototype.toString = oldToString;\n    if (ascending === false) {\n      items.reverse();\n    }\n    idxById = {};\n    updateIdxById();\n    refresh();\n  }\n\n  function reSort() {\n    if (sortComparer) {\n      sort(sortComparer, sortAsc);\n    } else if (fastSortField) {\n      fastSort(fastSortField, sortAsc);\n    }\n  }\n\n  function getFilteredItems() {\n    return filteredItems;\n  }\n\n  function getFilter() {\n    return filter;\n  }\n\n  function setFilter(filterFn) {\n    filter = filterFn;\n    if (options.inlineFilters) {\n      compiledFilter = compileFilter();\n      compiledFilterWithCaching = compileFilterWithCaching();\n    }\n    refresh();\n  }\n\n  function getGrouping() {\n    return groupingInfos;\n  }\n\n  function setGrouping(groupingInfo) {\n    if (!options.groupItemMetadataProvider) {\n      options.groupItemMetadataProvider = new _slickGrid.Slick.Data.GroupItemMetadataProvider();\n    }\n\n    groups = [];\n    toggledGroupsByLevel = [];\n    groupingInfo = groupingInfo || [];\n    groupingInfos = groupingInfo instanceof Array ? groupingInfo : [groupingInfo];\n\n    for (var i = 0; i < groupingInfos.length; i++) {\n      var gi = groupingInfos[i] = $.extend(true, {}, groupingInfoDefaults, groupingInfos[i]);\n      gi.getterIsAFn = typeof gi.getter === \"function\";\n\n      // pre-compile accumulator loops\n      gi.compiledAccumulators = [];\n      var idx = gi.aggregators.length;\n      while (idx--) {\n        gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);\n      }\n\n      toggledGroupsByLevel[i] = {};\n    }\n\n    refresh();\n  }\n\n  /**\r\n   * @deprecated Please use {@link setGrouping}.\r\n   */\n  function groupBy(valueGetter, valueFormatter, sortComparer) {\n    if (valueGetter == null) {\n      setGrouping([]);\n      return;\n    }\n\n    setGrouping({\n      getter: valueGetter,\n      formatter: valueFormatter,\n      comparer: sortComparer\n    });\n  }\n\n  /**\r\n   * @deprecated Please use {@link setGrouping}.\r\n   */\n  function setAggregators(groupAggregators, includeCollapsed) {\n    if (!groupingInfos.length) {\n      throw new Error(\"At least one grouping must be specified before calling setAggregators().\");\n    }\n\n    groupingInfos[0].aggregators = groupAggregators;\n    groupingInfos[0].aggregateCollapsed = includeCollapsed;\n\n    setGrouping(groupingInfos);\n  }\n\n  function getItemByIdx(i) {\n    return items[i];\n  }\n\n  function getIdxById(id) {\n    return idxById[id];\n  }\n\n  function ensureRowsByIdCache() {\n    if (!rowsById) {\n      rowsById = {};\n      for (var i = 0, l = rows.length; i < l; i++) {\n        rowsById[rows[i][idProperty]] = i;\n      }\n    }\n  }\n\n  function getRowByItem(item) {\n    ensureRowsByIdCache();\n    return rowsById[item[idProperty]];\n  }\n\n  function getRowById(id) {\n    ensureRowsByIdCache();\n    return rowsById[id];\n  }\n\n  function getItemById(id) {\n    return items[idxById[id]];\n  }\n\n  function mapItemsToRows(itemArray) {\n    var rows = [];\n    ensureRowsByIdCache();\n    for (var i = 0, l = itemArray.length; i < l; i++) {\n      var row = rowsById[itemArray[i][idProperty]];\n      if (row != null) {\n        rows[rows.length] = row;\n      }\n    }\n    return rows;\n  }\n\n  function mapIdsToRows(idArray) {\n    var rows = [];\n    ensureRowsByIdCache();\n    for (var i = 0, l = idArray.length; i < l; i++) {\n      var row = rowsById[idArray[i]];\n      if (row != null) {\n        rows[rows.length] = row;\n      }\n    }\n    return rows;\n  }\n\n  function mapRowsToIds(rowArray) {\n    var ids = [];\n    for (var i = 0, l = rowArray.length; i < l; i++) {\n      if (rowArray[i] < rows.length) {\n        ids[ids.length] = rows[rowArray[i]][idProperty];\n      }\n    }\n    return ids;\n  }\n\n  function updateItem(id, item) {\n    if (idxById[id] === undefined || id !== item[idProperty]) {\n      throw new Error(\"Invalid or non-matching id\");\n    }\n    items[idxById[id]] = item;\n    if (!updated) {\n      updated = {};\n    }\n    updated[id] = true;\n    refresh();\n  }\n\n  function insertItem(insertBefore, item) {\n    items.splice(insertBefore, 0, item);\n    updateIdxById(insertBefore);\n    refresh();\n  }\n\n  function addItem(item) {\n    items.push(item);\n    updateIdxById(items.length - 1);\n    refresh();\n  }\n\n  function deleteItem(id) {\n    var idx = idxById[id];\n    if (idx === undefined) {\n      throw new Error(\"Invalid id\");\n    }\n    delete idxById[id];\n    items.splice(idx, 1);\n    updateIdxById(idx);\n    refresh();\n  }\n\n  function sortedAddItem(item) {\n    if (!sortComparer) {\n      throw new Error(\"sortedAddItem() requires a sort comparer, use sort()\");\n    }\n    insertItem(sortedIndex(item), item);\n  }\n\n  function sortedUpdateItem(id, item) {\n    if (idxById[id] === undefined || id !== item[idProperty]) {\n      throw new Error(\"Invalid or non-matching id \" + idxById[id]);\n    }\n    if (!sortComparer) {\n      throw new Error(\"sortedUpdateItem() requires a sort comparer, use sort()\");\n    }\n    var oldItem = getItemById(id);\n    if (sortComparer(oldItem, item) !== 0) {\n      // item affects sorting -> must use sorted add\n      deleteItem(id);\n      sortedAddItem(item);\n    } else {\n      // update does not affect sorting -> regular update works fine\n      updateItem(id, item);\n    }\n  }\n\n  function sortedIndex(searchItem) {\n    var low = 0,\n        high = items.length;\n\n    while (low < high) {\n      var mid = low + high >>> 1;\n      if (sortComparer(items[mid], searchItem) === -1) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return low;\n  }\n\n  function getLength() {\n    return rows.length;\n  }\n\n  function getItem(i) {\n    var item = rows[i];\n\n    // if this is a group row, make sure totals are calculated and update the title\n    if (item && item.__group && item.totals && !item.totals.initialized) {\n      var gi = groupingInfos[item.level];\n      if (!gi.displayTotalsRow) {\n        calculateTotals(item.totals);\n        item.title = gi.formatter ? gi.formatter(item) : item.value;\n      }\n    }\n    // if this is a totals row, make sure it's calculated\n    else if (item && item.__groupTotals && !item.initialized) {\n        calculateTotals(item);\n      }\n\n    return item;\n  }\n\n  function getItemMetadata(i) {\n    var item = rows[i];\n    if (item === undefined) {\n      return null;\n    }\n\n    // overrides for grouping rows\n    if (item.__group) {\n      return options.groupItemMetadataProvider.getGroupRowMetadata(item);\n    }\n\n    // overrides for totals rows\n    if (item.__groupTotals) {\n      return options.groupItemMetadataProvider.getTotalsRowMetadata(item);\n    }\n\n    return null;\n  }\n\n  function expandCollapseAllGroups(level, collapse) {\n    if (level == null) {\n      for (var i = 0; i < groupingInfos.length; i++) {\n        toggledGroupsByLevel[i] = {};\n        groupingInfos[i].collapsed = collapse;\n      }\n    } else {\n      toggledGroupsByLevel[level] = {};\n      groupingInfos[level].collapsed = collapse;\n    }\n    refresh();\n  }\n\n  /**\r\n   * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.\r\n   */\n  function collapseAllGroups(level) {\n    expandCollapseAllGroups(level, true);\n  }\n\n  /**\r\n   * @param level {Number} Optional level to expand.  If not specified, applies to all levels.\r\n   */\n  function expandAllGroups(level) {\n    expandCollapseAllGroups(level, false);\n  }\n\n  function expandCollapseGroup(level, groupingKey, collapse) {\n    toggledGroupsByLevel[level][groupingKey] = groupingInfos[level].collapsed ^ collapse;\n    refresh();\n  }\n\n  /**\r\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n   *     variable argument list of grouping values denoting a unique path to the row.  For\r\n   *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\r\n   *     the 'high' group.\r\n   */\n  function collapseGroup(varArgs) {\n    var args = Array.prototype.slice.call(arguments);\n    var arg0 = args[0];\n    if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {\n      expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, true);\n    } else {\n      expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), true);\n    }\n  }\n\n  /**\r\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n   *     variable argument list of grouping values denoting a unique path to the row.  For\r\n   *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\r\n   *     the 'high' group.\r\n   */\n  function expandGroup(varArgs) {\n    var args = Array.prototype.slice.call(arguments);\n    var arg0 = args[0];\n    if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {\n      expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, false);\n    } else {\n      expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), false);\n    }\n  }\n\n  function getGroups() {\n    return groups;\n  }\n\n  function extractGroups(rows, parentGroup) {\n    var group;\n    var val;\n    var groups = [];\n    var groupsByVal = {};\n    var r;\n    var level = parentGroup ? parentGroup.level + 1 : 0;\n    var gi = groupingInfos[level];\n\n    for (var i = 0, l = gi.predefinedValues.length; i < l; i++) {\n      val = gi.predefinedValues[i];\n      group = groupsByVal[val];\n      if (!group) {\n        group = new _slickGrid.Slick.Group();\n        group.value = val;\n        group.level = level;\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\n        groups[groups.length] = group;\n        groupsByVal[val] = group;\n      }\n    }\n\n    for (var i = 0, l = rows.length; i < l; i++) {\n      r = rows[i];\n      val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];\n      group = groupsByVal[val];\n      if (!group) {\n        group = new _slickGrid.Slick.Group();\n        group.value = val;\n        group.level = level;\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\n        groups[groups.length] = group;\n        groupsByVal[val] = group;\n      }\n\n      group.rows[group.count++] = r;\n    }\n\n    if (level < groupingInfos.length - 1) {\n      for (var i = 0; i < groups.length; i++) {\n        group = groups[i];\n        group.groups = extractGroups(group.rows, group);\n      }\n    }\n\n    groups.sort(groupingInfos[level].comparer);\n\n    return groups;\n  }\n\n  function calculateTotals(totals) {\n    var group = totals.group;\n    var gi = groupingInfos[group.level];\n    var isLeafLevel = group.level == groupingInfos.length;\n    var agg,\n        idx = gi.aggregators.length;\n\n    if (!isLeafLevel && gi.aggregateChildGroups) {\n      // make sure all the subgroups are calculated\n      var i = group.groups.length;\n      while (i--) {\n        if (!group.groups[i].totals.initialized) {\n          calculateTotals(group.groups[i].totals);\n        }\n      }\n    }\n\n    while (idx--) {\n      agg = gi.aggregators[idx];\n      agg.init();\n      if (!isLeafLevel && gi.aggregateChildGroups) {\n        gi.compiledAccumulators[idx].call(agg, group.groups);\n      } else {\n        gi.compiledAccumulators[idx].call(agg, group.rows);\n      }\n      agg.storeResult(totals);\n    }\n    totals.initialized = true;\n  }\n\n  function addGroupTotals(group) {\n    var gi = groupingInfos[group.level];\n    var totals = new _slickGrid.Slick.GroupTotals();\n    totals.group = group;\n    group.totals = totals;\n    if (!gi.lazyTotalsCalculation) {\n      calculateTotals(totals);\n    }\n  }\n\n  function addTotals(groups, level) {\n    level = level || 0;\n    var gi = groupingInfos[level];\n    var groupCollapsed = gi.collapsed;\n    var toggledGroups = toggledGroupsByLevel[level];\n    var idx = groups.length,\n        g;\n    while (idx--) {\n      g = groups[idx];\n\n      if (g.collapsed && !gi.aggregateCollapsed) {\n        continue;\n      }\n\n      // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\n      if (g.groups) {\n        addTotals(g.groups, level + 1);\n      }\n\n      if (gi.aggregators.length && (gi.aggregateEmpty || g.rows.length || g.groups && g.groups.length)) {\n        addGroupTotals(g);\n      }\n\n      g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];\n      g.title = gi.formatter ? gi.formatter(g) : g.value;\n    }\n  }\n\n  function flattenGroupedRows(groups, level) {\n    level = level || 0;\n    var gi = groupingInfos[level];\n    var groupedRows = [],\n        rows,\n        gl = 0,\n        g;\n    for (var i = 0, l = groups.length; i < l; i++) {\n      g = groups[i];\n      groupedRows[gl++] = g;\n\n      if (!g.collapsed) {\n        rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;\n        for (var j = 0, jj = rows.length; j < jj; j++) {\n          groupedRows[gl++] = rows[j];\n        }\n      }\n\n      if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\n        groupedRows[gl++] = g.totals;\n      }\n    }\n    return groupedRows;\n  }\n\n  function getFunctionInfo(fn) {\n    var fnRegex = /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\n    var matches = fn.toString().match(fnRegex);\n    return {\n      params: matches[1].split(\",\"),\n      body: matches[2]\n    };\n  }\n\n  function compileAccumulatorLoop(aggregator) {\n    var accumulatorInfo = getFunctionInfo(aggregator.accumulate);\n    var fn = new Function(\"_items\", \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" + accumulatorInfo.params[0] + \" = _items[_i]; \" + accumulatorInfo.body + \"}\");\n    fn.displayName = fn.name = \"compiledAccumulatorLoop\";\n    return fn;\n  }\n\n  function compileFilter() {\n    var filterInfo = getFunctionInfo(filter);\n\n    var filterPath1 = \"{ continue _coreloop; }$1\";\n    var filterPath2 = \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\";\n    // make some allowances for minification - there's only so far we can go with RegEx\n    var filterBody = filterInfo.body.replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1).replace(/return!1([;}]|\\}|$)/gi, filterPath1).replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2).replace(/return!0([;}]|\\}|$)/gi, filterPath2).replace(/return ([^;}]+?)\\s*([;}]|$)/gi, \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n    // This preserves the function template code after JS compression,\n    // so that replace() commands still work as expected.\n    var tpl = [\n    //\"function(_items, _args) { \",\n    \"var _retval = [], _idx = 0; \", \"var $item$, $args$ = _args; \", \"_coreloop: \", \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \", \"$item$ = _items[_i]; \", \"$filter$; \", \"} \", \"return _retval; \"\n    //\"}\"\n    ].join(\"\");\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n    var fn = new Function(\"_items,_args\", tpl);\n    fn.displayName = fn.name = \"compiledFilter\";\n    return fn;\n  }\n\n  function compileFilterWithCaching() {\n    var filterInfo = getFunctionInfo(filter);\n\n    var filterPath1 = \"{ continue _coreloop; }$1\";\n    var filterPath2 = \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\";\n    // make some allowances for minification - there's only so far we can go with RegEx\n    var filterBody = filterInfo.body.replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1).replace(/return!1([;}]|\\}|$)/gi, filterPath1).replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2).replace(/return!0([;}]|\\}|$)/gi, filterPath2).replace(/return ([^;}]+?)\\s*([;}]|$)/gi, \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n    // This preserves the function template code after JS compression,\n    // so that replace() commands still work as expected.\n    var tpl = [\n    //\"function(_items, _args, _cache) { \",\n    \"var _retval = [], _idx = 0; \", \"var $item$, $args$ = _args; \", \"_coreloop: \", \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \", \"$item$ = _items[_i]; \", \"if (_cache[_i]) { \", \"_retval[_idx++] = $item$; \", \"continue _coreloop; \", \"} \", \"$filter$; \", \"} \", \"return _retval; \"\n    //\"}\"\n    ].join(\"\");\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n    var fn = new Function(\"_items,_args,_cache\", tpl);\n    fn.displayName = fn.name = \"compiledFilterWithCaching\";\n    return fn;\n  }\n\n  function uncompiledFilter(items, args) {\n    var retval = [],\n        idx = 0;\n\n    for (var i = 0, ii = items.length; i < ii; i++) {\n      if (filter(items[i], args)) {\n        retval[idx++] = items[i];\n      }\n    }\n\n    return retval;\n  }\n\n  function uncompiledFilterWithCaching(items, args, cache) {\n    var retval = [],\n        idx = 0,\n        item;\n\n    for (var i = 0, ii = items.length; i < ii; i++) {\n      item = items[i];\n      if (cache[i]) {\n        retval[idx++] = item;\n      } else if (filter(item, args)) {\n        retval[idx++] = item;\n        cache[i] = true;\n      }\n    }\n\n    return retval;\n  }\n\n  function getFilteredAndPagedItems(items) {\n    if (filter) {\n      var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;\n      var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;\n\n      if (refreshHints.isFilterNarrowing) {\n        filteredItems = batchFilter(filteredItems, filterArgs);\n      } else if (refreshHints.isFilterExpanding) {\n        filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);\n      } else if (!refreshHints.isFilterUnchanged) {\n        filteredItems = batchFilter(items, filterArgs);\n      }\n    } else {\n      // special case:  if not filtering and not paging, the resulting\n      // rows collection needs to be a copy so that changes due to sort\n      // can be caught\n      filteredItems = pagesize ? items : items.concat();\n    }\n\n    // get the current page\n    var paged;\n    if (pagesize) {\n      if (filteredItems.length <= pagenum * pagesize) {\n        if (filteredItems.length === 0) {\n          pagenum = 0;\n        } else {\n          pagenum = Math.floor((filteredItems.length - 1) / pagesize);\n        }\n      }\n      paged = filteredItems.slice(pagesize * pagenum, pagesize * pagenum + pagesize);\n    } else {\n      paged = filteredItems;\n    }\n    return { totalRows: filteredItems.length, rows: paged };\n  }\n\n  function getRowDiffs(rows, newRows) {\n    var item,\n        r,\n        eitherIsNonData,\n        diff = [];\n    var from = 0,\n        to = newRows.length;\n\n    if (refreshHints && refreshHints.ignoreDiffsBefore) {\n      from = Math.max(0, Math.min(newRows.length, refreshHints.ignoreDiffsBefore));\n    }\n\n    if (refreshHints && refreshHints.ignoreDiffsAfter) {\n      to = Math.min(newRows.length, Math.max(0, refreshHints.ignoreDiffsAfter));\n    }\n\n    for (var i = from, rl = rows.length; i < to; i++) {\n      if (i >= rl) {\n        diff[diff.length] = i;\n      } else {\n        item = newRows[i];\n        r = rows[i];\n\n        if (groupingInfos.length && (eitherIsNonData = item.__nonDataRow || r.__nonDataRow) && item.__group !== r.__group || item.__group && !item.equals(r) || eitherIsNonData && (\n        // no good way to compare totals since they are arbitrary DTOs\n        // deep object comparison is pretty expensive\n        // always considering them 'dirty' seems easier for the time being\n        item.__groupTotals || r.__groupTotals) || item[idProperty] != r[idProperty] || updated && updated[item[idProperty]]) {\n          diff[diff.length] = i;\n        }\n      }\n    }\n    return diff;\n  }\n\n  function recalc(_items) {\n    rowsById = null;\n\n    if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing || refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {\n      filterCache = [];\n    }\n\n    var filteredItems = getFilteredAndPagedItems(_items);\n    totalRows = filteredItems.totalRows;\n    var newRows = filteredItems.rows;\n\n    groups = [];\n    if (groupingInfos.length) {\n      groups = extractGroups(newRows);\n      if (groups.length) {\n        addTotals(groups);\n        newRows = flattenGroupedRows(groups);\n      }\n    }\n\n    var diff = getRowDiffs(rows, newRows);\n\n    rows = newRows;\n\n    return diff;\n  }\n\n  function refresh() {\n    if (suspend) {\n      return;\n    }\n\n    var countBefore = rows.length;\n    var totalRowsBefore = totalRows;\n\n    var diff = recalc(items, filter); // pass as direct refs to avoid closure perf hit\n\n    // if the current page is no longer valid, go to last page and recalc\n    // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized\n    if (pagesize && totalRows < pagenum * pagesize) {\n      pagenum = Math.max(0, Math.ceil(totalRows / pagesize) - 1);\n      diff = recalc(items, filter);\n    }\n\n    updated = null;\n    prevRefreshHints = refreshHints;\n    refreshHints = {};\n\n    if (totalRowsBefore !== totalRows) {\n      onPagingInfoChanged.notify(getPagingInfo(), null, self);\n    }\n    if (countBefore !== rows.length) {\n      onRowCountChanged.notify({ previous: countBefore, current: rows.length, dataView: self }, null, self);\n    }\n    if (diff.length > 0) {\n      onRowsChanged.notify({ rows: diff, dataView: self }, null, self);\n    }\n  }\n\n  /***\r\n   * Wires the grid and the DataView together to keep row selection tied to item ids.\r\n   * This is useful since, without it, the grid only knows about rows, so if the items\r\n   * move around, the same rows stay selected instead of the selection moving along\r\n   * with the items.\r\n   *\r\n   * NOTE:  This doesn't work with cell selection model.\r\n   *\r\n   * @param grid {Slick.Grid} The grid to sync selection with.\r\n   * @param preserveHidden {Boolean} Whether to keep selected items that go out of the\r\n   *     view due to them getting filtered out.\r\n   * @param preserveHiddenOnSelectionChange {Boolean} Whether to keep selected items\r\n   *     that are currently out of the view (see preserveHidden) as selected when selection\r\n   *     changes.\r\n   * @return {Slick.Event} An event that notifies when an internal list of selected row ids\r\n   *     changes.  This is useful since, in combination with the above two options, it allows\r\n   *     access to the full list selected row ids, and not just the ones visible to the grid.\r\n   * @method syncGridSelection\r\n   */\n  function syncGridSelection(grid, preserveHidden, preserveHiddenOnSelectionChange) {\n    var self = this;\n    var inHandler;\n    var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n    var onSelectedRowIdsChanged = new _slickGrid.Slick.Event();\n\n    function setSelectedRowIds(rowIds) {\n      if (selectedRowIds.join(\",\") == rowIds.join(\",\")) {\n        return;\n      }\n\n      selectedRowIds = rowIds;\n\n      onSelectedRowIdsChanged.notify({\n        \"grid\": grid,\n        \"ids\": selectedRowIds,\n        \"dataView\": self\n      }, new _slickGrid.Slick.EventData(), self);\n    }\n\n    function update() {\n      if (selectedRowIds.length > 0) {\n        inHandler = true;\n        var selectedRows = self.mapIdsToRows(selectedRowIds);\n        if (!preserveHidden) {\n          setSelectedRowIds(self.mapRowsToIds(selectedRows));\n        }\n        grid.setSelectedRows(selectedRows);\n        inHandler = false;\n      }\n    }\n\n    grid.onSelectedRowsChanged.subscribe(function (e, args) {\n      if (inHandler) {\n        return;\n      }\n      var newSelectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n      if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {\n        setSelectedRowIds(newSelectedRowIds);\n      } else {\n        // keep the ones that are hidden\n        var existing = $.grep(selectedRowIds, function (id) {\n          return self.getRowById(id) === undefined;\n        });\n        // add the newly selected ones\n        setSelectedRowIds(existing.concat(newSelectedRowIds));\n      }\n    });\n\n    this.onRowsChanged.subscribe(update);\n\n    this.onRowCountChanged.subscribe(update);\n\n    return onSelectedRowIdsChanged;\n  }\n\n  function syncGridCellCssStyles(grid, key) {\n    var hashById;\n    var inHandler;\n\n    // since this method can be called after the cell styles have been set,\n    // get the existing ones right away\n    storeCellCssStyles(grid.getCellCssStyles(key));\n\n    function storeCellCssStyles(hash) {\n      hashById = {};\n      for (var row in hash) {\n        var id = rows[row][idProperty];\n        hashById[id] = hash[row];\n      }\n    }\n\n    function update() {\n      if (hashById) {\n        inHandler = true;\n        ensureRowsByIdCache();\n        var newHash = {};\n        for (var id in hashById) {\n          var row = rowsById[id];\n          if (row != undefined) {\n            newHash[row] = hashById[id];\n          }\n        }\n        grid.setCellCssStyles(key, newHash);\n        inHandler = false;\n      }\n    }\n\n    grid.onCellCssStylesChanged.subscribe(function (e, args) {\n      if (inHandler) {\n        return;\n      }\n      if (key != args.key) {\n        return;\n      }\n      if (args.hash) {\n        storeCellCssStyles(args.hash);\n      } else {\n        grid.onCellCssStylesChanged.unsubscribe(styleChanged);\n        self.onRowsChanged.unsubscribe(update);\n        self.onRowCountChanged.unsubscribe(update);\n      }\n    });\n\n    this.onRowsChanged.subscribe(update);\n\n    this.onRowCountChanged.subscribe(update);\n  }\n\n  $.extend(this, {\n    // methods\n    \"beginUpdate\": beginUpdate,\n    \"endUpdate\": endUpdate,\n    \"setPagingOptions\": setPagingOptions,\n    \"getPagingInfo\": getPagingInfo,\n    \"getItems\": getItems,\n    \"setItems\": setItems,\n    \"setFilter\": setFilter,\n    \"getFilter\": getFilter,\n    \"getFilteredItems\": getFilteredItems,\n    \"sort\": sort,\n    \"fastSort\": fastSort,\n    \"reSort\": reSort,\n    \"setGrouping\": setGrouping,\n    \"getGrouping\": getGrouping,\n    \"groupBy\": groupBy,\n    \"setAggregators\": setAggregators,\n    \"collapseAllGroups\": collapseAllGroups,\n    \"expandAllGroups\": expandAllGroups,\n    \"collapseGroup\": collapseGroup,\n    \"expandGroup\": expandGroup,\n    \"getGroups\": getGroups,\n    \"getIdxById\": getIdxById,\n    \"getRowByItem\": getRowByItem,\n    \"getRowById\": getRowById,\n    \"getItemById\": getItemById,\n    \"getItemByIdx\": getItemByIdx,\n    \"mapItemsToRows\": mapItemsToRows,\n    \"mapRowsToIds\": mapRowsToIds,\n    \"mapIdsToRows\": mapIdsToRows,\n    \"setRefreshHints\": setRefreshHints,\n    \"setFilterArgs\": setFilterArgs,\n    \"refresh\": refresh,\n    \"updateItem\": updateItem,\n    \"insertItem\": insertItem,\n    \"addItem\": addItem,\n    \"deleteItem\": deleteItem,\n    \"sortedAddItem\": sortedAddItem,\n    \"sortedUpdateItem\": sortedUpdateItem,\n    \"syncGridSelection\": syncGridSelection,\n    \"syncGridCellCssStyles\": syncGridCellCssStyles,\n\n    // data provider methods\n    \"getLength\": getLength,\n    \"getItem\": getItem,\n    \"getItemMetadata\": getItemMetadata,\n\n    // events\n    \"onRowCountChanged\": onRowCountChanged,\n    \"onRowsChanged\": onRowsChanged,\n    \"onPagingInfoChanged\": onPagingInfoChanged\n  });\n}\n\nfunction AvgAggregator(field) {\n  this.field_ = field;\n\n  this.init = function () {\n    this.count_ = 0;\n    this.nonNullCount_ = 0;\n    this.sum_ = 0;\n  };\n\n  this.accumulate = function (item) {\n    var val = item[this.field_];\n    this.count_++;\n    if (val != null && val !== \"\" && !isNaN(val)) {\n      this.nonNullCount_++;\n      this.sum_ += parseFloat(val);\n    }\n  };\n\n  this.storeResult = function (groupTotals) {\n    if (!groupTotals.avg) {\n      groupTotals.avg = {};\n    }\n    if (this.nonNullCount_ != 0) {\n      groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;\n    }\n  };\n}\n\nfunction MinAggregator(field) {\n  this.field_ = field;\n\n  this.init = function () {\n    this.min_ = null;\n  };\n\n  this.accumulate = function (item) {\n    var val = item[this.field_];\n    if (val != null && val !== \"\" && !isNaN(val)) {\n      if (this.min_ == null || val < this.min_) {\n        this.min_ = val;\n      }\n    }\n  };\n\n  this.storeResult = function (groupTotals) {\n    if (!groupTotals.min) {\n      groupTotals.min = {};\n    }\n    groupTotals.min[this.field_] = this.min_;\n  };\n}\n\nfunction MaxAggregator(field) {\n  this.field_ = field;\n\n  this.init = function () {\n    this.max_ = null;\n  };\n\n  this.accumulate = function (item) {\n    var val = item[this.field_];\n    if (val != null && val !== \"\" && !isNaN(val)) {\n      if (this.max_ == null || val > this.max_) {\n        this.max_ = val;\n      }\n    }\n  };\n\n  this.storeResult = function (groupTotals) {\n    if (!groupTotals.max) {\n      groupTotals.max = {};\n    }\n    groupTotals.max[this.field_] = this.max_;\n  };\n}\n\nfunction SumAggregator(field) {\n  this.field_ = field;\n\n  this.init = function () {\n    this.sum_ = null;\n  };\n\n  this.accumulate = function (item) {\n    var val = item[this.field_];\n    if (val != null && val !== \"\" && !isNaN(val)) {\n      this.sum_ += parseFloat(val);\n    }\n  };\n\n  this.storeResult = function (groupTotals) {\n    if (!groupTotals.sum) {\n      groupTotals.sum = {};\n    }\n    groupTotals.sum[this.field_] = this.sum_;\n  };\n}\n\n// TODO:  add more built-in aggregators\n// TODO:  merge common aggregators in one to prevent needles iterating\nvar Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator\n};\n\nexports.DataView = DataView;\nexports.Aggregators = Aggregators;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/slick.dataview.js\n");

/***/ }),

/***/ "./src/vendor/slick.grid.js":
/*!**********************************!*\
  !*** ./src/vendor/slick.grid.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\r\n * jquery.event.drag - v 2.3.0\r\n * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com\r\n * Open Source MIT License - http://threedubmedia.com/code/license\r\n */\n// Created: 2008-06-04\n// Updated: 2012-05-21\n// Updated: 2016-08-16   Luiz Gonzaga dos Santos Filho\n// REQUIRES: jquery 1.8 +, , event.drag 2.3.0\n// TESTED WITH: jQuery 1.8.3, 1.11.2, 2.2.4, and 3.1.0\n\n;(function ($) {\n  // add the jquery instance method\n  $.fn.drag = function (str, arg, opts) {\n    // figure out the event type\n    var type = typeof str == \"string\" ? str : \"\",\n\n    // figure out the event handler...\n    fn = $.isFunction(str) ? str : $.isFunction(arg) ? arg : null;\n    // fix the event type\n    if (type.indexOf(\"drag\") !== 0) type = \"drag\" + type;\n    // were options passed\n    opts = (str == fn ? arg : opts) || {};\n    // trigger or bind event handler\n    return fn ? this.on(type, opts, fn) : this.trigger(type);\n  };\n\n  // local refs (increase compression)\n  var $event = $.event,\n      $special = $event.special,\n\n  // configure the drag special event\n  drag = $special.drag = {\n\n    // these are the default settings\n    defaults: {\n      which: 1, // mouse button pressed to start drag sequence\n      distance: 0, // distance dragged before dragstart\n      not: ':input', // selector to suppress dragging on target elements\n      handle: null, // selector to match handle target elements\n      relative: false, // true to use \"position\", false to use \"offset\"\n      drop: true, // false to suppress drop events, true or selector to allow\n      click: false // false to suppress click events after dragend (no proxy)\n    },\n\n    // the key name for stored drag data\n    datakey: \"dragdata\",\n\n    // prevent bubbling for better performance\n    noBubble: true,\n\n    // count bound related events\n    add: function add(obj) {\n      // read the interaction data\n      var data = $.data(this, drag.datakey),\n\n      // read any passed options\n      opts = obj.data || {};\n      // count another realted event\n      data.related += 1;\n      // extend data options bound with this event\n      // don't iterate \"opts\" in case it is a node\n      $.each(drag.defaults, function (key, def) {\n        if (opts[key] !== undefined) data[key] = opts[key];\n      });\n    },\n\n    // forget unbound related events\n    remove: function remove() {\n      $.data(this, drag.datakey).related -= 1;\n    },\n\n    // configure interaction, capture settings\n    setup: function setup() {\n      // check for related events\n      if ($.data(this, drag.datakey)) return;\n      // initialize the drag data with copied defaults\n      var data = $.extend({ related: 0 }, drag.defaults);\n      // store the interaction data\n      $.data(this, drag.datakey, data);\n      // bind the mousedown event, which starts drag interactions\n      $event.add(this, \"touchstart mousedown\", drag.init, data);\n      // prevent image dragging in IE...\n      if (this.attachEvent) this.attachEvent(\"ondragstart\", drag.dontstart);\n    },\n\n    // destroy configured interaction\n    teardown: function teardown() {\n      var data = $.data(this, drag.datakey) || {};\n      // check for related events\n      if (data.related) return;\n      // remove the stored data\n      $.removeData(this, drag.datakey);\n      // remove the mousedown event\n      $event.remove(this, \"touchstart mousedown\", drag.init);\n      // enable text selection\n      drag.textselect(true);\n      // un-prevent image dragging in IE...\n      if (this.detachEvent) this.detachEvent(\"ondragstart\", drag.dontstart);\n    },\n\n    // initialize the interaction\n    init: function init(event) {\n      // sorry, only one touch at a time\n      if (drag.touched) return;\n      // the drag/drop interaction data\n      var dd = event.data,\n          results;\n      // check the which directive\n      if (event.which != 0 && dd.which > 0 && event.which != dd.which) return;\n      // check for suppressed selector\n      if ($(event.target).is(dd.not)) return;\n      // check for handle selector\n      if (dd.handle && !$(event.target).closest(dd.handle, event.currentTarget).length) return;\n\n      drag.touched = event.type == 'touchstart' ? this : null;\n      dd.propagates = 1;\n      dd.mousedown = this;\n      dd.interactions = [drag.interaction(this, dd)];\n      dd.target = event.target;\n      dd.pageX = event.pageX;\n      dd.pageY = event.pageY;\n      dd.dragging = null;\n      // handle draginit event...\n      results = drag.hijack(event, \"draginit\", dd);\n      // early cancel\n      if (!dd.propagates) return;\n      // flatten the result set\n      results = drag.flatten(results);\n      // insert new interaction elements\n      if (results && results.length) {\n        dd.interactions = [];\n        $.each(results, function () {\n          dd.interactions.push(drag.interaction(this, dd));\n        });\n      }\n      // remember how many interactions are propagating\n      dd.propagates = dd.interactions.length;\n      // locate and init the drop targets\n      if (dd.drop !== false && $special.drop) $special.drop.handler(event, dd);\n      // disable text selection\n      drag.textselect(false);\n      // bind additional events...\n      if (drag.touched) $event.add(drag.touched, \"touchmove touchend\", drag.handler, dd);else $event.add(document, \"mousemove mouseup\", drag.handler, dd);\n      // helps prevent text selection or scrolling\n      if (!drag.touched || dd.live) return false;\n    },\n\n    // returns an interaction object\n    interaction: function interaction(elem, dd) {\n      var offset = elem && elem.ownerDocument ? $(elem)[dd.relative ? \"position\" : \"offset\"]() || { top: 0, left: 0 } : { top: 0, left: 0 };\n      return {\n        drag: elem,\n        callback: new drag.callback(),\n        droppable: [],\n        offset: offset\n      };\n    },\n\n    // handle drag-releatd DOM events\n    handler: function handler(event) {\n      // read the data before hijacking anything\n      var dd = event.data;\n      // handle various events\n      switch (event.type) {\n        // mousemove, check distance, start dragging\n        case !dd.dragging && 'touchmove':\n          event.preventDefault();\n        case !dd.dragging && 'mousemove':\n          //  drag tolerance, x² + y² = distance²\n          if (Math.pow(event.pageX - dd.pageX, 2) + Math.pow(event.pageY - dd.pageY, 2) < Math.pow(dd.distance, 2)) break; // distance tolerance not reached\n          event.target = dd.target; // force target from \"mousedown\" event (fix distance issue)\n          drag.hijack(event, \"dragstart\", dd); // trigger \"dragstart\"\n          if (dd.propagates) // \"dragstart\" not rejected\n            dd.dragging = true; // activate interaction\n        // mousemove, dragging\n        case 'touchmove':\n          event.preventDefault();\n        case 'mousemove':\n          if (dd.dragging) {\n            // trigger \"drag\"\n            drag.hijack(event, \"drag\", dd);\n            if (dd.propagates) {\n              // manage drop events\n              if (dd.drop !== false && $special.drop) $special.drop.handler(event, dd); // \"dropstart\", \"dropend\"\n              break; // \"drag\" not rejected, stop\n            }\n            event.type = \"mouseup\"; // helps \"drop\" handler behave\n          }\n        // mouseup, stop dragging\n        case 'touchend':\n        case 'mouseup':\n        default:\n          if (drag.touched) $event.remove(drag.touched, \"touchmove touchend\", drag.handler); // remove touch events\n          else $event.remove(document, \"mousemove mouseup\", drag.handler); // remove page events\n          if (dd.dragging) {\n            if (dd.drop !== false && $special.drop) $special.drop.handler(event, dd); // \"drop\"\n            drag.hijack(event, \"dragend\", dd); // trigger \"dragend\"\n          }\n          drag.textselect(true); // enable text selection\n          // if suppressing click events...\n          if (dd.click === false && dd.dragging) $.data(dd.mousedown, \"suppress.click\", new Date().getTime() + 5);\n          dd.dragging = drag.touched = false; // deactivate element\n          break;\n      }\n    },\n\n    // re-use event object for custom events\n    hijack: function hijack(event, type, dd, x, elem) {\n      // not configured\n      if (!dd) return;\n      // remember the original event and type\n      var orig = { event: event.originalEvent, type: event.type },\n\n      // is the event drag related or drog related?\n      mode = type.indexOf(\"drop\") ? \"drag\" : \"drop\",\n\n      // iteration vars\n      result,\n          i = x || 0,\n          ia,\n          $elems,\n          callback,\n          len = !isNaN(x) ? x : dd.interactions.length;\n      // modify the event type\n      event.type = type;\n      // protects originalEvent from side-effects\n      var noop = function noop() {};\n      event.originalEvent = new jQuery.Event(orig.event, {\n        preventDefault: noop,\n        stopPropagation: noop,\n        stopImmediatePropagation: noop\n      });\n      // initialize the results\n      dd.results = [];\n      // handle each interacted element\n      do {\n        if (ia = dd.interactions[i]) {\n          // validate the interaction\n          if (type !== \"dragend\" && ia.cancelled) continue;\n          // set the dragdrop properties on the event object\n          callback = drag.properties(event, dd, ia);\n          // prepare for more results\n          ia.results = [];\n          // handle each element\n          $(elem || ia[mode] || dd.droppable).each(function (p, subject) {\n            // identify drag or drop targets individually\n            callback.target = subject;\n            // force propagtion of the custom event\n            event.isPropagationStopped = function () {\n              return false;\n            };\n            // handle the event\n            result = subject ? $event.dispatch.call(subject, event, callback) : null;\n            // stop the drag interaction for this element\n            if (result === false) {\n              if (mode == \"drag\") {\n                ia.cancelled = true;\n                dd.propagates -= 1;\n              }\n              if (type == \"drop\") {\n                ia[mode][p] = null;\n              }\n            }\n            // assign any dropinit elements\n            else if (type == \"dropinit\") ia.droppable.push(drag.element(result) || subject);\n            // accept a returned proxy element\n            if (type == \"dragstart\") ia.proxy = $(drag.element(result) || ia.drag)[0];\n            // remember this result\n            ia.results.push(result);\n            // forget the event result, for recycling\n            delete event.result;\n            // break on cancelled handler\n            if (type !== \"dropinit\") return result;\n          });\n          // flatten the results\n          dd.results[i] = drag.flatten(ia.results);\n          // accept a set of valid drop targets\n          if (type == \"dropinit\") ia.droppable = drag.flatten(ia.droppable);\n          // locate drop targets\n          if (type == \"dragstart\" && !ia.cancelled) callback.update();\n        }\n      } while (++i < len);\n      // restore the original event & type\n      event.type = orig.type;\n      event.originalEvent = orig.event;\n      // return all handler results\n      return drag.flatten(dd.results);\n    },\n\n    // extend the callback object with drag/drop properties...\n    properties: function properties(event, dd, ia) {\n      var obj = ia.callback;\n      // elements\n      obj.drag = ia.drag;\n      obj.proxy = ia.proxy || ia.drag;\n      // starting mouse position\n      obj.startX = dd.pageX;\n      obj.startY = dd.pageY;\n      // current distance dragged\n      obj.deltaX = event.pageX - dd.pageX;\n      obj.deltaY = event.pageY - dd.pageY;\n      // original element position\n      obj.originalX = ia.offset.left;\n      obj.originalY = ia.offset.top;\n      // adjusted element position\n      obj.offsetX = obj.originalX + obj.deltaX;\n      obj.offsetY = obj.originalY + obj.deltaY;\n      // assign the drop targets information\n      obj.drop = drag.flatten((ia.drop || []).slice());\n      obj.available = drag.flatten((ia.droppable || []).slice());\n      return obj;\n    },\n\n    // determine is the argument is an element or jquery instance\n    element: function element(arg) {\n      if (arg && (arg.jquery || arg.nodeType == 1)) return arg;\n    },\n\n    // flatten nested jquery objects and arrays into a single dimension array\n    flatten: function flatten(arr) {\n      return $.map(arr, function (member) {\n        return member && member.jquery ? $.makeArray(member) : member && member.length ? drag.flatten(member) : member;\n      });\n    },\n\n    // toggles text selection attributes ON (true) or OFF (false)\n    textselect: function textselect(bool) {\n      $(document)[bool ? \"off\" : \"on\"](\"selectstart\", drag.dontstart).css(\"MozUserSelect\", bool ? \"\" : \"none\");\n      // .attr(\"unselectable\", bool ? \"off\" : \"on\" )\n      document.unselectable = bool ? \"off\" : \"on\";\n    },\n\n    // suppress \"selectstart\" and \"ondragstart\" events\n    dontstart: function dontstart() {\n      return false;\n    },\n\n    // a callback instance contructor\n    callback: function callback() {}\n\n  };\n\n  // callback methods\n  drag.callback.prototype = {\n    update: function update() {\n      if ($special.drop && this.available.length) $.each(this.available, function (i) {\n        $special.drop.locate(this, i);\n      });\n    }\n  };\n\n  // patch $.event.$dispatch to allow suppressing clicks\n  var $dispatch = $event.dispatch;\n  $event.dispatch = function (event) {\n    if ($.data(this, \"suppress.\" + event.type) - new Date().getTime() > 0) {\n      $.removeData(this, \"suppress.\" + event.type);\n      return;\n    }\n    return $dispatch.apply(this, arguments);\n  };\n\n  // share the same special event configuration with related events...\n  $special.draginit = $special.dragstart = $special.dragend = drag;\n})(jQuery);\n\n/***\r\n * Contains core SlickGrid classes.\r\n * @module Core\r\n * @namespace Slick\r\n */\n//import $ from 'jquery'\n//let jQuery=$;\n//import 'jquery-ui'\n\n\n/***\r\n * An event object for passing data to event handlers and letting them control propagation.\r\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\r\n * @class EventData\r\n * @constructor\r\n */\nfunction EventData() {\n  var isPropagationStopped = false;\n  var isImmediatePropagationStopped = false;\n\n  /***\r\n   * Stops event from propagating up the DOM tree.\r\n   * @method stopPropagation\r\n   */\n  this.stopPropagation = function () {\n    isPropagationStopped = true;\n  };\n\n  /***\r\n   * Returns whether stopPropagation was called on this event object.\r\n   * @method isPropagationStopped\r\n   * @return {Boolean}\r\n   */\n  this.isPropagationStopped = function () {\n    return isPropagationStopped;\n  };\n\n  /***\r\n   * Prevents the rest of the handlers from being executed.\r\n   * @method stopImmediatePropagation\r\n   */\n  this.stopImmediatePropagation = function () {\n    isImmediatePropagationStopped = true;\n  };\n\n  /***\r\n   * Returns whether stopImmediatePropagation was called on this event object.\\\r\n   * @method isImmediatePropagationStopped\r\n   * @return {Boolean}\r\n   */\n  this.isImmediatePropagationStopped = function () {\n    return isImmediatePropagationStopped;\n  };\n}\n\n/***\r\n * A simple publisher-subscriber implementation.\r\n * @class Event\r\n * @constructor\r\n */\nfunction Event() {\n  var handlers = [];\n\n  /***\r\n   * Adds an event handler to be called when the event is fired.\r\n   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\r\n   * object the event was fired with.<p>\r\n   * @method subscribe\r\n   * @param fn {Function} Event handler.\r\n   */\n  this.subscribe = function (fn) {\n    handlers.push(fn);\n  };\n\n  /***\r\n   * Removes an event handler added with <code>subscribe(fn)</code>.\r\n   * @method unsubscribe\r\n   * @param fn {Function} Event handler to be removed.\r\n   */\n  this.unsubscribe = function (fn) {\n    for (var i = handlers.length - 1; i >= 0; i--) {\n      if (handlers[i] === fn) {\n        handlers.splice(i, 1);\n      }\n    }\n  };\n\n  /***\r\n   * Fires an event notifying all subscribers.\r\n   * @method notify\r\n   * @param args {Object} Additional data object to be passed to all handlers.\r\n   * @param e {EventData}\r\n   *      Optional.\r\n   *      An <code>EventData</code> object to be passed to all handlers.\r\n   *      For DOM events, an existing W3C/jQuery event object can be passed in.\r\n   * @param scope {Object}\r\n   *      Optional.\r\n   *      The scope (\"this\") within which the handler will be executed.\r\n   *      If not specified, the scope will be set to the <code>Event</code> instance.\r\n   */\n  this.notify = function (args, e, scope) {\n    e = e || new EventData();\n    scope = scope || this;\n\n    var returnValue;\n    for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n      returnValue = handlers[i].call(scope, e, args);\n    }\n\n    return returnValue;\n  };\n}\n\nfunction EventHandler() {\n  var handlers = [];\n\n  this.subscribe = function (event, handler) {\n    handlers.push({\n      event: event,\n      handler: handler\n    });\n    event.subscribe(handler);\n\n    return this; // allow chaining\n  };\n\n  this.unsubscribe = function (event, handler) {\n    var i = handlers.length;\n    while (i--) {\n      if (handlers[i].event === event && handlers[i].handler === handler) {\n        handlers.splice(i, 1);\n        event.unsubscribe(handler);\n        return;\n      }\n    }\n\n    return this; // allow chaining\n  };\n\n  this.unsubscribeAll = function () {\n    var i = handlers.length;\n    while (i--) {\n      handlers[i].event.unsubscribe(handlers[i].handler);\n    }\n    handlers = [];\n\n    return this; // allow chaining\n  };\n}\n\n/***\r\n * A structure containing a range of cells.\r\n * @class Range\r\n * @constructor\r\n * @param fromRow {Integer} Starting row.\r\n * @param fromCell {Integer} Starting cell.\r\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\r\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\r\n */\nfunction Range(fromRow, fromCell, toRow, toCell) {\n  if (toRow === undefined && toCell === undefined) {\n    toRow = fromRow;\n    toCell = fromCell;\n  }\n\n  /***\r\n   * @property fromRow\r\n   * @type {Integer}\r\n   */\n  this.fromRow = Math.min(fromRow, toRow);\n\n  /***\r\n   * @property fromCell\r\n   * @type {Integer}\r\n   */\n  this.fromCell = Math.min(fromCell, toCell);\n\n  /***\r\n   * @property toRow\r\n   * @type {Integer}\r\n   */\n  this.toRow = Math.max(fromRow, toRow);\n\n  /***\r\n   * @property toCell\r\n   * @type {Integer}\r\n   */\n  this.toCell = Math.max(fromCell, toCell);\n\n  /***\r\n   * Returns whether a range represents a single row.\r\n   * @method isSingleRow\r\n   * @return {Boolean}\r\n   */\n  this.isSingleRow = function () {\n    return this.fromRow == this.toRow;\n  };\n\n  /***\r\n   * Returns whether a range represents a single cell.\r\n   * @method isSingleCell\r\n   * @return {Boolean}\r\n   */\n  this.isSingleCell = function () {\n    return this.fromRow == this.toRow && this.fromCell == this.toCell;\n  };\n\n  /***\r\n   * Returns whether a range contains a given cell.\r\n   * @method contains\r\n   * @param row {Integer}\r\n   * @param cell {Integer}\r\n   * @return {Boolean}\r\n   */\n  this.contains = function (row, cell) {\n    return row >= this.fromRow && row <= this.toRow && cell >= this.fromCell && cell <= this.toCell;\n  };\n\n  /***\r\n   * Returns a readable representation of a range.\r\n   * @method toString\r\n   * @return {String}\r\n   */\n  this.toString = function () {\n    if (this.isSingleCell()) {\n      return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n    } else {\n      return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n    }\n  };\n}\n\n/***\r\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\r\n * @class NonDataItem\r\n * @constructor\r\n */\nfunction NonDataItem() {\n  this.__nonDataRow = true;\n}\n\n/***\r\n * Information about a group of rows.\r\n * @class Group\r\n * @extends Slick.NonDataItem\r\n * @constructor\r\n */\nfunction Group() {\n  this.__group = true;\n\n  /**\r\n   * Grouping level, starting with 0.\r\n   * @property level\r\n   * @type {Number}\r\n   */\n  this.level = 0;\n\n  /***\r\n   * Number of rows in the group.\r\n   * @property count\r\n   * @type {Integer}\r\n   */\n  this.count = 0;\n\n  /***\r\n   * Grouping value.\r\n   * @property value\r\n   * @type {Object}\r\n   */\n  this.value = null;\n\n  /***\r\n   * Formatted display value of the group.\r\n   * @property title\r\n   * @type {String}\r\n   */\n  this.title = null;\n\n  /***\r\n   * Whether a group is collapsed.\r\n   * @property collapsed\r\n   * @type {Boolean}\r\n   */\n  this.collapsed = false;\n\n  /***\r\n   * Whether a group selection checkbox is checked.\r\n   * @property selectChecked\r\n   * @type {Boolean}\r\n   */\n  this.selectChecked = false;\n\n  /***\r\n   * GroupTotals, if any.\r\n   * @property totals\r\n   * @type {GroupTotals}\r\n   */\n  this.totals = null;\n\n  /**\r\n   * Rows that are part of the group.\r\n   * @property rows\r\n   * @type {Array}\r\n   */\n  this.rows = [];\n\n  /**\r\n   * Sub-groups that are part of the group.\r\n   * @property groups\r\n   * @type {Array}\r\n   */\n  this.groups = null;\n\n  /**\r\n   * A unique key used to identify the group.  This key can be used in calls to DataView\r\n   * collapseGroup() or expandGroup().\r\n   * @property groupingKey\r\n   * @type {Object}\r\n   */\n  this.groupingKey = null;\n}\n\nGroup.prototype = new NonDataItem();\n\n/***\r\n * Compares two Group instances.\r\n * @method equals\r\n * @return {Boolean}\r\n * @param group {Group} Group instance to compare to.\r\n */\nGroup.prototype.equals = function (group) {\n  return this.value === group.value && this.count === group.count && this.collapsed === group.collapsed && this.title === group.title;\n};\n\n/***\r\n * Information about group totals.\r\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\r\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\r\n * formatters during the display.\r\n * @class GroupTotals\r\n * @extends Slick.NonDataItem\r\n * @constructor\r\n */\nfunction GroupTotals() {\n  this.__groupTotals = true;\n\n  /***\r\n   * Parent Group.\r\n   * @param group\r\n   * @type {Group}\r\n   */\n  this.group = null;\n\n  /***\r\n   * Whether the totals have been fully initialized / calculated.\r\n   * Will be set to false for lazy-calculated group totals.\r\n   * @param initialized\r\n   * @type {Boolean}\r\n   */\n  this.initialized = false;\n}\n\nGroupTotals.prototype = new NonDataItem();\n\n/***\r\n * A locking helper to track the active edit controller and ensure that only a single controller\r\n * can be active at a time.  This prevents a whole class of state and validation synchronization\r\n * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\r\n * and attempt a commit or cancel before proceeding.\r\n * @class EditorLock\r\n * @constructor\r\n */\nfunction EditorLock() {\n  var activeEditController = null;\n\n  /***\r\n   * Returns true if a specified edit controller is active (has the edit lock).\r\n   * If the parameter is not specified, returns true if any edit controller is active.\r\n   * @method isActive\r\n   * @param editController {EditController}\r\n   * @return {Boolean}\r\n   */\n  this.isActive = function (editController) {\n    return editController ? activeEditController === editController : activeEditController !== null;\n  };\n\n  /***\r\n   * Sets the specified edit controller as the active edit controller (acquire edit lock).\r\n   * If another edit controller is already active, and exception will be throw new Error(.\r\n   * @method activate\r\n   * @param editController {EditController} edit controller acquiring the lock\r\n   */\n  this.activate = function (editController) {\n    if (editController === activeEditController) {\n      // already activated?\n      return;\n    }\n    if (activeEditController !== null) {\n      throw new Error(\"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\");\n    }\n    if (!editController.commitCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\");\n    }\n    if (!editController.cancelCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\");\n    }\n    activeEditController = editController;\n  };\n\n  /***\r\n   * Unsets the specified edit controller as the active edit controller (release edit lock).\r\n   * If the specified edit controller is not the active one, an exception will be throw new Error(.\r\n   * @method deactivate\r\n   * @param editController {EditController} edit controller releasing the lock\r\n   */\n  this.deactivate = function (editController) {\n    if (activeEditController !== editController) {\n      throw new Error(\"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\");\n    }\n    activeEditController = null;\n  };\n\n  /***\r\n   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\r\n   * controller and returns whether the commit attempt was successful (commit may fail due to validation\r\n   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\r\n   * and false otherwise.  If no edit controller is active, returns true.\r\n   * @method commitCurrentEdit\r\n   * @return {Boolean}\r\n   */\n  this.commitCurrentEdit = function () {\n    return activeEditController ? activeEditController.commitCurrentEdit() : true;\n  };\n\n  /***\r\n   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\r\n   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\r\n   * active, returns true.\r\n   * @method cancelCurrentEdit\r\n   * @return {Boolean}\r\n   */\n  this.cancelCurrentEdit = function cancelCurrentEdit() {\n    return activeEditController ? activeEditController.cancelCurrentEdit() : true;\n  };\n}\n\nvar Slick = {\n  \"Event\": Event,\n  \"EventData\": EventData,\n  \"EventHandler\": EventHandler,\n  \"Range\": Range,\n  \"NonDataRow\": NonDataItem,\n  \"Group\": Group,\n  \"GroupTotals\": GroupTotals,\n  \"EditorLock\": EditorLock,\n\n  /***\r\n   * A global singleton editor lock.\r\n   * @class GlobalEditorLock\r\n   * @static\r\n   * @constructor\r\n   */\n  \"GlobalEditorLock\": new EditorLock(),\n\n  \"keyCode\": {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38,\n    A: 65\n  },\n  \"preClickClassName\": \"slick-edit-preclick\"\n};\n\n/**\r\n * @license\r\n * (c) 2009-2016 Michael Leibman\r\n * michael{dot}leibman{at}gmail{dot}com\r\n * http://github.com/mleibman/slickgrid\r\n *\r\n * Distributed under MIT license.\r\n * All rights reserved.\r\n *\r\n * SlickGrid v2.3\r\n *\r\n * NOTES:\r\n *     Cell/row DOM manipulations are done directly bypassing jQuery's DOM manipulation methods.\r\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\r\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\r\n *     and do proper cleanup.\r\n */\n\n// make sure required JavaScript modules are loaded\n\n\nif (typeof jQuery === \"undefined\") {\n  throw new Error(\"SlickGrid requires jquery module to be loaded\");\n}\nif (!jQuery.fn.drag) {\n  throw new Error(\"SlickGrid requires jquery.event.drag module to be loaded\");\n}\nif (typeof Slick === \"undefined\") {\n  throw new Error(\"slick.core.js not loaded\");\n}\n\n// shared across all grids on the page\nvar scrollbarDimensions;\nvar maxSupportedCssHeight; // browser's breaking point\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// SlickGrid class implementation (available as Slick.Grid)\n\n/**\r\n * Creates a new instance of the grid.\r\n * @class SlickGrid\r\n * @constructor\r\n * @param {Node}              container   Container node to create the grid in.\r\n * @param {Array,Object}      data        An array of objects for databinding.\r\n * @param {Array}             columns     An array of column definitions.\r\n * @param {Object}            options     Grid options.\r\n **/\nfunction SlickGrid(container, data, columns, options) {\n  // settings\n  var defaults = {\n    alwaysShowVerticalScroll: false,\n    explicitInitialization: false,\n    rowHeight: 25,\n    defaultColumnWidth: 80,\n    enableAddRow: false,\n    leaveSpaceForNewRows: false,\n    editable: false,\n    autoEdit: true,\n    suppressActiveCellChangeOnEdit: false,\n    enableCellNavigation: true,\n    enableColumnReorder: true,\n    asyncEditorLoading: false,\n    asyncEditorLoadDelay: 100,\n    forceFitColumns: false,\n    enableAsyncPostRender: false,\n    asyncPostRenderDelay: 50,\n    enableAsyncPostRenderCleanup: false,\n    asyncPostRenderCleanupDelay: 40,\n    autoHeight: false,\n    editorLock: Slick.GlobalEditorLock,\n    showHeaderRow: false,\n    headerRowHeight: 25,\n    createFooterRow: false,\n    showFooterRow: false,\n    footerRowHeight: 25,\n    createPreHeaderPanel: false,\n    showPreHeaderPanel: false,\n    preHeaderPanelHeight: 25,\n    showTopPanel: false,\n    topPanelHeight: 25,\n    formatterFactory: null,\n    editorFactory: null,\n    cellFlashingCssClass: \"flashing\",\n    selectedCellCssClass: \"selected\",\n    multiSelect: true,\n    enableTextSelectionOnCells: false,\n    dataItemColumnValueExtractor: null,\n    fullWidthRows: false,\n    multiColumnSort: false,\n    numberedMultiColumnSort: false,\n    tristateMultiColumnSort: false,\n    sortColNumberInSeparateSpan: false,\n    defaultFormatter: defaultFormatter,\n    forceSyncScrolling: false,\n    addNewRowCssClass: \"new-row\",\n    preserveCopiedSelectionOnPaste: false,\n    showCellSelection: true,\n    viewportClass: null,\n    minRowBuffer: 3,\n    emulatePagingWhenScrolling: true, // when scrolling off bottom of viewport, place new row at top of viewport\n    editorCellNavOnLRKeys: false\n  };\n\n  var columnDefaults = {\n    name: \"\",\n    resizable: true,\n    sortable: false,\n    minWidth: 30,\n    rerenderOnResize: false,\n    headerCssClass: null,\n    defaultSortAsc: true,\n    focusable: true,\n    selectable: true\n  };\n\n  // scroller\n  var th; // virtual height\n  var h; // real scrollable height\n  var ph; // page height\n  var n; // number of pages\n  var cj; // \"jumpiness\" coefficient\n\n  var page = 0; // current page\n  var offset = 0; // current page offset\n  var vScrollDir = 1;\n\n  // private\n  var initialized = false;\n  var $container;\n  var uid = \"slickgrid_\" + Math.round(1000000 * Math.random());\n  var self = this;\n  var $focusSink, $focusSink2;\n  var $headerScroller;\n  var $headers;\n  var $headerRow, $headerRowScroller, $headerRowSpacer;\n  var $footerRow, $footerRowScroller, $footerRowSpacer;\n  var $preHeaderPanel, $preHeaderPanelScroller, $preHeaderPanelSpacer;\n  var $topPanelScroller;\n  var $topPanel;\n  var $viewport;\n  var $canvas;\n  var $style;\n  var $boundAncestors;\n  var stylesheet, columnCssRulesL, columnCssRulesR;\n  var viewportH, viewportW;\n  var canvasWidth;\n  var viewportHasHScroll, viewportHasVScroll;\n  var headerColumnWidthDiff = 0,\n      headerColumnHeightDiff = 0,\n      // border+padding\n  cellWidthDiff = 0,\n      cellHeightDiff = 0,\n      jQueryNewWidthBehaviour = false;\n  var absoluteColumnMinWidth;\n\n  var tabbingDirection = 1;\n  var activePosX;\n  var activeRow, activeCell;\n  var activeCellNode = null;\n  var currentEditor = null;\n  var serializedEditorValue;\n  var editController;\n\n  var rowsCache = {};\n  var renderedRows = 0;\n  var numVisibleRows;\n  var prevScrollTop = 0;\n  var scrollTop = 0;\n  var lastRenderedScrollTop = 0;\n  var lastRenderedScrollLeft = 0;\n  var prevScrollLeft = 0;\n  var scrollLeft = 0;\n\n  var selectionModel;\n  var selectedRows = [];\n\n  var plugins = [];\n  var cellCssClasses = {};\n\n  var columnsById = {};\n  var sortColumns = [];\n  var columnPosLeft = [];\n  var columnPosRight = [];\n\n  var pagingActive = false;\n  var pagingIsLastPage = false;\n\n  // async call handles\n  var h_editorLoader = null;\n  var h_render = null;\n  var h_postrender = null;\n  var h_postrenderCleanup = null;\n  var postProcessedRows = {};\n  var postProcessToRow = null;\n  var postProcessFromRow = null;\n  var postProcessedCleanupQueue = [];\n  var postProcessgroupId = 0;\n\n  // perf counters\n  var counter_rows_rendered = 0;\n  var counter_rows_removed = 0;\n\n  // These two variables work around a bug with inertial scrolling in Webkit/Blink on Mac.\n  // See http://crbug.com/312427.\n  var rowNodeFromLastMouseWheelEvent; // this node must not be deleted while inertial scrolling\n  var zombieRowNodeFromLastMouseWheelEvent; // node that was hidden instead of getting deleted\n  var zombieRowCacheFromLastMouseWheelEvent; // row cache for above node\n  var zombieRowPostProcessedFromLastMouseWheelEvent; // post processing references for above node\n\n  // store css attributes if display:none is active in container or parent\n  var cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\n  var $hiddenParents;\n  var oldProps = [];\n  var columnResizeDragging = false;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Initialization\n\n  function init() {\n    if (container instanceof jQuery) {\n      $container = container;\n    } else {\n      $container = $(container);\n    }\n    if ($container.length < 1) {\n      throw new Error(\"SlickGrid requires a valid container, \" + container + \" does not exist in the DOM.\");\n    }\n\n    cacheCssForHiddenInit();\n\n    // calculate these only once and share between grid instances\n    maxSupportedCssHeight = maxSupportedCssHeight || getMaxSupportedCssHeight();\n\n    options = $.extend({}, defaults, options);\n    validateAndEnforceOptions();\n    columnDefaults.width = options.defaultColumnWidth;\n\n    columnsById = {};\n    for (var i = 0; i < columns.length; i++) {\n      var m = columns[i] = $.extend({}, columnDefaults, columns[i]);\n      columnsById[m.id] = i;\n      if (m.minWidth && m.width < m.minWidth) {\n        m.width = m.minWidth;\n      }\n      if (m.maxWidth && m.width > m.maxWidth) {\n        m.width = m.maxWidth;\n      }\n    }\n\n    // validate loaded JavaScript modules against requested options\n    if (options.enableColumnReorder && !$.fn.sortable) {\n      throw new Error(\"SlickGrid's 'enableColumnReorder = true' option requires jquery-ui.sortable module to be loaded\");\n    }\n\n    editController = {\n      \"commitCurrentEdit\": commitCurrentEdit,\n      \"cancelCurrentEdit\": cancelCurrentEdit\n    };\n\n    $container.empty().css(\"overflow\", \"hidden\").css(\"outline\", 0).addClass(uid).addClass(\"ui-widget\");\n\n    // set up a positioning container if needed\n    if (!/relative|absolute|fixed/.test($container.css(\"position\"))) {\n      $container.css(\"position\", \"relative\");\n    }\n\n    $focusSink = $(\"<div tabIndex='0' hideFocus style='position:fixed;width:0;height:0;top:0;left:0;outline:0;'></div>\").appendTo($container);\n\n    if (options.createPreHeaderPanel) {\n      $preHeaderPanelScroller = $(\"<div class='slick-preheader-panel ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\n      $preHeaderPanel = $(\"<div />\").appendTo($preHeaderPanelScroller);\n      $preHeaderPanelSpacer = $(\"<div style='display:block;height:1px;position:absolute;top:0;left:0;'></div>\").appendTo($preHeaderPanelScroller);\n\n      if (!options.showPreHeaderPanel) {\n        $preHeaderPanelScroller.hide();\n      }\n    }\n\n    $headerScroller = $(\"<div class='slick-header ui-state-default' />\").appendTo($container);\n    $headers = $(\"<div class='slick-header-columns' style='left:-1000px' />\").appendTo($headerScroller);\n\n    $headerRowScroller = $(\"<div class='slick-headerrow ui-state-default' />\").appendTo($container);\n    $headerRow = $(\"<div class='slick-headerrow-columns' />\").appendTo($headerRowScroller);\n    $headerRowSpacer = $(\"<div style='display:block;height:1px;position:absolute;top:0;left:0;'></div>\").appendTo($headerRowScroller);\n\n    $topPanelScroller = $(\"<div class='slick-top-panel-scroller ui-state-default' />\").appendTo($container);\n    $topPanel = $(\"<div class='slick-top-panel' style='width:10000px' />\").appendTo($topPanelScroller);\n\n    if (!options.showTopPanel) {\n      $topPanelScroller.hide();\n    }\n\n    if (!options.showHeaderRow) {\n      $headerRowScroller.hide();\n    }\n\n    $viewport = $(\"<div class='slick-viewport' style='width:100%;overflow:auto;outline:0;position:relative;;'>\").appendTo($container);\n    $viewport.css(\"overflow-y\", options.alwaysShowVerticalScroll ? \"scroll\" : options.autoHeight ? \"hidden\" : \"auto\");\n    $viewport.css(\"overflow-x\", options.forceFitColumns ? \"hidden\" : \"auto\");\n    if (options.viewportClass) $viewport.toggleClass(options.viewportClass, true);\n\n    $canvas = $(\"<div class='grid-canvas' />\").appendTo($viewport);\n\n    scrollbarDimensions = scrollbarDimensions || measureScrollbar();\n\n    if ($preHeaderPanelSpacer) $preHeaderPanelSpacer.css(\"width\", getCanvasWidth() + scrollbarDimensions.width + \"px\");\n    $headers.width(getHeadersWidth());\n    $headerRowSpacer.css(\"width\", getCanvasWidth() + scrollbarDimensions.width + \"px\");\n\n    if (options.createFooterRow) {\n      $footerRowScroller = $(\"<div class='slick-footerrow ui-state-default' />\").appendTo($container);\n      $footerRow = $(\"<div class='slick-footerrow-columns' />\").appendTo($footerRowScroller);\n      $footerRowSpacer = $(\"<div style='display:block;height:1px;position:absolute;top:0;left:0;'></div>\").css(\"width\", getCanvasWidth() + scrollbarDimensions.width + \"px\").appendTo($footerRowScroller);\n\n      if (!options.showFooterRow) {\n        $footerRowScroller.hide();\n      }\n    }\n\n    $focusSink2 = $focusSink.clone().appendTo($container);\n\n    if (!options.explicitInitialization) {\n      finishInitialization();\n    }\n  }\n\n  function finishInitialization() {\n    if (!initialized) {\n      initialized = true;\n\n      viewportW = parseFloat($.css($container[0], \"width\", true));\n\n      // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n      // calculate the diff so we can set consistent sizes\n      measureCellPaddingAndBorder();\n\n      // for usability reasons, all text selection in SlickGrid is disabled\n      // with the exception of input and textarea elements (selection must\n      // be enabled there so that editors work as expected); note that\n      // selection in grid cells (grid body) is already unavailable in\n      // all browsers except IE\n      disableSelection($headers); // disable all text selection in header (including input and textarea)\n\n      if (!options.enableTextSelectionOnCells) {\n        // disable text selection in grid cells except in input and textarea elements\n        // (this is IE-specific, because selectstart event will only fire in IE)\n        $viewport.on(\"selectstart.ui\", function (event) {\n          return $(event.target).is(\"input,textarea\");\n        });\n      }\n\n      updateColumnCaches();\n      createColumnHeaders();\n      setupColumnSort();\n      createCssRules();\n      resizeCanvas();\n      bindAncestorScrollEvents();\n\n      $container.on(\"resize.slickgrid\", resizeCanvas);\n      $viewport\n      //.on(\"click\", handleClick)\n      .on(\"scroll\", handleScroll);\n      $headerScroller\n      //.on(\"scroll\", handleHeaderScroll)\n      .on(\"contextmenu\", handleHeaderContextMenu).on(\"click\", handleHeaderClick).on(\"mouseenter\", \".slick-header-column\", handleHeaderMouseEnter).on(\"mouseleave\", \".slick-header-column\", handleHeaderMouseLeave);\n      $headerRowScroller.on(\"scroll\", handleHeaderRowScroll);\n\n      if (options.createFooterRow) {\n        $footerRowScroller.on(\"scroll\", handleFooterRowScroll);\n      }\n\n      if (options.createPreHeaderPanel) {\n        $preHeaderPanelScroller.on(\"scroll\", handlePreHeaderPanelScroll);\n      }\n\n      $focusSink.add($focusSink2).on(\"keydown\", handleKeyDown);\n      $canvas.on(\"keydown\", handleKeyDown).on(\"click\", handleClick).on(\"dblclick\", handleDblClick).on(\"contextmenu\", handleContextMenu).on(\"draginit\", handleDragInit).on(\"dragstart\", { distance: 3 }, handleDragStart).on(\"drag\", handleDrag).on(\"dragend\", handleDragEnd).on(\"mouseenter\", \".slick-cell\", handleMouseEnter).on(\"mouseleave\", \".slick-cell\", handleMouseLeave);\n\n      // Work around http://crbug.com/312427.\n      if (navigator.userAgent.toLowerCase().match(/webkit/) && navigator.userAgent.toLowerCase().match(/macintosh/)) {\n        $canvas.on(\"mousewheel\", handleMouseWheel);\n      }\n      restoreCssFromHiddenInit();\n    }\n  }\n\n  function cacheCssForHiddenInit() {\n    // handle display:none on container or container parents\n    $hiddenParents = $container.parents().addBack().not(':visible');\n    $hiddenParents.each(function () {\n      var old = {};\n      for (var name in cssShow) {\n        old[name] = this.style[name];\n        this.style[name] = cssShow[name];\n      }\n      oldProps.push(old);\n    });\n  }\n\n  function restoreCssFromHiddenInit() {\n    // finish handle display:none on container or container parents\n    // - put values back the way they were\n    $hiddenParents.each(function (i) {\n      var old = oldProps[i];\n      for (var name in cssShow) {\n        this.style[name] = old[name];\n      }\n    });\n  }\n\n  function registerPlugin(plugin) {\n    plugins.unshift(plugin);\n    plugin.init(self);\n  }\n\n  function unregisterPlugin(plugin) {\n    for (var i = plugins.length; i >= 0; i--) {\n      if (plugins[i] === plugin) {\n        if (plugins[i].destroy) {\n          plugins[i].destroy();\n        }\n        plugins.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  function setSelectionModel(model) {\n    if (selectionModel) {\n      selectionModel.onSelectedRangesChanged.unsubscribe(handleSelectedRangesChanged);\n      if (selectionModel.destroy) {\n        selectionModel.destroy();\n      }\n    }\n\n    selectionModel = model;\n    if (selectionModel) {\n      selectionModel.init(self);\n      selectionModel.onSelectedRangesChanged.subscribe(handleSelectedRangesChanged);\n    }\n  }\n\n  function getSelectionModel() {\n    return selectionModel;\n  }\n\n  function getCanvasNode() {\n    return $canvas[0];\n  }\n\n  function measureScrollbar() {\n    var $outerdiv = $('<div class=\"' + $viewport.className + '\" style=\"position:absolute; top:-10000px; left:-10000px; overflow:auto; width:100px; height:100px;\"></div>').appendTo($viewport);\n    var $innerdiv = $('<div style=\"width:200px; height:200px; overflow:auto;\"></div>').appendTo($outerdiv);\n    var dim = {\n      width: $outerdiv[0].offsetWidth - $outerdiv[0].clientWidth,\n      height: $outerdiv[0].offsetHeight - $outerdiv[0].clientHeight\n    };\n    $innerdiv.remove();\n    $outerdiv.remove();\n    return dim;\n  }\n\n  function getColumnTotalWidth(includeScrollbar) {\n    var totalWidth = 0;\n    for (var i = 0, ii = columns.length; i < ii; i++) {\n      var width = columns[i].width;\n      totalWidth += width;\n    }\n    if (includeScrollbar) {\n      totalWidth += scrollbarDimensions.width;\n    }\n    return totalWidth;\n  }\n\n  function getHeadersWidth() {\n    var headersWidth = getColumnTotalWidth(!options.autoHeight);\n    return Math.max(headersWidth, viewportW) + 1000;\n  }\n\n  function getCanvasWidth() {\n    var availableWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;\n    var rowWidth = 0;\n    var i = columns.length;\n    while (i--) {\n      rowWidth += columns[i].width;\n    }\n    return options.fullWidthRows ? Math.max(rowWidth, availableWidth) : rowWidth;\n  }\n\n  function updateCanvasWidth(forceColumnWidthsUpdate) {\n    var oldCanvasWidth = canvasWidth;\n    canvasWidth = getCanvasWidth();\n\n    if (canvasWidth != oldCanvasWidth) {\n      $canvas.width(canvasWidth);\n      $headerRow.width(canvasWidth);\n      if (options.createFooterRow) {\n        $footerRow.width(canvasWidth);\n      }\n      if (options.createPreHeaderPanel) {\n        $preHeaderPanel.width(canvasWidth);\n      }\n      $headers.width(getHeadersWidth());\n      viewportHasHScroll = canvasWidth > viewportW - scrollbarDimensions.width;\n    }\n\n    var w = canvasWidth + (viewportHasVScroll ? scrollbarDimensions.width : 0);\n    $headerRowSpacer.width(w);\n    if (options.createFooterRow) {\n      $footerRowSpacer.width(w);\n    }\n    if (options.createPreHeaderPanel) {\n      $preHeaderPanelSpacer.width(w);\n    }\n\n    if (canvasWidth != oldCanvasWidth || forceColumnWidthsUpdate) {\n      applyColumnWidths();\n    }\n  }\n\n  function disableSelection($target) {\n    if ($target && $target.jquery) {\n      $target.attr(\"unselectable\", \"on\").css(\"MozUserSelect\", \"none\").on(\"selectstart.ui\", function () {\n        return false;\n      }); // from jquery:ui.core.js 1.7.2\n    }\n  }\n\n  function getMaxSupportedCssHeight() {\n    var supportedHeight = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    var div = $(\"<div style='display:none' />\").appendTo(document.body);\n\n    while (true) {\n      var test = supportedHeight * 2;\n      div.css(\"height\", test);\n      if (test > testUpTo || div.height() !== test) {\n        break;\n      } else {\n        supportedHeight = test;\n      }\n    }\n\n    div.remove();\n    return supportedHeight;\n  }\n\n  function getUID() {\n    return uid;\n  }\n\n  function getHeaderColumnWidthDiff() {\n    return headerColumnWidthDiff;\n  }\n\n  function getScrollbarDimensions() {\n    return scrollbarDimensions;\n  }\n\n  // TODO:  this is static.  need to handle page mutation.\n  function bindAncestorScrollEvents() {\n    var elem = $canvas[0];\n    while ((elem = elem.parentNode) != document.body && elem != null) {\n      // bind to scroll containers only\n      if (elem == $viewport[0] || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight) {\n        var $elem = $(elem);\n        if (!$boundAncestors) {\n          $boundAncestors = $elem;\n        } else {\n          $boundAncestors = $boundAncestors.add($elem);\n        }\n        $elem.on(\"scroll.\" + uid, handleActiveCellPositionChange);\n      }\n    }\n  }\n\n  function unbindAncestorScrollEvents() {\n    if (!$boundAncestors) {\n      return;\n    }\n    $boundAncestors.off(\"scroll.\" + uid);\n    $boundAncestors = null;\n  }\n\n  function updateColumnHeader(columnId, title, toolTip) {\n    if (!initialized) {\n      return;\n    }\n    var idx = getColumnIndex(columnId);\n    if (idx == null) {\n      return;\n    }\n\n    var columnDef = columns[idx];\n    var $header = $headers.children().eq(idx);\n    if ($header) {\n      if (title !== undefined) {\n        columns[idx].name = title;\n      }\n      if (toolTip !== undefined) {\n        columns[idx].toolTip = toolTip;\n      }\n\n      trigger(self.onBeforeHeaderCellDestroy, {\n        \"node\": $header[0],\n        \"column\": columnDef,\n        \"grid\": self\n      });\n\n      $header.attr(\"title\", toolTip || \"\").children().eq(0).html(title);\n\n      trigger(self.onHeaderCellRendered, {\n        \"node\": $header[0],\n        \"column\": columnDef,\n        \"grid\": self\n      });\n    }\n  }\n\n  function getHeader() {\n    return $headers[0];\n  }\n\n  function getHeaderColumn(columnIdOrIdx) {\n    var idx = typeof columnIdOrIdx === \"number\" ? columnIdOrIdx : getColumnIndex(columnIdOrIdx);\n    var $rtn = $headers.children().eq(idx);\n    return $rtn && $rtn[0];\n  }\n\n  function getHeaderRow() {\n    return $headerRow[0];\n  }\n\n  function getFooterRow() {\n    return $footerRow[0];\n  }\n\n  function getPreHeaderPanel() {\n    return $preHeaderPanel[0];\n  }\n\n  function getHeaderRowColumn(columnIdOrIdx) {\n    var idx = typeof columnIdOrIdx === \"number\" ? columnIdOrIdx : getColumnIndex(columnIdOrIdx);\n    var $rtn = $headerRow.children().eq(idx);\n    return $rtn && $rtn[0];\n  }\n\n  function getFooterRowColumn(columnIdOrIdx) {\n    var idx = typeof columnIdOrIdx === \"number\" ? columnIdOrIdx : getColumnIndex(columnIdOrIdx);\n    var $rtn = $footerRow.children().eq(idx);\n    return $rtn && $rtn[0];\n  }\n\n  function createColumnHeaders() {\n    function onMouseEnter() {\n      $(this).addClass(\"ui-state-hover\");\n    }\n\n    function onMouseLeave() {\n      $(this).removeClass(\"ui-state-hover\");\n    }\n\n    $headers.find(\".slick-header-column\").each(function () {\n      var columnDef = $(this).data(\"column\");\n      if (columnDef) {\n        trigger(self.onBeforeHeaderCellDestroy, {\n          \"node\": this,\n          \"column\": columnDef,\n          \"grid\": self\n        });\n      }\n    });\n    $headers.empty();\n    $headers.width(getHeadersWidth());\n\n    $headerRow.find(\".slick-headerrow-column\").each(function () {\n      var columnDef = $(this).data(\"column\");\n      if (columnDef) {\n        trigger(self.onBeforeHeaderRowCellDestroy, {\n          \"node\": this,\n          \"column\": columnDef,\n          \"grid\": self\n        });\n      }\n    });\n    $headerRow.empty();\n\n    if (options.createFooterRow) {\n      $footerRow.find(\".slick-footerrow-column\").each(function () {\n        var columnDef = $(this).data(\"column\");\n        if (columnDef) {\n          trigger(self.onBeforeFooterRowCellDestroy, {\n            \"node\": this,\n            \"column\": columnDef\n          });\n        }\n      });\n      $footerRow.empty();\n    }\n\n    for (var i = 0; i < columns.length; i++) {\n      var m = columns[i];\n\n      var header = $(\"<div class='ui-state-default slick-header-column' />\").html(\"<span class='slick-column-name'>\" + m.name + \"</span>\").width(m.width - headerColumnWidthDiff).attr(\"id\", \"\" + uid + m.id).attr(\"title\", m.toolTip || \"\").data(\"column\", m).addClass(m.headerCssClass || \"\").appendTo($headers);\n\n      if (options.enableColumnReorder || m.sortable) {\n        header.on('mouseenter', onMouseEnter).on('mouseleave', onMouseLeave);\n      }\n\n      if (m.sortable) {\n        header.addClass(\"slick-header-sortable\");\n        header.append(\"<span class='slick-sort-indicator\" + (options.numberedMultiColumnSort && !options.sortColNumberInSeparateSpan ? \" slick-sort-indicator-numbered\" : \"\") + \"' />\");\n        if (options.numberedMultiColumnSort && options.sortColNumberInSeparateSpan) {\n          header.append(\"<span class='slick-sort-indicator-numbered' />\");\n        }\n      }\n\n      trigger(self.onHeaderCellRendered, {\n        \"node\": header[0],\n        \"column\": m,\n        \"grid\": self\n      });\n\n      if (options.showHeaderRow) {\n        var headerRowCell = $(\"<div class='ui-state-default slick-headerrow-column l\" + i + \" r\" + i + \"'></div>\").data(\"column\", m).appendTo($headerRow);\n\n        trigger(self.onHeaderRowCellRendered, {\n          \"node\": headerRowCell[0],\n          \"column\": m,\n          \"grid\": self\n        });\n      }\n      if (options.createFooterRow && options.showFooterRow) {\n        var footerRowCell = $(\"<div class='ui-state-default slick-footerrow-column l\" + i + \" r\" + i + \"'></div>\").data(\"column\", m).appendTo($footerRow);\n\n        trigger(self.onFooterRowCellRendered, {\n          \"node\": footerRowCell[0],\n          \"column\": m\n        });\n      }\n    }\n\n    setSortColumns(sortColumns);\n    setupColumnResize();\n    if (options.enableColumnReorder) {\n      if (typeof options.enableColumnReorder == 'function') {\n        options.enableColumnReorder(self, $headers, headerColumnWidthDiff, setColumns, setupColumnResize, columns, getColumnIndex, uid, trigger);\n      } else {\n        setupColumnReorder();\n      }\n    }\n  }\n\n  function setupColumnSort() {\n    $headers.click(function (e) {\n      if (columnResizeDragging) return;\n      // temporary workaround for a bug in jQuery 1.7.1 (http://bugs.jquery.com/ticket/11328)\n      e.metaKey = e.metaKey || e.ctrlKey;\n\n      if ($(e.target).hasClass(\"slick-resizable-handle\")) {\n        return;\n      }\n\n      var $col = $(e.target).closest(\".slick-header-column\");\n      if (!$col.length) {\n        return;\n      }\n\n      var column = $col.data(\"column\");\n      if (column.sortable) {\n        if (!getEditorLock().commitCurrentEdit()) {\n          return;\n        }\n\n        var sortColumn = null;\n        var i = 0;\n        for (; i < sortColumns.length; i++) {\n          if (sortColumns[i].columnId == column.id) {\n            sortColumn = sortColumns[i];\n            sortColumn.sortAsc = !sortColumn.sortAsc;\n            break;\n          }\n        }\n        var hadSortCol = !!sortColumn;\n\n        if (options.tristateMultiColumnSort) {\n          if (!sortColumn) {\n            sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n          }\n          if (hadSortCol && sortColumn.sortAsc) {\n            // three state: remove sort rather than go back to ASC\n            sortColumns.splice(i, 1);\n            sortColumn = null;\n          }\n          if (!options.multiColumnSort) {\n            sortColumns = [];\n          }\n          if (sortColumn && (!hadSortCol || !options.multiColumnSort)) {\n            sortColumns.push(sortColumn);\n          }\n        } else {\n          // legacy behaviour\n          if (e.metaKey && options.multiColumnSort) {\n            if (sortColumn) {\n              sortColumns.splice(i, 1);\n            }\n          } else {\n            if (!e.shiftKey && !e.metaKey || !options.multiColumnSort) {\n              sortColumns = [];\n            }\n\n            if (!sortColumn) {\n              sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n              sortColumns.push(sortColumn);\n            } else if (sortColumns.length == 0) {\n              sortColumns.push(sortColumn);\n            }\n          }\n        }\n\n        setSortColumns(sortColumns);\n\n        if (!options.multiColumnSort) {\n          trigger(self.onSort, {\n            multiColumnSort: false,\n            sortCol: sortColumns.length > 0 ? column : null,\n            sortAsc: sortColumns.length > 0 ? sortColumns[0].sortAsc : true,\n            grid: self }, e);\n        } else {\n          trigger(self.onSort, {\n            multiColumnSort: true,\n            sortCols: $.map(sortColumns, function (col) {\n              return { sortCol: columns[getColumnIndex(col.columnId)], sortAsc: col.sortAsc };\n            }),\n            grid: self }, e);\n        }\n      }\n    });\n  }\n\n  function setupColumnReorder() {\n    $headers.filter(\":ui-sortable\").sortable(\"destroy\");\n    $headers.sortable({\n      containment: \"parent\",\n      distance: 3,\n      axis: \"x\",\n      cursor: \"default\",\n      tolerance: \"intersection\",\n      helper: \"clone\",\n      placeholder: \"slick-sortable-placeholder ui-state-default slick-header-column\",\n      start: function start(e, ui) {\n        ui.placeholder.width(ui.helper.outerWidth() - headerColumnWidthDiff);\n        $(ui.helper).addClass(\"slick-header-column-active\");\n      },\n      beforeStop: function beforeStop(e, ui) {\n        $(ui.helper).removeClass(\"slick-header-column-active\");\n      },\n      stop: function stop(e) {\n        if (!getEditorLock().commitCurrentEdit()) {\n          $(this).sortable(\"cancel\");\n          return;\n        }\n\n        var reorderedIds = $headers.sortable(\"toArray\");\n        var reorderedColumns = [];\n        for (var i = 0; i < reorderedIds.length; i++) {\n          reorderedColumns.push(columns[getColumnIndex(reorderedIds[i].replace(uid, \"\"))]);\n        }\n        setColumns(reorderedColumns);\n\n        trigger(self.onColumnsReordered, { grid: self });\n        e.stopPropagation();\n        setupColumnResize();\n      }\n    });\n  }\n\n  function setupColumnResize() {\n    var $col, j, c, pageX, columnElements, minPageX, maxPageX, firstResizable, lastResizable;\n    columnElements = $headers.children();\n    columnElements.find(\".slick-resizable-handle\").remove();\n    columnElements.each(function (i, e) {\n      if (i >= columns.length) {\n        return;\n      }\n      if (columns[i].resizable) {\n        if (firstResizable === undefined) {\n          firstResizable = i;\n        }\n        lastResizable = i;\n      }\n    });\n    if (firstResizable === undefined) {\n      return;\n    }\n    columnElements.each(function (i, e) {\n      if (i >= columns.length) {\n        return;\n      }\n      if (i < firstResizable || options.forceFitColumns && i >= lastResizable) {\n        return;\n      }\n      $col = $(e);\n      $(\"<div class='slick-resizable-handle' />\").appendTo(e).on(\"dragstart\", function (e, dd) {\n        if (!getEditorLock().commitCurrentEdit()) {\n          return false;\n        }\n        pageX = e.pageX;\n        $(this).parent().addClass(\"slick-header-column-active\");\n        var shrinkLeewayOnRight = null,\n            stretchLeewayOnRight = null;\n        // lock each column's width option to current width\n        columnElements.each(function (i, e) {\n          if (i >= columns.length) {\n            return;\n          }\n          columns[i].previousWidth = $(e).outerWidth();\n        });\n        if (options.forceFitColumns) {\n          shrinkLeewayOnRight = 0;\n          stretchLeewayOnRight = 0;\n          // colums on right affect maxPageX/minPageX\n          for (j = i + 1; j < columns.length; j++) {\n            c = columns[j];\n            if (c.resizable) {\n              if (stretchLeewayOnRight !== null) {\n                if (c.maxWidth) {\n                  stretchLeewayOnRight += c.maxWidth - c.previousWidth;\n                } else {\n                  stretchLeewayOnRight = null;\n                }\n              }\n              shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n            }\n          }\n        }\n        var shrinkLeewayOnLeft = 0,\n            stretchLeewayOnLeft = 0;\n        for (j = 0; j <= i; j++) {\n          // columns on left only affect minPageX\n          c = columns[j];\n          if (c.resizable) {\n            if (stretchLeewayOnLeft !== null) {\n              if (c.maxWidth) {\n                stretchLeewayOnLeft += c.maxWidth - c.previousWidth;\n              } else {\n                stretchLeewayOnLeft = null;\n              }\n            }\n            shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n          }\n        }\n        if (shrinkLeewayOnRight === null) {\n          shrinkLeewayOnRight = 100000;\n        }\n        if (shrinkLeewayOnLeft === null) {\n          shrinkLeewayOnLeft = 100000;\n        }\n        if (stretchLeewayOnRight === null) {\n          stretchLeewayOnRight = 100000;\n        }\n        if (stretchLeewayOnLeft === null) {\n          stretchLeewayOnLeft = 100000;\n        }\n        maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n        minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n      }).on(\"drag\", function (e, dd) {\n        columnResizeDragging = true;\n        var actualMinWidth,\n            d = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX,\n            x;\n        if (d < 0) {\n          // shrink column\n          x = d;\n          for (j = i; j >= 0; j--) {\n            c = columns[j];\n            if (c.resizable) {\n              actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n              if (x && c.previousWidth + x < actualMinWidth) {\n                x += c.previousWidth - actualMinWidth;\n                c.width = actualMinWidth;\n              } else {\n                c.width = c.previousWidth + x;\n                x = 0;\n              }\n            }\n          }\n\n          if (options.forceFitColumns) {\n            x = -d;\n            for (j = i + 1; j < columns.length; j++) {\n              c = columns[j];\n              if (c.resizable) {\n                if (x && c.maxWidth && c.maxWidth - c.previousWidth < x) {\n                  x -= c.maxWidth - c.previousWidth;\n                  c.width = c.maxWidth;\n                } else {\n                  c.width = c.previousWidth + x;\n                  x = 0;\n                }\n              }\n            }\n          }\n        } else {\n          // stretch column\n          x = d;\n          for (j = i; j >= 0; j--) {\n            c = columns[j];\n            if (c.resizable) {\n              if (x && c.maxWidth && c.maxWidth - c.previousWidth < x) {\n                x -= c.maxWidth - c.previousWidth;\n                c.width = c.maxWidth;\n              } else {\n                c.width = c.previousWidth + x;\n                x = 0;\n              }\n            }\n          }\n\n          if (options.forceFitColumns) {\n            x = -d;\n            for (j = i + 1; j < columns.length; j++) {\n              c = columns[j];\n              if (c.resizable) {\n                actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n                if (x && c.previousWidth + x < actualMinWidth) {\n                  x += c.previousWidth - actualMinWidth;\n                  c.width = actualMinWidth;\n                } else {\n                  c.width = c.previousWidth + x;\n                  x = 0;\n                }\n              }\n            }\n          }\n        }\n        applyColumnHeaderWidths();\n        if (options.syncColumnCellResize) {\n          applyColumnWidths();\n        }\n      }).on(\"dragend\", function (e, dd) {\n        var newWidth;\n        $(this).parent().removeClass(\"slick-header-column-active\");\n        for (j = 0; j < columns.length; j++) {\n          c = columns[j];\n          newWidth = $(columnElements[j]).outerWidth();\n\n          if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n            invalidateAllRows();\n          }\n        }\n        updateCanvasWidth(true);\n        render();\n        trigger(self.onColumnsResized, { grid: self });\n        setTimeout(function () {\n          columnResizeDragging = false;\n        }, 300);\n      });\n    });\n  }\n\n  function getVBoxDelta($el) {\n    var p = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\n    var delta = 0;\n    $.each(p, function (n, val) {\n      delta += parseFloat($el.css(val)) || 0;\n    });\n    return delta;\n  }\n\n  function measureCellPaddingAndBorder() {\n    var el;\n    var h = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"];\n    var v = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\n\n    // jquery prior to version 1.8 handles .width setter/getter as a direct css write/read\n    // jquery 1.8 changed .width to read the true inner element width if box-sizing is set to border-box, and introduced a setter for .outerWidth\n    // so for equivalent functionality, prior to 1.8 use .width, and after use .outerWidth\n    var verArray = $.fn.jquery.split('.');\n    jQueryNewWidthBehaviour = verArray[0] == 1 && verArray[1] >= 8 || verArray[0] >= 2;\n\n    el = $(\"<div class='ui-state-default slick-header-column' style='visibility:hidden'>-</div>\").appendTo($headers);\n    headerColumnWidthDiff = headerColumnHeightDiff = 0;\n    if (el.css(\"box-sizing\") != \"border-box\" && el.css(\"-moz-box-sizing\") != \"border-box\" && el.css(\"-webkit-box-sizing\") != \"border-box\") {\n      $.each(h, function (n, val) {\n        headerColumnWidthDiff += parseFloat(el.css(val)) || 0;\n      });\n      $.each(v, function (n, val) {\n        headerColumnHeightDiff += parseFloat(el.css(val)) || 0;\n      });\n    }\n    el.remove();\n\n    var r = $(\"<div class='slick-row' />\").appendTo($canvas);\n    el = $(\"<div class='slick-cell' id='' style='visibility:hidden'>-</div>\").appendTo(r);\n    cellWidthDiff = cellHeightDiff = 0;\n    if (el.css(\"box-sizing\") != \"border-box\" && el.css(\"-moz-box-sizing\") != \"border-box\" && el.css(\"-webkit-box-sizing\") != \"border-box\") {\n      $.each(h, function (n, val) {\n        cellWidthDiff += parseFloat(el.css(val)) || 0;\n      });\n      $.each(v, function (n, val) {\n        cellHeightDiff += parseFloat(el.css(val)) || 0;\n      });\n    }\n    r.remove();\n\n    absoluteColumnMinWidth = Math.max(headerColumnWidthDiff, cellWidthDiff);\n  }\n\n  function createCssRules() {\n    $style = $(\"<style type='text/css' rel='stylesheet' />\").appendTo($(\"head\"));\n    var rowHeight = options.rowHeight - cellHeightDiff;\n    var rules = [\".\" + uid + \" .slick-header-column { left: 1000px; }\", \".\" + uid + \" .slick-top-panel { height:\" + options.topPanelHeight + \"px; }\", \".\" + uid + \" .slick-preheader-panel { height:\" + options.preHeaderPanelHeight + \"px; }\", \".\" + uid + \" .slick-headerrow-columns { height:\" + options.headerRowHeight + \"px; }\", \".\" + uid + \" .slick-footerrow-columns { height:\" + options.footerRowHeight + \"px; }\", \".\" + uid + \" .slick-cell { height:\" + rowHeight + \"px; }\", \".\" + uid + \" .slick-row { height:\" + options.rowHeight + \"px; }\"];\n\n    for (var i = 0; i < columns.length; i++) {\n      rules.push(\".\" + uid + \" .l\" + i + \" { }\");\n      rules.push(\".\" + uid + \" .r\" + i + \" { }\");\n    }\n\n    if ($style[0].styleSheet) {\n      // IE\n      $style[0].styleSheet.cssText = rules.join(\" \");\n    } else {\n      $style[0].appendChild(document.createTextNode(rules.join(\" \")));\n    }\n  }\n\n  function getColumnCssRules(idx) {\n    var i;\n    if (!stylesheet) {\n      var sheets = document.styleSheets;\n      for (i = 0; i < sheets.length; i++) {\n        if ((sheets[i].ownerNode || sheets[i].owningElement) == $style[0]) {\n          stylesheet = sheets[i];\n          break;\n        }\n      }\n\n      if (!stylesheet) {\n        throw new Error(\"Cannot find stylesheet.\");\n      }\n\n      // find and cache column CSS rules\n      columnCssRulesL = [];\n      columnCssRulesR = [];\n      var cssRules = stylesheet.cssRules || stylesheet.rules;\n      var matches, columnIdx;\n      for (i = 0; i < cssRules.length; i++) {\n        var selector = cssRules[i].selectorText;\n        if (matches = /\\.l\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          columnCssRulesL[columnIdx] = cssRules[i];\n        } else if (matches = /\\.r\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          columnCssRulesR[columnIdx] = cssRules[i];\n        }\n      }\n    }\n\n    return {\n      \"left\": columnCssRulesL[idx],\n      \"right\": columnCssRulesR[idx]\n    };\n  }\n\n  function removeCssRules() {\n    $style.remove();\n    stylesheet = null;\n  }\n\n  function destroy() {\n    getEditorLock().cancelCurrentEdit();\n\n    trigger(self.onBeforeDestroy, { grid: self });\n\n    var i = plugins.length;\n    while (i--) {\n      unregisterPlugin(plugins[i]);\n    }\n\n    if (options.enableColumnReorder) {\n      $headers.filter(\":ui-sortable\").sortable(\"destroy\");\n    }\n\n    unbindAncestorScrollEvents();\n    $container.off(\".slickgrid\");\n    removeCssRules();\n\n    $canvas.off(\"draginit dragstart dragend drag\");\n    $container.empty().removeClass(uid);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // General\n\n  function trigger(evt, args, e) {\n    e = e || new Slick.EventData();\n    args = args || {};\n    args.grid = self;\n    return evt.notify(args, e, self);\n  }\n\n  function getEditorLock() {\n    return options.editorLock;\n  }\n\n  function getEditController() {\n    return editController;\n  }\n\n  function getColumnIndex(id) {\n    return columnsById[id];\n  }\n\n  function autosizeColumns() {\n    var i,\n        c,\n        widths = [],\n        shrinkLeeway = 0,\n        total = 0,\n        prevTotal,\n        availWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;\n\n    for (i = 0; i < columns.length; i++) {\n      c = columns[i];\n      widths.push(c.width);\n      total += c.width;\n      if (c.resizable) {\n        shrinkLeeway += c.width - Math.max(c.minWidth, absoluteColumnMinWidth);\n      }\n    }\n\n    // shrink\n    prevTotal = total;\n    while (total > availWidth && shrinkLeeway) {\n      var shrinkProportion = (total - availWidth) / shrinkLeeway;\n      for (i = 0; i < columns.length && total > availWidth; i++) {\n        c = columns[i];\n        var width = widths[i];\n        if (!c.resizable || width <= c.minWidth || width <= absoluteColumnMinWidth) {\n          continue;\n        }\n        var absMinWidth = Math.max(c.minWidth, absoluteColumnMinWidth);\n        var shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n        shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n        total -= shrinkSize;\n        shrinkLeeway -= shrinkSize;\n        widths[i] -= shrinkSize;\n      }\n      if (prevTotal <= total) {\n        // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    // grow\n    prevTotal = total;\n    while (total < availWidth) {\n      var growProportion = availWidth / total;\n      for (i = 0; i < columns.length && total < availWidth; i++) {\n        c = columns[i];\n        var currentWidth = widths[i];\n        var growSize;\n\n        if (!c.resizable || c.maxWidth <= currentWidth) {\n          growSize = 0;\n        } else {\n          growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, c.maxWidth - currentWidth || 1000000) || 1;\n        }\n        total += growSize;\n        widths[i] += total <= availWidth ? growSize : 0;\n      }\n      if (prevTotal >= total) {\n        // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    var reRender = false;\n    for (i = 0; i < columns.length; i++) {\n      if (columns[i].rerenderOnResize && columns[i].width != widths[i]) {\n        reRender = true;\n      }\n      columns[i].width = widths[i];\n    }\n\n    applyColumnHeaderWidths();\n    updateCanvasWidth(true);\n    if (reRender) {\n      invalidateAllRows();\n      render();\n    }\n  }\n\n  function applyColumnHeaderWidths() {\n    if (!initialized) {\n      return;\n    }\n    var h;\n\n    for (var i = 0, headers = $headers.children(), ii = columns.length; i < ii; i++) {\n      h = $(headers[i]);\n      if (jQueryNewWidthBehaviour) {\n        if (h.outerWidth() !== columns[i].width) {\n          h.outerWidth(columns[i].width);\n        }\n      } else {\n        if (h.width() !== columns[i].width - headerColumnWidthDiff) {\n          h.width(columns[i].width - headerColumnWidthDiff);\n        }\n      }\n    }\n\n    updateColumnCaches();\n  }\n\n  function applyColumnWidths() {\n    var x = 0,\n        w,\n        rule;\n    for (var i = 0; i < columns.length; i++) {\n      w = columns[i].width;\n\n      rule = getColumnCssRules(i);\n      rule.left.style.left = x + \"px\";\n      rule.right.style.right = canvasWidth - x - w + \"px\";\n\n      x += columns[i].width;\n    }\n  }\n\n  function setSortColumn(columnId, ascending) {\n    setSortColumns([{ columnId: columnId, sortAsc: ascending }]);\n  }\n\n  function setSortColumns(cols) {\n    sortColumns = cols;\n    var numberCols = options.numberedMultiColumnSort && sortColumns.length > 1;\n    var headerColumnEls = $headers.children();\n    headerColumnEls.removeClass(\"slick-header-column-sorted\").find(\".slick-sort-indicator\").removeClass(\"slick-sort-indicator-asc slick-sort-indicator-desc\");\n    headerColumnEls.find(\".slick-sort-indicator-numbered\").text('');\n\n    $.each(sortColumns, function (i, col) {\n      if (col.sortAsc == null) {\n        col.sortAsc = true;\n      }\n      var columnIndex = getColumnIndex(col.columnId);\n      if (columnIndex != null) {\n        headerColumnEls.eq(columnIndex).addClass(\"slick-header-column-sorted\").find(\".slick-sort-indicator\").addClass(col.sortAsc ? \"slick-sort-indicator-asc\" : \"slick-sort-indicator-desc\");\n        if (numberCols) {\n          headerColumnEls.eq(columnIndex).find(\".slick-sort-indicator-numbered\").text(i + 1);\n        }\n      }\n    });\n  }\n\n  function getSortColumns() {\n    return sortColumns;\n  }\n\n  function handleSelectedRangesChanged(e, ranges) {\n    selectedRows = [];\n    var hash = {};\n    for (var i = 0; i < ranges.length; i++) {\n      for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        if (!hash[j]) {\n          // prevent duplicates\n          selectedRows.push(j);\n          hash[j] = {};\n        }\n        for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n          if (canCellBeSelected(j, k)) {\n            hash[j][columns[k].id] = options.selectedCellCssClass;\n          }\n        }\n      }\n    }\n\n    setCellCssStyles(options.selectedCellCssClass, hash);\n\n    trigger(self.onSelectedRowsChanged, { rows: getSelectedRows(), grid: self }, e);\n  }\n\n  function getColumns() {\n    return columns;\n  }\n\n  function updateColumnCaches() {\n    // Pre-calculate cell boundaries.\n    columnPosLeft = [];\n    columnPosRight = [];\n    var x = 0;\n    for (var i = 0, ii = columns.length; i < ii; i++) {\n      columnPosLeft[i] = x;\n      columnPosRight[i] = x + columns[i].width;\n      x += columns[i].width;\n    }\n  }\n\n  function setColumns(columnDefinitions) {\n    columns = columnDefinitions;\n\n    columnsById = {};\n    for (var i = 0; i < columns.length; i++) {\n      var m = columns[i] = $.extend({}, columnDefaults, columns[i]);\n      columnsById[m.id] = i;\n      if (m.minWidth && m.width < m.minWidth) {\n        m.width = m.minWidth;\n      }\n      if (m.maxWidth && m.width > m.maxWidth) {\n        m.width = m.maxWidth;\n      }\n    }\n\n    updateColumnCaches();\n\n    if (initialized) {\n      invalidateAllRows();\n      createColumnHeaders();\n      removeCssRules();\n      createCssRules();\n      resizeCanvas();\n      applyColumnWidths();\n      handleScroll();\n    }\n  }\n\n  function getOptions() {\n    return options;\n  }\n\n  function setOptions(args, suppressRender) {\n    if (!getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    makeActiveCellNormal();\n\n    if (options.enableAddRow !== args.enableAddRow) {\n      invalidateRow(getDataLength());\n    }\n\n    options = $.extend(options, args);\n    validateAndEnforceOptions();\n\n    $viewport.css(\"overflow-y\", options.autoHeight ? \"hidden\" : \"auto\");\n    if (!suppressRender) {\n      render();\n    }\n  }\n\n  function validateAndEnforceOptions() {\n    if (options.autoHeight) {\n      options.leaveSpaceForNewRows = false;\n    }\n  }\n\n  function setData(newData, scrollToTop) {\n    data = newData;\n    invalidateAllRows();\n    updateRowCount();\n    if (scrollToTop) {\n      scrollTo(0);\n    }\n  }\n\n  function getData() {\n    return data;\n  }\n\n  function getDataLength() {\n    if (data.getLength) {\n      return data.getLength();\n    } else {\n      return data.length;\n    }\n  }\n\n  function getDataLengthIncludingAddNew() {\n    return getDataLength() + (!options.enableAddRow ? 0 : !pagingActive || pagingIsLastPage ? 1 : 0);\n  }\n\n  function getDataItem(i) {\n    if (data.getItem) {\n      return data.getItem(i);\n    } else {\n      return data[i];\n    }\n  }\n\n  function getTopPanel() {\n    return $topPanel[0];\n  }\n\n  function setTopPanelVisibility(visible) {\n    if (options.showTopPanel != visible) {\n      options.showTopPanel = visible;\n      if (visible) {\n        $topPanelScroller.slideDown(\"fast\", resizeCanvas);\n      } else {\n        $topPanelScroller.slideUp(\"fast\", resizeCanvas);\n      }\n    }\n  }\n\n  function setHeaderRowVisibility(visible) {\n    if (options.showHeaderRow != visible) {\n      options.showHeaderRow = visible;\n      if (visible) {\n        $headerRowScroller.slideDown(\"fast\", resizeCanvas);\n      } else {\n        $headerRowScroller.slideUp(\"fast\", resizeCanvas);\n      }\n    }\n  }\n\n  function setFooterRowVisibility(visible) {\n    if (options.showFooterRow != visible) {\n      options.showFooterRow = visible;\n      if (visible) {\n        $footerRowScroller.slideDown(\"fast\", resizeCanvas);\n      } else {\n        $footerRowScroller.slideUp(\"fast\", resizeCanvas);\n      }\n    }\n  }\n\n  function setPreHeaderPanelVisibility(visible) {\n    if (options.showPreHeaderPanel != visible) {\n      options.showPreHeaderPanel = visible;\n      if (visible) {\n        $preHeaderPanelScroller.slideDown(\"fast\", resizeCanvas);\n      } else {\n        $preHeaderPanelScroller.slideUp(\"fast\", resizeCanvas);\n      }\n    }\n  }\n\n  function getContainerNode() {\n    return $container.get(0);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Rendering / Scrolling\n\n  function getRowTop(row) {\n    return options.rowHeight * row - offset;\n  }\n\n  function getRowFromPosition(y) {\n    return Math.floor((y + offset) / options.rowHeight);\n  }\n\n  function scrollTo(y) {\n    y = Math.max(y, 0);\n    y = Math.min(y, th - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0));\n\n    var oldOffset = offset;\n\n    page = Math.min(n - 1, Math.floor(y / ph));\n    offset = Math.round(page * cj);\n    var newScrollTop = y - offset;\n\n    if (offset != oldOffset) {\n      var range = getVisibleRange(newScrollTop);\n      cleanupRows(range);\n      updateRowPositions();\n    }\n\n    if (prevScrollTop != newScrollTop) {\n      vScrollDir = prevScrollTop + oldOffset < newScrollTop + offset ? 1 : -1;\n      $viewport[0].scrollTop = lastRenderedScrollTop = scrollTop = prevScrollTop = newScrollTop;\n\n      trigger(self.onViewportChanged, { grid: self });\n    }\n  }\n\n  function defaultFormatter(row, cell, value, columnDef, dataContext, grid) {\n    if (value == null) {\n      return \"\";\n    } else {\n      return (value + \"\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    }\n  }\n\n  function getFormatter(row, column) {\n    var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n\n    // look up by id, then index\n    var columnOverrides = rowMetadata && rowMetadata.columns && (rowMetadata.columns[column.id] || rowMetadata.columns[getColumnIndex(column.id)]);\n\n    return columnOverrides && columnOverrides.formatter || rowMetadata && rowMetadata.formatter || column.formatter || options.formatterFactory && options.formatterFactory.getFormatter(column) || options.defaultFormatter;\n  }\n\n  function getEditor(row, cell) {\n    var column = columns[cell];\n    var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n    var columnMetadata = rowMetadata && rowMetadata.columns;\n\n    if (columnMetadata && columnMetadata[column.id] && columnMetadata[column.id].editor !== undefined) {\n      return columnMetadata[column.id].editor;\n    }\n    if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].editor !== undefined) {\n      return columnMetadata[cell].editor;\n    }\n\n    return column.editor || options.editorFactory && options.editorFactory.getEditor(column);\n  }\n\n  function getDataItemValueForColumn(item, columnDef) {\n    if (options.dataItemColumnValueExtractor) {\n      return options.dataItemColumnValueExtractor(item, columnDef);\n    }\n    return item[columnDef.field];\n  }\n\n  function appendRowHtml(stringArray, row, range, dataLength) {\n    var d = getDataItem(row);\n    var dataLoading = row < dataLength && !d;\n    var rowCss = \"slick-row\" + (dataLoading ? \" loading\" : \"\") + (row === activeRow && options.showCellSelection ? \" active\" : \"\") + (row % 2 == 1 ? \" odd\" : \" even\");\n\n    if (!d) {\n      rowCss += \" \" + options.addNewRowCssClass;\n    }\n\n    var metadata = data.getItemMetadata && data.getItemMetadata(row);\n\n    if (metadata && metadata.cssClasses) {\n      rowCss += \" \" + metadata.cssClasses;\n    }\n\n    stringArray.push(\"<div class='ui-widget-content \" + rowCss + \"' style='top:\" + getRowTop(row) + \"px'>\");\n\n    var colspan, m;\n    for (var i = 0, ii = columns.length; i < ii; i++) {\n      m = columns[i];\n      colspan = 1;\n      if (metadata && metadata.columns) {\n        var columnData = metadata.columns[m.id] || metadata.columns[i];\n        colspan = columnData && columnData.colspan || 1;\n        if (colspan === \"*\") {\n          colspan = ii - i;\n        }\n      }\n\n      // Do not render cells outside of the viewport.\n      if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n        if (columnPosLeft[i] > range.rightPx) {\n          // All columns to the right are outside the range.\n          break;\n        }\n\n        appendCellHtml(stringArray, row, i, colspan, d);\n      }\n\n      if (colspan > 1) {\n        i += colspan - 1;\n      }\n    }\n\n    stringArray.push(\"</div>\");\n  }\n\n  function appendCellHtml(stringArray, row, cell, colspan, item) {\n    // stringArray: stringBuilder containing the HTML parts\n    // row, cell: row and column index\n    // colspan: HTML colspan\n    // item: grid data for row\n\n    var m = columns[cell];\n    var cellCss = \"slick-cell l\" + cell + \" r\" + Math.min(columns.length - 1, cell + colspan - 1) + (m.cssClass ? \" \" + m.cssClass : \"\");\n    if (row === activeRow && cell === activeCell && options.showCellSelection) {\n      cellCss += \" active\";\n    }\n\n    // TODO:  merge them together in the setter\n    for (var key in cellCssClasses) {\n      if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {\n        cellCss += \" \" + cellCssClasses[key][row][m.id];\n      }\n    }\n\n    var value = null,\n        formatterResult = '';\n    if (item) {\n      value = getDataItemValueForColumn(item, m);\n      formatterResult = getFormatter(row, m)(row, cell, value, m, item, self);\n      if (formatterResult === null || formatterResult === undefined) {\n        formatterResult = '';\n      }\n    }\n\n    // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\n    var addlCssClasses = trigger(self.onBeforeAppendCell, { row: row, cell: cell, grid: self, value: value, dataContext: item }) || '';\n    addlCssClasses += formatterResult && formatterResult.addClasses ? (addlCssClasses ? ' ' : '') + formatterResult.addClasses : '';\n\n    stringArray.push(\"<div class='\" + cellCss + (addlCssClasses ? ' ' + addlCssClasses : '') + \"'>\");\n\n    // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n    if (item) {\n      stringArray.push(Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : formatterResult.text);\n    }\n\n    stringArray.push(\"</div>\");\n\n    rowsCache[row].cellRenderQueue.push(cell);\n    rowsCache[row].cellColSpans[cell] = colspan;\n  }\n\n  function cleanupRows(rangeToKeep) {\n    for (var i in rowsCache) {\n      if ((i = parseInt(i, 10)) !== activeRow && (i < rangeToKeep.top || i > rangeToKeep.bottom)) {\n        removeRowFromCache(i);\n      }\n    }\n    if (options.enableAsyncPostRenderCleanup) {\n      startPostProcessingCleanup();\n    }\n  }\n\n  function invalidate() {\n    updateRowCount();\n    invalidateAllRows();\n    render();\n  }\n\n  function invalidateAllRows() {\n    if (currentEditor) {\n      makeActiveCellNormal();\n    }\n    for (var row in rowsCache) {\n      removeRowFromCache(row);\n    }\n    if (options.enableAsyncPostRenderCleanup) {\n      startPostProcessingCleanup();\n    }\n  }\n\n  function queuePostProcessedRowForCleanup(cacheEntry, postProcessedRow, rowIdx) {\n    postProcessgroupId++;\n\n    // store and detach node for later async cleanup\n    for (var columnIdx in postProcessedRow) {\n      if (postProcessedRow.hasOwnProperty(columnIdx)) {\n        postProcessedCleanupQueue.push({\n          actionType: 'C',\n          groupId: postProcessgroupId,\n          node: cacheEntry.cellNodesByColumnIdx[columnIdx | 0],\n          columnIdx: columnIdx | 0,\n          rowIdx: rowIdx\n        });\n      }\n    }\n    postProcessedCleanupQueue.push({\n      actionType: 'R',\n      groupId: postProcessgroupId,\n      node: cacheEntry.rowNode\n    });\n    $(cacheEntry.rowNode).detach();\n  }\n\n  function queuePostProcessedCellForCleanup(cellnode, columnIdx, rowIdx) {\n    postProcessedCleanupQueue.push({\n      actionType: 'C',\n      groupId: postProcessgroupId,\n      node: cellnode,\n      columnIdx: columnIdx,\n      rowIdx: rowIdx\n    });\n    $(cellnode).detach();\n  }\n\n  function removeRowFromCache(row) {\n    var cacheEntry = rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    if (cacheEntry.rowNode) {\n      if (rowNodeFromLastMouseWheelEvent === cacheEntry.rowNode) {\n        cacheEntry.rowNode.style.display = 'none';\n        zombieRowNodeFromLastMouseWheelEvent = rowNodeFromLastMouseWheelEvent;\n        zombieRowCacheFromLastMouseWheelEvent = cacheEntry;\n        zombieRowPostProcessedFromLastMouseWheelEvent = postProcessedRows[row];\n        // ignore post processing cleanup in this case - it will be dealt with later\n      } else {\n        if (options.enableAsyncPostRenderCleanup && postProcessedRows[row]) {\n          queuePostProcessedRowForCleanup(cacheEntry, postProcessedRows[row], row);\n        } else {\n          $canvas[0].removeChild(cacheEntry.rowNode);\n        }\n      }\n    }\n\n    delete rowsCache[row];\n    delete postProcessedRows[row];\n    renderedRows--;\n    counter_rows_removed++;\n  }\n\n  function invalidateRows(rows) {\n    var i, rl;\n    if (!rows || !rows.length) {\n      return;\n    }\n    vScrollDir = 0;\n    rl = rows.length;\n    for (i = 0; i < rl; i++) {\n      if (currentEditor && activeRow === rows[i]) {\n        makeActiveCellNormal();\n      }\n      if (rowsCache[rows[i]]) {\n        removeRowFromCache(rows[i]);\n      }\n    }\n    if (options.enableAsyncPostRenderCleanup) {\n      startPostProcessingCleanup();\n    }\n  }\n\n  function invalidateRow(row) {\n    if (!row && row !== 0) {\n      return;\n    }\n    invalidateRows([row]);\n  }\n\n  function applyFormatResultToCellNode(formatterResult, cellNode, suppressRemove) {\n    if (formatterResult === null || formatterResult === undefined) {\n      formatterResult = '';\n    }\n    if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\n      cellNode.innerHTML = formatterResult;\n      return;\n    }\n    cellNode.innerHTML = formatterResult.text;\n    if (formatterResult.removeClasses && !suppressRemove) {\n      $(cellNode).removeClass(formatterResult.removeClasses);\n    }\n    if (formatterResult.addClasses) {\n      $(cellNode).addClass(formatterResult.addClasses);\n    }\n  }\n\n  function updateCell(row, cell) {\n    var cellNode = getCellNode(row, cell);\n    if (!cellNode) {\n      return;\n    }\n\n    var m = columns[cell],\n        d = getDataItem(row);\n    if (currentEditor && activeRow === row && activeCell === cell) {\n      currentEditor.loadValue(d);\n    } else {\n      var formatterResult = d ? getFormatter(row, m)(row, cell, getDataItemValueForColumn(d, m), m, d, self) : \"\";\n      applyFormatResultToCellNode(formatterResult, cellNode);\n      invalidatePostProcessingResults(row);\n    }\n  }\n\n  function updateRow(row) {\n    var cacheEntry = rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    ensureCellNodesInRowsCache(row);\n\n    var formatterResult,\n        d = getDataItem(row);\n\n    for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {\n        continue;\n      }\n\n      columnIdx = columnIdx | 0;\n      var m = columns[columnIdx],\n          node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n\n      if (row === activeRow && columnIdx === activeCell && currentEditor) {\n        currentEditor.loadValue(d);\n      } else if (d) {\n        formatterResult = getFormatter(row, m)(row, columnIdx, getDataItemValueForColumn(d, m), m, d, self);\n        applyFormatResultToCellNode(formatterResult, node);\n      } else {\n        node.innerHTML = \"\";\n      }\n    }\n\n    invalidatePostProcessingResults(row);\n  }\n\n  function getViewportHeight() {\n    return parseFloat($.css($container[0], \"height\", true)) - parseFloat($.css($container[0], \"paddingTop\", true)) - parseFloat($.css($container[0], \"paddingBottom\", true)) - parseFloat($.css($headerScroller[0], \"height\")) - getVBoxDelta($headerScroller) - (options.showTopPanel ? options.topPanelHeight + getVBoxDelta($topPanelScroller) : 0) - (options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0) - (options.createFooterRow && options.showFooterRow ? options.footerRowHeight + getVBoxDelta($footerRowScroller) : 0) - (options.createPreHeaderPanel && options.showPreHeaderPanel ? options.preHeaderPanelHeight + getVBoxDelta($preHeaderPanelScroller) : 0);\n  }\n\n  function resizeCanvas() {\n    if (!initialized) {\n      return;\n    }\n    if (options.autoHeight) {\n      viewportH = options.rowHeight * getDataLengthIncludingAddNew();\n    } else {\n      viewportH = getViewportHeight();\n    }\n\n    numVisibleRows = Math.ceil(viewportH / options.rowHeight);\n    viewportW = parseFloat($.css($container[0], \"width\", true));\n    if (!options.autoHeight) {\n      $viewport.height(viewportH);\n    }\n\n    if (!scrollbarDimensions || !scrollbarDimensions.width) {\n      scrollbarDimensions = measureScrollbar();\n    }\n\n    if (options.forceFitColumns) {\n      autosizeColumns();\n    }\n\n    updateRowCount();\n    handleScroll();\n    // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n    lastRenderedScrollLeft = -1;\n    render();\n  }\n\n  function updatePagingStatusFromView(pagingInfo) {\n    pagingActive = pagingInfo.pageSize !== 0;\n    pagingIsLastPage = pagingInfo.pageNum == pagingInfo.totalPages - 1;\n  }\n\n  function updateRowCount() {\n    if (!initialized) {\n      return;\n    }\n\n    var dataLength = getDataLength();\n    var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\n    var numberOfRows = dataLengthIncludingAddNew + (options.leaveSpaceForNewRows ? numVisibleRows - 1 : 0);\n\n    var oldViewportHasVScroll = viewportHasVScroll;\n    // with autoHeight, we do not need to accommodate the vertical scroll bar\n    viewportHasVScroll = options.alwaysShowVerticalScroll || !options.autoHeight && numberOfRows * options.rowHeight > viewportH;\n    viewportHasHScroll = canvasWidth > viewportW - scrollbarDimensions.width;\n\n    makeActiveCellNormal();\n\n    // remove the rows that are now outside of the data range\n    // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n    var r1 = dataLength - 1;\n    for (var i in rowsCache) {\n      if (i > r1) {\n        removeRowFromCache(i);\n      }\n    }\n    if (options.enableAsyncPostRenderCleanup) {\n      startPostProcessingCleanup();\n    }\n\n    if (activeCellNode && activeRow > r1) {\n      resetActiveCell();\n    }\n\n    var oldH = h;\n    th = Math.max(options.rowHeight * numberOfRows, viewportH - scrollbarDimensions.height);\n    if (th < maxSupportedCssHeight) {\n      // just one page\n      h = ph = th;\n      n = 1;\n      cj = 0;\n    } else {\n      // break into pages\n      h = maxSupportedCssHeight;\n      ph = h / 100;\n      n = Math.floor(th / ph);\n      cj = (th - h) / (n - 1);\n    }\n\n    if (h !== oldH) {\n      $canvas.css(\"height\", h);\n      scrollTop = $viewport[0].scrollTop;\n    }\n\n    var oldScrollTopInRange = scrollTop + offset <= th - viewportH;\n\n    if (th == 0 || scrollTop == 0) {\n      page = offset = 0;\n    } else if (oldScrollTopInRange) {\n      // maintain virtual position\n      scrollTo(scrollTop + offset);\n    } else {\n      // scroll to bottom\n      scrollTo(th - viewportH);\n    }\n\n    if (h != oldH && options.autoHeight) {\n      resizeCanvas();\n    }\n\n    if (options.forceFitColumns && oldViewportHasVScroll != viewportHasVScroll) {\n      autosizeColumns();\n    }\n    updateCanvasWidth(false);\n  }\n\n  function getVisibleRange(viewportTop, viewportLeft) {\n    if (viewportTop == null) {\n      viewportTop = scrollTop;\n    }\n    if (viewportLeft == null) {\n      viewportLeft = scrollLeft;\n    }\n\n    return {\n      top: getRowFromPosition(viewportTop),\n      bottom: getRowFromPosition(viewportTop + viewportH) + 1,\n      leftPx: viewportLeft,\n      rightPx: viewportLeft + viewportW\n    };\n  }\n\n  function getRenderedRange(viewportTop, viewportLeft) {\n    var range = getVisibleRange(viewportTop, viewportLeft);\n    var buffer = Math.round(viewportH / options.rowHeight);\n    var minBuffer = options.minRowBuffer;\n\n    if (vScrollDir == -1) {\n      range.top -= buffer;\n      range.bottom += minBuffer;\n    } else if (vScrollDir == 1) {\n      range.top -= minBuffer;\n      range.bottom += buffer;\n    } else {\n      range.top -= minBuffer;\n      range.bottom += minBuffer;\n    }\n\n    range.top = Math.max(0, range.top);\n    range.bottom = Math.min(getDataLengthIncludingAddNew() - 1, range.bottom);\n\n    range.leftPx -= viewportW;\n    range.rightPx += viewportW;\n\n    range.leftPx = Math.max(0, range.leftPx);\n    range.rightPx = Math.min(canvasWidth, range.rightPx);\n\n    return range;\n  }\n\n  function ensureCellNodesInRowsCache(row) {\n    var cacheEntry = rowsCache[row];\n    if (cacheEntry) {\n      if (cacheEntry.cellRenderQueue.length) {\n        var lastChild = cacheEntry.rowNode.lastChild;\n        while (cacheEntry.cellRenderQueue.length) {\n          var columnIdx = cacheEntry.cellRenderQueue.pop();\n          cacheEntry.cellNodesByColumnIdx[columnIdx] = lastChild;\n          lastChild = lastChild.previousSibling;\n        }\n      }\n    }\n  }\n\n  function cleanUpCells(range, row) {\n    var totalCellsRemoved = 0;\n    var cacheEntry = rowsCache[row];\n\n    // Remove cells outside the range.\n    var cellsToRemove = [];\n    for (var i in cacheEntry.cellNodesByColumnIdx) {\n      // I really hate it when people mess with Array.prototype.\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(i)) {\n        continue;\n      }\n\n      // This is a string, so it needs to be cast back to a number.\n      i = i | 0;\n\n      var colspan = cacheEntry.cellColSpans[i];\n      if (columnPosLeft[i] > range.rightPx || columnPosRight[Math.min(columns.length - 1, i + colspan - 1)] < range.leftPx) {\n        if (!(row == activeRow && i == activeCell)) {\n          cellsToRemove.push(i);\n        }\n      }\n    }\n\n    var cellToRemove, node;\n    postProcessgroupId++;\n    while ((cellToRemove = cellsToRemove.pop()) != null) {\n      node = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n      if (options.enableAsyncPostRenderCleanup && postProcessedRows[row] && postProcessedRows[row][cellToRemove]) {\n        queuePostProcessedCellForCleanup(node, cellToRemove, row);\n      } else {\n        cacheEntry.rowNode.removeChild(node);\n      }\n\n      delete cacheEntry.cellColSpans[cellToRemove];\n      delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n      if (postProcessedRows[row]) {\n        delete postProcessedRows[row][cellToRemove];\n      }\n      totalCellsRemoved++;\n    }\n  }\n\n  function cleanUpAndRenderCells(range) {\n    var cacheEntry;\n    var stringArray = [];\n    var processedRows = [];\n    var cellsAdded;\n    var totalCellsAdded = 0;\n    var colspan;\n\n    for (var row = range.top, btm = range.bottom; row <= btm; row++) {\n      cacheEntry = rowsCache[row];\n      if (!cacheEntry) {\n        continue;\n      }\n\n      // cellRenderQueue populated in renderRows() needs to be cleared first\n      ensureCellNodesInRowsCache(row);\n\n      cleanUpCells(range, row);\n\n      // Render missing cells.\n      cellsAdded = 0;\n\n      var metadata = data.getItemMetadata && data.getItemMetadata(row);\n      metadata = metadata && metadata.columns;\n\n      var d = getDataItem(row);\n\n      // TODO:  shorten this loop (index? heuristics? binary search?)\n      for (var i = 0, ii = columns.length; i < ii; i++) {\n        // Cells to the right are outside the range.\n        if (columnPosLeft[i] > range.rightPx) {\n          break;\n        }\n\n        // Already rendered.\n        if ((colspan = cacheEntry.cellColSpans[i]) != null) {\n          i += colspan > 1 ? colspan - 1 : 0;\n          continue;\n        }\n\n        colspan = 1;\n        if (metadata) {\n          var columnData = metadata[columns[i].id] || metadata[i];\n          colspan = columnData && columnData.colspan || 1;\n          if (colspan === \"*\") {\n            colspan = ii - i;\n          }\n        }\n\n        if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n          appendCellHtml(stringArray, row, i, colspan, d);\n          cellsAdded++;\n        }\n\n        i += colspan > 1 ? colspan - 1 : 0;\n      }\n\n      if (cellsAdded) {\n        totalCellsAdded += cellsAdded;\n        processedRows.push(row);\n      }\n    }\n\n    if (!stringArray.length) {\n      return;\n    }\n\n    var x = document.createElement(\"div\");\n    x.innerHTML = stringArray.join(\"\");\n\n    var processedRow;\n    var node;\n    while ((processedRow = processedRows.pop()) != null) {\n      cacheEntry = rowsCache[processedRow];\n      var columnIdx;\n      while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\n        node = x.lastChild;\n        cacheEntry.rowNode.appendChild(node);\n        cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\n      }\n    }\n  }\n\n  function renderRows(range) {\n    var parentNode = $canvas[0],\n        stringArray = [],\n        rows = [],\n        needToReselectCell = false,\n        dataLength = getDataLength();\n\n    for (var i = range.top, ii = range.bottom; i <= ii; i++) {\n      if (rowsCache[i]) {\n        continue;\n      }\n      renderedRows++;\n      rows.push(i);\n\n      // Create an entry right away so that appendRowHtml() can\n      // start populatating it.\n      rowsCache[i] = {\n        \"rowNode\": null,\n\n        // ColSpans of rendered cells (by column idx).\n        // Can also be used for checking whether a cell has been rendered.\n        \"cellColSpans\": [],\n\n        // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n        \"cellNodesByColumnIdx\": [],\n\n        // Column indices of cell nodes that have been rendered, but not yet indexed in\n        // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n        // end of the row.\n        \"cellRenderQueue\": []\n      };\n\n      appendRowHtml(stringArray, i, range, dataLength);\n      if (activeCellNode && activeRow === i) {\n        needToReselectCell = true;\n      }\n      counter_rows_rendered++;\n    }\n\n    if (!rows.length) {\n      return;\n    }\n\n    var x = document.createElement(\"div\");\n    x.innerHTML = stringArray.join(\"\");\n\n    for (var i = 0, ii = rows.length; i < ii; i++) {\n      rowsCache[rows[i]].rowNode = parentNode.appendChild(x.firstChild);\n    }\n\n    if (needToReselectCell) {\n      activeCellNode = getCellNode(activeRow, activeCell);\n    }\n  }\n\n  function startPostProcessing() {\n    if (!options.enableAsyncPostRender) {\n      return;\n    }\n    clearTimeout(h_postrender);\n    h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\n  }\n\n  function startPostProcessingCleanup() {\n    if (!options.enableAsyncPostRenderCleanup) {\n      return;\n    }\n    clearTimeout(h_postrenderCleanup);\n    h_postrenderCleanup = setTimeout(asyncPostProcessCleanupRows, options.asyncPostRenderCleanupDelay);\n  }\n\n  function invalidatePostProcessingResults(row) {\n    // change status of columns to be re-rendered\n    for (var columnIdx in postProcessedRows[row]) {\n      if (postProcessedRows[row].hasOwnProperty(columnIdx)) {\n        postProcessedRows[row][columnIdx] = 'C';\n      }\n    }\n    postProcessFromRow = Math.min(postProcessFromRow, row);\n    postProcessToRow = Math.max(postProcessToRow, row);\n    startPostProcessing();\n  }\n\n  function updateRowPositions() {\n    for (var row in rowsCache) {\n      rowsCache[row].rowNode.style.top = getRowTop(row) + \"px\";\n    }\n  }\n\n  function render() {\n    if (!initialized) {\n      return;\n    }\n    var visible = getVisibleRange();\n    var rendered = getRenderedRange();\n\n    // remove rows no longer in the viewport\n    cleanupRows(rendered);\n\n    // add new rows & missing cells in existing rows\n    if (lastRenderedScrollLeft != scrollLeft) {\n      cleanUpAndRenderCells(rendered);\n    }\n\n    // render missing rows\n    renderRows(rendered);\n\n    postProcessFromRow = visible.top;\n    postProcessToRow = Math.min(getDataLengthIncludingAddNew() - 1, visible.bottom);\n    startPostProcessing();\n\n    lastRenderedScrollTop = scrollTop;\n    lastRenderedScrollLeft = scrollLeft;\n    h_render = null;\n  }\n\n  function handleHeaderScroll() {\n    handleElementScroll($headerScroller[0]);\n  }\n\n  function handleHeaderRowScroll() {\n    handleElementScroll($headerRowScroller[0]);\n  }\n\n  function handleFooterRowScroll() {\n    handleElementScroll($footerRowScroller[0]);\n  }\n\n  function handlePreHeaderPanelScroll() {\n    handleElementScroll($preHeaderPanelScroller[0]);\n  }\n\n  function handleElementScroll(element) {\n    var scrollLeft = element.scrollLeft;\n    if (scrollLeft != $viewport[0].scrollLeft) {\n      $viewport[0].scrollLeft = scrollLeft;\n    }\n  }\n\n  function handleScroll() {\n    scrollTop = $viewport[0].scrollTop;\n    scrollLeft = $viewport[0].scrollLeft;\n    var vScrollDist = Math.abs(scrollTop - prevScrollTop);\n    var hScrollDist = Math.abs(scrollLeft - prevScrollLeft);\n\n    if (hScrollDist) {\n      prevScrollLeft = scrollLeft;\n      $headerScroller[0].scrollLeft = scrollLeft;\n      $topPanelScroller[0].scrollLeft = scrollLeft;\n      $headerRowScroller[0].scrollLeft = scrollLeft;\n      if (options.createFooterRow) {\n        $footerRowScroller[0].scrollLeft = scrollLeft;\n      }\n      if (options.createPreHeaderPanel) {\n        $preHeaderPanelScroller[0].scrollLeft = scrollLeft;\n      }\n    }\n\n    if (vScrollDist) {\n      vScrollDir = prevScrollTop < scrollTop ? 1 : -1;\n      prevScrollTop = scrollTop;\n\n      // switch virtual pages if needed\n      if (vScrollDist < viewportH) {\n        scrollTo(scrollTop + offset);\n      } else {\n        var oldOffset = offset;\n        if (h == viewportH) {\n          page = 0;\n        } else {\n          page = Math.min(n - 1, Math.floor(scrollTop * ((th - viewportH) / (h - viewportH)) * (1 / ph)));\n        }\n        offset = Math.round(page * cj);\n        if (oldOffset != offset) {\n          invalidateAllRows();\n        }\n      }\n    }\n\n    if (hScrollDist || vScrollDist) {\n      if (h_render) {\n        clearTimeout(h_render);\n      }\n\n      if (Math.abs(lastRenderedScrollTop - scrollTop) > 20 || Math.abs(lastRenderedScrollLeft - scrollLeft) > 20) {\n        if (options.forceSyncScrolling || Math.abs(lastRenderedScrollTop - scrollTop) < viewportH && Math.abs(lastRenderedScrollLeft - scrollLeft) < viewportW) {\n          render();\n        } else {\n          h_render = setTimeout(render, 50);\n        }\n\n        trigger(self.onViewportChanged, { grid: self });\n      }\n    }\n\n    trigger(self.onScroll, { scrollLeft: scrollLeft, scrollTop: scrollTop, grid: self });\n  }\n\n  function asyncPostProcessRows() {\n    var dataLength = getDataLength();\n    while (postProcessFromRow <= postProcessToRow) {\n      var row = vScrollDir >= 0 ? postProcessFromRow++ : postProcessToRow--;\n      var cacheEntry = rowsCache[row];\n      if (!cacheEntry || row >= dataLength) {\n        continue;\n      }\n\n      if (!postProcessedRows[row]) {\n        postProcessedRows[row] = {};\n      }\n\n      ensureCellNodesInRowsCache(row);\n      for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {\n        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {\n          continue;\n        }\n\n        columnIdx = columnIdx | 0;\n\n        var m = columns[columnIdx];\n        var processedStatus = postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\n        if (m.asyncPostRender && processedStatus !== 'R') {\n          var node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n          if (node) {\n            m.asyncPostRender(node, row, getDataItem(row), m, processedStatus === 'C');\n          }\n          postProcessedRows[row][columnIdx] = 'R';\n        }\n      }\n\n      h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\n      return;\n    }\n  }\n\n  function asyncPostProcessCleanupRows() {\n    if (postProcessedCleanupQueue.length > 0) {\n      var groupId = postProcessedCleanupQueue[0].groupId;\n\n      // loop through all queue members with this groupID\n      while (postProcessedCleanupQueue.length > 0 && postProcessedCleanupQueue[0].groupId == groupId) {\n        var entry = postProcessedCleanupQueue.shift();\n        if (entry.actionType == 'R') {\n          $(entry.node).remove();\n        }\n        if (entry.actionType == 'C') {\n          var column = columns[entry.columnIdx];\n          if (column.asyncPostRenderCleanup && entry.node) {\n            // cleanup must also remove element\n            column.asyncPostRenderCleanup(entry.node, entry.rowIdx, column);\n          }\n        }\n      }\n\n      // call this function again after the specified delay\n      h_postrenderCleanup = setTimeout(asyncPostProcessCleanupRows, options.asyncPostRenderCleanupDelay);\n    }\n  }\n\n  function updateCellCssStylesOnRenderedRows(addedHash, removedHash) {\n    var node, columnId, addedRowHash, removedRowHash;\n    for (var row in rowsCache) {\n      removedRowHash = removedHash && removedHash[row];\n      addedRowHash = addedHash && addedHash[row];\n\n      if (removedRowHash) {\n        for (columnId in removedRowHash) {\n          if (!addedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\n            node = getCellNode(row, getColumnIndex(columnId));\n            if (node) {\n              $(node).removeClass(removedRowHash[columnId]);\n            }\n          }\n        }\n      }\n\n      if (addedRowHash) {\n        for (columnId in addedRowHash) {\n          if (!removedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\n            node = getCellNode(row, getColumnIndex(columnId));\n            if (node) {\n              $(node).addClass(addedRowHash[columnId]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function addCellCssStyles(key, hash) {\n    if (cellCssClasses[key]) {\n      throw new Error(\"addCellCssStyles: cell CSS hash with key '\" + key + \"' already exists.\");\n    }\n\n    cellCssClasses[key] = hash;\n    updateCellCssStylesOnRenderedRows(hash, null);\n\n    trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": hash, \"grid\": self });\n  }\n\n  function removeCellCssStyles(key) {\n    if (!cellCssClasses[key]) {\n      return;\n    }\n\n    updateCellCssStylesOnRenderedRows(null, cellCssClasses[key]);\n    delete cellCssClasses[key];\n\n    trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": null, \"grid\": self });\n  }\n\n  function setCellCssStyles(key, hash) {\n    var prevHash = cellCssClasses[key];\n\n    cellCssClasses[key] = hash;\n    updateCellCssStylesOnRenderedRows(hash, prevHash);\n\n    trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": hash, \"grid\": self });\n  }\n\n  function getCellCssStyles(key) {\n    return cellCssClasses[key];\n  }\n\n  function flashCell(row, cell, speed) {\n    speed = speed || 100;\n    if (rowsCache[row]) {\n      var toggleCellClass = function toggleCellClass(times) {\n        if (!times) {\n          return;\n        }\n        setTimeout(function () {\n          $cell.queue(function () {\n            $cell.toggleClass(options.cellFlashingCssClass).dequeue();\n            toggleCellClass(times - 1);\n          });\n        }, speed);\n      };\n\n      var $cell = $(getCellNode(row, cell));\n\n      toggleCellClass(4);\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Interactivity\n\n  function handleMouseWheel(e) {\n    var rowNode = $(e.target).closest(\".slick-row\")[0];\n    if (rowNode != rowNodeFromLastMouseWheelEvent) {\n      if (zombieRowNodeFromLastMouseWheelEvent && zombieRowNodeFromLastMouseWheelEvent != rowNode) {\n        if (options.enableAsyncPostRenderCleanup && zombieRowPostProcessedFromLastMouseWheelEvent) {\n          queuePostProcessedRowForCleanup(zombieRowCacheFromLastMouseWheelEvent, zombieRowPostProcessedFromLastMouseWheelEvent);\n        } else {\n          $canvas[0].removeChild(zombieRowNodeFromLastMouseWheelEvent);\n        }\n        zombieRowNodeFromLastMouseWheelEvent = null;\n        zombieRowCacheFromLastMouseWheelEvent = null;\n        zombieRowPostProcessedFromLastMouseWheelEvent = null;\n\n        if (options.enableAsyncPostRenderCleanup) {\n          startPostProcessingCleanup();\n        }\n      }\n      rowNodeFromLastMouseWheelEvent = rowNode;\n    }\n  }\n\n  function handleDragInit(e, dd) {\n    var cell = getCellFromEvent(e);\n    if (!cell || !cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    var retval = trigger(self.onDragInit, dd, e);\n    if (e.isImmediatePropagationStopped()) {\n      return retval;\n    }\n\n    // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n    // cancel out of it\n    return false;\n  }\n\n  function handleDragStart(e, dd) {\n    var cell = getCellFromEvent(e);\n    if (!cell || !cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    var retval = trigger(self.onDragStart, dd, e);\n    if (e.isImmediatePropagationStopped()) {\n      return retval;\n    }\n\n    return false;\n  }\n\n  function handleDrag(e, dd) {\n    return trigger(self.onDrag, dd, e);\n  }\n\n  function handleDragEnd(e, dd) {\n    trigger(self.onDragEnd, dd, e);\n  }\n\n  function handleKeyDown(e) {\n    trigger(self.onKeyDown, { row: activeRow, cell: activeCell, grid: self }, e);\n    var handled = e.isImmediatePropagationStopped();\n    var keyCode = Slick.keyCode;\n\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey) {\n        if (options.editable && currentEditor && currentEditor.keyCaptureList) {\n          if (currentEditor.keyCaptureList.indexOf(e.which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.HOME) {\n          handled = e.ctrlKey ? navigateTop() : navigateRowStart();\n        } else if (e.which == keyCode.END) {\n          handled = e.ctrlKey ? navigateBottom() : navigateRowEnd();\n        }\n      }\n    }\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n        // editor may specify an array of keys to bubble\n        if (options.editable && currentEditor && currentEditor.keyCaptureList) {\n          if (currentEditor.keyCaptureList.indexOf(e.which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.ESCAPE) {\n          if (!getEditorLock().isActive()) {\n            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n          }\n          cancelEditAndSetFocus();\n        } else if (e.which == keyCode.PAGE_DOWN) {\n          navigatePageDown();\n          handled = true;\n        } else if (e.which == keyCode.PAGE_UP) {\n          navigatePageUp();\n          handled = true;\n        } else if (e.which == keyCode.LEFT) {\n          handled = navigateLeft();\n        } else if (e.which == keyCode.RIGHT) {\n          handled = navigateRight();\n        } else if (e.which == keyCode.UP) {\n          handled = navigateUp();\n        } else if (e.which == keyCode.DOWN) {\n          handled = navigateDown();\n        } else if (e.which == keyCode.TAB) {\n          handled = navigateNext();\n        } else if (e.which == keyCode.ENTER) {\n          if (options.editable) {\n            if (currentEditor) {\n              // adding new row\n              if (activeRow === getDataLength()) {\n                navigateDown();\n              } else {\n                commitEditAndSetFocus();\n              }\n            } else {\n              if (getEditorLock().commitCurrentEdit()) {\n                makeActiveCellEditable();\n              }\n            }\n          }\n          handled = true;\n        }\n      } else if (e.which == keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\n        handled = navigatePrev();\n      }\n    }\n\n    if (handled) {\n      // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n      e.stopPropagation();\n      e.preventDefault();\n      try {\n        e.originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n      }\n      // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n      // (hitting control key only, nothing else), \"Shift\" (maybe others)\n      catch (error) {}\n    }\n  }\n\n  function handleClick(e) {\n    if (!currentEditor) {\n      // if this click resulted in some cell child node getting focus,\n      // don't steal it back - keyboard events will still bubble up\n      // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n      if (e.target != document.activeElement || $(e.target).hasClass(\"slick-cell\")) {\n        setFocus();\n      }\n    }\n\n    var cell = getCellFromEvent(e);\n    if (!cell || currentEditor !== null && activeRow == cell.row && activeCell == cell.cell) {\n      return;\n    }\n\n    trigger(self.onClick, { row: cell.row, cell: cell.cell, grid: self }, e);\n    if (e.isImmediatePropagationStopped()) {\n      return;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if ((activeCell != cell.cell || activeRow != cell.row) && canCellBeActive(cell.row, cell.cell)) {\n    if (canCellBeActive(cell.row, cell.cell)) {\n      if (!getEditorLock().isActive() || getEditorLock().commitCurrentEdit()) {\n        scrollRowIntoView(cell.row, false);\n\n        var preClickModeOn = e.target && e.target.className === Slick.preClickClassName;\n        var column = columns[cell.cell];\n        var suppressActiveCellChangedEvent = options.editable && column && column.editor && options.suppressActiveCellChangeOnEdit ? true : false;\n        setActiveCellInternal(getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent);\n      }\n    }\n  }\n\n  function handleContextMenu(e) {\n    var $cell = $(e.target).closest(\".slick-cell\", $canvas);\n    if ($cell.length === 0) {\n      return;\n    }\n\n    // are we editing this cell?\n    if (activeCellNode === $cell[0] && currentEditor !== null) {\n      return;\n    }\n\n    trigger(self.onContextMenu, { grid: self }, e);\n  }\n\n  function handleDblClick(e) {\n    var cell = getCellFromEvent(e);\n    if (!cell || currentEditor !== null && activeRow == cell.row && activeCell == cell.cell) {\n      return;\n    }\n\n    trigger(self.onDblClick, { row: cell.row, cell: cell.cell, grid: self }, e);\n    if (e.isImmediatePropagationStopped()) {\n      return;\n    }\n\n    if (options.editable) {\n      gotoCell(cell.row, cell.cell, true);\n    }\n  }\n\n  function handleHeaderMouseEnter(e) {\n    trigger(self.onHeaderMouseEnter, {\n      \"column\": $(this).data(\"column\"),\n      \"grid\": self\n    }, e);\n  }\n\n  function handleHeaderMouseLeave(e) {\n    trigger(self.onHeaderMouseLeave, {\n      \"column\": $(this).data(\"column\"),\n      \"grid\": self\n    }, e);\n  }\n\n  function handleHeaderContextMenu(e) {\n    var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\n    var column = $header && $header.data(\"column\");\n    trigger(self.onHeaderContextMenu, { column: column, grid: self }, e);\n  }\n\n  function handleHeaderClick(e) {\n    if (columnResizeDragging) return;\n    var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\n    var column = $header && $header.data(\"column\");\n    if (column) {\n      trigger(self.onHeaderClick, { column: column, grid: self }, e);\n    }\n  }\n\n  function handleMouseEnter(e) {\n    trigger(self.onMouseEnter, { grid: self }, e);\n  }\n\n  function handleMouseLeave(e) {\n    trigger(self.onMouseLeave, { grid: self }, e);\n  }\n\n  function cellExists(row, cell) {\n    return !(row < 0 || row >= getDataLength() || cell < 0 || cell >= columns.length);\n  }\n\n  function getCellFromPoint(x, y) {\n    var row = getRowFromPosition(y);\n    var cell = 0;\n\n    var w = 0;\n    for (var i = 0; i < columns.length && w < x; i++) {\n      w += columns[i].width;\n      cell++;\n    }\n\n    if (cell < 0) {\n      cell = 0;\n    }\n\n    return { row: row, cell: cell - 1 };\n  }\n\n  function getCellFromNode(cellNode) {\n    // read column number from .l<columnNumber> CSS class\n    var cls = /l\\d+/.exec(cellNode.className);\n    if (!cls) {\n      throw new Error(\"getCellFromNode: cannot get cell - \" + cellNode.className);\n    }\n    return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\n  }\n\n  function getRowFromNode(rowNode) {\n    for (var row in rowsCache) {\n      if (rowsCache[row].rowNode === rowNode) {\n        return row | 0;\n      }\n    }\n\n    return null;\n  }\n\n  function getCellFromEvent(e) {\n    var $cell = $(e.target).closest(\".slick-cell\", $canvas);\n    if (!$cell.length) {\n      return null;\n    }\n\n    var row = getRowFromNode($cell[0].parentNode);\n    var cell = getCellFromNode($cell[0]);\n\n    if (row == null || cell == null) {\n      return null;\n    } else {\n      return {\n        \"row\": row,\n        \"cell\": cell\n      };\n    }\n  }\n\n  function getCellNodeBox(row, cell) {\n    if (!cellExists(row, cell)) {\n      return null;\n    }\n\n    var y1 = getRowTop(row);\n    var y2 = y1 + options.rowHeight - 1;\n    var x1 = 0;\n    for (var i = 0; i < cell; i++) {\n      x1 += columns[i].width;\n    }\n    var x2 = x1 + columns[cell].width;\n\n    return {\n      top: y1,\n      left: x1,\n      bottom: y2,\n      right: x2\n    };\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Cell switching\n\n  function resetActiveCell() {\n    setActiveCellInternal(null, false);\n  }\n\n  function setFocus() {\n    if (tabbingDirection == -1) {\n      $focusSink[0].focus();\n    } else {\n      $focusSink2[0].focus();\n    }\n  }\n\n  function scrollCellIntoView(row, cell, doPaging) {\n    scrollRowIntoView(row, doPaging);\n\n    var colspan = getColspan(row, cell);\n    internalScrollColumnIntoView(columnPosLeft[cell], columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n  }\n\n  function internalScrollColumnIntoView(left, right) {\n    var scrollRight = scrollLeft + viewportW;\n\n    if (left < scrollLeft) {\n      $viewport.scrollLeft(left);\n      handleScroll();\n      render();\n    } else if (right > scrollRight) {\n      $viewport.scrollLeft(Math.min(left, right - $viewport[0].clientWidth));\n      handleScroll();\n      render();\n    }\n  }\n\n  function scrollColumnIntoView(cell) {\n    internalScrollColumnIntoView(columnPosLeft[cell], columnPosRight[cell]);\n  }\n\n  function setActiveCellInternal(newCell, opt_editMode, preClickModeOn, suppressActiveCellChangedEvent) {\n    if (activeCellNode !== null) {\n      makeActiveCellNormal();\n      $(activeCellNode).removeClass(\"active\");\n      if (rowsCache[activeRow]) {\n        $(rowsCache[activeRow].rowNode).removeClass(\"active\");\n      }\n    }\n\n    var activeCellChanged = activeCellNode !== newCell;\n    activeCellNode = newCell;\n\n    if (activeCellNode != null) {\n      activeRow = getRowFromNode(activeCellNode.parentNode);\n      activeCell = activePosX = getCellFromNode(activeCellNode);\n\n      if (opt_editMode == null) {\n        opt_editMode = activeRow == getDataLength() || options.autoEdit;\n      }\n\n      if (options.showCellSelection) {\n        $(activeCellNode).addClass(\"active\");\n        $(rowsCache[activeRow].rowNode).addClass(\"active\");\n      }\n\n      if (options.editable && opt_editMode && isCellPotentiallyEditable(activeRow, activeCell)) {\n        clearTimeout(h_editorLoader);\n\n        if (options.asyncEditorLoading) {\n          h_editorLoader = setTimeout(function () {\n            makeActiveCellEditable(undefined, preClickModeOn);\n          }, options.asyncEditorLoadDelay);\n        } else {\n          makeActiveCellEditable(undefined, preClickModeOn);\n        }\n      }\n    } else {\n      activeRow = activeCell = null;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if (activeCellChanged) {\n    if (!suppressActiveCellChangedEvent) {\n      trigger(self.onActiveCellChanged, getActiveCell());\n    }\n    //}\n  }\n\n  function clearTextSelection() {\n    if (document.selection && document.selection.empty) {\n      try {\n        //IE fails here if selected element is not in dom\n        document.selection.empty();\n      } catch (e) {}\n    } else if (window.getSelection) {\n      var sel = window.getSelection();\n      if (sel && sel.removeAllRanges) {\n        sel.removeAllRanges();\n      }\n    }\n  }\n\n  function isCellPotentiallyEditable(row, cell) {\n    var dataLength = getDataLength();\n    // is the data for this row loaded?\n    if (row < dataLength && !getDataItem(row)) {\n      return false;\n    }\n\n    // are we in the Add New row?  can we create new from this cell?\n    if (columns[cell].cannotTriggerInsert && row >= dataLength) {\n      return false;\n    }\n\n    // does this cell have an editor?\n    if (!getEditor(row, cell)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function makeActiveCellNormal() {\n    if (!currentEditor) {\n      return;\n    }\n    trigger(self.onBeforeCellEditorDestroy, { editor: currentEditor, grid: self });\n    currentEditor.destroy();\n    currentEditor = null;\n\n    if (activeCellNode) {\n      var d = getDataItem(activeRow);\n      $(activeCellNode).removeClass(\"editable invalid\");\n      if (d) {\n        var column = columns[activeCell];\n        var formatter = getFormatter(activeRow, column);\n        var formatterResult = formatter(activeRow, activeCell, getDataItemValueForColumn(d, column), column, d, self);\n        applyFormatResultToCellNode(formatterResult, activeCellNode);\n        invalidatePostProcessingResults(activeRow);\n      }\n    }\n\n    // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n    // IE can't set focus to anything else correctly\n    if (navigator.userAgent.toLowerCase().match(/msie/)) {\n      clearTextSelection();\n    }\n\n    getEditorLock().deactivate(editController);\n  }\n\n  function makeActiveCellEditable(editor, preClickModeOn) {\n    if (!activeCellNode) {\n      return;\n    }\n    if (!options.editable) {\n      throw new Error(\"Grid : makeActiveCellEditable : should never get called when options.editable is false\");\n    }\n\n    // cancel pending async call if there is one\n    clearTimeout(h_editorLoader);\n\n    if (!isCellPotentiallyEditable(activeRow, activeCell)) {\n      return;\n    }\n\n    var columnDef = columns[activeCell];\n    var item = getDataItem(activeRow);\n\n    if (trigger(self.onBeforeEditCell, { row: activeRow, cell: activeCell, item: item, column: columnDef, grid: self }) === false) {\n      setFocus();\n      return;\n    }\n\n    getEditorLock().activate(editController);\n    $(activeCellNode).addClass(\"editable\");\n\n    var useEditor = editor || getEditor(activeRow, activeCell);\n\n    // don't clear the cell if a custom editor is passed through\n    if (!editor && !useEditor.suppressClearOnEdit) {\n      activeCellNode.innerHTML = \"\";\n    }\n\n    currentEditor = new useEditor({\n      grid: self,\n      gridPosition: absBox($container[0]),\n      position: absBox(activeCellNode),\n      container: activeCellNode,\n      column: columnDef,\n      item: item || {},\n      commitChanges: commitEditAndSetFocus,\n      cancelChanges: cancelEditAndSetFocus\n    });\n\n    if (item) {\n      currentEditor.loadValue(item);\n      if (preClickModeOn && currentEditor.preClick) {\n        currentEditor.preClick();\n      }\n    }\n\n    serializedEditorValue = currentEditor.serializeValue();\n\n    if (currentEditor.position) {\n      handleActiveCellPositionChange();\n    }\n  }\n\n  function commitEditAndSetFocus() {\n    // if the commit fails, it would do so due to a validation error\n    // if so, do not steal the focus from the editor\n    if (getEditorLock().commitCurrentEdit()) {\n      setFocus();\n      if (options.autoEdit) {\n        navigateDown();\n      }\n    }\n  }\n\n  function cancelEditAndSetFocus() {\n    if (getEditorLock().cancelCurrentEdit()) {\n      setFocus();\n    }\n  }\n\n  function absBox(elem) {\n    var box = {\n      top: elem.offsetTop,\n      left: elem.offsetLeft,\n      bottom: 0,\n      right: 0,\n      width: $(elem).outerWidth(),\n      height: $(elem).outerHeight(),\n      visible: true };\n    box.bottom = box.top + box.height;\n    box.right = box.left + box.width;\n\n    // walk up the tree\n    var offsetParent = elem.offsetParent;\n    while ((elem = elem.parentNode) != document.body) {\n      if (elem == null) break;\n\n      if (box.visible && elem.scrollHeight != elem.offsetHeight && $(elem).css(\"overflowY\") != \"visible\") {\n        box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n      }\n\n      if (box.visible && elem.scrollWidth != elem.offsetWidth && $(elem).css(\"overflowX\") != \"visible\") {\n        box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n      }\n\n      box.left -= elem.scrollLeft;\n      box.top -= elem.scrollTop;\n\n      if (elem === offsetParent) {\n        box.left += elem.offsetLeft;\n        box.top += elem.offsetTop;\n        offsetParent = elem.offsetParent;\n      }\n\n      box.bottom = box.top + box.height;\n      box.right = box.left + box.width;\n    }\n\n    return box;\n  }\n\n  function getActiveCellPosition() {\n    return absBox(activeCellNode);\n  }\n\n  function getGridPosition() {\n    return absBox($container[0]);\n  }\n\n  function handleActiveCellPositionChange() {\n    if (!activeCellNode) {\n      return;\n    }\n\n    trigger(self.onActiveCellPositionChanged, { grid: self });\n\n    if (currentEditor) {\n      var cellBox = getActiveCellPosition();\n      if (currentEditor.show && currentEditor.hide) {\n        if (!cellBox.visible) {\n          currentEditor.hide();\n        } else {\n          currentEditor.show();\n        }\n      }\n\n      if (currentEditor.position) {\n        currentEditor.position(cellBox);\n      }\n    }\n  }\n\n  function getCellEditor() {\n    return currentEditor;\n  }\n\n  function getActiveCell() {\n    if (!activeCellNode) {\n      return null;\n    } else {\n      return { row: activeRow, cell: activeCell, grid: self };\n    }\n  }\n\n  function getActiveCellNode() {\n    return activeCellNode;\n  }\n\n  function scrollRowIntoView(row, doPaging) {\n    var rowAtTop = row * options.rowHeight;\n    var rowAtBottom = (row + 1) * options.rowHeight - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0);\n\n    // need to page down?\n    if ((row + 1) * options.rowHeight > scrollTop + viewportH + offset) {\n      scrollTo(doPaging ? rowAtTop : rowAtBottom);\n      render();\n    }\n    // or page up?\n    else if (row * options.rowHeight < scrollTop + offset) {\n        scrollTo(doPaging ? rowAtBottom : rowAtTop);\n        render();\n      }\n  }\n\n  function scrollRowToTop(row) {\n    scrollTo(row * options.rowHeight);\n    render();\n  }\n\n  function scrollPage(dir) {\n    var deltaRows = dir * numVisibleRows;\n    scrollTo((getRowFromPosition(scrollTop) + deltaRows) * options.rowHeight);\n    render();\n\n    if (options.enableCellNavigation && activeRow != null) {\n      var row = activeRow + deltaRows;\n      var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\n      if (row >= dataLengthIncludingAddNew) {\n        row = dataLengthIncludingAddNew - 1;\n      }\n      if (row < 0) {\n        row = 0;\n      }\n\n      var cell = 0,\n          prevCell = null;\n      var prevActivePosX = activePosX;\n      while (cell <= activePosX) {\n        if (canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        setActiveCellInternal(getCellNode(row, prevCell));\n        activePosX = prevActivePosX;\n      } else {\n        resetActiveCell();\n      }\n    }\n  }\n\n  function navigatePageDown() {\n    scrollPage(1);\n  }\n\n  function navigatePageUp() {\n    scrollPage(-1);\n  }\n\n  function navigateTop() {\n    navigateToRow(0);\n  }\n\n  function navigateBottom() {\n    navigateToRow(getDataLength() - 1);\n  }\n\n  function navigateToRow(row) {\n    var num_rows = getDataLength();\n    if (!num_rows) return true;\n\n    if (row < 0) row = 0;else if (row >= num_rows) row = num_rows - 1;\n\n    scrollCellIntoView(row, 0, true);\n    if (options.enableCellNavigation && activeRow != null) {\n      var cell = 0,\n          prevCell = null;\n      var prevActivePosX = activePosX;\n      while (cell <= activePosX) {\n        if (canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        setActiveCellInternal(getCellNode(row, prevCell));\n        activePosX = prevActivePosX;\n      } else {\n        resetActiveCell();\n      }\n    }\n    return true;\n  }\n\n  function getColspan(row, cell) {\n    var metadata = data.getItemMetadata && data.getItemMetadata(row);\n    if (!metadata || !metadata.columns) {\n      return 1;\n    }\n\n    var columnData = metadata.columns[columns[cell].id] || metadata.columns[cell];\n    var colspan = columnData && columnData.colspan;\n    if (colspan === \"*\") {\n      colspan = columns.length - cell;\n    } else {\n      colspan = colspan || 1;\n    }\n\n    return colspan;\n  }\n\n  function findFirstFocusableCell(row) {\n    var cell = 0;\n    while (cell < columns.length) {\n      if (canCellBeActive(row, cell)) {\n        return cell;\n      }\n      cell += getColspan(row, cell);\n    }\n    return null;\n  }\n\n  function findLastFocusableCell(row) {\n    var cell = 0;\n    var lastFocusableCell = null;\n    while (cell < columns.length) {\n      if (canCellBeActive(row, cell)) {\n        lastFocusableCell = cell;\n      }\n      cell += getColspan(row, cell);\n    }\n    return lastFocusableCell;\n  }\n\n  function gotoRight(row, cell, posX) {\n    if (cell >= columns.length) {\n      return null;\n    }\n\n    do {\n      cell += getColspan(row, cell);\n    } while (cell < columns.length && !canCellBeActive(row, cell));\n\n    if (cell < columns.length) {\n      return {\n        \"row\": row,\n        \"cell\": cell,\n        \"posX\": cell\n      };\n    }\n    return null;\n  }\n\n  function gotoLeft(row, cell, posX) {\n    if (cell <= 0) {\n      return null;\n    }\n\n    var firstFocusableCell = findFirstFocusableCell(row);\n    if (firstFocusableCell === null || firstFocusableCell >= cell) {\n      return null;\n    }\n\n    var prev = {\n      \"row\": row,\n      \"cell\": firstFocusableCell,\n      \"posX\": firstFocusableCell\n    };\n    var pos;\n    while (true) {\n      pos = gotoRight(prev.row, prev.cell, prev.posX);\n      if (!pos) {\n        return null;\n      }\n      if (pos.cell >= cell) {\n        return prev;\n      }\n      prev = pos;\n    }\n  }\n\n  function gotoDown(row, cell, posX) {\n    var prevCell;\n    var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\n    while (true) {\n      if (++row >= dataLengthIncludingAddNew) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += getColspan(row, cell);\n      }\n\n      if (canCellBeActive(row, prevCell)) {\n        return {\n          \"row\": row,\n          \"cell\": prevCell,\n          \"posX\": posX\n        };\n      }\n    }\n  }\n\n  function gotoUp(row, cell, posX) {\n    var prevCell;\n    while (true) {\n      if (--row < 0) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += getColspan(row, cell);\n      }\n\n      if (canCellBeActive(row, prevCell)) {\n        return {\n          \"row\": row,\n          \"cell\": prevCell,\n          \"posX\": posX\n        };\n      }\n    }\n  }\n\n  function gotoNext(row, cell, posX) {\n    if (row == null && cell == null) {\n      row = cell = posX = 0;\n      if (canCellBeActive(row, cell)) {\n        return {\n          \"row\": row,\n          \"cell\": cell,\n          \"posX\": cell\n        };\n      }\n    }\n\n    var pos = gotoRight(row, cell, posX);\n    if (pos) {\n      return pos;\n    }\n\n    var firstFocusableCell = null;\n    var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\n\n    // if at last row, cycle through columns rather than get stuck in the last one\n    if (row === dataLengthIncludingAddNew - 1) {\n      row--;\n    }\n\n    while (++row < dataLengthIncludingAddNew) {\n      firstFocusableCell = findFirstFocusableCell(row);\n      if (firstFocusableCell !== null) {\n        return {\n          \"row\": row,\n          \"cell\": firstFocusableCell,\n          \"posX\": firstFocusableCell\n        };\n      }\n    }\n    return null;\n  }\n\n  function gotoPrev(row, cell, posX) {\n    if (row == null && cell == null) {\n      row = getDataLengthIncludingAddNew() - 1;\n      cell = posX = columns.length - 1;\n      if (canCellBeActive(row, cell)) {\n        return {\n          \"row\": row,\n          \"cell\": cell,\n          \"posX\": cell\n        };\n      }\n    }\n\n    var pos;\n    var lastSelectableCell;\n    while (!pos) {\n      pos = gotoLeft(row, cell, posX);\n      if (pos) {\n        break;\n      }\n      if (--row < 0) {\n        return null;\n      }\n\n      cell = 0;\n      lastSelectableCell = findLastFocusableCell(row);\n      if (lastSelectableCell !== null) {\n        pos = {\n          \"row\": row,\n          \"cell\": lastSelectableCell,\n          \"posX\": lastSelectableCell\n        };\n      }\n    }\n    return pos;\n  }\n\n  function gotoRowStart(row, cell, posX) {\n    var newCell = findFirstFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      \"row\": row,\n      \"cell\": newCell,\n      \"posX\": posX\n    };\n  }\n\n  function gotoRowEnd(row, cell, posX) {\n    var newCell = findLastFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      \"row\": row,\n      \"cell\": newCell,\n      \"posX\": posX\n    };\n  }\n\n  function navigateRight() {\n    return navigate(\"right\");\n  }\n\n  function navigateLeft() {\n    return navigate(\"left\");\n  }\n\n  function navigateDown() {\n    return navigate(\"down\");\n  }\n\n  function navigateUp() {\n    return navigate(\"up\");\n  }\n\n  function navigateNext() {\n    return navigate(\"next\");\n  }\n\n  function navigatePrev() {\n    return navigate(\"prev\");\n  }\n\n  function navigateRowStart() {\n    return navigate(\"home\");\n  }\n\n  function navigateRowEnd() {\n    return navigate(\"end\");\n  }\n\n  /**\r\n   * @param {string} dir Navigation direction.\r\n   * @return {boolean} Whether navigation resulted in a change of active cell.\r\n   */\n  function navigate(dir) {\n    if (!options.enableCellNavigation) {\n      return false;\n    }\n\n    if (!activeCellNode && dir != \"prev\" && dir != \"next\") {\n      return false;\n    }\n\n    if (!getEditorLock().commitCurrentEdit()) {\n      return true;\n    }\n    setFocus();\n\n    var tabbingDirections = {\n      \"up\": -1,\n      \"down\": 1,\n      \"left\": -1,\n      \"right\": 1,\n      \"prev\": -1,\n      \"next\": 1,\n      \"home\": -1,\n      \"end\": 1\n    };\n    tabbingDirection = tabbingDirections[dir];\n\n    var stepFunctions = {\n      \"up\": gotoUp,\n      \"down\": gotoDown,\n      \"left\": gotoLeft,\n      \"right\": gotoRight,\n      \"prev\": gotoPrev,\n      \"next\": gotoNext,\n      \"home\": gotoRowStart,\n      \"end\": gotoRowEnd\n    };\n    var stepFn = stepFunctions[dir];\n    var pos = stepFn(activeRow, activeCell, activePosX);\n    if (pos) {\n      var isAddNewRow = pos.row == getDataLength();\n      scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && options.emulatePagingWhenScrolling);\n      setActiveCellInternal(getCellNode(pos.row, pos.cell));\n      activePosX = pos.posX;\n      return true;\n    } else {\n      setActiveCellInternal(getCellNode(activeRow, activeCell));\n      return false;\n    }\n  }\n\n  function getCellNode(row, cell) {\n    if (rowsCache[row]) {\n      ensureCellNodesInRowsCache(row);\n      return rowsCache[row].cellNodesByColumnIdx[cell];\n    }\n    return null;\n  }\n\n  function setActiveCell(row, cell, opt_editMode, preClickModeOn, suppressActiveCellChangedEvent) {\n    if (!initialized) {\n      return;\n    }\n    if (row > getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\n      return;\n    }\n\n    if (!options.enableCellNavigation) {\n      return;\n    }\n\n    scrollCellIntoView(row, cell, false);\n    setActiveCellInternal(getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\n  }\n\n  function canCellBeActive(row, cell) {\n    if (!options.enableCellNavigation || row >= getDataLengthIncludingAddNew() || row < 0 || cell >= columns.length || cell < 0) {\n      return false;\n    }\n\n    var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n    if (rowMetadata && typeof rowMetadata.focusable !== \"undefined\") {\n      return !!rowMetadata.focusable;\n    }\n\n    var columnMetadata = rowMetadata && rowMetadata.columns;\n    if (columnMetadata && columnMetadata[columns[cell].id] && typeof columnMetadata[columns[cell].id].focusable !== \"undefined\") {\n      return !!columnMetadata[columns[cell].id].focusable;\n    }\n    if (columnMetadata && columnMetadata[cell] && typeof columnMetadata[cell].focusable !== \"undefined\") {\n      return !!columnMetadata[cell].focusable;\n    }\n\n    return !!columns[cell].focusable;\n  }\n\n  function canCellBeSelected(row, cell) {\n    if (row >= getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\n      return false;\n    }\n\n    var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n    if (rowMetadata && typeof rowMetadata.selectable !== \"undefined\") {\n      return !!rowMetadata.selectable;\n    }\n\n    var columnMetadata = rowMetadata && rowMetadata.columns && (rowMetadata.columns[columns[cell].id] || rowMetadata.columns[cell]);\n    if (columnMetadata && typeof columnMetadata.selectable !== \"undefined\") {\n      return !!columnMetadata.selectable;\n    }\n\n    return !!columns[cell].selectable;\n  }\n\n  function gotoCell(row, cell, forceEdit) {\n    if (!initialized) {\n      return;\n    }\n    if (!canCellBeActive(row, cell)) {\n      return;\n    }\n\n    if (!getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    scrollCellIntoView(row, cell, false);\n\n    var newCell = getCellNode(row, cell);\n\n    // if selecting the 'add new' row, start editing right away\n    setActiveCellInternal(newCell, forceEdit || row === getDataLength() || options.autoEdit, null, options.editable);\n\n    // if no editor was created, set the focus back on the grid\n    if (!currentEditor) {\n      setFocus();\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // IEditor implementation for the editor lock\n\n  function commitCurrentEdit() {\n    var item = getDataItem(activeRow);\n    var column = columns[activeCell];\n\n    if (currentEditor) {\n      if (currentEditor.isValueChanged()) {\n        var validationResults = currentEditor.validate();\n\n        if (validationResults.valid) {\n          if (activeRow < getDataLength()) {\n            var editCommand = {\n              row: activeRow,\n              cell: activeCell,\n              editor: currentEditor,\n              serializedValue: currentEditor.serializeValue(),\n              prevSerializedValue: serializedEditorValue,\n              execute: function execute() {\n                this.editor.applyValue(item, this.serializedValue);\n                updateRow(this.row);\n                trigger(self.onCellChange, {\n                  row: this.row,\n                  cell: this.cell,\n                  item: item,\n                  grid: self\n                });\n              },\n              undo: function undo() {\n                this.editor.applyValue(item, this.prevSerializedValue);\n                updateRow(this.row);\n                trigger(self.onCellChange, {\n                  row: this.row,\n                  cell: this.cell,\n                  item: item,\n                  grid: self\n                });\n              }\n            };\n\n            if (options.editCommandHandler) {\n              makeActiveCellNormal();\n              options.editCommandHandler(item, column, editCommand);\n            } else {\n              editCommand.execute();\n              makeActiveCellNormal();\n            }\n          } else {\n            var newItem = {};\n            currentEditor.applyValue(newItem, currentEditor.serializeValue());\n            makeActiveCellNormal();\n            trigger(self.onAddNewRow, { item: newItem, column: column, grid: self });\n          }\n\n          // check whether the lock has been re-acquired by event handlers\n          return !getEditorLock().isActive();\n        } else {\n          // Re-add the CSS class to trigger transitions, if any.\n          $(activeCellNode).removeClass(\"invalid\");\n          $(activeCellNode).width(); // force layout\n          $(activeCellNode).addClass(\"invalid\");\n\n          trigger(self.onValidationError, {\n            editor: currentEditor,\n            cellNode: activeCellNode,\n            validationResults: validationResults,\n            row: activeRow,\n            cell: activeCell,\n            column: column,\n            grid: self\n          });\n\n          currentEditor.focus();\n          return false;\n        }\n      }\n\n      makeActiveCellNormal();\n    }\n    return true;\n  }\n\n  function cancelCurrentEdit() {\n    makeActiveCellNormal();\n    return true;\n  }\n\n  function rowsToRanges(rows) {\n    var ranges = [];\n    var lastCell = columns.length - 1;\n    for (var i = 0; i < rows.length; i++) {\n      ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));\n    }\n    return ranges;\n  }\n\n  function getSelectedRows() {\n    if (!selectionModel) {\n      throw new Error(\"Selection model is not set\");\n    }\n    return selectedRows;\n  }\n\n  function setSelectedRows(rows) {\n    if (!selectionModel) {\n      throw new Error(\"Selection model is not set\");\n    }\n    selectionModel.setSelectedRanges(rowsToRanges(rows));\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Debug\n\n  this.debug = function () {\n    var s = \"\";\n\n    s += \"\\n\" + \"counter_rows_rendered:  \" + counter_rows_rendered;\n    s += \"\\n\" + \"counter_rows_removed:  \" + counter_rows_removed;\n    s += \"\\n\" + \"renderedRows:  \" + renderedRows;\n    s += \"\\n\" + \"numVisibleRows:  \" + numVisibleRows;\n    s += \"\\n\" + \"maxSupportedCssHeight:  \" + maxSupportedCssHeight;\n    s += \"\\n\" + \"n(umber of pages):  \" + n;\n    s += \"\\n\" + \"(current) page:  \" + page;\n    s += \"\\n\" + \"page height (ph):  \" + ph;\n    s += \"\\n\" + \"vScrollDir:  \" + vScrollDir;\n\n    alert(s);\n  };\n\n  // a debug helper to be able to access private members\n  this.eval = function (expr) {\n    return eval(expr);\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Public API\n\n  $.extend(this, {\n    \"slickGridVersion\": \"2.3.19\",\n\n    // Events\n    \"onScroll\": new Slick.Event(),\n    \"onSort\": new Slick.Event(),\n    \"onHeaderMouseEnter\": new Slick.Event(),\n    \"onHeaderMouseLeave\": new Slick.Event(),\n    \"onHeaderContextMenu\": new Slick.Event(),\n    \"onHeaderClick\": new Slick.Event(),\n    \"onHeaderCellRendered\": new Slick.Event(),\n    \"onBeforeHeaderCellDestroy\": new Slick.Event(),\n    \"onHeaderRowCellRendered\": new Slick.Event(),\n    \"onFooterRowCellRendered\": new Slick.Event(),\n    \"onBeforeHeaderRowCellDestroy\": new Slick.Event(),\n    \"onBeforeFooterRowCellDestroy\": new Slick.Event(),\n    \"onMouseEnter\": new Slick.Event(),\n    \"onMouseLeave\": new Slick.Event(),\n    \"onClick\": new Slick.Event(),\n    \"onDblClick\": new Slick.Event(),\n    \"onContextMenu\": new Slick.Event(),\n    \"onKeyDown\": new Slick.Event(),\n    \"onAddNewRow\": new Slick.Event(),\n    \"onBeforeAppendCell\": new Slick.Event(),\n    \"onValidationError\": new Slick.Event(),\n    \"onViewportChanged\": new Slick.Event(),\n    \"onColumnsReordered\": new Slick.Event(),\n    \"onColumnsResized\": new Slick.Event(),\n    \"onCellChange\": new Slick.Event(),\n    \"onBeforeEditCell\": new Slick.Event(),\n    \"onBeforeCellEditorDestroy\": new Slick.Event(),\n    \"onBeforeDestroy\": new Slick.Event(),\n    \"onActiveCellChanged\": new Slick.Event(),\n    \"onActiveCellPositionChanged\": new Slick.Event(),\n    \"onDragInit\": new Slick.Event(),\n    \"onDragStart\": new Slick.Event(),\n    \"onDrag\": new Slick.Event(),\n    \"onDragEnd\": new Slick.Event(),\n    \"onSelectedRowsChanged\": new Slick.Event(),\n    \"onCellCssStylesChanged\": new Slick.Event(),\n\n    // Methods\n    \"registerPlugin\": registerPlugin,\n    \"unregisterPlugin\": unregisterPlugin,\n    \"getColumns\": getColumns,\n    \"setColumns\": setColumns,\n    \"getColumnIndex\": getColumnIndex,\n    \"updateColumnHeader\": updateColumnHeader,\n    \"setSortColumn\": setSortColumn,\n    \"setSortColumns\": setSortColumns,\n    \"getSortColumns\": getSortColumns,\n    \"autosizeColumns\": autosizeColumns,\n    \"getOptions\": getOptions,\n    \"setOptions\": setOptions,\n    \"getData\": getData,\n    \"getDataLength\": getDataLength,\n    \"getDataItem\": getDataItem,\n    \"setData\": setData,\n    \"getSelectionModel\": getSelectionModel,\n    \"setSelectionModel\": setSelectionModel,\n    \"getSelectedRows\": getSelectedRows,\n    \"setSelectedRows\": setSelectedRows,\n    \"getContainerNode\": getContainerNode,\n    \"updatePagingStatusFromView\": updatePagingStatusFromView,\n\n    \"render\": render,\n    \"invalidate\": invalidate,\n    \"invalidateRow\": invalidateRow,\n    \"invalidateRows\": invalidateRows,\n    \"invalidateAllRows\": invalidateAllRows,\n    \"updateCell\": updateCell,\n    \"updateRow\": updateRow,\n    \"getViewport\": getVisibleRange,\n    \"getRenderedRange\": getRenderedRange,\n    \"resizeCanvas\": resizeCanvas,\n    \"updateRowCount\": updateRowCount,\n    \"scrollRowIntoView\": scrollRowIntoView,\n    \"scrollRowToTop\": scrollRowToTop,\n    \"scrollCellIntoView\": scrollCellIntoView,\n    \"scrollColumnIntoView\": scrollColumnIntoView,\n    \"getCanvasNode\": getCanvasNode,\n    \"getUID\": getUID,\n    \"getHeaderColumnWidthDiff\": getHeaderColumnWidthDiff,\n    \"getScrollbarDimensions\": getScrollbarDimensions,\n    \"getHeadersWidth\": getHeadersWidth,\n    \"getCanvasWidth\": getCanvasWidth,\n    \"focus\": setFocus,\n    \"scrollTo\": scrollTo,\n\n    \"getCellFromPoint\": getCellFromPoint,\n    \"getCellFromEvent\": getCellFromEvent,\n    \"getActiveCell\": getActiveCell,\n    \"setActiveCell\": setActiveCell,\n    \"getActiveCellNode\": getActiveCellNode,\n    \"getActiveCellPosition\": getActiveCellPosition,\n    \"resetActiveCell\": resetActiveCell,\n    \"editActiveCell\": makeActiveCellEditable,\n    \"getCellEditor\": getCellEditor,\n    \"getCellNode\": getCellNode,\n    \"getCellNodeBox\": getCellNodeBox,\n    \"canCellBeSelected\": canCellBeSelected,\n    \"canCellBeActive\": canCellBeActive,\n    \"navigatePrev\": navigatePrev,\n    \"navigateNext\": navigateNext,\n    \"navigateUp\": navigateUp,\n    \"navigateDown\": navigateDown,\n    \"navigateLeft\": navigateLeft,\n    \"navigateRight\": navigateRight,\n    \"navigatePageUp\": navigatePageUp,\n    \"navigatePageDown\": navigatePageDown,\n    \"navigateTop\": navigateTop,\n    \"navigateBottom\": navigateBottom,\n    \"navigateRowStart\": navigateRowStart,\n    \"navigateRowEnd\": navigateRowEnd,\n    \"gotoCell\": gotoCell,\n    \"getTopPanel\": getTopPanel,\n    \"setTopPanelVisibility\": setTopPanelVisibility,\n    \"getPreHeaderPanel\": getPreHeaderPanel,\n    \"setPreHeaderPanelVisibility\": setPreHeaderPanelVisibility,\n    \"getHeader\": getHeader,\n    \"getHeaderColumn\": getHeaderColumn,\n    \"setHeaderRowVisibility\": setHeaderRowVisibility,\n    \"getHeaderRow\": getHeaderRow,\n    \"getHeaderRowColumn\": getHeaderRowColumn,\n    \"setFooterRowVisibility\": setFooterRowVisibility,\n    \"getFooterRow\": getFooterRow,\n    \"getFooterRowColumn\": getFooterRowColumn,\n    \"getGridPosition\": getGridPosition,\n    \"flashCell\": flashCell,\n    \"addCellCssStyles\": addCellCssStyles,\n    \"setCellCssStyles\": setCellCssStyles,\n    \"removeCellCssStyles\": removeCellCssStyles,\n    \"getCellCssStyles\": getCellCssStyles,\n\n    \"init\": finishInitialization,\n    \"destroy\": destroy,\n\n    // IEditor implementation\n    \"getEditorLock\": getEditorLock,\n    \"getEditController\": getEditController\n  });\n\n  init();\n}\n\n//Slick.Grid=SlickGrid;\nexports.Slick = Slick;\nexports.SlickGrid = SlickGrid;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/slick.grid.js\n");

/***/ }),

/***/ "./src/webgl/regl.js":
/*!***************************!*\
  !*** ./src/webgl/regl.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar isTypedArray = function isTypedArray(x) {\n  return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;\n};\n\nvar extend = function extend(base, opts) {\n  var keys = Object.keys(opts);\n  for (var i = 0; i < keys.length; ++i) {\n    base[keys[i]] = opts[keys[i]];\n  }\n  return base;\n};\n\n// Error checking and parameter validation.\n//\n// Statements for the form `check.someProcedure(...)` get removed by\n// a browserify transform for optimized/minified bundles.\n//\n/* globals atob */\nvar endl = '\\n';\n\n// only used for extracting shader names.  if atob not present, then errors\n// will be slightly crappier\nfunction decodeB64(str) {\n  if (typeof atob !== 'undefined') {\n    return atob(str);\n  }\n  return 'base64:' + str;\n}\n\nfunction raise(message) {\n  var error = new Error('(regl) ' + message);\n  console.error(error);\n  throw error;\n}\n\nfunction check(pred, message) {\n  if (!pred) {\n    raise(message);\n  }\n}\n\nfunction encolon(message) {\n  if (message) {\n    return ': ' + message;\n  }\n  return '';\n}\n\nfunction checkParameter(param, possibilities, message) {\n  if (!(param in possibilities)) {\n    raise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join());\n  }\n}\n\nfunction checkIsTypedArray(data, message) {\n  if (!isTypedArray(data)) {\n    raise('invalid parameter type' + encolon(message) + '. must be a typed array');\n  }\n}\n\nfunction checkTypeOf(value, type, message) {\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== type) {\n    raise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));\n  }\n}\n\nfunction checkNonNegativeInt(value, message) {\n  if (!(value >= 0 && (value | 0) === value)) {\n    raise('invalid parameter type, (' + value + ')' + encolon(message) + '. must be a nonnegative integer');\n  }\n}\n\nfunction checkOneOf(value, list, message) {\n  if (list.indexOf(value) < 0) {\n    raise('invalid value' + encolon(message) + '. must be one of: ' + list);\n  }\n}\n\nvar constructorKeys = ['gl', 'canvas', 'container', 'attributes', 'pixelRatio', 'extensions', 'optionalExtensions', 'profile', 'onDone'];\n\nfunction checkConstructor(obj) {\n  Object.keys(obj).forEach(function (key) {\n    if (constructorKeys.indexOf(key) < 0) {\n      raise('invalid regl constructor argument \"' + key + '\". must be one of ' + constructorKeys);\n    }\n  });\n}\n\nfunction leftPad(str, n) {\n  str = str + '';\n  while (str.length < n) {\n    str = ' ' + str;\n  }\n  return str;\n}\n\nfunction ShaderFile() {\n  this.name = 'unknown';\n  this.lines = [];\n  this.index = {};\n  this.hasErrors = false;\n}\n\nfunction ShaderLine(number, line) {\n  this.number = number;\n  this.line = line;\n  this.errors = [];\n}\n\nfunction ShaderError(fileNumber, lineNumber, message) {\n  this.file = fileNumber;\n  this.line = lineNumber;\n  this.message = message;\n}\n\nfunction guessCommand() {\n  var error = new Error();\n  var stack = (error.stack || error).toString();\n  var pat = /compileProcedure.*\\n\\s*at.*\\((.*)\\)/.exec(stack);\n  if (pat) {\n    return pat[1];\n  }\n  var pat2 = /compileProcedure.*\\n\\s*at\\s+(.*)(\\n|$)/.exec(stack);\n  if (pat2) {\n    return pat2[1];\n  }\n  return 'unknown';\n}\n\nfunction guessCallSite() {\n  var error = new Error();\n  var stack = (error.stack || error).toString();\n  var pat = /at REGLCommand.*\\n\\s+at.*\\((.*)\\)/.exec(stack);\n  if (pat) {\n    return pat[1];\n  }\n  var pat2 = /at REGLCommand.*\\n\\s+at\\s+(.*)\\n/.exec(stack);\n  if (pat2) {\n    return pat2[1];\n  }\n  return 'unknown';\n}\n\nfunction parseSource(source, command) {\n  var lines = source.split('\\n');\n  var lineNumber = 1;\n  var fileNumber = 0;\n  var files = {\n    unknown: new ShaderFile(),\n    0: new ShaderFile()\n  };\n  files.unknown.name = files[0].name = command || guessCommand();\n  files.unknown.lines.push(new ShaderLine(0, ''));\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i];\n    var parts = /^\\s*\\#\\s*(\\w+)\\s+(.+)\\s*$/.exec(line);\n    if (parts) {\n      switch (parts[1]) {\n        case 'line':\n          var lineNumberInfo = /(\\d+)(\\s+\\d+)?/.exec(parts[2]);\n          if (lineNumberInfo) {\n            lineNumber = lineNumberInfo[1] | 0;\n            if (lineNumberInfo[2]) {\n              fileNumber = lineNumberInfo[2] | 0;\n              if (!(fileNumber in files)) {\n                files[fileNumber] = new ShaderFile();\n              }\n            }\n          }\n          break;\n        case 'define':\n          var nameInfo = /SHADER_NAME(_B64)?\\s+(.*)$/.exec(parts[2]);\n          if (nameInfo) {\n            files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];\n          }\n          break;\n      }\n    }\n    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));\n  }\n  Object.keys(files).forEach(function (fileNumber) {\n    var file = files[fileNumber];\n    file.lines.forEach(function (line) {\n      file.index[line.number] = line;\n    });\n  });\n  return files;\n}\n\nfunction parseErrorLog(errLog) {\n  var result = [];\n  errLog.split('\\n').forEach(function (errMsg) {\n    if (errMsg.length < 5) {\n      return;\n    }\n    var parts = /^ERROR\\:\\s+(\\d+)\\:(\\d+)\\:\\s*(.*)$/.exec(errMsg);\n    if (parts) {\n      result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));\n    } else if (errMsg.length > 0) {\n      result.push(new ShaderError('unknown', 0, errMsg));\n    }\n  });\n  return result;\n}\n\nfunction annotateFiles(files, errors) {\n  errors.forEach(function (error) {\n    var file = files[error.file];\n    if (file) {\n      var line = file.index[error.line];\n      if (line) {\n        line.errors.push(error);\n        file.hasErrors = true;\n        return;\n      }\n    }\n    files.unknown.hasErrors = true;\n    files.unknown.lines[0].errors.push(error);\n  });\n}\n\nfunction checkShaderError(gl, shader, source, type, command) {\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader);\n    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';\n    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);\n    var files = parseSource(source, command);\n    var errors = parseErrorLog(errLog);\n    annotateFiles(files, errors);\n\n    Object.keys(files).forEach(function (fileNumber) {\n      var file = files[fileNumber];\n      if (!file.hasErrors) {\n        return;\n      }\n\n      var strings = [''];\n      var styles = [''];\n\n      function push(str, style) {\n        strings.push(str);\n        styles.push(style || '');\n      }\n\n      push('file number ' + fileNumber + ': ' + file.name + '\\n', 'color:red;text-decoration:underline;font-weight:bold');\n\n      file.lines.forEach(function (line) {\n        if (line.errors.length > 0) {\n          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');\n          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');\n\n          // try to guess token\n          var offset = 0;\n          line.errors.forEach(function (error) {\n            var message = error.message;\n            var token = /^\\s*\\'(.*)\\'\\s*\\:\\s*(.*)$/.exec(message);\n            if (token) {\n              var tokenPat = token[1];\n              message = token[2];\n              switch (tokenPat) {\n                case 'assign':\n                  tokenPat = '=';\n                  break;\n              }\n              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);\n            } else {\n              offset = 0;\n            }\n\n            push(leftPad('| ', 6));\n            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');\n            push(leftPad('| ', 6));\n            push(message + endl, 'font-weight:bold');\n          });\n          push(leftPad('| ', 6) + endl);\n        } else {\n          push(leftPad(line.number, 4) + '|  ');\n          push(line.line + endl, 'color:red');\n        }\n      });\n      if (typeof document !== 'undefined' && !window.chrome) {\n        styles[0] = strings.join('%c');\n        console.log.apply(console, styles);\n      } else {\n        console.log(strings.join(''));\n      }\n    });\n\n    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);\n  }\n}\n\nfunction checkLinkError(gl, program, fragShader, vertShader, command) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program);\n    var fragParse = parseSource(fragShader, command);\n    var vertParse = parseSource(vertShader, command);\n\n    var header = 'Error linking program with vertex shader, \"' + vertParse[0].name + '\", and fragment shader \"' + fragParse[0].name + '\"';\n\n    if (typeof document !== 'undefined') {\n      console.log('%c' + header + endl + '%c' + errLog, 'color:red;text-decoration:underline;font-weight:bold', 'color:red');\n    } else {\n      console.log(header + endl + errLog);\n    }\n    check.raise(header);\n  }\n}\n\nfunction saveCommandRef(object) {\n  object._commandRef = guessCommand();\n}\n\nfunction saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {\n  saveCommandRef(opts);\n\n  function id(str) {\n    if (str) {\n      return stringStore.id(str);\n    }\n    return 0;\n  }\n  opts._fragId = id(opts.static.frag);\n  opts._vertId = id(opts.static.vert);\n\n  function addProps(dict, set) {\n    Object.keys(set).forEach(function (u) {\n      dict[stringStore.id(u)] = true;\n    });\n  }\n\n  var uniformSet = opts._uniformSet = {};\n  addProps(uniformSet, uniforms.static);\n  addProps(uniformSet, uniforms.dynamic);\n\n  var attributeSet = opts._attributeSet = {};\n  addProps(attributeSet, attributes.static);\n  addProps(attributeSet, attributes.dynamic);\n\n  opts._hasCount = 'count' in opts.static || 'count' in opts.dynamic || 'elements' in opts.static || 'elements' in opts.dynamic;\n}\n\nfunction commandRaise(message, command) {\n  var callSite = guessCallSite();\n  raise(message + ' in command ' + (command || guessCommand()) + (callSite === 'unknown' ? '' : ' called from ' + callSite));\n}\n\nfunction checkCommand(pred, message, command) {\n  if (!pred) {\n    commandRaise(message, command || guessCommand());\n  }\n}\n\nfunction checkParameterCommand(param, possibilities, message, command) {\n  if (!(param in possibilities)) {\n    commandRaise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join(), command || guessCommand());\n  }\n}\n\nfunction checkCommandType(value, type, message, command) {\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== type) {\n    commandRaise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)), command || guessCommand());\n  }\n}\n\nfunction checkOptional(block) {\n  block();\n}\n\nfunction checkFramebufferFormat(attachment, texFormats, rbFormats) {\n  if (attachment.texture) {\n    checkOneOf(attachment.texture._texture.internalformat, texFormats, 'unsupported texture format for attachment');\n  } else {\n    checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, 'unsupported renderbuffer format for attachment');\n  }\n}\n\nvar GL_CLAMP_TO_EDGE = 0x812F;\n\nvar GL_NEAREST = 0x2600;\nvar GL_NEAREST_MIPMAP_NEAREST = 0x2700;\nvar GL_LINEAR_MIPMAP_NEAREST = 0x2701;\nvar GL_NEAREST_MIPMAP_LINEAR = 0x2702;\nvar GL_LINEAR_MIPMAP_LINEAR = 0x2703;\n\nvar GL_BYTE = 5120;\nvar GL_UNSIGNED_BYTE = 5121;\nvar GL_SHORT = 5122;\nvar GL_UNSIGNED_SHORT = 5123;\nvar GL_INT = 5124;\nvar GL_UNSIGNED_INT = 5125;\nvar GL_FLOAT = 5126;\n\nvar GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;\n\nvar GL_HALF_FLOAT_OES = 0x8D61;\n\nvar TYPE_SIZE = {};\n\nTYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;\n\nTYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;\n\nTYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;\n\nfunction pixelSize(type, channels) {\n  if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) {\n    return 2;\n  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {\n    return 4;\n  } else {\n    return TYPE_SIZE[type] * channels;\n  }\n}\n\nfunction isPow2(v) {\n  return !(v & v - 1) && !!v;\n}\n\nfunction checkTexture2D(info, mipData, limits) {\n  var i;\n  var w = mipData.width;\n  var h = mipData.height;\n  var c = mipData.channels;\n\n  // Check texture shape\n  check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');\n\n  // check wrap mode\n  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {\n    check(isPow2(w) && isPow2(h), 'incompatible wrap mode for texture, both width and height must be power of 2');\n  }\n\n  if (mipData.mipmask === 1) {\n    if (w !== 1 && h !== 1) {\n      check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, 'min filter requires mipmap');\n    }\n  } else {\n    // texture must be power of 2\n    check(isPow2(w) && isPow2(h), 'texture must be a square power of 2 to support mipmapping');\n    check(mipData.mipmask === (w << 1) - 1, 'missing or incomplete mipmap data');\n  }\n\n  if (mipData.type === GL_FLOAT) {\n    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {\n      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, 'filter not supported, must enable oes_texture_float_linear');\n    }\n    check(!info.genMipmaps, 'mipmap generation not supported with float textures');\n  }\n\n  // check image complete\n  var mipimages = mipData.images;\n  for (i = 0; i < 16; ++i) {\n    if (mipimages[i]) {\n      var mw = w >> i;\n      var mh = h >> i;\n      check(mipData.mipmask & 1 << i, 'missing mipmap data');\n\n      var img = mipimages[i];\n\n      check(img.width === mw && img.height === mh, 'invalid shape for mip images');\n\n      check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, 'incompatible type for mip image');\n\n      if (img.compressed) {\n        // TODO: check size for compressed images\n      } else if (img.data) {\n        // check(img.data.byteLength === mw * mh *\n        // Math.max(pixelSize(img.type, c), img.unpackAlignment),\n        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;\n        check(img.data.byteLength === rowSize * mh, 'invalid data for image, buffer size is inconsistent with image format');\n      } else if (img.element) {\n        // TODO: check element can be loaded\n      } else if (img.copy) {\n        // TODO: check compatible format and type\n      }\n    } else if (!info.genMipmaps) {\n      check((mipData.mipmask & 1 << i) === 0, 'extra mipmap data');\n    }\n  }\n\n  if (mipData.compressed) {\n    check(!info.genMipmaps, 'mipmap generation for compressed images not supported');\n  }\n}\n\nfunction checkTextureCube(texture, info, faces, limits) {\n  var w = texture.width;\n  var h = texture.height;\n  var c = texture.channels;\n\n  // Check texture shape\n  check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');\n  check(w === h, 'cube map must be square');\n  check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, 'wrap mode not supported by cube map');\n\n  for (var i = 0; i < faces.length; ++i) {\n    var face = faces[i];\n    check(face.width === w && face.height === h, 'inconsistent cube map face shape');\n\n    if (info.genMipmaps) {\n      check(!face.compressed, 'can not generate mipmap for compressed textures');\n      check(face.mipmask === 1, 'can not specify mipmaps and generate mipmaps');\n    } else {\n      // TODO: check mip and filter mode\n    }\n\n    var mipmaps = face.images;\n    for (var j = 0; j < 16; ++j) {\n      var img = mipmaps[j];\n      if (img) {\n        var mw = w >> j;\n        var mh = h >> j;\n        check(face.mipmask & 1 << j, 'missing mipmap data');\n        check(img.width === mw && img.height === mh, 'invalid shape for mip images');\n        check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, 'incompatible type for mip image');\n\n        if (img.compressed) {\n          // TODO: check size for compressed images\n        } else if (img.data) {\n          check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c), img.unpackAlignment), 'invalid data for image, buffer size is inconsistent with image format');\n        } else if (img.element) {\n          // TODO: check element can be loaded\n        } else if (img.copy) {\n          // TODO: check compatible format and type\n        }\n      }\n    }\n  }\n}\n\nvar check$1 = extend(check, {\n  optional: checkOptional,\n  raise: raise,\n  commandRaise: commandRaise,\n  command: checkCommand,\n  parameter: checkParameter,\n  commandParameter: checkParameterCommand,\n  constructor: checkConstructor,\n  type: checkTypeOf,\n  commandType: checkCommandType,\n  isTypedArray: checkIsTypedArray,\n  nni: checkNonNegativeInt,\n  oneOf: checkOneOf,\n  shaderError: checkShaderError,\n  linkError: checkLinkError,\n  callSite: guessCallSite,\n  saveCommandRef: saveCommandRef,\n  saveDrawInfo: saveDrawCommandInfo,\n  framebufferFormat: checkFramebufferFormat,\n  guessCommand: guessCommand,\n  texture2D: checkTexture2D,\n  textureCube: checkTextureCube\n});\n\nvar VARIABLE_COUNTER = 0;\n\nvar DYN_FUNC = 0;\n\nfunction DynamicVariable(type, data) {\n  this.id = VARIABLE_COUNTER++;\n  this.type = type;\n  this.data = data;\n}\n\nfunction escapeStr(str) {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n}\n\nfunction splitParts(str) {\n  if (str.length === 0) {\n    return [];\n  }\n\n  var firstChar = str.charAt(0);\n  var lastChar = str.charAt(str.length - 1);\n\n  if (str.length > 1 && firstChar === lastChar && (firstChar === '\"' || firstChar === \"'\")) {\n    return ['\"' + escapeStr(str.substr(1, str.length - 2)) + '\"'];\n  }\n\n  var parts = /\\[(false|true|null|\\d+|'[^']*'|\"[^\"]*\")\\]/.exec(str);\n  if (parts) {\n    return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));\n  }\n\n  var subparts = str.split('.');\n  if (subparts.length === 1) {\n    return ['\"' + escapeStr(str) + '\"'];\n  }\n\n  var result = [];\n  for (var i = 0; i < subparts.length; ++i) {\n    result = result.concat(splitParts(subparts[i]));\n  }\n  return result;\n}\n\nfunction toAccessorString(str) {\n  return '[' + splitParts(str).join('][') + ']';\n}\n\nfunction defineDynamic(type, data) {\n  return new DynamicVariable(type, toAccessorString(data + ''));\n}\n\nfunction isDynamic(x) {\n  return typeof x === 'function' && !x._reglType || x instanceof DynamicVariable;\n}\n\nfunction unbox(x, path) {\n  if (typeof x === 'function') {\n    return new DynamicVariable(DYN_FUNC, x);\n  }\n  return x;\n}\n\nvar dynamic = {\n  DynamicVariable: DynamicVariable,\n  define: defineDynamic,\n  isDynamic: isDynamic,\n  unbox: unbox,\n  accessor: toAccessorString\n};\n\n/* globals requestAnimationFrame, cancelAnimationFrame */\nvar raf = {\n  next: typeof requestAnimationFrame === 'function' ? function (cb) {\n    return requestAnimationFrame(cb);\n  } : function (cb) {\n    return setTimeout(cb, 16);\n  },\n  cancel: typeof cancelAnimationFrame === 'function' ? function (raf) {\n    return cancelAnimationFrame(raf);\n  } : clearTimeout\n};\n\n/* globals performance */\nvar clock = typeof performance !== 'undefined' && performance.now ? function () {\n  return performance.now();\n} : function () {\n  return +new Date();\n};\n\nfunction createStringStore() {\n  var stringIds = { '': 0 };\n  var stringValues = [''];\n  return {\n    id: function id(str) {\n      var result = stringIds[str];\n      if (result) {\n        return result;\n      }\n      result = stringIds[str] = stringValues.length;\n      stringValues.push(str);\n      return result;\n    },\n\n    str: function str(id) {\n      return stringValues[id];\n    }\n  };\n}\n\n// Context and canvas creation helper functions\nfunction createCanvas(element, onDone, pixelRatio) {\n  var canvas = document.createElement('canvas');\n  extend(canvas.style, {\n    border: 0,\n    margin: 0,\n    padding: 0,\n    top: 0,\n    left: 0\n  });\n  element.appendChild(canvas);\n\n  if (element === document.body) {\n    canvas.style.position = 'absolute';\n    extend(element.style, {\n      margin: 0,\n      padding: 0\n    });\n  }\n\n  function resize() {\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n    if (element !== document.body) {\n      var bounds = element.getBoundingClientRect();\n      w = bounds.right - bounds.left;\n      h = bounds.bottom - bounds.top;\n    }\n    canvas.width = pixelRatio * w;\n    canvas.height = pixelRatio * h;\n    extend(canvas.style, {\n      width: w + 'px',\n      height: h + 'px'\n    });\n  }\n\n  window.addEventListener('resize', resize, false);\n\n  function onDestroy() {\n    window.removeEventListener('resize', resize);\n    element.removeChild(canvas);\n  }\n\n  resize();\n\n  return {\n    canvas: canvas,\n    onDestroy: onDestroy\n  };\n}\n\nfunction createContext(canvas, contextAttributes) {\n  function get(name) {\n    try {\n      return canvas.getContext(name, contextAttributes);\n    } catch (e) {\n      return null;\n    }\n  }\n  return get('webgl') || get('experimental-webgl') || get('webgl-experimental');\n}\n\nfunction isHTMLElement(obj) {\n  return typeof obj.nodeName === 'string' && typeof obj.appendChild === 'function' && typeof obj.getBoundingClientRect === 'function';\n}\n\nfunction isWebGLContext(obj) {\n  return typeof obj.drawArrays === 'function' || typeof obj.drawElements === 'function';\n}\n\nfunction parseExtensions(input) {\n  if (typeof input === 'string') {\n    return input.split();\n  }\n  check$1(Array.isArray(input), 'invalid extension array');\n  return input;\n}\n\nfunction getElement(desc) {\n  if (typeof desc === 'string') {\n    check$1(typeof document !== 'undefined', 'not supported outside of DOM');\n    return document.querySelector(desc);\n  }\n  return desc;\n}\n\nfunction parseArgs(args_) {\n  var args = args_ || {};\n  var element, container, canvas, gl;\n  var contextAttributes = {};\n  var extensions = [];\n  var optionalExtensions = [];\n  var pixelRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio;\n  var profile = false;\n  var onDone = function onDone(err) {\n    if (err) {\n      check$1.raise(err);\n    }\n  };\n  var onDestroy = function onDestroy() {};\n  if (typeof args === 'string') {\n    check$1(typeof document !== 'undefined', 'selector queries only supported in DOM enviroments');\n    element = document.querySelector(args);\n    check$1(element, 'invalid query string for element');\n  } else if ((typeof args === 'undefined' ? 'undefined' : _typeof(args)) === 'object') {\n    if (isHTMLElement(args)) {\n      element = args;\n    } else if (isWebGLContext(args)) {\n      gl = args;\n      canvas = gl.canvas;\n    } else {\n      check$1.constructor(args);\n      if ('gl' in args) {\n        gl = args.gl;\n      } else if ('canvas' in args) {\n        canvas = getElement(args.canvas);\n      } else if ('container' in args) {\n        container = getElement(args.container);\n      }\n      if ('attributes' in args) {\n        contextAttributes = args.attributes;\n        check$1.type(contextAttributes, 'object', 'invalid context attributes');\n      }\n      if ('extensions' in args) {\n        extensions = parseExtensions(args.extensions);\n      }\n      if ('optionalExtensions' in args) {\n        optionalExtensions = parseExtensions(args.optionalExtensions);\n      }\n      if ('onDone' in args) {\n        check$1.type(args.onDone, 'function', 'invalid or missing onDone callback');\n        onDone = args.onDone;\n      }\n      if ('profile' in args) {\n        profile = !!args.profile;\n      }\n      if ('pixelRatio' in args) {\n        pixelRatio = +args.pixelRatio;\n        check$1(pixelRatio > 0, 'invalid pixel ratio');\n      }\n    }\n  } else {\n    check$1.raise('invalid arguments to regl');\n  }\n\n  if (element) {\n    if (element.nodeName.toLowerCase() === 'canvas') {\n      canvas = element;\n    } else {\n      container = element;\n    }\n  }\n\n  if (!gl) {\n    if (!canvas) {\n      check$1(typeof document !== 'undefined', 'must manually specify webgl context outside of DOM environments');\n      var result = createCanvas(container || document.body, onDone, pixelRatio);\n      if (!result) {\n        return null;\n      }\n      canvas = result.canvas;\n      onDestroy = result.onDestroy;\n    }\n    gl = createContext(canvas, contextAttributes);\n  }\n\n  if (!gl) {\n    onDestroy();\n    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');\n    return null;\n  }\n\n  return {\n    gl: gl,\n    canvas: canvas,\n    container: container,\n    extensions: extensions,\n    optionalExtensions: optionalExtensions,\n    pixelRatio: pixelRatio,\n    profile: profile,\n    onDone: onDone,\n    onDestroy: onDestroy\n  };\n}\n\nfunction createExtensionCache(gl, config) {\n  var extensions = {};\n\n  function tryLoadExtension(name_) {\n    check$1.type(name_, 'string', 'extension name must be string');\n    var name = name_.toLowerCase();\n    var ext;\n    try {\n      ext = extensions[name] = gl.getExtension(name);\n    } catch (e) {}\n    return !!ext;\n  }\n\n  for (var i = 0; i < config.extensions.length; ++i) {\n    var name = config.extensions[i];\n    if (!tryLoadExtension(name)) {\n      config.onDestroy();\n      config.onDone('\"' + name + '\" extension is not supported by the current WebGL context, try upgrading your system or a different browser');\n      return null;\n    }\n  }\n\n  config.optionalExtensions.forEach(tryLoadExtension);\n\n  return {\n    extensions: extensions,\n    restore: function restore() {\n      Object.keys(extensions).forEach(function (name) {\n        if (!tryLoadExtension(name)) {\n          throw new Error('(regl): error restoring extension ' + name);\n        }\n      });\n    }\n  };\n}\n\nfunction loop(n, f) {\n  var result = Array(n);\n  for (var i = 0; i < n; ++i) {\n    result[i] = f(i);\n  }\n  return result;\n}\n\nvar GL_BYTE$1 = 5120;\nvar GL_UNSIGNED_BYTE$2 = 5121;\nvar GL_SHORT$1 = 5122;\nvar GL_UNSIGNED_SHORT$1 = 5123;\nvar GL_INT$1 = 5124;\nvar GL_UNSIGNED_INT$1 = 5125;\nvar GL_FLOAT$2 = 5126;\n\nfunction nextPow16(v) {\n  for (var i = 16; i <= 1 << 28; i *= 16) {\n    if (v <= i) {\n      return i;\n    }\n  }\n  return 0;\n}\n\nfunction log2(v) {\n  var r, shift;\n  r = (v > 0xFFFF) << 4;\n  v >>>= r;\n  shift = (v > 0xFF) << 3;\n  v >>>= shift;r |= shift;\n  shift = (v > 0xF) << 2;\n  v >>>= shift;r |= shift;\n  shift = (v > 0x3) << 1;\n  v >>>= shift;r |= shift;\n  return r | v >> 1;\n}\n\nfunction createPool() {\n  var bufferPool = loop(8, function () {\n    return [];\n  });\n\n  function alloc(n) {\n    var sz = nextPow16(n);\n    var bin = bufferPool[log2(sz) >> 2];\n    if (bin.length > 0) {\n      return bin.pop();\n    }\n    return new ArrayBuffer(sz);\n  }\n\n  function free(buf) {\n    bufferPool[log2(buf.byteLength) >> 2].push(buf);\n  }\n\n  function allocType(type, n) {\n    var result = null;\n    switch (type) {\n      case GL_BYTE$1:\n        result = new Int8Array(alloc(n), 0, n);\n        break;\n      case GL_UNSIGNED_BYTE$2:\n        result = new Uint8Array(alloc(n), 0, n);\n        break;\n      case GL_SHORT$1:\n        result = new Int16Array(alloc(2 * n), 0, n);\n        break;\n      case GL_UNSIGNED_SHORT$1:\n        result = new Uint16Array(alloc(2 * n), 0, n);\n        break;\n      case GL_INT$1:\n        result = new Int32Array(alloc(4 * n), 0, n);\n        break;\n      case GL_UNSIGNED_INT$1:\n        result = new Uint32Array(alloc(4 * n), 0, n);\n        break;\n      case GL_FLOAT$2:\n        result = new Float32Array(alloc(4 * n), 0, n);\n        break;\n      default:\n        return null;\n    }\n    if (result.length !== n) {\n      return result.subarray(0, n);\n    }\n    return result;\n  }\n\n  function freeType(array) {\n    free(array.buffer);\n  }\n\n  return {\n    alloc: alloc,\n    free: free,\n    allocType: allocType,\n    freeType: freeType\n  };\n}\n\nvar pool = createPool();\n\n// zero pool for initial zero data\npool.zero = createPool();\n\nvar GL_SUBPIXEL_BITS = 0x0D50;\nvar GL_RED_BITS = 0x0D52;\nvar GL_GREEN_BITS = 0x0D53;\nvar GL_BLUE_BITS = 0x0D54;\nvar GL_ALPHA_BITS = 0x0D55;\nvar GL_DEPTH_BITS = 0x0D56;\nvar GL_STENCIL_BITS = 0x0D57;\n\nvar GL_ALIASED_POINT_SIZE_RANGE = 0x846D;\nvar GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;\n\nvar GL_MAX_TEXTURE_SIZE = 0x0D33;\nvar GL_MAX_VIEWPORT_DIMS = 0x0D3A;\nvar GL_MAX_VERTEX_ATTRIBS = 0x8869;\nvar GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\nvar GL_MAX_VARYING_VECTORS = 0x8DFC;\nvar GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\nvar GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\nvar GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;\nvar GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\nvar GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\nvar GL_MAX_RENDERBUFFER_SIZE = 0x84E8;\n\nvar GL_VENDOR = 0x1F00;\nvar GL_RENDERER = 0x1F01;\nvar GL_VERSION = 0x1F02;\nvar GL_SHADING_LANGUAGE_VERSION = 0x8B8C;\n\nvar GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;\n\nvar GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;\nvar GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;\n\nvar GL_TEXTURE_2D = 0x0DE1;\nvar GL_TEXTURE_CUBE_MAP = 0x8513;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nvar GL_TEXTURE0 = 0x84C0;\nvar GL_RGBA = 0x1908;\nvar GL_FLOAT$1 = 0x1406;\nvar GL_UNSIGNED_BYTE$1 = 0x1401;\nvar GL_FRAMEBUFFER = 0x8D40;\nvar GL_FRAMEBUFFER_COMPLETE = 0x8CD5;\nvar GL_COLOR_ATTACHMENT0 = 0x8CE0;\nvar GL_COLOR_BUFFER_BIT$1 = 0x4000;\n\nvar wrapLimits = function wrapLimits(gl, extensions) {\n  var maxAnisotropic = 1;\n  if (extensions.ext_texture_filter_anisotropic) {\n    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n  }\n\n  var maxDrawbuffers = 1;\n  var maxColorAttachments = 1;\n  if (extensions.webgl_draw_buffers) {\n    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);\n    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);\n  }\n\n  // detect if reading float textures is available (Safari doesn't support)\n  var readFloat = !!extensions.oes_texture_float;\n  if (readFloat) {\n    var readFloatTexture = gl.createTexture();\n    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);\n    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);\n\n    var fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);\n    gl.bindTexture(GL_TEXTURE_2D, null);\n\n    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;else {\n      gl.viewport(0, 0, 1, 1);\n      gl.clearColor(1.0, 0.0, 0.0, 1.0);\n      gl.clear(GL_COLOR_BUFFER_BIT$1);\n      var pixels = pool.allocType(GL_FLOAT$1, 4);\n      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);\n\n      if (gl.getError()) readFloat = false;else {\n        gl.deleteFramebuffer(fbo);\n        gl.deleteTexture(readFloatTexture);\n\n        readFloat = pixels[0] === 1.0;\n      }\n\n      pool.freeType(pixels);\n    }\n  }\n\n  // detect non power of two cube textures support (IE doesn't support)\n  var npotTextureCube = true;\n  var cubeTexture = gl.createTexture();\n  var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);\n  gl.activeTexture(GL_TEXTURE0);\n  gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);\n  gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);\n  pool.freeType(data);\n  gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);\n  gl.deleteTexture(cubeTexture);\n  npotTextureCube = !gl.getError();\n\n  return {\n    // drawing buffer bit depth\n    colorBits: [gl.getParameter(GL_RED_BITS), gl.getParameter(GL_GREEN_BITS), gl.getParameter(GL_BLUE_BITS), gl.getParameter(GL_ALPHA_BITS)],\n    depthBits: gl.getParameter(GL_DEPTH_BITS),\n    stencilBits: gl.getParameter(GL_STENCIL_BITS),\n    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),\n\n    // supported extensions\n    extensions: Object.keys(extensions).filter(function (ext) {\n      return !!extensions[ext];\n    }),\n\n    // max aniso samples\n    maxAnisotropic: maxAnisotropic,\n\n    // max draw buffers\n    maxDrawbuffers: maxDrawbuffers,\n    maxColorAttachments: maxColorAttachments,\n\n    // point and line size ranges\n    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),\n    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),\n    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),\n    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),\n    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),\n    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),\n    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),\n    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),\n    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),\n    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),\n    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),\n    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),\n    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),\n\n    // vendor info\n    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),\n    renderer: gl.getParameter(GL_RENDERER),\n    vendor: gl.getParameter(GL_VENDOR),\n    version: gl.getParameter(GL_VERSION),\n\n    // quirks\n    readFloat: readFloat,\n    npotTextureCube: npotTextureCube\n  };\n};\n\nfunction isNDArrayLike(obj) {\n  return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === 'number' && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));\n}\n\nvar values = function values(obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n\nvar flattenUtils = {\n  shape: arrayShape$1,\n  flatten: flattenArray\n};\n\nfunction flatten1D(array, nx, out) {\n  for (var i = 0; i < nx; ++i) {\n    out[i] = array[i];\n  }\n}\n\nfunction flatten2D(array, nx, ny, out) {\n  var ptr = 0;\n  for (var i = 0; i < nx; ++i) {\n    var row = array[i];\n    for (var j = 0; j < ny; ++j) {\n      out[ptr++] = row[j];\n    }\n  }\n}\n\nfunction flatten3D(array, nx, ny, nz, out, ptr_) {\n  var ptr = ptr_;\n  for (var i = 0; i < nx; ++i) {\n    var row = array[i];\n    for (var j = 0; j < ny; ++j) {\n      var col = row[j];\n      for (var k = 0; k < nz; ++k) {\n        out[ptr++] = col[k];\n      }\n    }\n  }\n}\n\nfunction flattenRec(array, shape, level, out, ptr) {\n  var stride = 1;\n  for (var i = level + 1; i < shape.length; ++i) {\n    stride *= shape[i];\n  }\n  var n = shape[level];\n  if (shape.length - level === 4) {\n    var nx = shape[level + 1];\n    var ny = shape[level + 2];\n    var nz = shape[level + 3];\n    for (i = 0; i < n; ++i) {\n      flatten3D(array[i], nx, ny, nz, out, ptr);\n      ptr += stride;\n    }\n  } else {\n    for (i = 0; i < n; ++i) {\n      flattenRec(array[i], shape, level + 1, out, ptr);\n      ptr += stride;\n    }\n  }\n}\n\nfunction flattenArray(array, shape, type, out_) {\n  var sz = 1;\n  if (shape.length) {\n    for (var i = 0; i < shape.length; ++i) {\n      sz *= shape[i];\n    }\n  } else {\n    sz = 0;\n  }\n  var out = out_ || pool.allocType(type, sz);\n  switch (shape.length) {\n    case 0:\n      break;\n    case 1:\n      flatten1D(array, shape[0], out);\n      break;\n    case 2:\n      flatten2D(array, shape[0], shape[1], out);\n      break;\n    case 3:\n      flatten3D(array, shape[0], shape[1], shape[2], out, 0);\n      break;\n    default:\n      flattenRec(array, shape, 0, out, 0);\n  }\n  return out;\n}\n\nfunction arrayShape$1(array_) {\n  var shape = [];\n  for (var array = array_; array.length; array = array[0]) {\n    shape.push(array.length);\n  }\n  return shape;\n}\n\nvar arrayTypes = {\n  \"[object Int8Array]\": 5120,\n  \"[object Int16Array]\": 5122,\n  \"[object Int32Array]\": 5124,\n  \"[object Uint8Array]\": 5121,\n  \"[object Uint8ClampedArray]\": 5121,\n  \"[object Uint16Array]\": 5123,\n  \"[object Uint32Array]\": 5125,\n  \"[object Float32Array]\": 5126,\n  \"[object Float64Array]\": 5121,\n  \"[object ArrayBuffer]\": 5121\n};\n\nvar int8 = 5120;\nvar int16 = 5122;\nvar int32 = 5124;\nvar uint8 = 5121;\nvar uint16 = 5123;\nvar uint32 = 5125;\nvar float = 5126;\nvar float32 = 5126;\nvar glTypes = {\n  int8: int8,\n  int16: int16,\n  int32: int32,\n  uint8: uint8,\n  uint16: uint16,\n  uint32: uint32,\n  float: float,\n  float32: float32\n};\n\nvar dynamic$1 = 35048;\nvar stream = 35040;\nvar usageTypes = {\n  dynamic: dynamic$1,\n  stream: stream,\n  \"static\": 35044\n};\n\nvar arrayFlatten = flattenUtils.flatten;\nvar arrayShape = flattenUtils.shape;\n\nvar GL_STATIC_DRAW = 0x88E4;\nvar GL_STREAM_DRAW = 0x88E0;\n\nvar GL_UNSIGNED_BYTE$3 = 5121;\nvar GL_FLOAT$3 = 5126;\n\nvar DTYPES_SIZES = [];\nDTYPES_SIZES[5120] = 1; // int8\nDTYPES_SIZES[5122] = 2; // int16\nDTYPES_SIZES[5124] = 4; // int32\nDTYPES_SIZES[5121] = 1; // uint8\nDTYPES_SIZES[5123] = 2; // uint16\nDTYPES_SIZES[5125] = 4; // uint32\nDTYPES_SIZES[5126] = 4; // float32\n\nfunction typedArrayCode(data) {\n  return arrayTypes[Object.prototype.toString.call(data)] | 0;\n}\n\nfunction copyArray(out, inp) {\n  for (var i = 0; i < inp.length; ++i) {\n    out[i] = inp[i];\n  }\n}\n\nfunction transpose(result, data, shapeX, shapeY, strideX, strideY, offset) {\n  var ptr = 0;\n  for (var i = 0; i < shapeX; ++i) {\n    for (var j = 0; j < shapeY; ++j) {\n      result[ptr++] = data[strideX * i + strideY * j + offset];\n    }\n  }\n}\n\nfunction wrapBufferState(gl, stats, config, attributeState) {\n  var bufferCount = 0;\n  var bufferSet = {};\n\n  function REGLBuffer(type) {\n    this.id = bufferCount++;\n    this.buffer = gl.createBuffer();\n    this.type = type;\n    this.usage = GL_STATIC_DRAW;\n    this.byteLength = 0;\n    this.dimension = 1;\n    this.dtype = GL_UNSIGNED_BYTE$3;\n\n    this.persistentData = null;\n\n    if (config.profile) {\n      this.stats = { size: 0 };\n    }\n  }\n\n  REGLBuffer.prototype.bind = function () {\n    gl.bindBuffer(this.type, this.buffer);\n  };\n\n  REGLBuffer.prototype.destroy = function () {\n    destroy(this);\n  };\n\n  var streamPool = [];\n\n  function createStream(type, data) {\n    var buffer = streamPool.pop();\n    if (!buffer) {\n      buffer = new REGLBuffer(type);\n    }\n    buffer.bind();\n    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);\n    return buffer;\n  }\n\n  function destroyStream(stream$$1) {\n    streamPool.push(stream$$1);\n  }\n\n  function initBufferFromTypedArray(buffer, data, usage) {\n    buffer.byteLength = data.byteLength;\n    gl.bufferData(buffer.type, data, usage);\n  }\n\n  function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {\n    var shape;\n    buffer.usage = usage;\n    if (Array.isArray(data)) {\n      buffer.dtype = dtype || GL_FLOAT$3;\n      if (data.length > 0) {\n        var flatData;\n        if (Array.isArray(data[0])) {\n          shape = arrayShape(data);\n          var dim = 1;\n          for (var i = 1; i < shape.length; ++i) {\n            dim *= shape[i];\n          }\n          buffer.dimension = dim;\n          flatData = arrayFlatten(data, shape, buffer.dtype);\n          initBufferFromTypedArray(buffer, flatData, usage);\n          if (persist) {\n            buffer.persistentData = flatData;\n          } else {\n            pool.freeType(flatData);\n          }\n        } else if (typeof data[0] === 'number') {\n          buffer.dimension = dimension;\n          var typedData = pool.allocType(buffer.dtype, data.length);\n          copyArray(typedData, data);\n          initBufferFromTypedArray(buffer, typedData, usage);\n          if (persist) {\n            buffer.persistentData = typedData;\n          } else {\n            pool.freeType(typedData);\n          }\n        } else if (isTypedArray(data[0])) {\n          buffer.dimension = data[0].length;\n          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;\n          flatData = arrayFlatten(data, [data.length, data[0].length], buffer.dtype);\n          initBufferFromTypedArray(buffer, flatData, usage);\n          if (persist) {\n            buffer.persistentData = flatData;\n          } else {\n            pool.freeType(flatData);\n          }\n        } else {\n          check$1.raise('invalid buffer data');\n        }\n      }\n    } else if (isTypedArray(data)) {\n      buffer.dtype = dtype || typedArrayCode(data);\n      buffer.dimension = dimension;\n      initBufferFromTypedArray(buffer, data, usage);\n      if (persist) {\n        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));\n      }\n    } else if (isNDArrayLike(data)) {\n      shape = data.shape;\n      var stride = data.stride;\n      var offset = data.offset;\n\n      var shapeX = 0;\n      var shapeY = 0;\n      var strideX = 0;\n      var strideY = 0;\n      if (shape.length === 1) {\n        shapeX = shape[0];\n        shapeY = 1;\n        strideX = stride[0];\n        strideY = 0;\n      } else if (shape.length === 2) {\n        shapeX = shape[0];\n        shapeY = shape[1];\n        strideX = stride[0];\n        strideY = stride[1];\n      } else {\n        check$1.raise('invalid shape');\n      }\n\n      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;\n      buffer.dimension = shapeY;\n\n      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);\n      transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, offset);\n      initBufferFromTypedArray(buffer, transposeData, usage);\n      if (persist) {\n        buffer.persistentData = transposeData;\n      } else {\n        pool.freeType(transposeData);\n      }\n    } else {\n      check$1.raise('invalid buffer data');\n    }\n  }\n\n  function destroy(buffer) {\n    stats.bufferCount--;\n\n    for (var i = 0; i < attributeState.state.length; ++i) {\n      var record = attributeState.state[i];\n      if (record.buffer === buffer) {\n        gl.disableVertexAttribArray(i);\n        record.buffer = null;\n      }\n    }\n\n    var handle = buffer.buffer;\n    check$1(handle, 'buffer must not be deleted already');\n    gl.deleteBuffer(handle);\n    buffer.buffer = null;\n    delete bufferSet[buffer.id];\n  }\n\n  function createBuffer(options, type, deferInit, persistent) {\n    stats.bufferCount++;\n\n    var buffer = new REGLBuffer(type);\n    bufferSet[buffer.id] = buffer;\n\n    function reglBuffer(options) {\n      var usage = GL_STATIC_DRAW;\n      var data = null;\n      var byteLength = 0;\n      var dtype = 0;\n      var dimension = 1;\n      if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {\n        data = options;\n      } else if (typeof options === 'number') {\n        byteLength = options | 0;\n      } else if (options) {\n        check$1.type(options, 'object', 'buffer arguments must be an object, a number or an array');\n\n        if ('data' in options) {\n          check$1(data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for buffer');\n          data = options.data;\n        }\n\n        if ('usage' in options) {\n          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');\n          usage = usageTypes[options.usage];\n        }\n\n        if ('type' in options) {\n          check$1.parameter(options.type, glTypes, 'invalid buffer type');\n          dtype = glTypes[options.type];\n        }\n\n        if ('dimension' in options) {\n          check$1.type(options.dimension, 'number', 'invalid dimension');\n          dimension = options.dimension | 0;\n        }\n\n        if ('length' in options) {\n          check$1.nni(byteLength, 'buffer length must be a nonnegative integer');\n          byteLength = options.length | 0;\n        }\n      }\n\n      buffer.bind();\n      if (!data) {\n        // #475\n        if (byteLength) gl.bufferData(buffer.type, byteLength, usage);\n        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;\n        buffer.usage = usage;\n        buffer.dimension = dimension;\n        buffer.byteLength = byteLength;\n      } else {\n        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);\n      }\n\n      if (config.profile) {\n        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];\n      }\n\n      return reglBuffer;\n    }\n\n    function setSubData(data, offset) {\n      check$1(offset + data.byteLength <= buffer.byteLength, 'invalid buffer subdata call, buffer is too small. ' + ' Can\\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);\n\n      gl.bufferSubData(buffer.type, offset, data);\n    }\n\n    function subdata(data, offset_) {\n      var offset = (offset_ || 0) | 0;\n      var shape;\n      buffer.bind();\n      if (isTypedArray(data)) {\n        setSubData(data, offset);\n      } else if (Array.isArray(data)) {\n        if (data.length > 0) {\n          if (typeof data[0] === 'number') {\n            var converted = pool.allocType(buffer.dtype, data.length);\n            copyArray(converted, data);\n            setSubData(converted, offset);\n            pool.freeType(converted);\n          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n            shape = arrayShape(data);\n            var flatData = arrayFlatten(data, shape, buffer.dtype);\n            setSubData(flatData, offset);\n            pool.freeType(flatData);\n          } else {\n            check$1.raise('invalid buffer data');\n          }\n        }\n      } else if (isNDArrayLike(data)) {\n        shape = data.shape;\n        var stride = data.stride;\n\n        var shapeX = 0;\n        var shapeY = 0;\n        var strideX = 0;\n        var strideY = 0;\n        if (shape.length === 1) {\n          shapeX = shape[0];\n          shapeY = 1;\n          strideX = stride[0];\n          strideY = 0;\n        } else if (shape.length === 2) {\n          shapeX = shape[0];\n          shapeY = shape[1];\n          strideX = stride[0];\n          strideY = stride[1];\n        } else {\n          check$1.raise('invalid shape');\n        }\n        var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);\n\n        var transposeData = pool.allocType(dtype, shapeX * shapeY);\n        transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, data.offset);\n        setSubData(transposeData, offset);\n        pool.freeType(transposeData);\n      } else {\n        check$1.raise('invalid data for buffer subdata');\n      }\n      return reglBuffer;\n    }\n\n    if (!deferInit) {\n      reglBuffer(options);\n    }\n\n    reglBuffer._reglType = 'buffer';\n    reglBuffer._buffer = buffer;\n    reglBuffer.subdata = subdata;\n    if (config.profile) {\n      reglBuffer.stats = buffer.stats;\n    }\n    reglBuffer.destroy = function () {\n      destroy(buffer);\n    };\n\n    return reglBuffer;\n  }\n\n  function restoreBuffers() {\n    values(bufferSet).forEach(function (buffer) {\n      buffer.buffer = gl.createBuffer();\n      gl.bindBuffer(buffer.type, buffer.buffer);\n      gl.bufferData(buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);\n    });\n  }\n\n  if (config.profile) {\n    stats.getTotalBufferSize = function () {\n      var total = 0;\n      // TODO: Right now, the streams are not part of the total count.\n      Object.keys(bufferSet).forEach(function (key) {\n        total += bufferSet[key].stats.size;\n      });\n      return total;\n    };\n  }\n\n  return {\n    create: createBuffer,\n\n    createStream: createStream,\n    destroyStream: destroyStream,\n\n    clear: function clear() {\n      values(bufferSet).forEach(destroy);\n      streamPool.forEach(destroy);\n    },\n\n    getBuffer: function getBuffer(wrapper) {\n      if (wrapper && wrapper._buffer instanceof REGLBuffer) {\n        return wrapper._buffer;\n      }\n      return null;\n    },\n\n    restore: restoreBuffers,\n\n    _initBuffer: initBufferFromData\n  };\n}\n\nvar points = 0;\nvar point = 0;\nvar lines = 1;\nvar line = 1;\nvar triangles = 4;\nvar triangle = 4;\nvar primTypes = {\n  points: points,\n  point: point,\n  lines: lines,\n  line: line,\n  triangles: triangles,\n  triangle: triangle,\n  \"line loop\": 2,\n  \"line strip\": 3,\n  \"triangle strip\": 5,\n  \"triangle fan\": 6\n};\n\nvar GL_POINTS = 0;\nvar GL_LINES = 1;\nvar GL_TRIANGLES = 4;\n\nvar GL_BYTE$2 = 5120;\nvar GL_UNSIGNED_BYTE$4 = 5121;\nvar GL_SHORT$2 = 5122;\nvar GL_UNSIGNED_SHORT$2 = 5123;\nvar GL_INT$2 = 5124;\nvar GL_UNSIGNED_INT$2 = 5125;\n\nvar GL_ELEMENT_ARRAY_BUFFER = 34963;\n\nvar GL_STREAM_DRAW$1 = 0x88E0;\nvar GL_STATIC_DRAW$1 = 0x88E4;\n\nfunction wrapElementsState(gl, extensions, bufferState, stats) {\n  var elementSet = {};\n  var elementCount = 0;\n\n  var elementTypes = {\n    'uint8': GL_UNSIGNED_BYTE$4,\n    'uint16': GL_UNSIGNED_SHORT$2\n  };\n\n  if (extensions.oes_element_index_uint) {\n    elementTypes.uint32 = GL_UNSIGNED_INT$2;\n  }\n\n  function REGLElementBuffer(buffer) {\n    this.id = elementCount++;\n    elementSet[this.id] = this;\n    this.buffer = buffer;\n    this.primType = GL_TRIANGLES;\n    this.vertCount = 0;\n    this.type = 0;\n  }\n\n  REGLElementBuffer.prototype.bind = function () {\n    this.buffer.bind();\n  };\n\n  var bufferPool = [];\n\n  function createElementStream(data) {\n    var result = bufferPool.pop();\n    if (!result) {\n      result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);\n    }\n    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);\n    return result;\n  }\n\n  function destroyElementStream(elements) {\n    bufferPool.push(elements);\n  }\n\n  function initElements(elements, data, usage, prim, count, byteLength, type) {\n    elements.buffer.bind();\n    if (data) {\n      var predictedType = type;\n      if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {\n        predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;\n      }\n      bufferState._initBuffer(elements.buffer, data, usage, predictedType, 3);\n    } else {\n      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);\n      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;\n      elements.buffer.usage = usage;\n      elements.buffer.dimension = 3;\n      elements.buffer.byteLength = byteLength;\n    }\n\n    var dtype = type;\n    if (!type) {\n      switch (elements.buffer.dtype) {\n        case GL_UNSIGNED_BYTE$4:\n        case GL_BYTE$2:\n          dtype = GL_UNSIGNED_BYTE$4;\n          break;\n\n        case GL_UNSIGNED_SHORT$2:\n        case GL_SHORT$2:\n          dtype = GL_UNSIGNED_SHORT$2;\n          break;\n\n        case GL_UNSIGNED_INT$2:\n        case GL_INT$2:\n          dtype = GL_UNSIGNED_INT$2;\n          break;\n\n        default:\n          check$1.raise('unsupported type for element array');\n      }\n      elements.buffer.dtype = dtype;\n    }\n    elements.type = dtype;\n\n    // Check oes_element_index_uint extension\n    check$1(dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint, '32 bit element buffers not supported, enable oes_element_index_uint first');\n\n    // try to guess default primitive type and arguments\n    var vertCount = count;\n    if (vertCount < 0) {\n      vertCount = elements.buffer.byteLength;\n      if (dtype === GL_UNSIGNED_SHORT$2) {\n        vertCount >>= 1;\n      } else if (dtype === GL_UNSIGNED_INT$2) {\n        vertCount >>= 2;\n      }\n    }\n    elements.vertCount = vertCount;\n\n    // try to guess primitive type from cell dimension\n    var primType = prim;\n    if (prim < 0) {\n      primType = GL_TRIANGLES;\n      var dimension = elements.buffer.dimension;\n      if (dimension === 1) primType = GL_POINTS;\n      if (dimension === 2) primType = GL_LINES;\n      if (dimension === 3) primType = GL_TRIANGLES;\n    }\n    elements.primType = primType;\n  }\n\n  function destroyElements(elements) {\n    stats.elementsCount--;\n\n    check$1(elements.buffer !== null, 'must not double destroy elements');\n    delete elementSet[elements.id];\n    elements.buffer.destroy();\n    elements.buffer = null;\n  }\n\n  function createElements(options, persistent) {\n    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);\n    var elements = new REGLElementBuffer(buffer._buffer);\n    stats.elementsCount++;\n\n    function reglElements(options) {\n      if (!options) {\n        buffer();\n        elements.primType = GL_TRIANGLES;\n        elements.vertCount = 0;\n        elements.type = GL_UNSIGNED_BYTE$4;\n      } else if (typeof options === 'number') {\n        buffer(options);\n        elements.primType = GL_TRIANGLES;\n        elements.vertCount = options | 0;\n        elements.type = GL_UNSIGNED_BYTE$4;\n      } else {\n        var data = null;\n        var usage = GL_STATIC_DRAW$1;\n        var primType = -1;\n        var vertCount = -1;\n        var byteLength = 0;\n        var dtype = 0;\n        if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {\n          data = options;\n        } else {\n          check$1.type(options, 'object', 'invalid arguments for elements');\n          if ('data' in options) {\n            data = options.data;\n            check$1(Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for element buffer');\n          }\n          if ('usage' in options) {\n            check$1.parameter(options.usage, usageTypes, 'invalid element buffer usage');\n            usage = usageTypes[options.usage];\n          }\n          if ('primitive' in options) {\n            check$1.parameter(options.primitive, primTypes, 'invalid element buffer primitive');\n            primType = primTypes[options.primitive];\n          }\n          if ('count' in options) {\n            check$1(typeof options.count === 'number' && options.count >= 0, 'invalid vertex count for elements');\n            vertCount = options.count | 0;\n          }\n          if ('type' in options) {\n            check$1.parameter(options.type, elementTypes, 'invalid buffer type');\n            dtype = elementTypes[options.type];\n          }\n          if ('length' in options) {\n            byteLength = options.length | 0;\n          } else {\n            byteLength = vertCount;\n            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {\n              byteLength *= 2;\n            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {\n              byteLength *= 4;\n            }\n          }\n        }\n        initElements(elements, data, usage, primType, vertCount, byteLength, dtype);\n      }\n\n      return reglElements;\n    }\n\n    reglElements(options);\n\n    reglElements._reglType = 'elements';\n    reglElements._elements = elements;\n    reglElements.subdata = function (data, offset) {\n      buffer.subdata(data, offset);\n      return reglElements;\n    };\n    reglElements.destroy = function () {\n      destroyElements(elements);\n    };\n\n    return reglElements;\n  }\n\n  return {\n    create: createElements,\n    createStream: createElementStream,\n    destroyStream: destroyElementStream,\n    getElements: function getElements(elements) {\n      if (typeof elements === 'function' && elements._elements instanceof REGLElementBuffer) {\n        return elements._elements;\n      }\n      return null;\n    },\n    clear: function clear() {\n      values(elementSet).forEach(destroyElements);\n    }\n  };\n}\n\nvar FLOAT = new Float32Array(1);\nvar INT = new Uint32Array(FLOAT.buffer);\n\nvar GL_UNSIGNED_SHORT$4 = 5123;\n\nfunction convertToHalfFloat(array) {\n  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);\n\n  for (var i = 0; i < array.length; ++i) {\n    if (isNaN(array[i])) {\n      ushorts[i] = 0xffff;\n    } else if (array[i] === Infinity) {\n      ushorts[i] = 0x7c00;\n    } else if (array[i] === -Infinity) {\n      ushorts[i] = 0xfc00;\n    } else {\n      FLOAT[0] = array[i];\n      var x = INT[0];\n\n      var sgn = x >>> 31 << 15;\n      var exp = (x << 1 >>> 24) - 127;\n      var frac = x >> 13 & (1 << 10) - 1;\n\n      if (exp < -24) {\n        // round non-representable denormals to 0\n        ushorts[i] = sgn;\n      } else if (exp < -14) {\n        // handle denormals\n        var s = -14 - exp;\n        ushorts[i] = sgn + (frac + (1 << 10) >> s);\n      } else if (exp > 15) {\n        // round overflow to +/- Infinity\n        ushorts[i] = sgn + 0x7c00;\n      } else {\n        // otherwise convert directly\n        ushorts[i] = sgn + (exp + 15 << 10) + frac;\n      }\n    }\n  }\n\n  return ushorts;\n}\n\nfunction isArrayLike(s) {\n  return Array.isArray(s) || isTypedArray(s);\n}\n\nvar isPow2$1 = function isPow2$1(v) {\n  return !(v & v - 1) && !!v;\n};\n\nvar GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;\n\nvar GL_TEXTURE_2D$1 = 0x0DE1;\nvar GL_TEXTURE_CUBE_MAP$1 = 0x8513;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;\n\nvar GL_RGBA$1 = 0x1908;\nvar GL_ALPHA = 0x1906;\nvar GL_RGB = 0x1907;\nvar GL_LUMINANCE = 0x1909;\nvar GL_LUMINANCE_ALPHA = 0x190A;\n\nvar GL_RGBA4 = 0x8056;\nvar GL_RGB5_A1 = 0x8057;\nvar GL_RGB565 = 0x8D62;\n\nvar GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\nvar GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\nvar GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;\nvar GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;\n\nvar GL_DEPTH_COMPONENT = 0x1902;\nvar GL_DEPTH_STENCIL = 0x84F9;\n\nvar GL_SRGB_EXT = 0x8C40;\nvar GL_SRGB_ALPHA_EXT = 0x8C42;\n\nvar GL_HALF_FLOAT_OES$1 = 0x8D61;\n\nvar GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\nvar GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\nvar GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\nvar GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\n\nvar GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\nvar GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\nvar GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\n\nvar GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\nvar GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\nvar GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\nvar GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\n\nvar GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\n\nvar GL_UNSIGNED_BYTE$5 = 0x1401;\nvar GL_UNSIGNED_SHORT$3 = 0x1403;\nvar GL_UNSIGNED_INT$3 = 0x1405;\nvar GL_FLOAT$4 = 0x1406;\n\nvar GL_TEXTURE_WRAP_S = 0x2802;\nvar GL_TEXTURE_WRAP_T = 0x2803;\n\nvar GL_REPEAT = 0x2901;\nvar GL_CLAMP_TO_EDGE$1 = 0x812F;\nvar GL_MIRRORED_REPEAT = 0x8370;\n\nvar GL_TEXTURE_MAG_FILTER = 0x2800;\nvar GL_TEXTURE_MIN_FILTER = 0x2801;\n\nvar GL_NEAREST$1 = 0x2600;\nvar GL_LINEAR = 0x2601;\nvar GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;\nvar GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;\nvar GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;\nvar GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;\n\nvar GL_GENERATE_MIPMAP_HINT = 0x8192;\nvar GL_DONT_CARE = 0x1100;\nvar GL_FASTEST = 0x1101;\nvar GL_NICEST = 0x1102;\n\nvar GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;\n\nvar GL_UNPACK_ALIGNMENT = 0x0CF5;\nvar GL_UNPACK_FLIP_Y_WEBGL = 0x9240;\nvar GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\nvar GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\n\nvar GL_BROWSER_DEFAULT_WEBGL = 0x9244;\n\nvar GL_TEXTURE0$1 = 0x84C0;\n\nvar MIPMAP_FILTERS = [GL_NEAREST_MIPMAP_NEAREST$1, GL_NEAREST_MIPMAP_LINEAR$1, GL_LINEAR_MIPMAP_NEAREST$1, GL_LINEAR_MIPMAP_LINEAR$1];\n\nvar CHANNELS_FORMAT = [0, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA$1];\n\nvar FORMAT_CHANNELS = {};\nFORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;\nFORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;\nFORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;\nFORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;\n\nfunction objectName(str) {\n  return '[object ' + str + ']';\n}\n\nvar CANVAS_CLASS = objectName('HTMLCanvasElement');\nvar CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');\nvar BITMAP_CLASS = objectName('ImageBitmap');\nvar IMAGE_CLASS = objectName('HTMLImageElement');\nvar VIDEO_CLASS = objectName('HTMLVideoElement');\n\nvar PIXEL_CLASSES = Object.keys(arrayTypes).concat([CANVAS_CLASS, CONTEXT2D_CLASS, BITMAP_CLASS, IMAGE_CLASS, VIDEO_CLASS]);\n\n// for every texture type, store\n// the size in bytes.\nvar TYPE_SIZES = [];\nTYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;\nTYPE_SIZES[GL_FLOAT$4] = 4;\nTYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;\n\nTYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;\nTYPE_SIZES[GL_UNSIGNED_INT$3] = 4;\n\nvar FORMAT_SIZES_SPECIAL = [];\nFORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;\nFORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;\nFORMAT_SIZES_SPECIAL[GL_RGB565] = 2;\nFORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;\n\nFORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;\n\nfunction isNumericArray(arr) {\n  return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === 'number');\n}\n\nfunction isRectArray(arr) {\n  if (!Array.isArray(arr)) {\n    return false;\n  }\n  var width = arr.length;\n  if (width === 0 || !isArrayLike(arr[0])) {\n    return false;\n  }\n  return true;\n}\n\nfunction classString(x) {\n  return Object.prototype.toString.call(x);\n}\n\nfunction isCanvasElement(object) {\n  return classString(object) === CANVAS_CLASS;\n}\n\nfunction isContext2D(object) {\n  return classString(object) === CONTEXT2D_CLASS;\n}\n\nfunction isBitmap(object) {\n  return classString(object) === BITMAP_CLASS;\n}\n\nfunction isImageElement(object) {\n  return classString(object) === IMAGE_CLASS;\n}\n\nfunction isVideoElement(object) {\n  return classString(object) === VIDEO_CLASS;\n}\n\nfunction isPixelData(object) {\n  if (!object) {\n    return false;\n  }\n  var className = classString(object);\n  if (PIXEL_CLASSES.indexOf(className) >= 0) {\n    return true;\n  }\n  return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);\n}\n\nfunction typedArrayCode$1(data) {\n  return arrayTypes[Object.prototype.toString.call(data)] | 0;\n}\n\nfunction convertData(result, data) {\n  var n = data.length;\n  switch (result.type) {\n    case GL_UNSIGNED_BYTE$5:\n    case GL_UNSIGNED_SHORT$3:\n    case GL_UNSIGNED_INT$3:\n    case GL_FLOAT$4:\n      var converted = pool.allocType(result.type, n);\n      converted.set(data);\n      result.data = converted;\n      break;\n\n    case GL_HALF_FLOAT_OES$1:\n      result.data = convertToHalfFloat(data);\n      break;\n\n    default:\n      check$1.raise('unsupported texture type, must specify a typed array');\n  }\n}\n\nfunction preConvert(image, n) {\n  return pool.allocType(image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type, n);\n}\n\nfunction postConvert(image, data) {\n  if (image.type === GL_HALF_FLOAT_OES$1) {\n    image.data = convertToHalfFloat(data);\n    pool.freeType(data);\n  } else {\n    image.data = data;\n  }\n}\n\nfunction transposeData(image, array, strideX, strideY, strideC, offset) {\n  var w = image.width;\n  var h = image.height;\n  var c = image.channels;\n  var n = w * h * c;\n  var data = preConvert(image, n);\n\n  var p = 0;\n  for (var i = 0; i < h; ++i) {\n    for (var j = 0; j < w; ++j) {\n      for (var k = 0; k < c; ++k) {\n        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];\n      }\n    }\n  }\n\n  postConvert(image, data);\n}\n\nfunction getTextureSize(format, type, width, height, isMipmap, isCube) {\n  var s;\n  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {\n    // we have a special array for dealing with weird color formats such as RGB5A1\n    s = FORMAT_SIZES_SPECIAL[format];\n  } else {\n    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];\n  }\n\n  if (isCube) {\n    s *= 6;\n  }\n\n  if (isMipmap) {\n    // compute the total size of all the mipmaps.\n    var total = 0;\n\n    var w = width;\n    while (w >= 1) {\n      // we can only use mipmaps on a square image,\n      // so we can simply use the width and ignore the height:\n      total += s * w * w;\n      w /= 2;\n    }\n    return total;\n  } else {\n    return s * width * height;\n  }\n}\n\nfunction createTextureSet(gl, extensions, limits, reglPoll, contextState, stats, config) {\n  // -------------------------------------------------------\n  // Initialize constants and parameter tables here\n  // -------------------------------------------------------\n  var mipmapHint = {\n    \"don't care\": GL_DONT_CARE,\n    'dont care': GL_DONT_CARE,\n    'nice': GL_NICEST,\n    'fast': GL_FASTEST\n  };\n\n  var wrapModes = {\n    'repeat': GL_REPEAT,\n    'clamp': GL_CLAMP_TO_EDGE$1,\n    'mirror': GL_MIRRORED_REPEAT\n  };\n\n  var magFilters = {\n    'nearest': GL_NEAREST$1,\n    'linear': GL_LINEAR\n  };\n\n  var minFilters = extend({\n    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,\n    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,\n    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,\n    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,\n    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1\n  }, magFilters);\n\n  var colorSpace = {\n    'none': 0,\n    'browser': GL_BROWSER_DEFAULT_WEBGL\n  };\n\n  var textureTypes = {\n    'uint8': GL_UNSIGNED_BYTE$5,\n    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,\n    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,\n    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1\n  };\n\n  var textureFormats = {\n    'alpha': GL_ALPHA,\n    'luminance': GL_LUMINANCE,\n    'luminance alpha': GL_LUMINANCE_ALPHA,\n    'rgb': GL_RGB,\n    'rgba': GL_RGBA$1,\n    'rgba4': GL_RGBA4,\n    'rgb5 a1': GL_RGB5_A1,\n    'rgb565': GL_RGB565\n  };\n\n  var compressedTextureFormats = {};\n\n  if (extensions.ext_srgb) {\n    textureFormats.srgb = GL_SRGB_EXT;\n    textureFormats.srgba = GL_SRGB_ALPHA_EXT;\n  }\n\n  if (extensions.oes_texture_float) {\n    textureTypes.float32 = textureTypes.float = GL_FLOAT$4;\n  }\n\n  if (extensions.oes_texture_half_float) {\n    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;\n  }\n\n  if (extensions.webgl_depth_texture) {\n    extend(textureFormats, {\n      'depth': GL_DEPTH_COMPONENT,\n      'depth stencil': GL_DEPTH_STENCIL\n    });\n\n    extend(textureTypes, {\n      'uint16': GL_UNSIGNED_SHORT$3,\n      'uint32': GL_UNSIGNED_INT$3,\n      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1\n    });\n  }\n\n  if (extensions.webgl_compressed_texture_s3tc) {\n    extend(compressedTextureFormats, {\n      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,\n      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,\n      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,\n      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT\n    });\n  }\n\n  if (extensions.webgl_compressed_texture_atc) {\n    extend(compressedTextureFormats, {\n      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,\n      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,\n      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\n    });\n  }\n\n  if (extensions.webgl_compressed_texture_pvrtc) {\n    extend(compressedTextureFormats, {\n      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\n    });\n  }\n\n  if (extensions.webgl_compressed_texture_etc1) {\n    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;\n  }\n\n  // Copy over all texture formats\n  var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));\n  Object.keys(compressedTextureFormats).forEach(function (name) {\n    var format = compressedTextureFormats[name];\n    if (supportedCompressedFormats.indexOf(format) >= 0) {\n      textureFormats[name] = format;\n    }\n  });\n\n  var supportedFormats = Object.keys(textureFormats);\n  limits.textureFormats = supportedFormats;\n\n  // associate with every format string its\n  // corresponding GL-value.\n  var textureFormatsInvert = [];\n  Object.keys(textureFormats).forEach(function (key) {\n    var val = textureFormats[key];\n    textureFormatsInvert[val] = key;\n  });\n\n  // associate with every type string its\n  // corresponding GL-value.\n  var textureTypesInvert = [];\n  Object.keys(textureTypes).forEach(function (key) {\n    var val = textureTypes[key];\n    textureTypesInvert[val] = key;\n  });\n\n  var magFiltersInvert = [];\n  Object.keys(magFilters).forEach(function (key) {\n    var val = magFilters[key];\n    magFiltersInvert[val] = key;\n  });\n\n  var minFiltersInvert = [];\n  Object.keys(minFilters).forEach(function (key) {\n    var val = minFilters[key];\n    minFiltersInvert[val] = key;\n  });\n\n  var wrapModesInvert = [];\n  Object.keys(wrapModes).forEach(function (key) {\n    var val = wrapModes[key];\n    wrapModesInvert[val] = key;\n  });\n\n  // colorFormats[] gives the format (channels) associated to an\n  // internalformat\n  var colorFormats = supportedFormats.reduce(function (color, key) {\n    var glenum = textureFormats[key];\n    if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL) {\n      color[glenum] = glenum;\n    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {\n      color[glenum] = GL_RGBA$1;\n    } else {\n      color[glenum] = GL_RGB;\n    }\n    return color;\n  }, {});\n\n  function TexFlags() {\n    // format info\n    this.internalformat = GL_RGBA$1;\n    this.format = GL_RGBA$1;\n    this.type = GL_UNSIGNED_BYTE$5;\n    this.compressed = false;\n\n    // pixel storage\n    this.premultiplyAlpha = false;\n    this.flipY = false;\n    this.unpackAlignment = 1;\n    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;\n\n    // shape info\n    this.width = 0;\n    this.height = 0;\n    this.channels = 0;\n  }\n\n  function copyFlags(result, other) {\n    result.internalformat = other.internalformat;\n    result.format = other.format;\n    result.type = other.type;\n    result.compressed = other.compressed;\n\n    result.premultiplyAlpha = other.premultiplyAlpha;\n    result.flipY = other.flipY;\n    result.unpackAlignment = other.unpackAlignment;\n    result.colorSpace = other.colorSpace;\n\n    result.width = other.width;\n    result.height = other.height;\n    result.channels = other.channels;\n  }\n\n  function parseFlags(flags, options) {\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || !options) {\n      return;\n    }\n\n    if ('premultiplyAlpha' in options) {\n      check$1.type(options.premultiplyAlpha, 'boolean', 'invalid premultiplyAlpha');\n      flags.premultiplyAlpha = options.premultiplyAlpha;\n    }\n\n    if ('flipY' in options) {\n      check$1.type(options.flipY, 'boolean', 'invalid texture flip');\n      flags.flipY = options.flipY;\n    }\n\n    if ('alignment' in options) {\n      check$1.oneOf(options.alignment, [1, 2, 4, 8], 'invalid texture unpack alignment');\n      flags.unpackAlignment = options.alignment;\n    }\n\n    if ('colorSpace' in options) {\n      check$1.parameter(options.colorSpace, colorSpace, 'invalid colorSpace');\n      flags.colorSpace = colorSpace[options.colorSpace];\n    }\n\n    if ('type' in options) {\n      var type = options.type;\n      check$1(extensions.oes_texture_float || !(type === 'float' || type === 'float32'), 'you must enable the OES_texture_float extension in order to use floating point textures.');\n      check$1(extensions.oes_texture_half_float || !(type === 'half float' || type === 'float16'), 'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');\n      check$1(extensions.webgl_depth_texture || !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\n      check$1.parameter(type, textureTypes, 'invalid texture type');\n      flags.type = textureTypes[type];\n    }\n\n    var w = flags.width;\n    var h = flags.height;\n    var c = flags.channels;\n    var hasChannels = false;\n    if ('shape' in options) {\n      check$1(Array.isArray(options.shape) && options.shape.length >= 2, 'shape must be an array');\n      w = options.shape[0];\n      h = options.shape[1];\n      if (options.shape.length === 3) {\n        c = options.shape[2];\n        check$1(c > 0 && c <= 4, 'invalid number of channels');\n        hasChannels = true;\n      }\n      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\n      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\n    } else {\n      if ('radius' in options) {\n        w = h = options.radius;\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');\n      }\n      if ('width' in options) {\n        w = options.width;\n        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');\n      }\n      if ('height' in options) {\n        h = options.height;\n        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');\n      }\n      if ('channels' in options) {\n        c = options.channels;\n        check$1(c > 0 && c <= 4, 'invalid number of channels');\n        hasChannels = true;\n      }\n    }\n    flags.width = w | 0;\n    flags.height = h | 0;\n    flags.channels = c | 0;\n\n    var hasFormat = false;\n    if ('format' in options) {\n      var formatStr = options.format;\n      check$1(extensions.webgl_depth_texture || !(formatStr === 'depth' || formatStr === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');\n      check$1.parameter(formatStr, textureFormats, 'invalid texture format');\n      var internalformat = flags.internalformat = textureFormats[formatStr];\n      flags.format = colorFormats[internalformat];\n      if (formatStr in textureTypes) {\n        if (!('type' in options)) {\n          flags.type = textureTypes[formatStr];\n        }\n      }\n      if (formatStr in compressedTextureFormats) {\n        flags.compressed = true;\n      }\n      hasFormat = true;\n    }\n\n    // Reconcile channels and format\n    if (!hasChannels && hasFormat) {\n      flags.channels = FORMAT_CHANNELS[flags.format];\n    } else if (hasChannels && !hasFormat) {\n      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {\n        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];\n      }\n    } else if (hasFormat && hasChannels) {\n      check$1(flags.channels === FORMAT_CHANNELS[flags.format], 'number of channels inconsistent with specified format');\n    }\n  }\n\n  function setFlags(flags) {\n    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);\n    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);\n    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);\n    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);\n  }\n\n  // -------------------------------------------------------\n  // Tex image data\n  // -------------------------------------------------------\n  function TexImage() {\n    TexFlags.call(this);\n\n    this.xOffset = 0;\n    this.yOffset = 0;\n\n    // data\n    this.data = null;\n    this.needsFree = false;\n\n    // html element\n    this.element = null;\n\n    // copyTexImage info\n    this.needsCopy = false;\n  }\n\n  function parseImage(image, options) {\n    var data = null;\n    if (isPixelData(options)) {\n      data = options;\n    } else if (options) {\n      check$1.type(options, 'object', 'invalid pixel data type');\n      parseFlags(image, options);\n      if ('x' in options) {\n        image.xOffset = options.x | 0;\n      }\n      if ('y' in options) {\n        image.yOffset = options.y | 0;\n      }\n      if (isPixelData(options.data)) {\n        data = options.data;\n      }\n    }\n\n    check$1(!image.compressed || data instanceof Uint8Array, 'compressed texture data must be stored in a uint8array');\n\n    if (options.copy) {\n      check$1(!data, 'can not specify copy and data field for the same texture');\n      var viewW = contextState.viewportWidth;\n      var viewH = contextState.viewportHeight;\n      image.width = image.width || viewW - image.xOffset;\n      image.height = image.height || viewH - image.yOffset;\n      image.needsCopy = true;\n      check$1(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, 'copy texture read out of bounds');\n    } else if (!data) {\n      image.width = image.width || 1;\n      image.height = image.height || 1;\n      image.channels = image.channels || 4;\n    } else if (isTypedArray(data)) {\n      image.channels = image.channels || 4;\n      image.data = data;\n      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {\n        image.type = typedArrayCode$1(data);\n      }\n    } else if (isNumericArray(data)) {\n      image.channels = image.channels || 4;\n      convertData(image, data);\n      image.alignment = 1;\n      image.needsFree = true;\n    } else if (isNDArrayLike(data)) {\n      var array = data.data;\n      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {\n        image.type = typedArrayCode$1(array);\n      }\n      var shape = data.shape;\n      var stride = data.stride;\n      var shapeX, shapeY, shapeC, strideX, strideY, strideC;\n      if (shape.length === 3) {\n        shapeC = shape[2];\n        strideC = stride[2];\n      } else {\n        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');\n        shapeC = 1;\n        strideC = 1;\n      }\n      shapeX = shape[0];\n      shapeY = shape[1];\n      strideX = stride[0];\n      strideY = stride[1];\n      image.alignment = 1;\n      image.width = shapeX;\n      image.height = shapeY;\n      image.channels = shapeC;\n      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];\n      image.needsFree = true;\n      transposeData(image, array, strideX, strideY, strideC, data.offset);\n    } else if (isCanvasElement(data) || isContext2D(data)) {\n      if (isCanvasElement(data)) {\n        image.element = data;\n      } else {\n        image.element = data.canvas;\n      }\n      image.width = image.element.width;\n      image.height = image.element.height;\n      image.channels = 4;\n    } else if (isBitmap(data)) {\n      image.element = data;\n      image.width = data.width;\n      image.height = data.height;\n      image.channels = 4;\n    } else if (isImageElement(data)) {\n      image.element = data;\n      image.width = data.naturalWidth;\n      image.height = data.naturalHeight;\n      image.channels = 4;\n    } else if (isVideoElement(data)) {\n      image.element = data;\n      image.width = data.videoWidth;\n      image.height = data.videoHeight;\n      image.channels = 4;\n    } else if (isRectArray(data)) {\n      var w = image.width || data[0].length;\n      var h = image.height || data.length;\n      var c = image.channels;\n      if (isArrayLike(data[0][0])) {\n        c = c || data[0][0].length;\n      } else {\n        c = c || 1;\n      }\n      var arrayShape = flattenUtils.shape(data);\n      var n = 1;\n      for (var dd = 0; dd < arrayShape.length; ++dd) {\n        n *= arrayShape[dd];\n      }\n      var allocData = preConvert(image, n);\n      flattenUtils.flatten(data, arrayShape, '', allocData);\n      postConvert(image, allocData);\n      image.alignment = 1;\n      image.width = w;\n      image.height = h;\n      image.channels = c;\n      image.format = image.internalformat = CHANNELS_FORMAT[c];\n      image.needsFree = true;\n    }\n\n    if (image.type === GL_FLOAT$4) {\n      check$1(limits.extensions.indexOf('oes_texture_float') >= 0, 'oes_texture_float extension not enabled');\n    } else if (image.type === GL_HALF_FLOAT_OES$1) {\n      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0, 'oes_texture_half_float extension not enabled');\n    }\n\n    // do compressed texture  validation here.\n  }\n\n  function setImage(info, target, miplevel) {\n    var element = info.element;\n    var data = info.data;\n    var internalformat = info.internalformat;\n    var format = info.format;\n    var type = info.type;\n    var width = info.width;\n    var height = info.height;\n    var channels = info.channels;\n\n    setFlags(info);\n\n    if (element) {\n      gl.texImage2D(target, miplevel, format, format, type, element);\n    } else if (info.compressed) {\n      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);\n    } else if (info.needsCopy) {\n      reglPoll();\n      gl.copyTexImage2D(target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);\n    } else {\n      var nullData = !data;\n      if (nullData) {\n        data = pool.zero.allocType(type, width * height * channels);\n      }\n\n      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);\n\n      if (nullData && data) {\n        pool.zero.freeType(data);\n      }\n    }\n  }\n\n  function setSubImage(info, target, x, y, miplevel) {\n    var element = info.element;\n    var data = info.data;\n    var internalformat = info.internalformat;\n    var format = info.format;\n    var type = info.type;\n    var width = info.width;\n    var height = info.height;\n\n    setFlags(info);\n\n    if (element) {\n      gl.texSubImage2D(target, miplevel, x, y, format, type, element);\n    } else if (info.compressed) {\n      gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data);\n    } else if (info.needsCopy) {\n      reglPoll();\n      gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);\n    } else {\n      gl.texSubImage2D(target, miplevel, x, y, width, height, format, type, data);\n    }\n  }\n\n  // texImage pool\n  var imagePool = [];\n\n  function allocImage() {\n    return imagePool.pop() || new TexImage();\n  }\n\n  function freeImage(image) {\n    if (image.needsFree) {\n      pool.freeType(image.data);\n    }\n    TexImage.call(image);\n    imagePool.push(image);\n  }\n\n  // -------------------------------------------------------\n  // Mip map\n  // -------------------------------------------------------\n  function MipMap() {\n    TexFlags.call(this);\n\n    this.genMipmaps = false;\n    this.mipmapHint = GL_DONT_CARE;\n    this.mipmask = 0;\n    this.images = Array(16);\n  }\n\n  function parseMipMapFromShape(mipmap, width, height) {\n    var img = mipmap.images[0] = allocImage();\n    mipmap.mipmask = 1;\n    img.width = mipmap.width = width;\n    img.height = mipmap.height = height;\n    img.channels = mipmap.channels = 4;\n  }\n\n  function parseMipMapFromObject(mipmap, options) {\n    var imgData = null;\n    if (isPixelData(options)) {\n      imgData = mipmap.images[0] = allocImage();\n      copyFlags(imgData, mipmap);\n      parseImage(imgData, options);\n      mipmap.mipmask = 1;\n    } else {\n      parseFlags(mipmap, options);\n      if (Array.isArray(options.mipmap)) {\n        var mipData = options.mipmap;\n        for (var i = 0; i < mipData.length; ++i) {\n          imgData = mipmap.images[i] = allocImage();\n          copyFlags(imgData, mipmap);\n          imgData.width >>= i;\n          imgData.height >>= i;\n          parseImage(imgData, mipData[i]);\n          mipmap.mipmask |= 1 << i;\n        }\n      } else {\n        imgData = mipmap.images[0] = allocImage();\n        copyFlags(imgData, mipmap);\n        parseImage(imgData, options);\n        mipmap.mipmask = 1;\n      }\n    }\n    copyFlags(mipmap, mipmap.images[0]);\n\n    // For textures of the compressed format WEBGL_compressed_texture_s3tc\n    // we must have that\n    //\n    // \"When level equals zero width and height must be a multiple of 4.\n    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. \"\n    //\n    // but we do not yet support having multiple mipmap levels for compressed textures,\n    // so we only test for level zero.\n\n    if (mipmap.compressed && mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT) {\n      check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, 'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');\n    }\n  }\n\n  function setMipMap(mipmap, target) {\n    var images = mipmap.images;\n    for (var i = 0; i < images.length; ++i) {\n      if (!images[i]) {\n        return;\n      }\n      setImage(images[i], target, i);\n    }\n  }\n\n  var mipPool = [];\n\n  function allocMipMap() {\n    var result = mipPool.pop() || new MipMap();\n    TexFlags.call(result);\n    result.mipmask = 0;\n    for (var i = 0; i < 16; ++i) {\n      result.images[i] = null;\n    }\n    return result;\n  }\n\n  function freeMipMap(mipmap) {\n    var images = mipmap.images;\n    for (var i = 0; i < images.length; ++i) {\n      if (images[i]) {\n        freeImage(images[i]);\n      }\n      images[i] = null;\n    }\n    mipPool.push(mipmap);\n  }\n\n  // -------------------------------------------------------\n  // Tex info\n  // -------------------------------------------------------\n  function TexInfo() {\n    this.minFilter = GL_NEAREST$1;\n    this.magFilter = GL_NEAREST$1;\n\n    this.wrapS = GL_CLAMP_TO_EDGE$1;\n    this.wrapT = GL_CLAMP_TO_EDGE$1;\n\n    this.anisotropic = 1;\n\n    this.genMipmaps = false;\n    this.mipmapHint = GL_DONT_CARE;\n  }\n\n  function parseTexInfo(info, options) {\n    if ('min' in options) {\n      var minFilter = options.min;\n      check$1.parameter(minFilter, minFilters);\n      info.minFilter = minFilters[minFilter];\n      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {\n        info.genMipmaps = true;\n      }\n    }\n\n    if ('mag' in options) {\n      var magFilter = options.mag;\n      check$1.parameter(magFilter, magFilters);\n      info.magFilter = magFilters[magFilter];\n    }\n\n    var wrapS = info.wrapS;\n    var wrapT = info.wrapT;\n    if ('wrap' in options) {\n      var wrap = options.wrap;\n      if (typeof wrap === 'string') {\n        check$1.parameter(wrap, wrapModes);\n        wrapS = wrapT = wrapModes[wrap];\n      } else if (Array.isArray(wrap)) {\n        check$1.parameter(wrap[0], wrapModes);\n        check$1.parameter(wrap[1], wrapModes);\n        wrapS = wrapModes[wrap[0]];\n        wrapT = wrapModes[wrap[1]];\n      }\n    } else {\n      if ('wrapS' in options) {\n        var optWrapS = options.wrapS;\n        check$1.parameter(optWrapS, wrapModes);\n        wrapS = wrapModes[optWrapS];\n      }\n      if ('wrapT' in options) {\n        var optWrapT = options.wrapT;\n        check$1.parameter(optWrapT, wrapModes);\n        wrapT = wrapModes[optWrapT];\n      }\n    }\n    info.wrapS = wrapS;\n    info.wrapT = wrapT;\n\n    if ('anisotropic' in options) {\n      var anisotropic = options.anisotropic;\n      check$1(typeof anisotropic === 'number' && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, 'aniso samples must be between 1 and ');\n      info.anisotropic = options.anisotropic;\n    }\n\n    if ('mipmap' in options) {\n      var hasMipMap = false;\n      switch (_typeof(options.mipmap)) {\n        case 'string':\n          check$1.parameter(options.mipmap, mipmapHint, 'invalid mipmap hint');\n          info.mipmapHint = mipmapHint[options.mipmap];\n          info.genMipmaps = true;\n          hasMipMap = true;\n          break;\n\n        case 'boolean':\n          hasMipMap = info.genMipmaps = options.mipmap;\n          break;\n\n        case 'object':\n          check$1(Array.isArray(options.mipmap), 'invalid mipmap type');\n          info.genMipmaps = false;\n          hasMipMap = true;\n          break;\n\n        default:\n          check$1.raise('invalid mipmap type');\n      }\n      if (hasMipMap && !('min' in options)) {\n        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;\n      }\n    }\n  }\n\n  function setTexInfo(info, target) {\n    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);\n    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);\n    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);\n    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);\n    if (extensions.ext_texture_filter_anisotropic) {\n      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);\n    }\n    if (info.genMipmaps) {\n      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);\n      gl.generateMipmap(target);\n    }\n  }\n\n  // -------------------------------------------------------\n  // Full texture object\n  // -------------------------------------------------------\n  var textureCount = 0;\n  var textureSet = {};\n  var numTexUnits = limits.maxTextureUnits;\n  var textureUnits = Array(numTexUnits).map(function () {\n    return null;\n  });\n\n  function REGLTexture(target) {\n    TexFlags.call(this);\n    this.mipmask = 0;\n    this.internalformat = GL_RGBA$1;\n\n    this.id = textureCount++;\n\n    this.refCount = 1;\n\n    this.target = target;\n    this.texture = gl.createTexture();\n\n    this.unit = -1;\n    this.bindCount = 0;\n\n    this.texInfo = new TexInfo();\n\n    if (config.profile) {\n      this.stats = { size: 0 };\n    }\n  }\n\n  function tempBind(texture) {\n    gl.activeTexture(GL_TEXTURE0$1);\n    gl.bindTexture(texture.target, texture.texture);\n  }\n\n  function tempRestore() {\n    var prev = textureUnits[0];\n    if (prev) {\n      gl.bindTexture(prev.target, prev.texture);\n    } else {\n      gl.bindTexture(GL_TEXTURE_2D$1, null);\n    }\n  }\n\n  function destroy(texture) {\n    var handle = texture.texture;\n    check$1(handle, 'must not double destroy texture');\n    var unit = texture.unit;\n    var target = texture.target;\n    if (unit >= 0) {\n      gl.activeTexture(GL_TEXTURE0$1 + unit);\n      gl.bindTexture(target, null);\n      textureUnits[unit] = null;\n    }\n    gl.deleteTexture(handle);\n    texture.texture = null;\n    texture.params = null;\n    texture.pixels = null;\n    texture.refCount = 0;\n    delete textureSet[texture.id];\n    stats.textureCount--;\n  }\n\n  extend(REGLTexture.prototype, {\n    bind: function bind() {\n      var texture = this;\n      texture.bindCount += 1;\n      var unit = texture.unit;\n      if (unit < 0) {\n        for (var i = 0; i < numTexUnits; ++i) {\n          var other = textureUnits[i];\n          if (other) {\n            if (other.bindCount > 0) {\n              continue;\n            }\n            other.unit = -1;\n          }\n          textureUnits[i] = texture;\n          unit = i;\n          break;\n        }\n        if (unit >= numTexUnits) {\n          check$1.raise('insufficient number of texture units');\n        }\n        if (config.profile && stats.maxTextureUnits < unit + 1) {\n          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based\n        }\n        texture.unit = unit;\n        gl.activeTexture(GL_TEXTURE0$1 + unit);\n        gl.bindTexture(texture.target, texture.texture);\n      }\n      return unit;\n    },\n\n    unbind: function unbind() {\n      this.bindCount -= 1;\n    },\n\n    decRef: function decRef() {\n      if (--this.refCount <= 0) {\n        destroy(this);\n      }\n    }\n  });\n\n  function createTexture2D(a, b) {\n    var texture = new REGLTexture(GL_TEXTURE_2D$1);\n    textureSet[texture.id] = texture;\n    stats.textureCount++;\n\n    function reglTexture2D(a, b) {\n      var texInfo = texture.texInfo;\n      TexInfo.call(texInfo);\n      var mipData = allocMipMap();\n\n      if (typeof a === 'number') {\n        if (typeof b === 'number') {\n          parseMipMapFromShape(mipData, a | 0, b | 0);\n        } else {\n          parseMipMapFromShape(mipData, a | 0, a | 0);\n        }\n      } else if (a) {\n        check$1.type(a, 'object', 'invalid arguments to regl.texture');\n        parseTexInfo(texInfo, a);\n        parseMipMapFromObject(mipData, a);\n      } else {\n        // empty textures get assigned a default shape of 1x1\n        parseMipMapFromShape(mipData, 1, 1);\n      }\n\n      if (texInfo.genMipmaps) {\n        mipData.mipmask = (mipData.width << 1) - 1;\n      }\n      texture.mipmask = mipData.mipmask;\n\n      copyFlags(texture, mipData);\n\n      check$1.texture2D(texInfo, mipData, limits);\n      texture.internalformat = mipData.internalformat;\n\n      reglTexture2D.width = mipData.width;\n      reglTexture2D.height = mipData.height;\n\n      tempBind(texture);\n      setMipMap(mipData, GL_TEXTURE_2D$1);\n      setTexInfo(texInfo, GL_TEXTURE_2D$1);\n      tempRestore();\n\n      freeMipMap(mipData);\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);\n      }\n      reglTexture2D.format = textureFormatsInvert[texture.internalformat];\n      reglTexture2D.type = textureTypesInvert[texture.type];\n\n      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];\n      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];\n\n      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];\n      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];\n\n      return reglTexture2D;\n    }\n\n    function subimage(image, x_, y_, level_) {\n      check$1(!!image, 'must specify image data');\n\n      var x = x_ | 0;\n      var y = y_ | 0;\n      var level = level_ | 0;\n\n      var imageData = allocImage();\n      copyFlags(imageData, texture);\n      imageData.width = 0;\n      imageData.height = 0;\n      parseImage(imageData, image);\n      imageData.width = imageData.width || (texture.width >> level) - x;\n      imageData.height = imageData.height || (texture.height >> level) - y;\n\n      check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');\n      check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');\n      check$1(texture.mipmask & 1 << level, 'missing mipmap data');\n      check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');\n\n      tempBind(texture);\n      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);\n      tempRestore();\n\n      freeImage(imageData);\n\n      return reglTexture2D;\n    }\n\n    function resize(w_, h_) {\n      var w = w_ | 0;\n      var h = h_ | 0 || w;\n      if (w === texture.width && h === texture.height) {\n        return reglTexture2D;\n      }\n\n      reglTexture2D.width = texture.width = w;\n      reglTexture2D.height = texture.height = h;\n\n      tempBind(texture);\n\n      var data;\n      var channels = texture.channels;\n      var type = texture.type;\n\n      for (var i = 0; texture.mipmask >> i; ++i) {\n        var _w = w >> i;\n        var _h = h >> i;\n        if (!_w || !_h) break;\n        data = pool.zero.allocType(type, _w * _h * channels);\n        gl.texImage2D(GL_TEXTURE_2D$1, i, texture.format, _w, _h, 0, texture.format, texture.type, data);\n        if (data) pool.zero.freeType(data);\n      }\n      tempRestore();\n\n      // also, recompute the texture size.\n      if (config.profile) {\n        texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);\n      }\n\n      return reglTexture2D;\n    }\n\n    reglTexture2D(a, b);\n\n    reglTexture2D.subimage = subimage;\n    reglTexture2D.resize = resize;\n    reglTexture2D._reglType = 'texture2d';\n    reglTexture2D._texture = texture;\n    if (config.profile) {\n      reglTexture2D.stats = texture.stats;\n    }\n    reglTexture2D.destroy = function () {\n      texture.decRef();\n    };\n\n    return reglTexture2D;\n  }\n\n  function createTextureCube(a0, a1, a2, a3, a4, a5) {\n    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);\n    textureSet[texture.id] = texture;\n    stats.cubeCount++;\n\n    var faces = new Array(6);\n\n    function reglTextureCube(a0, a1, a2, a3, a4, a5) {\n      var i;\n      var texInfo = texture.texInfo;\n      TexInfo.call(texInfo);\n      for (i = 0; i < 6; ++i) {\n        faces[i] = allocMipMap();\n      }\n\n      if (typeof a0 === 'number' || !a0) {\n        var s = a0 | 0 || 1;\n        for (i = 0; i < 6; ++i) {\n          parseMipMapFromShape(faces[i], s, s);\n        }\n      } else if ((typeof a0 === 'undefined' ? 'undefined' : _typeof(a0)) === 'object') {\n        if (a1) {\n          parseMipMapFromObject(faces[0], a0);\n          parseMipMapFromObject(faces[1], a1);\n          parseMipMapFromObject(faces[2], a2);\n          parseMipMapFromObject(faces[3], a3);\n          parseMipMapFromObject(faces[4], a4);\n          parseMipMapFromObject(faces[5], a5);\n        } else {\n          parseTexInfo(texInfo, a0);\n          parseFlags(texture, a0);\n          if ('faces' in a0) {\n            var face_input = a0.faces;\n            check$1(Array.isArray(face_input) && face_input.length === 6, 'cube faces must be a length 6 array');\n            for (i = 0; i < 6; ++i) {\n              check$1(_typeof(face_input[i]) === 'object' && !!face_input[i], 'invalid input for cube map face');\n              copyFlags(faces[i], texture);\n              parseMipMapFromObject(faces[i], face_input[i]);\n            }\n          } else {\n            for (i = 0; i < 6; ++i) {\n              parseMipMapFromObject(faces[i], a0);\n            }\n          }\n        }\n      } else {\n        check$1.raise('invalid arguments to cube map');\n      }\n\n      copyFlags(texture, faces[0]);\n\n      if (!limits.npotTextureCube) {\n        check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');\n      }\n\n      if (texInfo.genMipmaps) {\n        texture.mipmask = (faces[0].width << 1) - 1;\n      } else {\n        texture.mipmask = faces[0].mipmask;\n      }\n\n      check$1.textureCube(texture, texInfo, faces, limits);\n      texture.internalformat = faces[0].internalformat;\n\n      reglTextureCube.width = faces[0].width;\n      reglTextureCube.height = faces[0].height;\n\n      tempBind(texture);\n      for (i = 0; i < 6; ++i) {\n        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);\n      }\n      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);\n      tempRestore();\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);\n      }\n\n      reglTextureCube.format = textureFormatsInvert[texture.internalformat];\n      reglTextureCube.type = textureTypesInvert[texture.type];\n\n      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];\n      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];\n\n      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];\n      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];\n\n      for (i = 0; i < 6; ++i) {\n        freeMipMap(faces[i]);\n      }\n\n      return reglTextureCube;\n    }\n\n    function subimage(face, image, x_, y_, level_) {\n      check$1(!!image, 'must specify image data');\n      check$1(typeof face === 'number' && face === (face | 0) && face >= 0 && face < 6, 'invalid face');\n\n      var x = x_ | 0;\n      var y = y_ | 0;\n      var level = level_ | 0;\n\n      var imageData = allocImage();\n      copyFlags(imageData, texture);\n      imageData.width = 0;\n      imageData.height = 0;\n      parseImage(imageData, image);\n      imageData.width = imageData.width || (texture.width >> level) - x;\n      imageData.height = imageData.height || (texture.height >> level) - y;\n\n      check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');\n      check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');\n      check$1(texture.mipmask & 1 << level, 'missing mipmap data');\n      check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');\n\n      tempBind(texture);\n      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);\n      tempRestore();\n\n      freeImage(imageData);\n\n      return reglTextureCube;\n    }\n\n    function resize(radius_) {\n      var radius = radius_ | 0;\n      if (radius === texture.width) {\n        return;\n      }\n\n      reglTextureCube.width = texture.width = radius;\n      reglTextureCube.height = texture.height = radius;\n\n      tempBind(texture);\n      for (var i = 0; i < 6; ++i) {\n        for (var j = 0; texture.mipmask >> j; ++j) {\n          gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);\n        }\n      }\n      tempRestore();\n\n      if (config.profile) {\n        texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);\n      }\n\n      return reglTextureCube;\n    }\n\n    reglTextureCube(a0, a1, a2, a3, a4, a5);\n\n    reglTextureCube.subimage = subimage;\n    reglTextureCube.resize = resize;\n    reglTextureCube._reglType = 'textureCube';\n    reglTextureCube._texture = texture;\n    if (config.profile) {\n      reglTextureCube.stats = texture.stats;\n    }\n    reglTextureCube.destroy = function () {\n      texture.decRef();\n    };\n\n    return reglTextureCube;\n  }\n\n  // Called when regl is destroyed\n  function destroyTextures() {\n    for (var i = 0; i < numTexUnits; ++i) {\n      gl.activeTexture(GL_TEXTURE0$1 + i);\n      gl.bindTexture(GL_TEXTURE_2D$1, null);\n      textureUnits[i] = null;\n    }\n    values(textureSet).forEach(destroy);\n\n    stats.cubeCount = 0;\n    stats.textureCount = 0;\n  }\n\n  if (config.profile) {\n    stats.getTotalTextureSize = function () {\n      var total = 0;\n      Object.keys(textureSet).forEach(function (key) {\n        total += textureSet[key].stats.size;\n      });\n      return total;\n    };\n  }\n\n  function restoreTextures() {\n    values(textureSet).forEach(function (texture) {\n      texture.texture = gl.createTexture();\n      gl.bindTexture(texture.target, texture.texture);\n      for (var i = 0; i < 32; ++i) {\n        if ((texture.mipmask & 1 << i) === 0) {\n          continue;\n        }\n        if (texture.target === GL_TEXTURE_2D$1) {\n          gl.texImage2D(GL_TEXTURE_2D$1, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n        } else {\n          for (var j = 0; j < 6; ++j) {\n            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);\n          }\n        }\n      }\n      setTexInfo(texture.texInfo, texture.target);\n    });\n  }\n\n  return {\n    create2D: createTexture2D,\n    createCube: createTextureCube,\n    clear: destroyTextures,\n    getTexture: function getTexture(wrapper) {\n      return null;\n    },\n    restore: restoreTextures\n  };\n}\n\nvar GL_RENDERBUFFER = 0x8D41;\n\nvar GL_RGBA4$1 = 0x8056;\nvar GL_RGB5_A1$1 = 0x8057;\nvar GL_RGB565$1 = 0x8D62;\nvar GL_DEPTH_COMPONENT16 = 0x81A5;\nvar GL_STENCIL_INDEX8 = 0x8D48;\nvar GL_DEPTH_STENCIL$1 = 0x84F9;\n\nvar GL_SRGB8_ALPHA8_EXT = 0x8C43;\n\nvar GL_RGBA32F_EXT = 0x8814;\n\nvar GL_RGBA16F_EXT = 0x881A;\nvar GL_RGB16F_EXT = 0x881B;\n\nvar FORMAT_SIZES = [];\n\nFORMAT_SIZES[GL_RGBA4$1] = 2;\nFORMAT_SIZES[GL_RGB5_A1$1] = 2;\nFORMAT_SIZES[GL_RGB565$1] = 2;\n\nFORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;\nFORMAT_SIZES[GL_STENCIL_INDEX8] = 1;\nFORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;\n\nFORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;\nFORMAT_SIZES[GL_RGBA32F_EXT] = 16;\nFORMAT_SIZES[GL_RGBA16F_EXT] = 8;\nFORMAT_SIZES[GL_RGB16F_EXT] = 6;\n\nfunction getRenderbufferSize(format, width, height) {\n  return FORMAT_SIZES[format] * width * height;\n}\n\nvar wrapRenderbuffers = function wrapRenderbuffers(gl, extensions, limits, stats, config) {\n  var formatTypes = {\n    'rgba4': GL_RGBA4$1,\n    'rgb565': GL_RGB565$1,\n    'rgb5 a1': GL_RGB5_A1$1,\n    'depth': GL_DEPTH_COMPONENT16,\n    'stencil': GL_STENCIL_INDEX8,\n    'depth stencil': GL_DEPTH_STENCIL$1\n  };\n\n  if (extensions.ext_srgb) {\n    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;\n  }\n\n  if (extensions.ext_color_buffer_half_float) {\n    formatTypes['rgba16f'] = GL_RGBA16F_EXT;\n    formatTypes['rgb16f'] = GL_RGB16F_EXT;\n  }\n\n  if (extensions.webgl_color_buffer_float) {\n    formatTypes['rgba32f'] = GL_RGBA32F_EXT;\n  }\n\n  var formatTypesInvert = [];\n  Object.keys(formatTypes).forEach(function (key) {\n    var val = formatTypes[key];\n    formatTypesInvert[val] = key;\n  });\n\n  var renderbufferCount = 0;\n  var renderbufferSet = {};\n\n  function REGLRenderbuffer(renderbuffer) {\n    this.id = renderbufferCount++;\n    this.refCount = 1;\n\n    this.renderbuffer = renderbuffer;\n\n    this.format = GL_RGBA4$1;\n    this.width = 0;\n    this.height = 0;\n\n    if (config.profile) {\n      this.stats = { size: 0 };\n    }\n  }\n\n  REGLRenderbuffer.prototype.decRef = function () {\n    if (--this.refCount <= 0) {\n      destroy(this);\n    }\n  };\n\n  function destroy(rb) {\n    var handle = rb.renderbuffer;\n    check$1(handle, 'must not double destroy renderbuffer');\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n    gl.deleteRenderbuffer(handle);\n    rb.renderbuffer = null;\n    rb.refCount = 0;\n    delete renderbufferSet[rb.id];\n    stats.renderbufferCount--;\n  }\n\n  function createRenderbuffer(a, b) {\n    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());\n    renderbufferSet[renderbuffer.id] = renderbuffer;\n    stats.renderbufferCount++;\n\n    function reglRenderbuffer(a, b) {\n      var w = 0;\n      var h = 0;\n      var format = GL_RGBA4$1;\n\n      if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a) {\n        var options = a;\n        if ('shape' in options) {\n          var shape = options.shape;\n          check$1(Array.isArray(shape) && shape.length >= 2, 'invalid renderbuffer shape');\n          w = shape[0] | 0;\n          h = shape[1] | 0;\n        } else {\n          if ('radius' in options) {\n            w = h = options.radius | 0;\n          }\n          if ('width' in options) {\n            w = options.width | 0;\n          }\n          if ('height' in options) {\n            h = options.height | 0;\n          }\n        }\n        if ('format' in options) {\n          check$1.parameter(options.format, formatTypes, 'invalid renderbuffer format');\n          format = formatTypes[options.format];\n        }\n      } else if (typeof a === 'number') {\n        w = a | 0;\n        if (typeof b === 'number') {\n          h = b | 0;\n        } else {\n          h = w;\n        }\n      } else if (!a) {\n        w = h = 1;\n      } else {\n        check$1.raise('invalid arguments to renderbuffer constructor');\n      }\n\n      // check shape\n      check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');\n\n      if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) {\n        return;\n      }\n\n      reglRenderbuffer.width = renderbuffer.width = w;\n      reglRenderbuffer.height = renderbuffer.height = h;\n      renderbuffer.format = format;\n\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);\n\n      check$1(gl.getError() === 0, 'invalid render buffer format');\n\n      if (config.profile) {\n        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n      }\n      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];\n\n      return reglRenderbuffer;\n    }\n\n    function resize(w_, h_) {\n      var w = w_ | 0;\n      var h = h_ | 0 || w;\n\n      if (w === renderbuffer.width && h === renderbuffer.height) {\n        return reglRenderbuffer;\n      }\n\n      // check shape\n      check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');\n\n      reglRenderbuffer.width = renderbuffer.width = w;\n      reglRenderbuffer.height = renderbuffer.height = h;\n\n      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);\n      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);\n\n      check$1(gl.getError() === 0, 'invalid render buffer format');\n\n      // also, recompute size.\n      if (config.profile) {\n        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);\n      }\n\n      return reglRenderbuffer;\n    }\n\n    reglRenderbuffer(a, b);\n\n    reglRenderbuffer.resize = resize;\n    reglRenderbuffer._reglType = 'renderbuffer';\n    reglRenderbuffer._renderbuffer = renderbuffer;\n    if (config.profile) {\n      reglRenderbuffer.stats = renderbuffer.stats;\n    }\n    reglRenderbuffer.destroy = function () {\n      renderbuffer.decRef();\n    };\n\n    return reglRenderbuffer;\n  }\n\n  if (config.profile) {\n    stats.getTotalRenderbufferSize = function () {\n      var total = 0;\n      Object.keys(renderbufferSet).forEach(function (key) {\n        total += renderbufferSet[key].stats.size;\n      });\n      return total;\n    };\n  }\n\n  function restoreRenderbuffers() {\n    values(renderbufferSet).forEach(function (rb) {\n      rb.renderbuffer = gl.createRenderbuffer();\n      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);\n      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);\n    });\n    gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n  }\n\n  return {\n    create: createRenderbuffer,\n    clear: function clear() {\n      values(renderbufferSet).forEach(destroy);\n    },\n    restore: restoreRenderbuffers\n  };\n};\n\n// We store these constants so that the minifier can inline them\nvar GL_FRAMEBUFFER$1 = 0x8D40;\nvar GL_RENDERBUFFER$1 = 0x8D41;\n\nvar GL_TEXTURE_2D$2 = 0x0DE1;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;\n\nvar GL_COLOR_ATTACHMENT0$1 = 0x8CE0;\nvar GL_DEPTH_ATTACHMENT = 0x8D00;\nvar GL_STENCIL_ATTACHMENT = 0x8D20;\nvar GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\nvar GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;\nvar GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\nvar GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\nvar GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\nvar GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\n\nvar GL_HALF_FLOAT_OES$2 = 0x8D61;\nvar GL_UNSIGNED_BYTE$6 = 0x1401;\nvar GL_FLOAT$5 = 0x1406;\n\nvar GL_RGB$1 = 0x1907;\nvar GL_RGBA$2 = 0x1908;\n\nvar GL_DEPTH_COMPONENT$1 = 0x1902;\n\nvar colorTextureFormatEnums = [GL_RGB$1, GL_RGBA$2];\n\n// for every texture format, store\n// the number of channels\nvar textureFormatChannels = [];\ntextureFormatChannels[GL_RGBA$2] = 4;\ntextureFormatChannels[GL_RGB$1] = 3;\n\n// for every texture type, store\n// the size in bytes.\nvar textureTypeSizes = [];\ntextureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;\ntextureTypeSizes[GL_FLOAT$5] = 4;\ntextureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;\n\nvar GL_RGBA4$2 = 0x8056;\nvar GL_RGB5_A1$2 = 0x8057;\nvar GL_RGB565$2 = 0x8D62;\nvar GL_DEPTH_COMPONENT16$1 = 0x81A5;\nvar GL_STENCIL_INDEX8$1 = 0x8D48;\nvar GL_DEPTH_STENCIL$2 = 0x84F9;\n\nvar GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;\n\nvar GL_RGBA32F_EXT$1 = 0x8814;\n\nvar GL_RGBA16F_EXT$1 = 0x881A;\nvar GL_RGB16F_EXT$1 = 0x881B;\n\nvar colorRenderbufferFormatEnums = [GL_RGBA4$2, GL_RGB5_A1$2, GL_RGB565$2, GL_SRGB8_ALPHA8_EXT$1, GL_RGBA16F_EXT$1, GL_RGB16F_EXT$1, GL_RGBA32F_EXT$1];\n\nvar statusCode = {};\nstatusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';\nstatusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';\nstatusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';\n\nfunction wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats) {\n  var framebufferState = {\n    cur: null,\n    next: null,\n    dirty: false,\n    setFBO: null\n  };\n\n  var colorTextureFormats = ['rgba'];\n  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];\n\n  if (extensions.ext_srgb) {\n    colorRenderbufferFormats.push('srgba');\n  }\n\n  if (extensions.ext_color_buffer_half_float) {\n    colorRenderbufferFormats.push('rgba16f', 'rgb16f');\n  }\n\n  if (extensions.webgl_color_buffer_float) {\n    colorRenderbufferFormats.push('rgba32f');\n  }\n\n  var colorTypes = ['uint8'];\n  if (extensions.oes_texture_half_float) {\n    colorTypes.push('half float', 'float16');\n  }\n  if (extensions.oes_texture_float) {\n    colorTypes.push('float', 'float32');\n  }\n\n  function FramebufferAttachment(target, texture, renderbuffer) {\n    this.target = target;\n    this.texture = texture;\n    this.renderbuffer = renderbuffer;\n\n    var w = 0;\n    var h = 0;\n    if (texture) {\n      w = texture.width;\n      h = texture.height;\n    } else if (renderbuffer) {\n      w = renderbuffer.width;\n      h = renderbuffer.height;\n    }\n    this.width = w;\n    this.height = h;\n  }\n\n  function decRef(attachment) {\n    if (attachment) {\n      if (attachment.texture) {\n        attachment.texture._texture.decRef();\n      }\n      if (attachment.renderbuffer) {\n        attachment.renderbuffer._renderbuffer.decRef();\n      }\n    }\n  }\n\n  function incRefAndCheckShape(attachment, width, height) {\n    if (!attachment) {\n      return;\n    }\n    if (attachment.texture) {\n      var texture = attachment.texture._texture;\n      var tw = Math.max(1, texture.width);\n      var th = Math.max(1, texture.height);\n      check$1(tw === width && th === height, 'inconsistent width/height for supplied texture');\n      texture.refCount += 1;\n    } else {\n      var renderbuffer = attachment.renderbuffer._renderbuffer;\n      check$1(renderbuffer.width === width && renderbuffer.height === height, 'inconsistent width/height for renderbuffer');\n      renderbuffer.refCount += 1;\n    }\n  }\n\n  function attach(location, attachment) {\n    if (attachment) {\n      if (attachment.texture) {\n        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, location, attachment.target, attachment.texture._texture.texture, 0);\n      } else {\n        gl.framebufferRenderbuffer(GL_FRAMEBUFFER$1, location, GL_RENDERBUFFER$1, attachment.renderbuffer._renderbuffer.renderbuffer);\n      }\n    }\n  }\n\n  function parseAttachment(attachment) {\n    var target = GL_TEXTURE_2D$2;\n    var texture = null;\n    var renderbuffer = null;\n\n    var data = attachment;\n    if ((typeof attachment === 'undefined' ? 'undefined' : _typeof(attachment)) === 'object') {\n      data = attachment.data;\n      if ('target' in attachment) {\n        target = attachment.target | 0;\n      }\n    }\n\n    check$1.type(data, 'function', 'invalid attachment data');\n\n    var type = data._reglType;\n    if (type === 'texture2d') {\n      texture = data;\n      check$1(target === GL_TEXTURE_2D$2);\n    } else if (type === 'textureCube') {\n      texture = data;\n      check$1(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6, 'invalid cube map target');\n    } else if (type === 'renderbuffer') {\n      renderbuffer = data;\n      target = GL_RENDERBUFFER$1;\n    } else {\n      check$1.raise('invalid regl object for attachment');\n    }\n\n    return new FramebufferAttachment(target, texture, renderbuffer);\n  }\n\n  function allocAttachment(width, height, isTexture, format, type) {\n    if (isTexture) {\n      var texture = textureState.create2D({\n        width: width,\n        height: height,\n        format: format,\n        type: type\n      });\n      texture._texture.refCount = 0;\n      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);\n    } else {\n      var rb = renderbufferState.create({\n        width: width,\n        height: height,\n        format: format\n      });\n      rb._renderbuffer.refCount = 0;\n      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);\n    }\n  }\n\n  function unwrapAttachment(attachment) {\n    return attachment && (attachment.texture || attachment.renderbuffer);\n  }\n\n  function resizeAttachment(attachment, w, h) {\n    if (attachment) {\n      if (attachment.texture) {\n        attachment.texture.resize(w, h);\n      } else if (attachment.renderbuffer) {\n        attachment.renderbuffer.resize(w, h);\n      }\n    }\n  }\n\n  var framebufferCount = 0;\n  var framebufferSet = {};\n\n  function REGLFramebuffer() {\n    this.id = framebufferCount++;\n    framebufferSet[this.id] = this;\n\n    this.framebuffer = gl.createFramebuffer();\n    this.width = 0;\n    this.height = 0;\n\n    this.colorAttachments = [];\n    this.depthAttachment = null;\n    this.stencilAttachment = null;\n    this.depthStencilAttachment = null;\n  }\n\n  function decFBORefs(framebuffer) {\n    framebuffer.colorAttachments.forEach(decRef);\n    decRef(framebuffer.depthAttachment);\n    decRef(framebuffer.stencilAttachment);\n    decRef(framebuffer.depthStencilAttachment);\n  }\n\n  function _destroy(framebuffer) {\n    var handle = framebuffer.framebuffer;\n    check$1(handle, 'must not double destroy framebuffer');\n    gl.deleteFramebuffer(handle);\n    framebuffer.framebuffer = null;\n    stats.framebufferCount--;\n    delete framebufferSet[framebuffer.id];\n  }\n\n  function updateFramebuffer(framebuffer) {\n    var i;\n\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);\n    var colorAttachments = framebuffer.colorAttachments;\n    for (i = 0; i < colorAttachments.length; ++i) {\n      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);\n    }\n    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {\n      gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_COLOR_ATTACHMENT0$1 + i, GL_TEXTURE_2D$2, null, 0);\n    }\n\n    gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n    gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n    gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);\n\n    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);\n    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);\n    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);\n\n    // Check status code\n    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);\n    if (status !== GL_FRAMEBUFFER_COMPLETE$1) {\n      check$1.raise('framebuffer configuration not supported, status = ' + statusCode[status]);\n    }\n\n    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);\n    framebufferState.cur = framebufferState.next;\n\n    // FIXME: Clear error code here.  This is a work around for a bug in\n    // headless-gl\n    gl.getError();\n  }\n\n  function createFBO(a0, a1) {\n    var framebuffer = new REGLFramebuffer();\n    stats.framebufferCount++;\n\n    function reglFramebuffer(a, b) {\n      var i;\n\n      check$1(framebufferState.next !== framebuffer, 'can not update framebuffer which is currently in use');\n\n      var extDrawBuffers = extensions.webgl_draw_buffers;\n\n      var width = 0;\n      var height = 0;\n\n      var needsDepth = true;\n      var needsStencil = true;\n\n      var colorBuffer = null;\n      var colorTexture = true;\n      var colorFormat = 'rgba';\n      var colorType = 'uint8';\n      var colorCount = 1;\n\n      var depthBuffer = null;\n      var stencilBuffer = null;\n      var depthStencilBuffer = null;\n      var depthStencilTexture = false;\n\n      if (typeof a === 'number') {\n        width = a | 0;\n        height = b | 0 || width;\n      } else if (!a) {\n        width = height = 1;\n      } else {\n        check$1.type(a, 'object', 'invalid arguments for framebuffer');\n        var options = a;\n\n        if ('shape' in options) {\n          var shape = options.shape;\n          check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');\n          width = shape[0];\n          height = shape[1];\n        } else {\n          if ('radius' in options) {\n            width = height = options.radius;\n          }\n          if ('width' in options) {\n            width = options.width;\n          }\n          if ('height' in options) {\n            height = options.height;\n          }\n        }\n\n        if ('color' in options || 'colors' in options) {\n          colorBuffer = options.color || options.colors;\n          if (Array.isArray(colorBuffer)) {\n            check$1(colorBuffer.length === 1 || extDrawBuffers, 'multiple render targets not supported');\n          }\n        }\n\n        if (!colorBuffer) {\n          if ('colorCount' in options) {\n            colorCount = options.colorCount | 0;\n            check$1(colorCount > 0, 'invalid color buffer count');\n          }\n\n          if ('colorTexture' in options) {\n            colorTexture = !!options.colorTexture;\n            colorFormat = 'rgba4';\n          }\n\n          if ('colorType' in options) {\n            colorType = options.colorType;\n            if (!colorTexture) {\n              if (colorType === 'half float' || colorType === 'float16') {\n                check$1(extensions.ext_color_buffer_half_float, 'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');\n                colorFormat = 'rgba16f';\n              } else if (colorType === 'float' || colorType === 'float32') {\n                check$1(extensions.webgl_color_buffer_float, 'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');\n                colorFormat = 'rgba32f';\n              }\n            } else {\n              check$1(extensions.oes_texture_float || !(colorType === 'float' || colorType === 'float32'), 'you must enable OES_texture_float in order to use floating point framebuffer objects');\n              check$1(extensions.oes_texture_half_float || !(colorType === 'half float' || colorType === 'float16'), 'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');\n            }\n            check$1.oneOf(colorType, colorTypes, 'invalid color type');\n          }\n\n          if ('colorFormat' in options) {\n            colorFormat = options.colorFormat;\n            if (colorTextureFormats.indexOf(colorFormat) >= 0) {\n              colorTexture = true;\n            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {\n              colorTexture = false;\n            } else {\n              if (colorTexture) {\n                check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');\n              } else {\n                check$1.oneOf(options.colorFormat, colorRenderbufferFormats, 'invalid color format for renderbuffer');\n              }\n            }\n          }\n        }\n\n        if ('depthTexture' in options || 'depthStencilTexture' in options) {\n          depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);\n          check$1(!depthStencilTexture || extensions.webgl_depth_texture, 'webgl_depth_texture extension not supported');\n        }\n\n        if ('depth' in options) {\n          if (typeof options.depth === 'boolean') {\n            needsDepth = options.depth;\n          } else {\n            depthBuffer = options.depth;\n            needsStencil = false;\n          }\n        }\n\n        if ('stencil' in options) {\n          if (typeof options.stencil === 'boolean') {\n            needsStencil = options.stencil;\n          } else {\n            stencilBuffer = options.stencil;\n            needsDepth = false;\n          }\n        }\n\n        if ('depthStencil' in options) {\n          if (typeof options.depthStencil === 'boolean') {\n            needsDepth = needsStencil = options.depthStencil;\n          } else {\n            depthStencilBuffer = options.depthStencil;\n            needsDepth = false;\n            needsStencil = false;\n          }\n        }\n      }\n\n      // parse attachments\n      var colorAttachments = null;\n      var depthAttachment = null;\n      var stencilAttachment = null;\n      var depthStencilAttachment = null;\n\n      // Set up color attachments\n      if (Array.isArray(colorBuffer)) {\n        colorAttachments = colorBuffer.map(parseAttachment);\n      } else if (colorBuffer) {\n        colorAttachments = [parseAttachment(colorBuffer)];\n      } else {\n        colorAttachments = new Array(colorCount);\n        for (i = 0; i < colorCount; ++i) {\n          colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);\n        }\n      }\n\n      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1, 'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');\n      check$1(colorAttachments.length <= limits.maxColorAttachments, 'too many color attachments, not supported');\n\n      width = width || colorAttachments[0].width;\n      height = height || colorAttachments[0].height;\n\n      if (depthBuffer) {\n        depthAttachment = parseAttachment(depthBuffer);\n      } else if (needsDepth && !needsStencil) {\n        depthAttachment = allocAttachment(width, height, depthStencilTexture, 'depth', 'uint32');\n      }\n\n      if (stencilBuffer) {\n        stencilAttachment = parseAttachment(stencilBuffer);\n      } else if (needsStencil && !needsDepth) {\n        stencilAttachment = allocAttachment(width, height, false, 'stencil', 'uint8');\n      }\n\n      if (depthStencilBuffer) {\n        depthStencilAttachment = parseAttachment(depthStencilBuffer);\n      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {\n        depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, 'depth stencil', 'depth stencil');\n      }\n\n      check$1(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, 'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');\n\n      var commonColorAttachmentSize = null;\n\n      for (i = 0; i < colorAttachments.length; ++i) {\n        incRefAndCheckShape(colorAttachments[i], width, height);\n        check$1(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, 'framebuffer color attachment ' + i + ' is invalid');\n\n        if (colorAttachments[i] && colorAttachments[i].texture) {\n          var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];\n\n          if (commonColorAttachmentSize === null) {\n            commonColorAttachmentSize = colorAttachmentSize;\n          } else {\n            // We need to make sure that all color attachments have the same number of bitplanes\n            // (that is, the same numer of bits per pixel)\n            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.\n            check$1(commonColorAttachmentSize === colorAttachmentSize, 'all color attachments much have the same number of bits per pixel.');\n          }\n        }\n      }\n      incRefAndCheckShape(depthAttachment, width, height);\n      check$1(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1, 'invalid depth attachment for framebuffer object');\n      incRefAndCheckShape(stencilAttachment, width, height);\n      check$1(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1, 'invalid stencil attachment for framebuffer object');\n      incRefAndCheckShape(depthStencilAttachment, width, height);\n      check$1(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2, 'invalid depth-stencil attachment for framebuffer object');\n\n      // decrement references\n      decFBORefs(framebuffer);\n\n      framebuffer.width = width;\n      framebuffer.height = height;\n\n      framebuffer.colorAttachments = colorAttachments;\n      framebuffer.depthAttachment = depthAttachment;\n      framebuffer.stencilAttachment = stencilAttachment;\n      framebuffer.depthStencilAttachment = depthStencilAttachment;\n\n      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);\n      reglFramebuffer.depth = unwrapAttachment(depthAttachment);\n      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);\n      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);\n\n      reglFramebuffer.width = framebuffer.width;\n      reglFramebuffer.height = framebuffer.height;\n\n      updateFramebuffer(framebuffer);\n\n      return reglFramebuffer;\n    }\n\n    function resize(w_, h_) {\n      check$1(framebufferState.next !== framebuffer, 'can not resize a framebuffer which is currently in use');\n\n      var w = w_ | 0;\n      var h = h_ | 0 || w;\n      if (w === framebuffer.width && h === framebuffer.height) {\n        return reglFramebuffer;\n      }\n\n      // resize all buffers\n      var colorAttachments = framebuffer.colorAttachments;\n      for (var i = 0; i < colorAttachments.length; ++i) {\n        resizeAttachment(colorAttachments[i], w, h);\n      }\n      resizeAttachment(framebuffer.depthAttachment, w, h);\n      resizeAttachment(framebuffer.stencilAttachment, w, h);\n      resizeAttachment(framebuffer.depthStencilAttachment, w, h);\n\n      framebuffer.width = reglFramebuffer.width = w;\n      framebuffer.height = reglFramebuffer.height = h;\n\n      updateFramebuffer(framebuffer);\n\n      return reglFramebuffer;\n    }\n\n    reglFramebuffer(a0, a1);\n\n    return extend(reglFramebuffer, {\n      resize: resize,\n      _reglType: 'framebuffer',\n      _framebuffer: framebuffer,\n      destroy: function destroy() {\n        _destroy(framebuffer);\n        decFBORefs(framebuffer);\n      },\n      use: function use(block) {\n        framebufferState.setFBO({\n          framebuffer: reglFramebuffer\n        }, block);\n      }\n    });\n  }\n\n  function createCubeFBO(options) {\n    var faces = Array(6);\n\n    function reglFramebufferCube(a) {\n      var i;\n\n      check$1(faces.indexOf(framebufferState.next) < 0, 'can not update framebuffer which is currently in use');\n\n      var extDrawBuffers = extensions.webgl_draw_buffers;\n\n      var params = {\n        color: null\n      };\n\n      var radius = 0;\n\n      var colorBuffer = null;\n      var colorFormat = 'rgba';\n      var colorType = 'uint8';\n      var colorCount = 1;\n\n      if (typeof a === 'number') {\n        radius = a | 0;\n      } else if (!a) {\n        radius = 1;\n      } else {\n        check$1.type(a, 'object', 'invalid arguments for framebuffer');\n        var options = a;\n\n        if ('shape' in options) {\n          var shape = options.shape;\n          check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');\n          check$1(shape[0] === shape[1], 'cube framebuffer must be square');\n          radius = shape[0];\n        } else {\n          if ('radius' in options) {\n            radius = options.radius | 0;\n          }\n          if ('width' in options) {\n            radius = options.width | 0;\n            if ('height' in options) {\n              check$1(options.height === radius, 'must be square');\n            }\n          } else if ('height' in options) {\n            radius = options.height | 0;\n          }\n        }\n\n        if ('color' in options || 'colors' in options) {\n          colorBuffer = options.color || options.colors;\n          if (Array.isArray(colorBuffer)) {\n            check$1(colorBuffer.length === 1 || extDrawBuffers, 'multiple render targets not supported');\n          }\n        }\n\n        if (!colorBuffer) {\n          if ('colorCount' in options) {\n            colorCount = options.colorCount | 0;\n            check$1(colorCount > 0, 'invalid color buffer count');\n          }\n\n          if ('colorType' in options) {\n            check$1.oneOf(options.colorType, colorTypes, 'invalid color type');\n            colorType = options.colorType;\n          }\n\n          if ('colorFormat' in options) {\n            colorFormat = options.colorFormat;\n            check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');\n          }\n        }\n\n        if ('depth' in options) {\n          params.depth = options.depth;\n        }\n\n        if ('stencil' in options) {\n          params.stencil = options.stencil;\n        }\n\n        if ('depthStencil' in options) {\n          params.depthStencil = options.depthStencil;\n        }\n      }\n\n      var colorCubes;\n      if (colorBuffer) {\n        if (Array.isArray(colorBuffer)) {\n          colorCubes = [];\n          for (i = 0; i < colorBuffer.length; ++i) {\n            colorCubes[i] = colorBuffer[i];\n          }\n        } else {\n          colorCubes = [colorBuffer];\n        }\n      } else {\n        colorCubes = Array(colorCount);\n        var cubeMapParams = {\n          radius: radius,\n          format: colorFormat,\n          type: colorType\n        };\n        for (i = 0; i < colorCount; ++i) {\n          colorCubes[i] = textureState.createCube(cubeMapParams);\n        }\n      }\n\n      // Check color cubes\n      params.color = Array(colorCubes.length);\n      for (i = 0; i < colorCubes.length; ++i) {\n        var cube = colorCubes[i];\n        check$1(typeof cube === 'function' && cube._reglType === 'textureCube', 'invalid cube map');\n        radius = radius || cube.width;\n        check$1(cube.width === radius && cube.height === radius, 'invalid cube map shape');\n        params.color[i] = {\n          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,\n          data: colorCubes[i]\n        };\n      }\n\n      for (i = 0; i < 6; ++i) {\n        for (var j = 0; j < colorCubes.length; ++j) {\n          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;\n        }\n        // reuse depth-stencil attachments across all cube maps\n        if (i > 0) {\n          params.depth = faces[0].depth;\n          params.stencil = faces[0].stencil;\n          params.depthStencil = faces[0].depthStencil;\n        }\n        if (faces[i]) {\n          faces[i](params);\n        } else {\n          faces[i] = createFBO(params);\n        }\n      }\n\n      return extend(reglFramebufferCube, {\n        width: radius,\n        height: radius,\n        color: colorCubes\n      });\n    }\n\n    function resize(radius_) {\n      var i;\n      var radius = radius_ | 0;\n      check$1(radius > 0 && radius <= limits.maxCubeMapSize, 'invalid radius for cube fbo');\n\n      if (radius === reglFramebufferCube.width) {\n        return reglFramebufferCube;\n      }\n\n      var colors = reglFramebufferCube.color;\n      for (i = 0; i < colors.length; ++i) {\n        colors[i].resize(radius);\n      }\n\n      for (i = 0; i < 6; ++i) {\n        faces[i].resize(radius);\n      }\n\n      reglFramebufferCube.width = reglFramebufferCube.height = radius;\n\n      return reglFramebufferCube;\n    }\n\n    reglFramebufferCube(options);\n\n    return extend(reglFramebufferCube, {\n      faces: faces,\n      resize: resize,\n      _reglType: 'framebufferCube',\n      destroy: function destroy() {\n        faces.forEach(function (f) {\n          f.destroy();\n        });\n      }\n    });\n  }\n\n  function restoreFramebuffers() {\n    values(framebufferSet).forEach(function (fb) {\n      fb.framebuffer = gl.createFramebuffer();\n      updateFramebuffer(fb);\n    });\n  }\n\n  return extend(framebufferState, {\n    getFramebuffer: function getFramebuffer(object) {\n      if (typeof object === 'function' && object._reglType === 'framebuffer') {\n        var fbo = object._framebuffer;\n        if (fbo instanceof REGLFramebuffer) {\n          return fbo;\n        }\n      }\n      return null;\n    },\n    create: createFBO,\n    createCube: createCubeFBO,\n    clear: function clear() {\n      values(framebufferSet).forEach(_destroy);\n    },\n    restore: restoreFramebuffers\n  });\n}\n\nvar GL_FLOAT$6 = 5126;\n\nfunction AttributeRecord() {\n  this.state = 0;\n\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  this.w = 0.0;\n\n  this.buffer = null;\n  this.size = 0;\n  this.normalized = false;\n  this.type = GL_FLOAT$6;\n  this.offset = 0;\n  this.stride = 0;\n  this.divisor = 0;\n}\n\nfunction wrapAttributeState(gl, extensions, limits, stringStore) {\n  var NUM_ATTRIBUTES = limits.maxAttributes;\n  var attributeBindings = new Array(NUM_ATTRIBUTES);\n  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {\n    attributeBindings[i] = new AttributeRecord();\n  }\n\n  return {\n    Record: AttributeRecord,\n    scope: {},\n    state: attributeBindings\n  };\n}\n\nvar GL_FRAGMENT_SHADER = 35632;\nvar GL_VERTEX_SHADER = 35633;\n\nvar GL_ACTIVE_UNIFORMS = 0x8B86;\nvar GL_ACTIVE_ATTRIBUTES = 0x8B89;\n\nfunction wrapShaderState(gl, stringStore, stats, config) {\n  // ===================================================\n  // glsl compilation and linking\n  // ===================================================\n  var fragShaders = {};\n  var vertShaders = {};\n\n  function ActiveInfo(name, id, location, info) {\n    this.name = name;\n    this.id = id;\n    this.location = location;\n    this.info = info;\n  }\n\n  function insertActiveInfo(list, info) {\n    for (var i = 0; i < list.length; ++i) {\n      if (list[i].id === info.id) {\n        list[i].location = info.location;\n        return;\n      }\n    }\n    list.push(info);\n  }\n\n  function getShader(type, id, command) {\n    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;\n    var shader = cache[id];\n\n    if (!shader) {\n      var source = stringStore.str(id);\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n      check$1.shaderError(gl, shader, source, type, command);\n      cache[id] = shader;\n    }\n\n    return shader;\n  }\n\n  // ===================================================\n  // program linking\n  // ===================================================\n  var programCache = {};\n  var programList = [];\n\n  var PROGRAM_COUNTER = 0;\n\n  function REGLProgram(fragId, vertId) {\n    this.id = PROGRAM_COUNTER++;\n    this.fragId = fragId;\n    this.vertId = vertId;\n    this.program = null;\n    this.uniforms = [];\n    this.attributes = [];\n\n    if (config.profile) {\n      this.stats = {\n        uniformsCount: 0,\n        attributesCount: 0\n      };\n    }\n  }\n\n  function linkProgram(desc, command) {\n    var i, info;\n\n    // -------------------------------\n    // compile & link\n    // -------------------------------\n    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);\n    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);\n\n    var program = desc.program = gl.createProgram();\n    gl.attachShader(program, fragShader);\n    gl.attachShader(program, vertShader);\n    gl.linkProgram(program);\n    check$1.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command);\n\n    // -------------------------------\n    // grab uniforms\n    // -------------------------------\n    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);\n    if (config.profile) {\n      desc.stats.uniformsCount = numUniforms;\n    }\n    var uniforms = desc.uniforms;\n    for (i = 0; i < numUniforms; ++i) {\n      info = gl.getActiveUniform(program, i);\n      if (info) {\n        if (info.size > 1) {\n          for (var j = 0; j < info.size; ++j) {\n            var name = info.name.replace('[0]', '[' + j + ']');\n            insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));\n          }\n        } else {\n          insertActiveInfo(uniforms, new ActiveInfo(info.name, stringStore.id(info.name), gl.getUniformLocation(program, info.name), info));\n        }\n      }\n    }\n\n    // -------------------------------\n    // grab attributes\n    // -------------------------------\n    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);\n    if (config.profile) {\n      desc.stats.attributesCount = numAttributes;\n    }\n\n    var attributes = desc.attributes;\n    for (i = 0; i < numAttributes; ++i) {\n      info = gl.getActiveAttrib(program, i);\n      if (info) {\n        insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));\n      }\n    }\n  }\n\n  if (config.profile) {\n    stats.getMaxUniformsCount = function () {\n      var m = 0;\n      programList.forEach(function (desc) {\n        if (desc.stats.uniformsCount > m) {\n          m = desc.stats.uniformsCount;\n        }\n      });\n      return m;\n    };\n\n    stats.getMaxAttributesCount = function () {\n      var m = 0;\n      programList.forEach(function (desc) {\n        if (desc.stats.attributesCount > m) {\n          m = desc.stats.attributesCount;\n        }\n      });\n      return m;\n    };\n  }\n\n  function restoreShaders() {\n    fragShaders = {};\n    vertShaders = {};\n    for (var i = 0; i < programList.length; ++i) {\n      linkProgram(programList[i]);\n    }\n  }\n\n  return {\n    clear: function clear() {\n      var deleteShader = gl.deleteShader.bind(gl);\n      values(fragShaders).forEach(deleteShader);\n      fragShaders = {};\n      values(vertShaders).forEach(deleteShader);\n      vertShaders = {};\n\n      programList.forEach(function (desc) {\n        gl.deleteProgram(desc.program);\n      });\n      programList.length = 0;\n      programCache = {};\n\n      stats.shaderCount = 0;\n    },\n\n    program: function program(vertId, fragId, command) {\n      check$1.command(vertId >= 0, 'missing vertex shader', command);\n      check$1.command(fragId >= 0, 'missing fragment shader', command);\n\n      var cache = programCache[fragId];\n      if (!cache) {\n        cache = programCache[fragId] = {};\n      }\n      var program = cache[vertId];\n      if (!program) {\n        program = new REGLProgram(fragId, vertId);\n        stats.shaderCount++;\n\n        linkProgram(program, command);\n        cache[vertId] = program;\n        programList.push(program);\n      }\n      return program;\n    },\n\n    restore: restoreShaders,\n\n    shader: getShader,\n\n    frag: -1,\n    vert: -1\n  };\n}\n\nvar GL_RGBA$3 = 6408;\nvar GL_UNSIGNED_BYTE$7 = 5121;\nvar GL_PACK_ALIGNMENT = 0x0D05;\nvar GL_FLOAT$7 = 0x1406; // 5126\n\nfunction wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {\n  function readPixelsImpl(input) {\n    var type;\n    if (framebufferState.next === null) {\n      check$1(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with \"preserveDrawingBuffer\":true in order to read pixels from the drawing buffer');\n      type = GL_UNSIGNED_BYTE$7;\n    } else {\n      check$1(framebufferState.next.colorAttachments[0].texture !== null, 'You cannot read from a renderbuffer');\n      type = framebufferState.next.colorAttachments[0].texture._texture.type;\n\n      if (extensions.oes_texture_float) {\n        check$1(type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7, 'Reading from a framebuffer is only allowed for the types \\'uint8\\' and \\'float\\'');\n\n        if (type === GL_FLOAT$7) {\n          check$1(limits.readFloat, 'Reading \\'float\\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');\n        }\n      } else {\n        check$1(type === GL_UNSIGNED_BYTE$7, 'Reading from a framebuffer is only allowed for the type \\'uint8\\'');\n      }\n    }\n\n    var x = 0;\n    var y = 0;\n    var width = context.framebufferWidth;\n    var height = context.framebufferHeight;\n    var data = null;\n\n    if (isTypedArray(input)) {\n      data = input;\n    } else if (input) {\n      check$1.type(input, 'object', 'invalid arguments to regl.read()');\n      x = input.x | 0;\n      y = input.y | 0;\n      check$1(x >= 0 && x < context.framebufferWidth, 'invalid x offset for regl.read');\n      check$1(y >= 0 && y < context.framebufferHeight, 'invalid y offset for regl.read');\n      width = (input.width || context.framebufferWidth - x) | 0;\n      height = (input.height || context.framebufferHeight - y) | 0;\n      data = input.data || null;\n    }\n\n    // sanity check input.data\n    if (data) {\n      if (type === GL_UNSIGNED_BYTE$7) {\n        check$1(data instanceof Uint8Array, 'buffer must be \\'Uint8Array\\' when reading from a framebuffer of type \\'uint8\\'');\n      } else if (type === GL_FLOAT$7) {\n        check$1(data instanceof Float32Array, 'buffer must be \\'Float32Array\\' when reading from a framebuffer of type \\'float\\'');\n      }\n    }\n\n    check$1(width > 0 && width + x <= context.framebufferWidth, 'invalid width for read pixels');\n    check$1(height > 0 && height + y <= context.framebufferHeight, 'invalid height for read pixels');\n\n    // Update WebGL state\n    reglPoll();\n\n    // Compute size\n    var size = width * height * 4;\n\n    // Allocate data\n    if (!data) {\n      if (type === GL_UNSIGNED_BYTE$7) {\n        data = new Uint8Array(size);\n      } else if (type === GL_FLOAT$7) {\n        data = data || new Float32Array(size);\n      }\n    }\n\n    // Type check\n    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');\n    check$1(data.byteLength >= size, 'data buffer for regl.read() too small');\n\n    // Run read pixels\n    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);\n    gl.readPixels(x, y, width, height, GL_RGBA$3, type, data);\n\n    return data;\n  }\n\n  function readPixelsFBO(options) {\n    var result;\n    framebufferState.setFBO({\n      framebuffer: options.framebuffer\n    }, function () {\n      result = readPixelsImpl(options);\n    });\n    return result;\n  }\n\n  function readPixels(options) {\n    if (!options || !('framebuffer' in options)) {\n      return readPixelsImpl(options);\n    } else {\n      return readPixelsFBO(options);\n    }\n  }\n\n  return readPixels;\n}\n\nfunction slice(x) {\n  return Array.prototype.slice.call(x);\n}\n\nfunction join(x) {\n  return slice(x).join('');\n}\n\nfunction createEnvironment() {\n  // Unique variable id counter\n  var varCounter = 0;\n\n  // Linked values are passed from this scope into the generated code block\n  // Calling link() passes a value into the generated scope and returns\n  // the variable name which it is bound to\n  var linkedNames = [];\n  var linkedValues = [];\n  function link(value) {\n    for (var i = 0; i < linkedValues.length; ++i) {\n      if (linkedValues[i] === value) {\n        return linkedNames[i];\n      }\n    }\n\n    var name = 'g' + varCounter++;\n    linkedNames.push(name);\n    linkedValues.push(value);\n    return name;\n  }\n\n  // create a code block\n  function block() {\n    var code = [];\n    function push() {\n      code.push.apply(code, slice(arguments));\n    }\n\n    var vars = [];\n    function def() {\n      var name = 'v' + varCounter++;\n      vars.push(name);\n\n      if (arguments.length > 0) {\n        code.push(name, '=');\n        code.push.apply(code, slice(arguments));\n        code.push(';');\n      }\n\n      return name;\n    }\n\n    return extend(push, {\n      def: def,\n      toString: function toString() {\n        return join([vars.length > 0 ? 'var ' + vars + ';' : '', join(code)]);\n      }\n    });\n  }\n\n  function scope() {\n    var entry = block();\n    var exit = block();\n\n    var entryToString = entry.toString;\n    var exitToString = exit.toString;\n\n    function save(object, prop) {\n      exit(object, prop, '=', entry.def(object, prop), ';');\n    }\n\n    return extend(function () {\n      entry.apply(entry, slice(arguments));\n    }, {\n      def: entry.def,\n      entry: entry,\n      exit: exit,\n      save: save,\n      set: function set(object, prop, value) {\n        save(object, prop);\n        entry(object, prop, '=', value, ';');\n      },\n      toString: function toString() {\n        return entryToString() + exitToString();\n      }\n    });\n  }\n\n  function conditional() {\n    var pred = join(arguments);\n    var thenBlock = scope();\n    var elseBlock = scope();\n\n    var thenToString = thenBlock.toString;\n    var elseToString = elseBlock.toString;\n\n    return extend(thenBlock, {\n      then: function then() {\n        thenBlock.apply(thenBlock, slice(arguments));\n        return this;\n      },\n      else: function _else() {\n        elseBlock.apply(elseBlock, slice(arguments));\n        return this;\n      },\n      toString: function toString() {\n        var elseClause = elseToString();\n        if (elseClause) {\n          elseClause = 'else{' + elseClause + '}';\n        }\n        return join(['if(', pred, '){', thenToString(), '}', elseClause]);\n      }\n    });\n  }\n\n  // procedure list\n  var globalBlock = block();\n  var procedures = {};\n  function proc(name, count) {\n    var args = [];\n    function arg() {\n      var name = 'a' + args.length;\n      args.push(name);\n      return name;\n    }\n\n    count = count || 0;\n    for (var i = 0; i < count; ++i) {\n      arg();\n    }\n\n    var body = scope();\n    var bodyToString = body.toString;\n\n    var result = procedures[name] = extend(body, {\n      arg: arg,\n      toString: function toString() {\n        return join(['function(', args.join(), '){', bodyToString(), '}']);\n      }\n    });\n\n    return result;\n  }\n\n  function compile() {\n    var code = ['\"use strict\";', globalBlock, 'return {'];\n    Object.keys(procedures).forEach(function (name) {\n      code.push('\"', name, '\":', procedures[name].toString(), ',');\n    });\n    code.push('}');\n    var src = join(code).replace(/;/g, ';\\n').replace(/}/g, '}\\n').replace(/{/g, '{\\n');\n    var proc = Function.apply(null, linkedNames.concat(src));\n    return proc.apply(null, linkedValues);\n  }\n\n  return {\n    global: globalBlock,\n    link: link,\n    block: block,\n    proc: proc,\n    scope: scope,\n    cond: conditional,\n    compile: compile\n  };\n}\n\n// \"cute\" names for vector components\nvar CUTE_COMPONENTS = 'xyzw'.split('');\n\nvar GL_UNSIGNED_BYTE$8 = 5121;\n\nvar ATTRIB_STATE_POINTER = 1;\nvar ATTRIB_STATE_CONSTANT = 2;\n\nvar DYN_FUNC$1 = 0;\nvar DYN_PROP$1 = 1;\nvar DYN_CONTEXT$1 = 2;\nvar DYN_STATE$1 = 3;\nvar DYN_THUNK = 4;\n\nvar S_DITHER = 'dither';\nvar S_BLEND_ENABLE = 'blend.enable';\nvar S_BLEND_COLOR = 'blend.color';\nvar S_BLEND_EQUATION = 'blend.equation';\nvar S_BLEND_FUNC = 'blend.func';\nvar S_DEPTH_ENABLE = 'depth.enable';\nvar S_DEPTH_FUNC = 'depth.func';\nvar S_DEPTH_RANGE = 'depth.range';\nvar S_DEPTH_MASK = 'depth.mask';\nvar S_COLOR_MASK = 'colorMask';\nvar S_CULL_ENABLE = 'cull.enable';\nvar S_CULL_FACE = 'cull.face';\nvar S_FRONT_FACE = 'frontFace';\nvar S_LINE_WIDTH = 'lineWidth';\nvar S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';\nvar S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';\nvar S_SAMPLE_ALPHA = 'sample.alpha';\nvar S_SAMPLE_ENABLE = 'sample.enable';\nvar S_SAMPLE_COVERAGE = 'sample.coverage';\nvar S_STENCIL_ENABLE = 'stencil.enable';\nvar S_STENCIL_MASK = 'stencil.mask';\nvar S_STENCIL_FUNC = 'stencil.func';\nvar S_STENCIL_OPFRONT = 'stencil.opFront';\nvar S_STENCIL_OPBACK = 'stencil.opBack';\nvar S_SCISSOR_ENABLE = 'scissor.enable';\nvar S_SCISSOR_BOX = 'scissor.box';\nvar S_VIEWPORT = 'viewport';\n\nvar S_PROFILE = 'profile';\n\nvar S_FRAMEBUFFER = 'framebuffer';\nvar S_VERT = 'vert';\nvar S_FRAG = 'frag';\nvar S_ELEMENTS = 'elements';\nvar S_PRIMITIVE = 'primitive';\nvar S_COUNT = 'count';\nvar S_OFFSET = 'offset';\nvar S_INSTANCES = 'instances';\n\nvar SUFFIX_WIDTH = 'Width';\nvar SUFFIX_HEIGHT = 'Height';\n\nvar S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;\nvar S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;\nvar S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;\nvar S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;\nvar S_DRAWINGBUFFER = 'drawingBuffer';\nvar S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;\nvar S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;\n\nvar NESTED_OPTIONS = [S_BLEND_FUNC, S_BLEND_EQUATION, S_STENCIL_FUNC, S_STENCIL_OPFRONT, S_STENCIL_OPBACK, S_SAMPLE_COVERAGE, S_VIEWPORT, S_SCISSOR_BOX, S_POLYGON_OFFSET_OFFSET];\n\nvar GL_ARRAY_BUFFER$1 = 34962;\nvar GL_ELEMENT_ARRAY_BUFFER$1 = 34963;\n\nvar GL_FRAGMENT_SHADER$1 = 35632;\nvar GL_VERTEX_SHADER$1 = 35633;\n\nvar GL_TEXTURE_2D$3 = 0x0DE1;\nvar GL_TEXTURE_CUBE_MAP$2 = 0x8513;\n\nvar GL_CULL_FACE = 0x0B44;\nvar GL_BLEND = 0x0BE2;\nvar GL_DITHER = 0x0BD0;\nvar GL_STENCIL_TEST = 0x0B90;\nvar GL_DEPTH_TEST = 0x0B71;\nvar GL_SCISSOR_TEST = 0x0C11;\nvar GL_POLYGON_OFFSET_FILL = 0x8037;\nvar GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\nvar GL_SAMPLE_COVERAGE = 0x80A0;\n\nvar GL_FLOAT$8 = 5126;\nvar GL_FLOAT_VEC2 = 35664;\nvar GL_FLOAT_VEC3 = 35665;\nvar GL_FLOAT_VEC4 = 35666;\nvar GL_INT$3 = 5124;\nvar GL_INT_VEC2 = 35667;\nvar GL_INT_VEC3 = 35668;\nvar GL_INT_VEC4 = 35669;\nvar GL_BOOL = 35670;\nvar GL_BOOL_VEC2 = 35671;\nvar GL_BOOL_VEC3 = 35672;\nvar GL_BOOL_VEC4 = 35673;\nvar GL_FLOAT_MAT2 = 35674;\nvar GL_FLOAT_MAT3 = 35675;\nvar GL_FLOAT_MAT4 = 35676;\nvar GL_SAMPLER_2D = 35678;\nvar GL_SAMPLER_CUBE = 35680;\n\nvar GL_TRIANGLES$1 = 4;\n\nvar GL_FRONT = 1028;\nvar GL_BACK = 1029;\nvar GL_CW = 0x0900;\nvar GL_CCW = 0x0901;\nvar GL_MIN_EXT = 0x8007;\nvar GL_MAX_EXT = 0x8008;\nvar GL_ALWAYS = 519;\nvar GL_KEEP = 7680;\nvar GL_ZERO = 0;\nvar GL_ONE = 1;\nvar GL_FUNC_ADD = 0x8006;\nvar GL_LESS = 513;\n\nvar GL_FRAMEBUFFER$2 = 0x8D40;\nvar GL_COLOR_ATTACHMENT0$2 = 0x8CE0;\n\nvar blendFuncs = {\n  '0': 0,\n  '1': 1,\n  'zero': 0,\n  'one': 1,\n  'src color': 768,\n  'one minus src color': 769,\n  'src alpha': 770,\n  'one minus src alpha': 771,\n  'dst color': 774,\n  'one minus dst color': 775,\n  'dst alpha': 772,\n  'one minus dst alpha': 773,\n  'constant color': 32769,\n  'one minus constant color': 32770,\n  'constant alpha': 32771,\n  'one minus constant alpha': 32772,\n  'src alpha saturate': 776\n};\n\n// There are invalid values for srcRGB and dstRGB. See:\n// https://www.khronos.org/registry/webgl/specs/1.0/#6.13\n// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56\nvar invalidBlendCombinations = ['constant color, constant alpha', 'one minus constant color, constant alpha', 'constant color, one minus constant alpha', 'one minus constant color, one minus constant alpha', 'constant alpha, constant color', 'constant alpha, one minus constant color', 'one minus constant alpha, constant color', 'one minus constant alpha, one minus constant color'];\n\nvar compareFuncs = {\n  'never': 512,\n  'less': 513,\n  '<': 513,\n  'equal': 514,\n  '=': 514,\n  '==': 514,\n  '===': 514,\n  'lequal': 515,\n  '<=': 515,\n  'greater': 516,\n  '>': 516,\n  'notequal': 517,\n  '!=': 517,\n  '!==': 517,\n  'gequal': 518,\n  '>=': 518,\n  'always': 519\n};\n\nvar stencilOps = {\n  '0': 0,\n  'zero': 0,\n  'keep': 7680,\n  'replace': 7681,\n  'increment': 7682,\n  'decrement': 7683,\n  'increment wrap': 34055,\n  'decrement wrap': 34056,\n  'invert': 5386\n};\n\nvar shaderType = {\n  'frag': GL_FRAGMENT_SHADER$1,\n  'vert': GL_VERTEX_SHADER$1\n};\n\nvar orientationType = {\n  'cw': GL_CW,\n  'ccw': GL_CCW\n};\n\nfunction isBufferArgs(x) {\n  return Array.isArray(x) || isTypedArray(x) || isNDArrayLike(x);\n}\n\n// Make sure viewport is processed first\nfunction sortState(state) {\n  return state.sort(function (a, b) {\n    if (a === S_VIEWPORT) {\n      return -1;\n    } else if (b === S_VIEWPORT) {\n      return 1;\n    }\n    return a < b ? -1 : 1;\n  });\n}\n\nfunction Declaration(thisDep, contextDep, propDep, append) {\n  this.thisDep = thisDep;\n  this.contextDep = contextDep;\n  this.propDep = propDep;\n  this.append = append;\n}\n\nfunction isStatic(decl) {\n  return decl && !(decl.thisDep || decl.contextDep || decl.propDep);\n}\n\nfunction createStaticDecl(append) {\n  return new Declaration(false, false, false, append);\n}\n\nfunction createDynamicDecl(dyn, append) {\n  var type = dyn.type;\n  if (type === DYN_FUNC$1) {\n    var numArgs = dyn.data.length;\n    return new Declaration(true, numArgs >= 1, numArgs >= 2, append);\n  } else if (type === DYN_THUNK) {\n    var data = dyn.data;\n    return new Declaration(data.thisDep, data.contextDep, data.propDep, append);\n  } else {\n    return new Declaration(type === DYN_STATE$1, type === DYN_CONTEXT$1, type === DYN_PROP$1, append);\n  }\n}\n\nvar SCOPE_DECL = new Declaration(false, false, false, function () {});\n\nfunction reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {\n  var AttributeRecord = attributeState.Record;\n\n  var blendEquations = {\n    'add': 32774,\n    'subtract': 32778,\n    'reverse subtract': 32779\n  };\n  if (extensions.ext_blend_minmax) {\n    blendEquations.min = GL_MIN_EXT;\n    blendEquations.max = GL_MAX_EXT;\n  }\n\n  var extInstancing = extensions.angle_instanced_arrays;\n  var extDrawBuffers = extensions.webgl_draw_buffers;\n\n  // ===================================================\n  // ===================================================\n  // WEBGL STATE\n  // ===================================================\n  // ===================================================\n  var currentState = {\n    dirty: true,\n    profile: config.profile\n  };\n  var nextState = {};\n  var GL_STATE_NAMES = [];\n  var GL_FLAGS = {};\n  var GL_VARIABLES = {};\n\n  function propName(name) {\n    return name.replace('.', '_');\n  }\n\n  function stateFlag(sname, cap, init) {\n    var name = propName(sname);\n    GL_STATE_NAMES.push(sname);\n    nextState[name] = currentState[name] = !!init;\n    GL_FLAGS[name] = cap;\n  }\n\n  function stateVariable(sname, func, init) {\n    var name = propName(sname);\n    GL_STATE_NAMES.push(sname);\n    if (Array.isArray(init)) {\n      currentState[name] = init.slice();\n      nextState[name] = init.slice();\n    } else {\n      currentState[name] = nextState[name] = init;\n    }\n    GL_VARIABLES[name] = func;\n  }\n\n  // Dithering\n  stateFlag(S_DITHER, GL_DITHER);\n\n  // Blending\n  stateFlag(S_BLEND_ENABLE, GL_BLEND);\n  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);\n  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate', [GL_FUNC_ADD, GL_FUNC_ADD]);\n  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate', [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);\n\n  // Depth\n  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);\n  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);\n  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);\n  stateVariable(S_DEPTH_MASK, 'depthMask', true);\n\n  // Color mask\n  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);\n\n  // Face culling\n  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);\n  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);\n\n  // Front face orientation\n  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);\n\n  // Line width\n  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);\n\n  // Polygon offset\n  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);\n  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);\n\n  // Sample coverage\n  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);\n  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);\n  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);\n\n  // Stencil\n  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);\n  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);\n  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);\n  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate', [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);\n  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate', [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);\n\n  // Scissor\n  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);\n  stateVariable(S_SCISSOR_BOX, 'scissor', [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);\n\n  // Viewport\n  stateVariable(S_VIEWPORT, S_VIEWPORT, [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);\n\n  // ===================================================\n  // ===================================================\n  // ENVIRONMENT\n  // ===================================================\n  // ===================================================\n  var sharedState = {\n    gl: gl,\n    context: contextState,\n    strings: stringStore,\n    next: nextState,\n    current: currentState,\n    draw: drawState,\n    elements: elementState,\n    buffer: bufferState,\n    shader: shaderState,\n    attributes: attributeState.state,\n    uniforms: uniformState,\n    framebuffer: framebufferState,\n    extensions: extensions,\n\n    timer: timer,\n    isBufferArgs: isBufferArgs\n  };\n\n  var sharedConstants = {\n    primTypes: primTypes,\n    compareFuncs: compareFuncs,\n    blendFuncs: blendFuncs,\n    blendEquations: blendEquations,\n    stencilOps: stencilOps,\n    glTypes: glTypes,\n    orientationType: orientationType\n  };\n\n  check$1.optional(function () {\n    sharedState.isArrayLike = isArrayLike;\n  });\n\n  if (extDrawBuffers) {\n    sharedConstants.backBuffer = [GL_BACK];\n    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {\n      if (i === 0) {\n        return [0];\n      }\n      return loop(i, function (j) {\n        return GL_COLOR_ATTACHMENT0$2 + j;\n      });\n    });\n  }\n\n  var drawCallCounter = 0;\n  function createREGLEnvironment() {\n    var env = createEnvironment();\n    var link = env.link;\n    var global = env.global;\n    env.id = drawCallCounter++;\n\n    env.batchId = '0';\n\n    // link shared state\n    var SHARED = link(sharedState);\n    var shared = env.shared = {\n      props: 'a0'\n    };\n    Object.keys(sharedState).forEach(function (prop) {\n      shared[prop] = global.def(SHARED, '.', prop);\n    });\n\n    // Inject runtime assertion stuff for debug builds\n    check$1.optional(function () {\n      env.CHECK = link(check$1);\n      env.commandStr = check$1.guessCommand();\n      env.command = link(env.commandStr);\n      env.assert = function (block, pred, message) {\n        block('if(!(', pred, '))', this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');\n      };\n\n      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;\n    });\n\n    // Copy GL state variables over\n    var nextVars = env.next = {};\n    var currentVars = env.current = {};\n    Object.keys(GL_VARIABLES).forEach(function (variable) {\n      if (Array.isArray(currentState[variable])) {\n        nextVars[variable] = global.def(shared.next, '.', variable);\n        currentVars[variable] = global.def(shared.current, '.', variable);\n      }\n    });\n\n    // Initialize shared constants\n    var constants = env.constants = {};\n    Object.keys(sharedConstants).forEach(function (name) {\n      constants[name] = global.def(JSON.stringify(sharedConstants[name]));\n    });\n\n    // Helper function for calling a block\n    env.invoke = function (block, x) {\n      switch (x.type) {\n        case DYN_FUNC$1:\n          var argList = ['this', shared.context, shared.props, env.batchId];\n          return block.def(link(x.data), '.call(', argList.slice(0, Math.max(x.data.length + 1, 4)), ')');\n        case DYN_PROP$1:\n          return block.def(shared.props, x.data);\n        case DYN_CONTEXT$1:\n          return block.def(shared.context, x.data);\n        case DYN_STATE$1:\n          return block.def('this', x.data);\n        case DYN_THUNK:\n          x.data.append(env, block);\n          return x.data.ref;\n      }\n    };\n\n    env.attribCache = {};\n\n    var scopeAttribs = {};\n    env.scopeAttrib = function (name) {\n      var id = stringStore.id(name);\n      if (id in scopeAttribs) {\n        return scopeAttribs[id];\n      }\n      var binding = attributeState.scope[id];\n      if (!binding) {\n        binding = attributeState.scope[id] = new AttributeRecord();\n      }\n      var result = scopeAttribs[id] = link(binding);\n      return result;\n    };\n\n    return env;\n  }\n\n  // ===================================================\n  // ===================================================\n  // PARSING\n  // ===================================================\n  // ===================================================\n  function parseProfile(options) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    var profileEnable;\n    if (S_PROFILE in staticOptions) {\n      var value = !!staticOptions[S_PROFILE];\n      profileEnable = createStaticDecl(function (env, scope) {\n        return value;\n      });\n      profileEnable.enable = value;\n    } else if (S_PROFILE in dynamicOptions) {\n      var dyn = dynamicOptions[S_PROFILE];\n      profileEnable = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn);\n      });\n    }\n\n    return profileEnable;\n  }\n\n  function parseFramebuffer(options, env) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    if (S_FRAMEBUFFER in staticOptions) {\n      var framebuffer = staticOptions[S_FRAMEBUFFER];\n      if (framebuffer) {\n        framebuffer = framebufferState.getFramebuffer(framebuffer);\n        check$1.command(framebuffer, 'invalid framebuffer object');\n        return createStaticDecl(function (env, block) {\n          var FRAMEBUFFER = env.link(framebuffer);\n          var shared = env.shared;\n          block.set(shared.framebuffer, '.next', FRAMEBUFFER);\n          var CONTEXT = shared.context;\n          block.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '.width');\n          block.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '.height');\n          return FRAMEBUFFER;\n        });\n      } else {\n        return createStaticDecl(function (env, scope) {\n          var shared = env.shared;\n          scope.set(shared.framebuffer, '.next', 'null');\n          var CONTEXT = shared.context;\n          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\n          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\n          return 'null';\n        });\n      }\n    } else if (S_FRAMEBUFFER in dynamicOptions) {\n      var dyn = dynamicOptions[S_FRAMEBUFFER];\n      return createDynamicDecl(dyn, function (env, scope) {\n        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);\n        var shared = env.shared;\n        var FRAMEBUFFER_STATE = shared.framebuffer;\n        var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');\n\n        check$1.optional(function () {\n          env.assert(scope, '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER, 'invalid framebuffer object');\n        });\n\n        scope.set(FRAMEBUFFER_STATE, '.next', FRAMEBUFFER);\n        var CONTEXT = shared.context;\n        scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' + CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);\n        scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '?' + FRAMEBUFFER + '.height:' + CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);\n        return FRAMEBUFFER;\n      });\n    } else {\n      return null;\n    }\n  }\n\n  function parseViewportScissor(options, framebuffer, env) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    function parseBox(param) {\n      if (param in staticOptions) {\n        var box = staticOptions[param];\n        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);\n\n        var isStatic = true;\n        var x = box.x | 0;\n        var y = box.y | 0;\n        var w, h;\n        if ('width' in box) {\n          w = box.width | 0;\n          check$1.command(w >= 0, 'invalid ' + param, env.commandStr);\n        } else {\n          isStatic = false;\n        }\n        if ('height' in box) {\n          h = box.height | 0;\n          check$1.command(h >= 0, 'invalid ' + param, env.commandStr);\n        } else {\n          isStatic = false;\n        }\n\n        return new Declaration(!isStatic && framebuffer && framebuffer.thisDep, !isStatic && framebuffer && framebuffer.contextDep, !isStatic && framebuffer && framebuffer.propDep, function (env, scope) {\n          var CONTEXT = env.shared.context;\n          var BOX_W = w;\n          if (!('width' in box)) {\n            BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);\n          }\n          var BOX_H = h;\n          if (!('height' in box)) {\n            BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);\n          }\n          return [x, y, BOX_W, BOX_H];\n        });\n      } else if (param in dynamicOptions) {\n        var dynBox = dynamicOptions[param];\n        var result = createDynamicDecl(dynBox, function (env, scope) {\n          var BOX = env.invoke(scope, dynBox);\n\n          check$1.optional(function () {\n            env.assert(scope, BOX + '&&typeof ' + BOX + '===\"object\"', 'invalid ' + param);\n          });\n\n          var CONTEXT = env.shared.context;\n          var BOX_X = scope.def(BOX, '.x|0');\n          var BOX_Y = scope.def(BOX, '.y|0');\n          var BOX_W = scope.def('\"width\" in ', BOX, '?', BOX, '.width|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');\n          var BOX_H = scope.def('\"height\" in ', BOX, '?', BOX, '.height|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');\n\n          check$1.optional(function () {\n            env.assert(scope, BOX_W + '>=0&&' + BOX_H + '>=0', 'invalid ' + param);\n          });\n\n          return [BOX_X, BOX_Y, BOX_W, BOX_H];\n        });\n        if (framebuffer) {\n          result.thisDep = result.thisDep || framebuffer.thisDep;\n          result.contextDep = result.contextDep || framebuffer.contextDep;\n          result.propDep = result.propDep || framebuffer.propDep;\n        }\n        return result;\n      } else if (framebuffer) {\n        return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function (env, scope) {\n          var CONTEXT = env.shared.context;\n          return [0, 0, scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH), scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)];\n        });\n      } else {\n        return null;\n      }\n    }\n\n    var viewport = parseBox(S_VIEWPORT);\n\n    if (viewport) {\n      var prevViewport = viewport;\n      viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function (env, scope) {\n        var VIEWPORT = prevViewport.append(env, scope);\n        var CONTEXT = env.shared.context;\n        scope.set(CONTEXT, '.' + S_VIEWPORT_WIDTH, VIEWPORT[2]);\n        scope.set(CONTEXT, '.' + S_VIEWPORT_HEIGHT, VIEWPORT[3]);\n        return VIEWPORT;\n      });\n    }\n\n    return {\n      viewport: viewport,\n      scissor_box: parseBox(S_SCISSOR_BOX)\n    };\n  }\n\n  function parseProgram(options) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    function parseShader(name) {\n      if (name in staticOptions) {\n        var id = stringStore.id(staticOptions[name]);\n        check$1.optional(function () {\n          shaderState.shader(shaderType[name], id, check$1.guessCommand());\n        });\n        var result = createStaticDecl(function () {\n          return id;\n        });\n        result.id = id;\n        return result;\n      } else if (name in dynamicOptions) {\n        var dyn = dynamicOptions[name];\n        return createDynamicDecl(dyn, function (env, scope) {\n          var str = env.invoke(scope, dyn);\n          var id = scope.def(env.shared.strings, '.id(', str, ')');\n          check$1.optional(function () {\n            scope(env.shared.shader, '.shader(', shaderType[name], ',', id, ',', env.command, ');');\n          });\n          return id;\n        });\n      }\n      return null;\n    }\n\n    var frag = parseShader(S_FRAG);\n    var vert = parseShader(S_VERT);\n\n    var program = null;\n    var progVar;\n    if (isStatic(frag) && isStatic(vert)) {\n      program = shaderState.program(vert.id, frag.id);\n      progVar = createStaticDecl(function (env, scope) {\n        return env.link(program);\n      });\n    } else {\n      progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function (env, scope) {\n        var SHADER_STATE = env.shared.shader;\n        var fragId;\n        if (frag) {\n          fragId = frag.append(env, scope);\n        } else {\n          fragId = scope.def(SHADER_STATE, '.', S_FRAG);\n        }\n        var vertId;\n        if (vert) {\n          vertId = vert.append(env, scope);\n        } else {\n          vertId = scope.def(SHADER_STATE, '.', S_VERT);\n        }\n        var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;\n        check$1.optional(function () {\n          progDef += ',' + env.command;\n        });\n        return scope.def(progDef + ')');\n      });\n    }\n\n    return {\n      frag: frag,\n      vert: vert,\n      progVar: progVar,\n      program: program\n    };\n  }\n\n  function parseDraw(options, env) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    function parseElements() {\n      if (S_ELEMENTS in staticOptions) {\n        var elements = staticOptions[S_ELEMENTS];\n        if (isBufferArgs(elements)) {\n          elements = elementState.getElements(elementState.create(elements, true));\n        } else if (elements) {\n          elements = elementState.getElements(elements);\n          check$1.command(elements, 'invalid elements', env.commandStr);\n        }\n        var result = createStaticDecl(function (env, scope) {\n          if (elements) {\n            var result = env.link(elements);\n            env.ELEMENTS = result;\n            return result;\n          }\n          env.ELEMENTS = null;\n          return null;\n        });\n        result.value = elements;\n        return result;\n      } else if (S_ELEMENTS in dynamicOptions) {\n        var dyn = dynamicOptions[S_ELEMENTS];\n        return createDynamicDecl(dyn, function (env, scope) {\n          var shared = env.shared;\n\n          var IS_BUFFER_ARGS = shared.isBufferArgs;\n          var ELEMENT_STATE = shared.elements;\n\n          var elementDefn = env.invoke(scope, dyn);\n          var elements = scope.def('null');\n          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');\n\n          var ifte = env.cond(elementStream).then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');').else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');\n\n          check$1.optional(function () {\n            env.assert(ifte.else, '!' + elementDefn + '||' + elements, 'invalid elements');\n          });\n\n          scope.entry(ifte);\n          scope.exit(env.cond(elementStream).then(ELEMENT_STATE, '.destroyStream(', elements, ');'));\n\n          env.ELEMENTS = elements;\n\n          return elements;\n        });\n      }\n\n      return null;\n    }\n\n    var elements = parseElements();\n\n    function parsePrimitive() {\n      if (S_PRIMITIVE in staticOptions) {\n        var primitive = staticOptions[S_PRIMITIVE];\n        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);\n        return createStaticDecl(function (env, scope) {\n          return primTypes[primitive];\n        });\n      } else if (S_PRIMITIVE in dynamicOptions) {\n        var dynPrimitive = dynamicOptions[S_PRIMITIVE];\n        return createDynamicDecl(dynPrimitive, function (env, scope) {\n          var PRIM_TYPES = env.constants.primTypes;\n          var prim = env.invoke(scope, dynPrimitive);\n          check$1.optional(function () {\n            env.assert(scope, prim + ' in ' + PRIM_TYPES, 'invalid primitive, must be one of ' + Object.keys(primTypes));\n          });\n          return scope.def(PRIM_TYPES, '[', prim, ']');\n        });\n      } else if (elements) {\n        if (isStatic(elements)) {\n          if (elements.value) {\n            return createStaticDecl(function (env, scope) {\n              return scope.def(env.ELEMENTS, '.primType');\n            });\n          } else {\n            return createStaticDecl(function () {\n              return GL_TRIANGLES$1;\n            });\n          }\n        } else {\n          return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function (env, scope) {\n            var elements = env.ELEMENTS;\n            return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1);\n          });\n        }\n      }\n      return null;\n    }\n\n    function parseParam(param, isOffset) {\n      if (param in staticOptions) {\n        var value = staticOptions[param] | 0;\n        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);\n        return createStaticDecl(function (env, scope) {\n          if (isOffset) {\n            env.OFFSET = value;\n          }\n          return value;\n        });\n      } else if (param in dynamicOptions) {\n        var dynValue = dynamicOptions[param];\n        return createDynamicDecl(dynValue, function (env, scope) {\n          var result = env.invoke(scope, dynValue);\n          if (isOffset) {\n            env.OFFSET = result;\n            check$1.optional(function () {\n              env.assert(scope, result + '>=0', 'invalid ' + param);\n            });\n          }\n          return result;\n        });\n      } else if (isOffset && elements) {\n        return createStaticDecl(function (env, scope) {\n          env.OFFSET = '0';\n          return 0;\n        });\n      }\n      return null;\n    }\n\n    var OFFSET = parseParam(S_OFFSET, true);\n\n    function parseVertCount() {\n      if (S_COUNT in staticOptions) {\n        var count = staticOptions[S_COUNT] | 0;\n        check$1.command(typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);\n        return createStaticDecl(function () {\n          return count;\n        });\n      } else if (S_COUNT in dynamicOptions) {\n        var dynCount = dynamicOptions[S_COUNT];\n        return createDynamicDecl(dynCount, function (env, scope) {\n          var result = env.invoke(scope, dynCount);\n          check$1.optional(function () {\n            env.assert(scope, 'typeof ' + result + '===\"number\"&&' + result + '>=0&&' + result + '===(' + result + '|0)', 'invalid vertex count');\n          });\n          return result;\n        });\n      } else if (elements) {\n        if (isStatic(elements)) {\n          if (elements) {\n            if (OFFSET) {\n              return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function (env, scope) {\n                var result = scope.def(env.ELEMENTS, '.vertCount-', env.OFFSET);\n\n                check$1.optional(function () {\n                  env.assert(scope, result + '>=0', 'invalid vertex offset/element buffer too small');\n                });\n\n                return result;\n              });\n            } else {\n              return createStaticDecl(function (env, scope) {\n                return scope.def(env.ELEMENTS, '.vertCount');\n              });\n            }\n          } else {\n            var result = createStaticDecl(function () {\n              return -1;\n            });\n            check$1.optional(function () {\n              result.MISSING = true;\n            });\n            return result;\n          }\n        } else {\n          var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function (env, scope) {\n            var elements = env.ELEMENTS;\n            if (env.OFFSET) {\n              return scope.def(elements, '?', elements, '.vertCount-', env.OFFSET, ':-1');\n            }\n            return scope.def(elements, '?', elements, '.vertCount:-1');\n          });\n          check$1.optional(function () {\n            variable.DYNAMIC = true;\n          });\n          return variable;\n        }\n      }\n      return null;\n    }\n\n    return {\n      elements: elements,\n      primitive: parsePrimitive(),\n      count: parseVertCount(),\n      instances: parseParam(S_INSTANCES, false),\n      offset: OFFSET\n    };\n  }\n\n  function parseGLState(options, env) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    var STATE = {};\n\n    GL_STATE_NAMES.forEach(function (prop) {\n      var param = propName(prop);\n\n      function parseParam(parseStatic, parseDynamic) {\n        if (prop in staticOptions) {\n          var value = parseStatic(staticOptions[prop]);\n          STATE[param] = createStaticDecl(function () {\n            return value;\n          });\n        } else if (prop in dynamicOptions) {\n          var dyn = dynamicOptions[prop];\n          STATE[param] = createDynamicDecl(dyn, function (env, scope) {\n            return parseDynamic(env, scope, env.invoke(scope, dyn));\n          });\n        }\n      }\n\n      switch (prop) {\n        case S_CULL_ENABLE:\n        case S_BLEND_ENABLE:\n        case S_DITHER:\n        case S_STENCIL_ENABLE:\n        case S_DEPTH_ENABLE:\n        case S_SCISSOR_ENABLE:\n        case S_POLYGON_OFFSET_ENABLE:\n        case S_SAMPLE_ALPHA:\n        case S_SAMPLE_ENABLE:\n        case S_DEPTH_MASK:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'boolean', prop, env.commandStr);\n            return value;\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, 'typeof ' + value + '===\"boolean\"', 'invalid flag ' + prop, env.commandStr);\n            });\n            return value;\n          });\n\n        case S_DEPTH_FUNC:\n          return parseParam(function (value) {\n            check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);\n            return compareFuncs[value];\n          }, function (env, scope, value) {\n            var COMPARE_FUNCS = env.constants.compareFuncs;\n            check$1.optional(function () {\n              env.assert(scope, value + ' in ' + COMPARE_FUNCS, 'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));\n            });\n            return scope.def(COMPARE_FUNCS, '[', value, ']');\n          });\n\n        case S_DEPTH_RANGE:\n          return parseParam(function (value) {\n            check$1.command(isArrayLike(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number' && value[0] <= value[1], 'depth range is 2d array', env.commandStr);\n            return value;\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===2&&' + 'typeof ' + value + '[0]===\"number\"&&' + 'typeof ' + value + '[1]===\"number\"&&' + value + '[0]<=' + value + '[1]', 'depth range must be a 2d array');\n            });\n\n            var Z_NEAR = scope.def('+', value, '[0]');\n            var Z_FAR = scope.def('+', value, '[1]');\n            return [Z_NEAR, Z_FAR];\n          });\n\n        case S_BLEND_FUNC:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'object', 'blend.func', env.commandStr);\n            var srcRGB = 'srcRGB' in value ? value.srcRGB : value.src;\n            var srcAlpha = 'srcAlpha' in value ? value.srcAlpha : value.src;\n            var dstRGB = 'dstRGB' in value ? value.dstRGB : value.dst;\n            var dstAlpha = 'dstAlpha' in value ? value.dstAlpha : value.dst;\n            check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);\n            check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);\n            check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);\n            check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);\n\n            check$1.command(invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1, 'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);\n\n            return [blendFuncs[srcRGB], blendFuncs[dstRGB], blendFuncs[srcAlpha], blendFuncs[dstAlpha]];\n          }, function (env, scope, value) {\n            var BLEND_FUNCS = env.constants.blendFuncs;\n\n            check$1.optional(function () {\n              env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid blend func, must be an object');\n            });\n\n            function read(prefix, suffix) {\n              var func = scope.def('\"', prefix, suffix, '\" in ', value, '?', value, '.', prefix, suffix, ':', value, '.', prefix);\n\n              check$1.optional(function () {\n                env.assert(scope, func + ' in ' + BLEND_FUNCS, 'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));\n              });\n\n              return func;\n            }\n\n            var srcRGB = read('src', 'RGB');\n            var dstRGB = read('dst', 'RGB');\n\n            check$1.optional(function () {\n              var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;\n\n              env.assert(scope, INVALID_BLEND_COMBINATIONS + '.indexOf(' + srcRGB + '+\", \"+' + dstRGB + ') === -1 ', 'unallowed blending combination for (srcRGB, dstRGB)');\n            });\n\n            var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');\n            var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');\n            var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');\n            var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');\n\n            return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];\n          });\n\n        case S_BLEND_EQUATION:\n          return parseParam(function (value) {\n            if (typeof value === 'string') {\n              check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);\n              return [blendEquations[value], blendEquations[value]];\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n              check$1.commandParameter(value.rgb, blendEquations, prop + '.rgb', env.commandStr);\n              check$1.commandParameter(value.alpha, blendEquations, prop + '.alpha', env.commandStr);\n              return [blendEquations[value.rgb], blendEquations[value.alpha]];\n            } else {\n              check$1.commandRaise('invalid blend.equation', env.commandStr);\n            }\n          }, function (env, scope, value) {\n            var BLEND_EQUATIONS = env.constants.blendEquations;\n\n            var RGB = scope.def();\n            var ALPHA = scope.def();\n\n            var ifte = env.cond('typeof ', value, '===\"string\"');\n\n            check$1.optional(function () {\n              function checkProp(block, name, value) {\n                env.assert(block, value + ' in ' + BLEND_EQUATIONS, 'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));\n              }\n              checkProp(ifte.then, prop, value);\n\n              env.assert(ifte.else, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n              checkProp(ifte.else, prop + '.rgb', value + '.rgb');\n              checkProp(ifte.else, prop + '.alpha', value + '.alpha');\n            });\n\n            ifte.then(RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');\n            ifte.else(RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];', ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');\n\n            scope(ifte);\n\n            return [RGB, ALPHA];\n          });\n\n        case S_BLEND_COLOR:\n          return parseParam(function (value) {\n            check$1.command(isArrayLike(value) && value.length === 4, 'blend.color must be a 4d array', env.commandStr);\n            return loop(4, function (i) {\n              return +value[i];\n            });\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'blend.color must be a 4d array');\n            });\n            return loop(4, function (i) {\n              return scope.def('+', value, '[', i, ']');\n            });\n          });\n\n        case S_STENCIL_MASK:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'number', param, env.commandStr);\n            return value | 0;\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, 'typeof ' + value + '===\"number\"', 'invalid stencil.mask');\n            });\n            return scope.def(value, '|0');\n          });\n\n        case S_STENCIL_FUNC:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'object', param, env.commandStr);\n            var cmp = value.cmp || 'keep';\n            var ref = value.ref || 0;\n            var mask = 'mask' in value ? value.mask : -1;\n            check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);\n            check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);\n            check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);\n            return [compareFuncs[cmp], ref, mask];\n          }, function (env, scope, value) {\n            var COMPARE_FUNCS = env.constants.compareFuncs;\n            check$1.optional(function () {\n              function assert() {\n                env.assert(scope, Array.prototype.join.call(arguments, ''), 'invalid stencil.func');\n              }\n              assert(value + '&&typeof ', value, '===\"object\"');\n              assert('!(\"cmp\" in ', value, ')||(', value, '.cmp in ', COMPARE_FUNCS, ')');\n            });\n            var cmp = scope.def('\"cmp\" in ', value, '?', COMPARE_FUNCS, '[', value, '.cmp]', ':', GL_KEEP);\n            var ref = scope.def(value, '.ref|0');\n            var mask = scope.def('\"mask\" in ', value, '?', value, '.mask|0:-1');\n            return [cmp, ref, mask];\n          });\n\n        case S_STENCIL_OPFRONT:\n        case S_STENCIL_OPBACK:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'object', param, env.commandStr);\n            var fail = value.fail || 'keep';\n            var zfail = value.zfail || 'keep';\n            var zpass = value.zpass || 'keep';\n            check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);\n            check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);\n            check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);\n            return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, stencilOps[fail], stencilOps[zfail], stencilOps[zpass]];\n          }, function (env, scope, value) {\n            var STENCIL_OPS = env.constants.stencilOps;\n\n            check$1.optional(function () {\n              env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n            });\n\n            function read(name) {\n              check$1.optional(function () {\n                env.assert(scope, '!(\"' + name + '\" in ' + value + ')||' + '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')', 'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));\n              });\n\n              return scope.def('\"', name, '\" in ', value, '?', STENCIL_OPS, '[', value, '.', name, ']:', GL_KEEP);\n            }\n\n            return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, read('fail'), read('zfail'), read('zpass')];\n          });\n\n        case S_POLYGON_OFFSET_OFFSET:\n          return parseParam(function (value) {\n            check$1.commandType(value, 'object', param, env.commandStr);\n            var factor = value.factor | 0;\n            var units = value.units | 0;\n            check$1.commandType(factor, 'number', param + '.factor', env.commandStr);\n            check$1.commandType(units, 'number', param + '.units', env.commandStr);\n            return [factor, units];\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid ' + prop);\n            });\n\n            var FACTOR = scope.def(value, '.factor|0');\n            var UNITS = scope.def(value, '.units|0');\n\n            return [FACTOR, UNITS];\n          });\n\n        case S_CULL_FACE:\n          return parseParam(function (value) {\n            var face = 0;\n            if (value === 'front') {\n              face = GL_FRONT;\n            } else if (value === 'back') {\n              face = GL_BACK;\n            }\n            check$1.command(!!face, param, env.commandStr);\n            return face;\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, value + '===\"front\"||' + value + '===\"back\"', 'invalid cull.face');\n            });\n            return scope.def(value, '===\"front\"?', GL_FRONT, ':', GL_BACK);\n          });\n\n        case S_LINE_WIDTH:\n          return parseParam(function (value) {\n            check$1.command(typeof value === 'number' && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], 'invalid line width, must be a positive number between ' + limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);\n            return value;\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, 'typeof ' + value + '===\"number\"&&' + value + '>=' + limits.lineWidthDims[0] + '&&' + value + '<=' + limits.lineWidthDims[1], 'invalid line width');\n            });\n\n            return value;\n          });\n\n        case S_FRONT_FACE:\n          return parseParam(function (value) {\n            check$1.commandParameter(value, orientationType, param, env.commandStr);\n            return orientationType[value];\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, value + '===\"cw\"||' + value + '===\"ccw\"', 'invalid frontFace, must be one of cw,ccw');\n            });\n            return scope.def(value + '===\"cw\"?' + GL_CW + ':' + GL_CCW);\n          });\n\n        case S_COLOR_MASK:\n          return parseParam(function (value) {\n            check$1.command(isArrayLike(value) && value.length === 4, 'color.mask must be length 4 array', env.commandStr);\n            return value.map(function (v) {\n              return !!v;\n            });\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'invalid color.mask');\n            });\n            return loop(4, function (i) {\n              return '!!' + value + '[' + i + ']';\n            });\n          });\n\n        case S_SAMPLE_COVERAGE:\n          return parseParam(function (value) {\n            check$1.command((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value, param, env.commandStr);\n            var sampleValue = 'value' in value ? value.value : 1;\n            var sampleInvert = !!value.invert;\n            check$1.command(typeof sampleValue === 'number' && sampleValue >= 0 && sampleValue <= 1, 'sample.coverage.value must be a number between 0 and 1', env.commandStr);\n            return [sampleValue, sampleInvert];\n          }, function (env, scope, value) {\n            check$1.optional(function () {\n              env.assert(scope, value + '&&typeof ' + value + '===\"object\"', 'invalid sample.coverage');\n            });\n            var VALUE = scope.def('\"value\" in ', value, '?+', value, '.value:1');\n            var INVERT = scope.def('!!', value, '.invert');\n            return [VALUE, INVERT];\n          });\n      }\n    });\n\n    return STATE;\n  }\n\n  function parseUniforms(uniforms, env) {\n    var staticUniforms = uniforms.static;\n    var dynamicUniforms = uniforms.dynamic;\n\n    var UNIFORMS = {};\n\n    Object.keys(staticUniforms).forEach(function (name) {\n      var value = staticUniforms[name];\n      var result;\n      if (typeof value === 'number' || typeof value === 'boolean') {\n        result = createStaticDecl(function () {\n          return value;\n        });\n      } else if (typeof value === 'function') {\n        var reglType = value._reglType;\n        if (reglType === 'texture2d' || reglType === 'textureCube') {\n          result = createStaticDecl(function (env) {\n            return env.link(value);\n          });\n        } else if (reglType === 'framebuffer' || reglType === 'framebufferCube') {\n          check$1.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform \"' + name + '\"', env.commandStr);\n          result = createStaticDecl(function (env) {\n            return env.link(value.color[0]);\n          });\n        } else {\n          check$1.commandRaise('invalid data for uniform \"' + name + '\"', env.commandStr);\n        }\n      } else if (isArrayLike(value)) {\n        result = createStaticDecl(function (env) {\n          var ITEM = env.global.def('[', loop(value.length, function (i) {\n            check$1.command(typeof value[i] === 'number' || typeof value[i] === 'boolean', 'invalid uniform ' + name, env.commandStr);\n            return value[i];\n          }), ']');\n          return ITEM;\n        });\n      } else {\n        check$1.commandRaise('invalid or missing data for uniform \"' + name + '\"', env.commandStr);\n      }\n      result.value = value;\n      UNIFORMS[name] = result;\n    });\n\n    Object.keys(dynamicUniforms).forEach(function (key) {\n      var dyn = dynamicUniforms[key];\n      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn);\n      });\n    });\n\n    return UNIFORMS;\n  }\n\n  function parseAttributes(attributes, env) {\n    var staticAttributes = attributes.static;\n    var dynamicAttributes = attributes.dynamic;\n\n    var attributeDefs = {};\n\n    Object.keys(staticAttributes).forEach(function (attribute) {\n      var value = staticAttributes[attribute];\n      var id = stringStore.id(attribute);\n\n      var record = new AttributeRecord();\n      if (isBufferArgs(value)) {\n        record.state = ATTRIB_STATE_POINTER;\n        record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));\n        record.type = 0;\n      } else {\n        var buffer = bufferState.getBuffer(value);\n        if (buffer) {\n          record.state = ATTRIB_STATE_POINTER;\n          record.buffer = buffer;\n          record.type = 0;\n        } else {\n          check$1.command((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value, 'invalid data for attribute ' + attribute, env.commandStr);\n          if ('constant' in value) {\n            var constant = value.constant;\n            record.buffer = 'null';\n            record.state = ATTRIB_STATE_CONSTANT;\n            if (typeof constant === 'number') {\n              record.x = constant;\n            } else {\n              check$1.command(isArrayLike(constant) && constant.length > 0 && constant.length <= 4, 'invalid constant for attribute ' + attribute, env.commandStr);\n              CUTE_COMPONENTS.forEach(function (c, i) {\n                if (i < constant.length) {\n                  record[c] = constant[i];\n                }\n              });\n            }\n          } else {\n            if (isBufferArgs(value.buffer)) {\n              buffer = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));\n            } else {\n              buffer = bufferState.getBuffer(value.buffer);\n            }\n            check$1.command(!!buffer, 'missing buffer for attribute \"' + attribute + '\"', env.commandStr);\n\n            var offset = value.offset | 0;\n            check$1.command(offset >= 0, 'invalid offset for attribute \"' + attribute + '\"', env.commandStr);\n\n            var stride = value.stride | 0;\n            check$1.command(stride >= 0 && stride < 256, 'invalid stride for attribute \"' + attribute + '\", must be integer betweeen [0, 255]', env.commandStr);\n\n            var size = value.size | 0;\n            check$1.command(!('size' in value) || size > 0 && size <= 4, 'invalid size for attribute \"' + attribute + '\", must be 1,2,3,4', env.commandStr);\n\n            var normalized = !!value.normalized;\n\n            var type = 0;\n            if ('type' in value) {\n              check$1.commandParameter(value.type, glTypes, 'invalid type for attribute ' + attribute, env.commandStr);\n              type = glTypes[value.type];\n            }\n\n            var divisor = value.divisor | 0;\n            if ('divisor' in value) {\n              check$1.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute \"' + attribute + '\", instancing not supported', env.commandStr);\n              check$1.command(divisor >= 0, 'invalid divisor for attribute \"' + attribute + '\"', env.commandStr);\n            }\n\n            check$1.optional(function () {\n              var command = env.commandStr;\n\n              var VALID_KEYS = ['buffer', 'offset', 'divisor', 'normalized', 'type', 'size', 'stride'];\n\n              Object.keys(value).forEach(function (prop) {\n                check$1.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter \"' + prop + '\" for attribute pointer \"' + attribute + '\" (valid parameters are ' + VALID_KEYS + ')', command);\n              });\n            });\n\n            record.buffer = buffer;\n            record.state = ATTRIB_STATE_POINTER;\n            record.size = size;\n            record.normalized = normalized;\n            record.type = type || buffer.dtype;\n            record.offset = offset;\n            record.stride = stride;\n            record.divisor = divisor;\n          }\n        }\n      }\n\n      attributeDefs[attribute] = createStaticDecl(function (env, scope) {\n        var cache = env.attribCache;\n        if (id in cache) {\n          return cache[id];\n        }\n        var result = {\n          isStream: false\n        };\n        Object.keys(record).forEach(function (key) {\n          result[key] = record[key];\n        });\n        if (record.buffer) {\n          result.buffer = env.link(record.buffer);\n          result.type = result.type || result.buffer + '.dtype';\n        }\n        cache[id] = result;\n        return result;\n      });\n    });\n\n    Object.keys(dynamicAttributes).forEach(function (attribute) {\n      var dyn = dynamicAttributes[attribute];\n\n      function appendAttributeCode(env, block) {\n        var VALUE = env.invoke(block, dyn);\n\n        var shared = env.shared;\n\n        var IS_BUFFER_ARGS = shared.isBufferArgs;\n        var BUFFER_STATE = shared.buffer;\n\n        // Perform validation on attribute\n        check$1.optional(function () {\n          env.assert(block, VALUE + '&&(typeof ' + VALUE + '===\"object\"||typeof ' + VALUE + '===\"function\")&&(' + IS_BUFFER_ARGS + '(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' + IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' + '(\"constant\" in ' + VALUE + '&&(typeof ' + VALUE + '.constant===\"number\"||' + shared.isArrayLike + '(' + VALUE + '.constant))))', 'invalid dynamic attribute \"' + attribute + '\"');\n        });\n\n        // allocate names for result\n        var result = {\n          isStream: block.def(false)\n        };\n        var defaultRecord = new AttributeRecord();\n        defaultRecord.state = ATTRIB_STATE_POINTER;\n        Object.keys(defaultRecord).forEach(function (key) {\n          result[key] = block.def('' + defaultRecord[key]);\n        });\n\n        var BUFFER = result.buffer;\n        var TYPE = result.type;\n        block('if(', IS_BUFFER_ARGS, '(', VALUE, ')){', result.isStream, '=true;', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');', TYPE, '=', BUFFER, '.dtype;', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');', 'if(', BUFFER, '){', TYPE, '=', BUFFER, '.dtype;', '}else if(\"constant\" in ', VALUE, '){', result.state, '=', ATTRIB_STATE_CONSTANT, ';', 'if(typeof ' + VALUE + '.constant === \"number\"){', result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;', CUTE_COMPONENTS.slice(1).map(function (n) {\n          return result[n];\n        }).join('='), '=0;', '}else{', CUTE_COMPONENTS.map(function (name, i) {\n          return result[name] + '=' + VALUE + '.constant.length>' + i + '?' + VALUE + '.constant[' + i + ']:0;';\n        }).join(''), '}}else{', 'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);', '}', TYPE, '=\"type\" in ', VALUE, '?', shared.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;', result.normalized, '=!!', VALUE, '.normalized;');\n        function emitReadRecord(name) {\n          block(result[name], '=', VALUE, '.', name, '|0;');\n        }\n        emitReadRecord('size');\n        emitReadRecord('offset');\n        emitReadRecord('stride');\n        emitReadRecord('divisor');\n\n        block('}}');\n\n        block.exit('if(', result.isStream, '){', BUFFER_STATE, '.destroyStream(', BUFFER, ');', '}');\n\n        return result;\n      }\n\n      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);\n    });\n\n    return attributeDefs;\n  }\n\n  function parseContext(context) {\n    var staticContext = context.static;\n    var dynamicContext = context.dynamic;\n    var result = {};\n\n    Object.keys(staticContext).forEach(function (name) {\n      var value = staticContext[name];\n      result[name] = createStaticDecl(function (env, scope) {\n        if (typeof value === 'number' || typeof value === 'boolean') {\n          return '' + value;\n        } else {\n          return env.link(value);\n        }\n      });\n    });\n\n    Object.keys(dynamicContext).forEach(function (name) {\n      var dyn = dynamicContext[name];\n      result[name] = createDynamicDecl(dyn, function (env, scope) {\n        return env.invoke(scope, dyn);\n      });\n    });\n\n    return result;\n  }\n\n  function parseArguments(options, attributes, uniforms, context, env) {\n    var staticOptions = options.static;\n    var dynamicOptions = options.dynamic;\n\n    check$1.optional(function () {\n      var KEY_NAMES = [S_FRAMEBUFFER, S_VERT, S_FRAG, S_ELEMENTS, S_PRIMITIVE, S_OFFSET, S_COUNT, S_INSTANCES, S_PROFILE].concat(GL_STATE_NAMES);\n\n      function checkKeys(dict) {\n        Object.keys(dict).forEach(function (key) {\n          check$1.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter \"' + key + '\"', env.commandStr);\n        });\n      }\n\n      checkKeys(staticOptions);\n      checkKeys(dynamicOptions);\n    });\n\n    var framebuffer = parseFramebuffer(options, env);\n    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);\n    var draw = parseDraw(options, env);\n    var state = parseGLState(options, env);\n    var shader = parseProgram(options, env);\n\n    function copyBox(name) {\n      var defn = viewportAndScissor[name];\n      if (defn) {\n        state[name] = defn;\n      }\n    }\n    copyBox(S_VIEWPORT);\n    copyBox(propName(S_SCISSOR_BOX));\n\n    var dirty = Object.keys(state).length > 0;\n\n    var result = {\n      framebuffer: framebuffer,\n      draw: draw,\n      shader: shader,\n      state: state,\n      dirty: dirty\n    };\n\n    result.profile = parseProfile(options, env);\n    result.uniforms = parseUniforms(uniforms, env);\n    result.attributes = parseAttributes(attributes, env);\n    result.context = parseContext(context, env);\n    return result;\n  }\n\n  // ===================================================\n  // ===================================================\n  // COMMON UPDATE FUNCTIONS\n  // ===================================================\n  // ===================================================\n  function emitContext(env, scope, context) {\n    var shared = env.shared;\n    var CONTEXT = shared.context;\n\n    var contextEnter = env.scope();\n\n    Object.keys(context).forEach(function (name) {\n      scope.save(CONTEXT, '.' + name);\n      var defn = context[name];\n      contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');\n    });\n\n    scope(contextEnter);\n  }\n\n  // ===================================================\n  // ===================================================\n  // COMMON DRAWING FUNCTIONS\n  // ===================================================\n  // ===================================================\n  function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {\n    var shared = env.shared;\n\n    var GL = shared.gl;\n    var FRAMEBUFFER_STATE = shared.framebuffer;\n    var EXT_DRAW_BUFFERS;\n    if (extDrawBuffers) {\n      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');\n    }\n\n    var constants = env.constants;\n\n    var DRAW_BUFFERS = constants.drawBuffer;\n    var BACK_BUFFER = constants.backBuffer;\n\n    var NEXT;\n    if (framebuffer) {\n      NEXT = framebuffer.append(env, scope);\n    } else {\n      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');\n    }\n\n    if (!skipCheck) {\n      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');\n    }\n    scope('if(', NEXT, '){', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');\n    if (extDrawBuffers) {\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');\n    }\n    scope('}else{', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');\n    if (extDrawBuffers) {\n      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');\n    }\n    scope('}', FRAMEBUFFER_STATE, '.cur=', NEXT, ';');\n    if (!skipCheck) {\n      scope('}');\n    }\n  }\n\n  function emitPollState(env, scope, args) {\n    var shared = env.shared;\n\n    var GL = shared.gl;\n\n    var CURRENT_VARS = env.current;\n    var NEXT_VARS = env.next;\n    var CURRENT_STATE = shared.current;\n    var NEXT_STATE = shared.next;\n\n    var block = env.cond(CURRENT_STATE, '.dirty');\n\n    GL_STATE_NAMES.forEach(function (prop) {\n      var param = propName(prop);\n      if (param in args.state) {\n        return;\n      }\n\n      var NEXT, CURRENT;\n      if (param in NEXT_VARS) {\n        NEXT = NEXT_VARS[param];\n        CURRENT = CURRENT_VARS[param];\n        var parts = loop(currentState[param].length, function (i) {\n          return block.def(NEXT, '[', i, ']');\n        });\n        block(env.cond(parts.map(function (p, i) {\n          return p + '!==' + CURRENT + '[' + i + ']';\n        }).join('||')).then(GL, '.', GL_VARIABLES[param], '(', parts, ');', parts.map(function (p, i) {\n          return CURRENT + '[' + i + ']=' + p;\n        }).join(';'), ';'));\n      } else {\n        NEXT = block.def(NEXT_STATE, '.', param);\n        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);\n        block(ifte);\n        if (param in GL_FLAGS) {\n          ifte(env.cond(NEXT).then(GL, '.enable(', GL_FLAGS[param], ');').else(GL, '.disable(', GL_FLAGS[param], ');'), CURRENT_STATE, '.', param, '=', NEXT, ';');\n        } else {\n          ifte(GL, '.', GL_VARIABLES[param], '(', NEXT, ');', CURRENT_STATE, '.', param, '=', NEXT, ';');\n        }\n      }\n    });\n    if (Object.keys(args.state).length === 0) {\n      block(CURRENT_STATE, '.dirty=false;');\n    }\n    scope(block);\n  }\n\n  function emitSetOptions(env, scope, options, filter) {\n    var shared = env.shared;\n    var CURRENT_VARS = env.current;\n    var CURRENT_STATE = shared.current;\n    var GL = shared.gl;\n    sortState(Object.keys(options)).forEach(function (param) {\n      var defn = options[param];\n      if (filter && !filter(defn)) {\n        return;\n      }\n      var variable = defn.append(env, scope);\n      if (GL_FLAGS[param]) {\n        var flag = GL_FLAGS[param];\n        if (isStatic(defn)) {\n          if (variable) {\n            scope(GL, '.enable(', flag, ');');\n          } else {\n            scope(GL, '.disable(', flag, ');');\n          }\n        } else {\n          scope(env.cond(variable).then(GL, '.enable(', flag, ');').else(GL, '.disable(', flag, ');'));\n        }\n        scope(CURRENT_STATE, '.', param, '=', variable, ';');\n      } else if (isArrayLike(variable)) {\n        var CURRENT = CURRENT_VARS[param];\n        scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', variable.map(function (v, i) {\n          return CURRENT + '[' + i + ']=' + v;\n        }).join(';'), ';');\n      } else {\n        scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', CURRENT_STATE, '.', param, '=', variable, ';');\n      }\n    });\n  }\n\n  function injectExtensions(env, scope) {\n    if (extInstancing) {\n      env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');\n    }\n  }\n\n  function emitProfile(env, scope, args, useScope, incrementCounter) {\n    var shared = env.shared;\n    var STATS = env.stats;\n    var CURRENT_STATE = shared.current;\n    var TIMER = shared.timer;\n    var profileArg = args.profile;\n\n    function perfCounter() {\n      if (typeof performance === 'undefined') {\n        return 'Date.now()';\n      } else {\n        return 'performance.now()';\n      }\n    }\n\n    var CPU_START, QUERY_COUNTER;\n    function emitProfileStart(block) {\n      CPU_START = scope.def();\n      block(CPU_START, '=', perfCounter(), ';');\n      if (typeof incrementCounter === 'string') {\n        block(STATS, '.count+=', incrementCounter, ';');\n      } else {\n        block(STATS, '.count++;');\n      }\n      if (timer) {\n        if (useScope) {\n          QUERY_COUNTER = scope.def();\n          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');\n        } else {\n          block(TIMER, '.beginQuery(', STATS, ');');\n        }\n      }\n    }\n\n    function emitProfileEnd(block) {\n      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');\n      if (timer) {\n        if (useScope) {\n          block(TIMER, '.pushScopeStats(', QUERY_COUNTER, ',', TIMER, '.getNumPendingQueries(),', STATS, ');');\n        } else {\n          block(TIMER, '.endQuery();');\n        }\n      }\n    }\n\n    function scopeProfile(value) {\n      var prev = scope.def(CURRENT_STATE, '.profile');\n      scope(CURRENT_STATE, '.profile=', value, ';');\n      scope.exit(CURRENT_STATE, '.profile=', prev, ';');\n    }\n\n    var USE_PROFILE;\n    if (profileArg) {\n      if (isStatic(profileArg)) {\n        if (profileArg.enable) {\n          emitProfileStart(scope);\n          emitProfileEnd(scope.exit);\n          scopeProfile('true');\n        } else {\n          scopeProfile('false');\n        }\n        return;\n      }\n      USE_PROFILE = profileArg.append(env, scope);\n      scopeProfile(USE_PROFILE);\n    } else {\n      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');\n    }\n\n    var start = env.block();\n    emitProfileStart(start);\n    scope('if(', USE_PROFILE, '){', start, '}');\n    var end = env.block();\n    emitProfileEnd(end);\n    scope.exit('if(', USE_PROFILE, '){', end, '}');\n  }\n\n  function emitAttributes(env, scope, args, attributes, filter) {\n    var shared = env.shared;\n\n    function typeLength(x) {\n      switch (x) {\n        case GL_FLOAT_VEC2:\n        case GL_INT_VEC2:\n        case GL_BOOL_VEC2:\n          return 2;\n        case GL_FLOAT_VEC3:\n        case GL_INT_VEC3:\n        case GL_BOOL_VEC3:\n          return 3;\n        case GL_FLOAT_VEC4:\n        case GL_INT_VEC4:\n        case GL_BOOL_VEC4:\n          return 4;\n        default:\n          return 1;\n      }\n    }\n\n    function emitBindAttribute(ATTRIBUTE, size, record) {\n      var GL = shared.gl;\n\n      var LOCATION = scope.def(ATTRIBUTE, '.location');\n      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');\n\n      var STATE = record.state;\n      var BUFFER = record.buffer;\n      var CONST_COMPONENTS = [record.x, record.y, record.z, record.w];\n\n      var COMMON_KEYS = ['buffer', 'normalized', 'offset', 'stride'];\n\n      function emitBuffer() {\n        scope('if(!', BINDING, '.buffer){', GL, '.enableVertexAttribArray(', LOCATION, ');}');\n\n        var TYPE = record.type;\n        var SIZE;\n        if (!record.size) {\n          SIZE = size;\n        } else {\n          SIZE = scope.def(record.size, '||', size);\n        }\n\n        scope('if(', BINDING, '.type!==', TYPE, '||', BINDING, '.size!==', SIZE, '||', COMMON_KEYS.map(function (key) {\n          return BINDING + '.' + key + '!==' + record[key];\n        }).join('||'), '){', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);', GL, '.vertexAttribPointer(', [LOCATION, SIZE, TYPE, record.normalized, record.stride, record.offset], ');', BINDING, '.type=', TYPE, ';', BINDING, '.size=', SIZE, ';', COMMON_KEYS.map(function (key) {\n          return BINDING + '.' + key + '=' + record[key] + ';';\n        }).join(''), '}');\n\n        if (extInstancing) {\n          var DIVISOR = record.divisor;\n          scope('if(', BINDING, '.divisor!==', DIVISOR, '){', env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');', BINDING, '.divisor=', DIVISOR, ';}');\n        }\n      }\n\n      function emitConstant() {\n        scope('if(', BINDING, '.buffer){', GL, '.disableVertexAttribArray(', LOCATION, ');', '}if(', CUTE_COMPONENTS.map(function (c, i) {\n          return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i];\n        }).join('||'), '){', GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');', CUTE_COMPONENTS.map(function (c, i) {\n          return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';';\n        }).join(''), '}');\n      }\n\n      if (STATE === ATTRIB_STATE_POINTER) {\n        emitBuffer();\n      } else if (STATE === ATTRIB_STATE_CONSTANT) {\n        emitConstant();\n      } else {\n        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');\n        emitBuffer();\n        scope('}else{');\n        emitConstant();\n        scope('}');\n      }\n    }\n\n    attributes.forEach(function (attribute) {\n      var name = attribute.name;\n      var arg = args.attributes[name];\n      var record;\n      if (arg) {\n        if (!filter(arg)) {\n          return;\n        }\n        record = arg.append(env, scope);\n      } else {\n        if (!filter(SCOPE_DECL)) {\n          return;\n        }\n        var scopeAttrib = env.scopeAttrib(name);\n        check$1.optional(function () {\n          env.assert(scope, scopeAttrib + '.state', 'missing attribute ' + name);\n        });\n        record = {};\n        Object.keys(new AttributeRecord()).forEach(function (key) {\n          record[key] = scope.def(scopeAttrib, '.', key);\n        });\n      }\n      emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);\n    });\n  }\n\n  function emitUniforms(env, scope, args, uniforms, filter) {\n    var shared = env.shared;\n    var GL = shared.gl;\n\n    var infix;\n    for (var i = 0; i < uniforms.length; ++i) {\n      var uniform = uniforms[i];\n      var name = uniform.name;\n      var type = uniform.info.type;\n      var arg = args.uniforms[name];\n      var UNIFORM = env.link(uniform);\n      var LOCATION = UNIFORM + '.location';\n\n      var VALUE;\n      if (arg) {\n        if (!filter(arg)) {\n          continue;\n        }\n        if (isStatic(arg)) {\n          var value = arg.value;\n          check$1.command(value !== null && typeof value !== 'undefined', 'missing uniform \"' + name + '\"', env.commandStr);\n          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {\n            check$1.command(typeof value === 'function' && (type === GL_SAMPLER_2D && (value._reglType === 'texture2d' || value._reglType === 'framebuffer') || type === GL_SAMPLER_CUBE && (value._reglType === 'textureCube' || value._reglType === 'framebufferCube')), 'invalid texture for uniform ' + name, env.commandStr);\n            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);\n            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');\n            scope.exit(TEX_VALUE, '.unbind();');\n          } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {\n            check$1.optional(function () {\n              check$1.command(isArrayLike(value), 'invalid matrix for uniform ' + name, env.commandStr);\n              check$1.command(type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16, 'invalid length for matrix uniform ' + name, env.commandStr);\n            });\n            var MAT_VALUE = env.global.def('new Float32Array([' + Array.prototype.slice.call(value) + '])');\n            var dim = 2;\n            if (type === GL_FLOAT_MAT3) {\n              dim = 3;\n            } else if (type === GL_FLOAT_MAT4) {\n              dim = 4;\n            }\n            scope(GL, '.uniformMatrix', dim, 'fv(', LOCATION, ',false,', MAT_VALUE, ');');\n          } else {\n            switch (type) {\n              case GL_FLOAT$8:\n                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\n                infix = '1f';\n                break;\n              case GL_FLOAT_VEC2:\n                check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                infix = '2f';\n                break;\n              case GL_FLOAT_VEC3:\n                check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                infix = '3f';\n                break;\n              case GL_FLOAT_VEC4:\n                check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                infix = '4f';\n                break;\n              case GL_BOOL:\n                check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);\n                infix = '1i';\n                break;\n              case GL_INT$3:\n                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);\n                infix = '1i';\n                break;\n              case GL_BOOL_VEC2:\n                check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                infix = '2i';\n                break;\n              case GL_INT_VEC2:\n                check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);\n                infix = '2i';\n                break;\n              case GL_BOOL_VEC3:\n                check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                infix = '3i';\n                break;\n              case GL_INT_VEC3:\n                check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);\n                infix = '3i';\n                break;\n              case GL_BOOL_VEC4:\n                check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                infix = '4i';\n                break;\n              case GL_INT_VEC4:\n                check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);\n                infix = '4i';\n                break;\n            }\n            scope(GL, '.uniform', infix, '(', LOCATION, ',', isArrayLike(value) ? Array.prototype.slice.call(value) : value, ');');\n          }\n          continue;\n        } else {\n          VALUE = arg.append(env, scope);\n        }\n      } else {\n        if (!filter(SCOPE_DECL)) {\n          continue;\n        }\n        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');\n      }\n\n      if (type === GL_SAMPLER_2D) {\n        scope('if(', VALUE, '&&', VALUE, '._reglType===\"framebuffer\"){', VALUE, '=', VALUE, '.color[0];', '}');\n      } else if (type === GL_SAMPLER_CUBE) {\n        scope('if(', VALUE, '&&', VALUE, '._reglType===\"framebufferCube\"){', VALUE, '=', VALUE, '.color[0];', '}');\n      }\n\n      // perform type validation\n      check$1.optional(function () {\n        function check(pred, message) {\n          env.assert(scope, pred, 'bad data or missing for uniform \"' + name + '\".  ' + message);\n        }\n\n        function checkType(type) {\n          check('typeof ' + VALUE + '===\"' + type + '\"', 'invalid type, expected ' + type);\n        }\n\n        function checkVector(n, type) {\n          check(shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n, 'invalid vector, should have length ' + n, env.commandStr);\n        }\n\n        function checkTexture(target) {\n          check('typeof ' + VALUE + '===\"function\"&&' + VALUE + '._reglType===\"texture' + (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '\"', 'invalid texture type', env.commandStr);\n        }\n\n        switch (type) {\n          case GL_INT$3:\n            checkType('number');\n            break;\n          case GL_INT_VEC2:\n            checkVector(2, 'number');\n            break;\n          case GL_INT_VEC3:\n            checkVector(3, 'number');\n            break;\n          case GL_INT_VEC4:\n            checkVector(4, 'number');\n            break;\n          case GL_FLOAT$8:\n            checkType('number');\n            break;\n          case GL_FLOAT_VEC2:\n            checkVector(2, 'number');\n            break;\n          case GL_FLOAT_VEC3:\n            checkVector(3, 'number');\n            break;\n          case GL_FLOAT_VEC4:\n            checkVector(4, 'number');\n            break;\n          case GL_BOOL:\n            checkType('boolean');\n            break;\n          case GL_BOOL_VEC2:\n            checkVector(2, 'boolean');\n            break;\n          case GL_BOOL_VEC3:\n            checkVector(3, 'boolean');\n            break;\n          case GL_BOOL_VEC4:\n            checkVector(4, 'boolean');\n            break;\n          case GL_FLOAT_MAT2:\n            checkVector(4, 'number');\n            break;\n          case GL_FLOAT_MAT3:\n            checkVector(9, 'number');\n            break;\n          case GL_FLOAT_MAT4:\n            checkVector(16, 'number');\n            break;\n          case GL_SAMPLER_2D:\n            checkTexture(GL_TEXTURE_2D$3);\n            break;\n          case GL_SAMPLER_CUBE:\n            checkTexture(GL_TEXTURE_CUBE_MAP$2);\n            break;\n        }\n      });\n\n      var unroll = 1;\n      switch (type) {\n        case GL_SAMPLER_2D:\n        case GL_SAMPLER_CUBE:\n          var TEX = scope.def(VALUE, '._texture');\n          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');\n          scope.exit(TEX, '.unbind();');\n          continue;\n\n        case GL_INT$3:\n        case GL_BOOL:\n          infix = '1i';\n          break;\n\n        case GL_INT_VEC2:\n        case GL_BOOL_VEC2:\n          infix = '2i';\n          unroll = 2;\n          break;\n\n        case GL_INT_VEC3:\n        case GL_BOOL_VEC3:\n          infix = '3i';\n          unroll = 3;\n          break;\n\n        case GL_INT_VEC4:\n        case GL_BOOL_VEC4:\n          infix = '4i';\n          unroll = 4;\n          break;\n\n        case GL_FLOAT$8:\n          infix = '1f';\n          break;\n\n        case GL_FLOAT_VEC2:\n          infix = '2f';\n          unroll = 2;\n          break;\n\n        case GL_FLOAT_VEC3:\n          infix = '3f';\n          unroll = 3;\n          break;\n\n        case GL_FLOAT_VEC4:\n          infix = '4f';\n          unroll = 4;\n          break;\n\n        case GL_FLOAT_MAT2:\n          infix = 'Matrix2fv';\n          break;\n\n        case GL_FLOAT_MAT3:\n          infix = 'Matrix3fv';\n          break;\n\n        case GL_FLOAT_MAT4:\n          infix = 'Matrix4fv';\n          break;\n      }\n\n      scope(GL, '.uniform', infix, '(', LOCATION, ',');\n      if (infix.charAt(0) === 'M') {\n        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);\n        var STORAGE = env.global.def('new Float32Array(', matSize, ')');\n        scope('false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(', loop(matSize, function (i) {\n          return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']';\n        }), ',', STORAGE, ')');\n      } else if (unroll > 1) {\n        scope(loop(unroll, function (i) {\n          return VALUE + '[' + i + ']';\n        }));\n      } else {\n        scope(VALUE);\n      }\n      scope(');');\n    }\n  }\n\n  function emitDraw(env, outer, inner, args) {\n    var shared = env.shared;\n    var GL = shared.gl;\n    var DRAW_STATE = shared.draw;\n\n    var drawOptions = args.draw;\n\n    function emitElements() {\n      var defn = drawOptions.elements;\n      var ELEMENTS;\n      var scope = outer;\n      if (defn) {\n        if (defn.contextDep && args.contextDynamic || defn.propDep) {\n          scope = inner;\n        }\n        ELEMENTS = defn.append(env, scope);\n      } else {\n        ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);\n      }\n      if (ELEMENTS) {\n        scope('if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');\n      }\n      return ELEMENTS;\n    }\n\n    function emitCount() {\n      var defn = drawOptions.count;\n      var COUNT;\n      var scope = outer;\n      if (defn) {\n        if (defn.contextDep && args.contextDynamic || defn.propDep) {\n          scope = inner;\n        }\n        COUNT = defn.append(env, scope);\n        check$1.optional(function () {\n          if (defn.MISSING) {\n            env.assert(outer, 'false', 'missing vertex count');\n          }\n          if (defn.DYNAMIC) {\n            env.assert(scope, COUNT + '>=0', 'missing vertex count');\n          }\n        });\n      } else {\n        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);\n        check$1.optional(function () {\n          env.assert(scope, COUNT + '>=0', 'missing vertex count');\n        });\n      }\n      return COUNT;\n    }\n\n    var ELEMENTS = emitElements();\n    function emitValue(name) {\n      var defn = drawOptions[name];\n      if (defn) {\n        if (defn.contextDep && args.contextDynamic || defn.propDep) {\n          return defn.append(env, inner);\n        } else {\n          return defn.append(env, outer);\n        }\n      } else {\n        return outer.def(DRAW_STATE, '.', name);\n      }\n    }\n\n    var PRIMITIVE = emitValue(S_PRIMITIVE);\n    var OFFSET = emitValue(S_OFFSET);\n\n    var COUNT = emitCount();\n    if (typeof COUNT === 'number') {\n      if (COUNT === 0) {\n        return;\n      }\n    } else {\n      inner('if(', COUNT, '){');\n      inner.exit('}');\n    }\n\n    var INSTANCES, EXT_INSTANCING;\n    if (extInstancing) {\n      INSTANCES = emitValue(S_INSTANCES);\n      EXT_INSTANCING = env.instancing;\n    }\n\n    var ELEMENT_TYPE = ELEMENTS + '.type';\n\n    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);\n\n    function emitInstancing() {\n      function drawElements() {\n        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)', INSTANCES], ');');\n      }\n\n      function drawArrays() {\n        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(', [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');\n      }\n\n      if (ELEMENTS) {\n        if (!elementsStatic) {\n          inner('if(', ELEMENTS, '){');\n          drawElements();\n          inner('}else{');\n          drawArrays();\n          inner('}');\n        } else {\n          drawElements();\n        }\n      } else {\n        drawArrays();\n      }\n    }\n\n    function emitRegular() {\n      function drawElements() {\n        inner(GL + '.drawElements(' + [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'] + ');');\n      }\n\n      function drawArrays() {\n        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');\n      }\n\n      if (ELEMENTS) {\n        if (!elementsStatic) {\n          inner('if(', ELEMENTS, '){');\n          drawElements();\n          inner('}else{');\n          drawArrays();\n          inner('}');\n        } else {\n          drawElements();\n        }\n      } else {\n        drawArrays();\n      }\n    }\n\n    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {\n      if (typeof INSTANCES === 'string') {\n        inner('if(', INSTANCES, '>0){');\n        emitInstancing();\n        inner('}else if(', INSTANCES, '<0){');\n        emitRegular();\n        inner('}');\n      } else {\n        emitInstancing();\n      }\n    } else {\n      emitRegular();\n    }\n  }\n\n  function createBody(emitBody, parentEnv, args, program, count) {\n    var env = createREGLEnvironment();\n    var scope = env.proc('body', count);\n    check$1.optional(function () {\n      env.commandStr = parentEnv.commandStr;\n      env.command = env.link(parentEnv.commandStr);\n    });\n    if (extInstancing) {\n      env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');\n    }\n    emitBody(env, scope, args, program);\n    return env.compile().body;\n  }\n\n  // ===================================================\n  // ===================================================\n  // DRAW PROC\n  // ===================================================\n  // ===================================================\n  function emitDrawBody(env, draw, args, program) {\n    injectExtensions(env, draw);\n    emitAttributes(env, draw, args, program.attributes, function () {\n      return true;\n    });\n    emitUniforms(env, draw, args, program.uniforms, function () {\n      return true;\n    });\n    emitDraw(env, draw, draw, args);\n  }\n\n  function emitDrawProc(env, args) {\n    var draw = env.proc('draw', 1);\n\n    injectExtensions(env, draw);\n\n    emitContext(env, draw, args.context);\n    emitPollFramebuffer(env, draw, args.framebuffer);\n\n    emitPollState(env, draw, args);\n    emitSetOptions(env, draw, args.state);\n\n    emitProfile(env, draw, args, false, true);\n\n    var program = args.shader.progVar.append(env, draw);\n    draw(env.shared.gl, '.useProgram(', program, '.program);');\n\n    if (args.shader.program) {\n      emitDrawBody(env, draw, args, args.shader.program);\n    } else {\n      var drawCache = env.global.def('{}');\n      var PROG_ID = draw.def(program, '.id');\n      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');\n      draw(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0);').else(CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=', env.link(function (program) {\n        return createBody(emitDrawBody, env, args, program, 1);\n      }), '(', program, ');', CACHED_PROC, '.call(this,a0);'));\n    }\n\n    if (Object.keys(args.state).length > 0) {\n      draw(env.shared.current, '.dirty=true;');\n    }\n  }\n\n  // ===================================================\n  // ===================================================\n  // BATCH PROC\n  // ===================================================\n  // ===================================================\n\n  function emitBatchDynamicShaderBody(env, scope, args, program) {\n    env.batchId = 'a1';\n\n    injectExtensions(env, scope);\n\n    function all() {\n      return true;\n    }\n\n    emitAttributes(env, scope, args, program.attributes, all);\n    emitUniforms(env, scope, args, program.uniforms, all);\n    emitDraw(env, scope, scope, args);\n  }\n\n  function emitBatchBody(env, scope, args, program) {\n    injectExtensions(env, scope);\n\n    var contextDynamic = args.contextDep;\n\n    var BATCH_ID = scope.def();\n    var PROP_LIST = 'a0';\n    var NUM_PROPS = 'a1';\n    var PROPS = scope.def();\n    env.shared.props = PROPS;\n    env.batchId = BATCH_ID;\n\n    var outer = env.scope();\n    var inner = env.scope();\n\n    scope(outer.entry, 'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){', PROPS, '=', PROP_LIST, '[', BATCH_ID, '];', inner, '}', outer.exit);\n\n    function isInnerDefn(defn) {\n      return defn.contextDep && contextDynamic || defn.propDep;\n    }\n\n    function isOuterDefn(defn) {\n      return !isInnerDefn(defn);\n    }\n\n    if (args.needsContext) {\n      emitContext(env, inner, args.context);\n    }\n    if (args.needsFramebuffer) {\n      emitPollFramebuffer(env, inner, args.framebuffer);\n    }\n    emitSetOptions(env, inner, args.state, isInnerDefn);\n\n    if (args.profile && isInnerDefn(args.profile)) {\n      emitProfile(env, inner, args, false, true);\n    }\n\n    if (!program) {\n      var progCache = env.global.def('{}');\n      var PROGRAM = args.shader.progVar.append(env, inner);\n      var PROG_ID = inner.def(PROGRAM, '.id');\n      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');\n      inner(env.shared.gl, '.useProgram(', PROGRAM, '.program);', 'if(!', CACHED_PROC, '){', CACHED_PROC, '=', progCache, '[', PROG_ID, ']=', env.link(function (program) {\n        return createBody(emitBatchDynamicShaderBody, env, args, program, 2);\n      }), '(', PROGRAM, ');}', CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');\n    } else {\n      emitAttributes(env, outer, args, program.attributes, isOuterDefn);\n      emitAttributes(env, inner, args, program.attributes, isInnerDefn);\n      emitUniforms(env, outer, args, program.uniforms, isOuterDefn);\n      emitUniforms(env, inner, args, program.uniforms, isInnerDefn);\n      emitDraw(env, outer, inner, args);\n    }\n  }\n\n  function emitBatchProc(env, args) {\n    var batch = env.proc('batch', 2);\n    env.batchId = '0';\n\n    injectExtensions(env, batch);\n\n    // Check if any context variables depend on props\n    var contextDynamic = false;\n    var needsContext = true;\n    Object.keys(args.context).forEach(function (name) {\n      contextDynamic = contextDynamic || args.context[name].propDep;\n    });\n    if (!contextDynamic) {\n      emitContext(env, batch, args.context);\n      needsContext = false;\n    }\n\n    // framebuffer state affects framebufferWidth/height context vars\n    var framebuffer = args.framebuffer;\n    var needsFramebuffer = false;\n    if (framebuffer) {\n      if (framebuffer.propDep) {\n        contextDynamic = needsFramebuffer = true;\n      } else if (framebuffer.contextDep && contextDynamic) {\n        needsFramebuffer = true;\n      }\n      if (!needsFramebuffer) {\n        emitPollFramebuffer(env, batch, framebuffer);\n      }\n    } else {\n      emitPollFramebuffer(env, batch, null);\n    }\n\n    // viewport is weird because it can affect context vars\n    if (args.state.viewport && args.state.viewport.propDep) {\n      contextDynamic = true;\n    }\n\n    function isInnerDefn(defn) {\n      return defn.contextDep && contextDynamic || defn.propDep;\n    }\n\n    // set webgl options\n    emitPollState(env, batch, args);\n    emitSetOptions(env, batch, args.state, function (defn) {\n      return !isInnerDefn(defn);\n    });\n\n    if (!args.profile || !isInnerDefn(args.profile)) {\n      emitProfile(env, batch, args, false, 'a1');\n    }\n\n    // Save these values to args so that the batch body routine can use them\n    args.contextDep = contextDynamic;\n    args.needsContext = needsContext;\n    args.needsFramebuffer = needsFramebuffer;\n\n    // determine if shader is dynamic\n    var progDefn = args.shader.progVar;\n    if (progDefn.contextDep && contextDynamic || progDefn.propDep) {\n      emitBatchBody(env, batch, args, null);\n    } else {\n      var PROGRAM = progDefn.append(env, batch);\n      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');\n      if (args.shader.program) {\n        emitBatchBody(env, batch, args, args.shader.program);\n      } else {\n        var batchCache = env.global.def('{}');\n        var PROG_ID = batch.def(PROGRAM, '.id');\n        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');\n        batch(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0,a1);').else(CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=', env.link(function (program) {\n          return createBody(emitBatchBody, env, args, program, 2);\n        }), '(', PROGRAM, ');', CACHED_PROC, '.call(this,a0,a1);'));\n      }\n    }\n\n    if (Object.keys(args.state).length > 0) {\n      batch(env.shared.current, '.dirty=true;');\n    }\n  }\n\n  // ===================================================\n  // ===================================================\n  // SCOPE COMMAND\n  // ===================================================\n  // ===================================================\n  function emitScopeProc(env, args) {\n    var scope = env.proc('scope', 3);\n    env.batchId = 'a2';\n\n    var shared = env.shared;\n    var CURRENT_STATE = shared.current;\n\n    emitContext(env, scope, args.context);\n\n    if (args.framebuffer) {\n      args.framebuffer.append(env, scope);\n    }\n\n    sortState(Object.keys(args.state)).forEach(function (name) {\n      var defn = args.state[name];\n      var value = defn.append(env, scope);\n      if (isArrayLike(value)) {\n        value.forEach(function (v, i) {\n          scope.set(env.next[name], '[' + i + ']', v);\n        });\n      } else {\n        scope.set(shared.next, '.' + name, value);\n      }\n    });\n\n    emitProfile(env, scope, args, true, true);[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(function (opt) {\n      var variable = args.draw[opt];\n      if (!variable) {\n        return;\n      }\n      scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));\n    });\n\n    Object.keys(args.uniforms).forEach(function (opt) {\n      scope.set(shared.uniforms, '[' + stringStore.id(opt) + ']', args.uniforms[opt].append(env, scope));\n    });\n\n    Object.keys(args.attributes).forEach(function (name) {\n      var record = args.attributes[name].append(env, scope);\n      var scopeAttrib = env.scopeAttrib(name);\n      Object.keys(new AttributeRecord()).forEach(function (prop) {\n        scope.set(scopeAttrib, '.' + prop, record[prop]);\n      });\n    });\n\n    function saveShader(name) {\n      var shader = args.shader[name];\n      if (shader) {\n        scope.set(shared.shader, '.' + name, shader.append(env, scope));\n      }\n    }\n    saveShader(S_VERT);\n    saveShader(S_FRAG);\n\n    if (Object.keys(args.state).length > 0) {\n      scope(CURRENT_STATE, '.dirty=true;');\n      scope.exit(CURRENT_STATE, '.dirty=true;');\n    }\n\n    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');\n  }\n\n  function isDynamicObject(object) {\n    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' || isArrayLike(object)) {\n      return;\n    }\n    var props = Object.keys(object);\n    for (var i = 0; i < props.length; ++i) {\n      if (dynamic.isDynamic(object[props[i]])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function splatObject(env, options, name) {\n    var object = options.static[name];\n    if (!object || !isDynamicObject(object)) {\n      return;\n    }\n\n    var globals = env.global;\n    var keys = Object.keys(object);\n    var thisDep = false;\n    var contextDep = false;\n    var propDep = false;\n    var objectRef = env.global.def('{}');\n    keys.forEach(function (key) {\n      var value = object[key];\n      if (dynamic.isDynamic(value)) {\n        if (typeof value === 'function') {\n          value = object[key] = dynamic.unbox(value);\n        }\n        var deps = createDynamicDecl(value, null);\n        thisDep = thisDep || deps.thisDep;\n        propDep = propDep || deps.propDep;\n        contextDep = contextDep || deps.contextDep;\n      } else {\n        globals(objectRef, '.', key, '=');\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case 'number':\n            globals(value);\n            break;\n          case 'string':\n            globals('\"', value, '\"');\n            break;\n          case 'object':\n            if (Array.isArray(value)) {\n              globals('[', value.join(), ']');\n            }\n            break;\n          default:\n            globals(env.link(value));\n            break;\n        }\n        globals(';');\n      }\n    });\n\n    function appendBlock(env, block) {\n      keys.forEach(function (key) {\n        var value = object[key];\n        if (!dynamic.isDynamic(value)) {\n          return;\n        }\n        var ref = env.invoke(block, value);\n        block(objectRef, '.', key, '=', ref, ';');\n      });\n    }\n\n    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {\n      thisDep: thisDep,\n      contextDep: contextDep,\n      propDep: propDep,\n      ref: objectRef,\n      append: appendBlock\n    });\n    delete options.static[name];\n  }\n\n  // ===========================================================================\n  // ===========================================================================\n  // MAIN DRAW COMMAND\n  // ===========================================================================\n  // ===========================================================================\n  function compileCommand(options, attributes, uniforms, context, stats) {\n    var env = createREGLEnvironment();\n\n    // link stats, so that we can easily access it in the program.\n    env.stats = env.link(stats);\n\n    // splat options and attributes to allow for dynamic nested properties\n    Object.keys(attributes.static).forEach(function (key) {\n      splatObject(env, attributes, key);\n    });\n    NESTED_OPTIONS.forEach(function (name) {\n      splatObject(env, options, name);\n    });\n\n    var args = parseArguments(options, attributes, uniforms, context, env);\n\n    emitDrawProc(env, args);\n    emitScopeProc(env, args);\n    emitBatchProc(env, args);\n\n    return env.compile();\n  }\n\n  // ===========================================================================\n  // ===========================================================================\n  // POLL / REFRESH\n  // ===========================================================================\n  // ===========================================================================\n  return {\n    next: nextState,\n    current: currentState,\n    procs: function () {\n      var env = createREGLEnvironment();\n      var poll = env.proc('poll');\n      var refresh = env.proc('refresh');\n      var common = env.block();\n      poll(common);\n      refresh(common);\n\n      var shared = env.shared;\n      var GL = shared.gl;\n      var NEXT_STATE = shared.next;\n      var CURRENT_STATE = shared.current;\n\n      common(CURRENT_STATE, '.dirty=false;');\n\n      emitPollFramebuffer(env, poll);\n      emitPollFramebuffer(env, refresh, null, true);\n\n      // Refresh updates all attribute state changes\n      var INSTANCING;\n      if (extInstancing) {\n        INSTANCING = env.link(extInstancing);\n      }\n      for (var i = 0; i < limits.maxAttributes; ++i) {\n        var BINDING = refresh.def(shared.attributes, '[', i, ']');\n        var ifte = env.cond(BINDING, '.buffer');\n        ifte.then(GL, '.enableVertexAttribArray(', i, ');', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BINDING, '.buffer.buffer);', GL, '.vertexAttribPointer(', i, ',', BINDING, '.size,', BINDING, '.type,', BINDING, '.normalized,', BINDING, '.stride,', BINDING, '.offset);').else(GL, '.disableVertexAttribArray(', i, ');', GL, '.vertexAttrib4f(', i, ',', BINDING, '.x,', BINDING, '.y,', BINDING, '.z,', BINDING, '.w);', BINDING, '.buffer=null;');\n        refresh(ifte);\n        if (extInstancing) {\n          refresh(INSTANCING, '.vertexAttribDivisorANGLE(', i, ',', BINDING, '.divisor);');\n        }\n      }\n\n      Object.keys(GL_FLAGS).forEach(function (flag) {\n        var cap = GL_FLAGS[flag];\n        var NEXT = common.def(NEXT_STATE, '.', flag);\n        var block = env.block();\n        block('if(', NEXT, '){', GL, '.enable(', cap, ')}else{', GL, '.disable(', cap, ')}', CURRENT_STATE, '.', flag, '=', NEXT, ';');\n        refresh(block);\n        poll('if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){', block, '}');\n      });\n\n      Object.keys(GL_VARIABLES).forEach(function (name) {\n        var func = GL_VARIABLES[name];\n        var init = currentState[name];\n        var NEXT, CURRENT;\n        var block = env.block();\n        block(GL, '.', func, '(');\n        if (isArrayLike(init)) {\n          var n = init.length;\n          NEXT = env.global.def(NEXT_STATE, '.', name);\n          CURRENT = env.global.def(CURRENT_STATE, '.', name);\n          block(loop(n, function (i) {\n            return NEXT + '[' + i + ']';\n          }), ');', loop(n, function (i) {\n            return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];';\n          }).join(''));\n          poll('if(', loop(n, function (i) {\n            return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']';\n          }).join('||'), '){', block, '}');\n        } else {\n          NEXT = common.def(NEXT_STATE, '.', name);\n          CURRENT = common.def(CURRENT_STATE, '.', name);\n          block(NEXT, ');', CURRENT_STATE, '.', name, '=', NEXT, ';');\n          poll('if(', NEXT, '!==', CURRENT, '){', block, '}');\n        }\n        refresh(block);\n      });\n\n      return env.compile();\n    }(),\n    compile: compileCommand\n  };\n}\n\nfunction stats() {\n  return {\n    bufferCount: 0,\n    elementsCount: 0,\n    framebufferCount: 0,\n    shaderCount: 0,\n    textureCount: 0,\n    cubeCount: 0,\n    renderbufferCount: 0,\n    maxTextureUnits: 0\n  };\n}\n\nvar GL_QUERY_RESULT_EXT = 0x8866;\nvar GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;\nvar GL_TIME_ELAPSED_EXT = 0x88BF;\n\nvar createTimer = function createTimer(gl, extensions) {\n  var extTimer = extensions.ext_disjoint_timer_query;\n\n  if (!extTimer) {\n    return null;\n  }\n\n  // QUERY POOL BEGIN\n  var queryPool = [];\n  function allocQuery() {\n    return queryPool.pop() || extTimer.createQueryEXT();\n  }\n  function freeQuery(query) {\n    queryPool.push(query);\n  }\n  // QUERY POOL END\n\n  var pendingQueries = [];\n  function beginQuery(stats) {\n    var query = allocQuery();\n    extTimer.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);\n    pendingQueries.push(query);\n    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);\n  }\n\n  function endQuery() {\n    extTimer.endQueryEXT(GL_TIME_ELAPSED_EXT);\n  }\n\n  //\n  // Pending stats pool.\n  //\n  function PendingStats() {\n    this.startQueryIndex = -1;\n    this.endQueryIndex = -1;\n    this.sum = 0;\n    this.stats = null;\n  }\n  var pendingStatsPool = [];\n  function allocPendingStats() {\n    return pendingStatsPool.pop() || new PendingStats();\n  }\n  function freePendingStats(pendingStats) {\n    pendingStatsPool.push(pendingStats);\n  }\n  // Pending stats pool end\n\n  var pendingStats = [];\n  function pushScopeStats(start, end, stats) {\n    var ps = allocPendingStats();\n    ps.startQueryIndex = start;\n    ps.endQueryIndex = end;\n    ps.sum = 0;\n    ps.stats = stats;\n    pendingStats.push(ps);\n  }\n\n  // we should call this at the beginning of the frame,\n  // in order to update gpuTime\n  var timeSum = [];\n  var queryPtr = [];\n  function update() {\n    var ptr, i;\n\n    var n = pendingQueries.length;\n    if (n === 0) {\n      return;\n    }\n\n    // Reserve space\n    queryPtr.length = Math.max(queryPtr.length, n + 1);\n    timeSum.length = Math.max(timeSum.length, n + 1);\n    timeSum[0] = 0;\n    queryPtr[0] = 0;\n\n    // Update all pending timer queries\n    var queryTime = 0;\n    ptr = 0;\n    for (i = 0; i < pendingQueries.length; ++i) {\n      var query = pendingQueries[i];\n      if (extTimer.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {\n        queryTime += extTimer.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);\n        freeQuery(query);\n      } else {\n        pendingQueries[ptr++] = query;\n      }\n      timeSum[i + 1] = queryTime;\n      queryPtr[i + 1] = ptr;\n    }\n    pendingQueries.length = ptr;\n\n    // Update all pending stat queries\n    ptr = 0;\n    for (i = 0; i < pendingStats.length; ++i) {\n      var stats = pendingStats[i];\n      var start = stats.startQueryIndex;\n      var end = stats.endQueryIndex;\n      stats.sum += timeSum[end] - timeSum[start];\n      var startPtr = queryPtr[start];\n      var endPtr = queryPtr[end];\n      if (endPtr === startPtr) {\n        stats.stats.gpuTime += stats.sum / 1e6;\n        freePendingStats(stats);\n      } else {\n        stats.startQueryIndex = startPtr;\n        stats.endQueryIndex = endPtr;\n        pendingStats[ptr++] = stats;\n      }\n    }\n    pendingStats.length = ptr;\n  }\n\n  return {\n    beginQuery: beginQuery,\n    endQuery: endQuery,\n    pushScopeStats: pushScopeStats,\n    update: update,\n    getNumPendingQueries: function getNumPendingQueries() {\n      return pendingQueries.length;\n    },\n    clear: function clear() {\n      queryPool.push.apply(queryPool, pendingQueries);\n      for (var i = 0; i < queryPool.length; i++) {\n        extTimer.deleteQueryEXT(queryPool[i]);\n      }\n      pendingQueries.length = 0;\n      queryPool.length = 0;\n    },\n    restore: function restore() {\n      pendingQueries.length = 0;\n      queryPool.length = 0;\n    }\n  };\n};\n\nvar GL_COLOR_BUFFER_BIT = 16384;\nvar GL_DEPTH_BUFFER_BIT = 256;\nvar GL_STENCIL_BUFFER_BIT = 1024;\n\nvar GL_ARRAY_BUFFER = 34962;\n\nvar CONTEXT_LOST_EVENT = 'webglcontextlost';\nvar CONTEXT_RESTORED_EVENT = 'webglcontextrestored';\n\nvar DYN_PROP = 1;\nvar DYN_CONTEXT = 2;\nvar DYN_STATE = 3;\n\nfunction find(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction wrapREGL(args) {\n  var config = parseArgs(args);\n  if (!config) {\n    return null;\n  }\n\n  var gl = config.gl;\n  var glAttributes = gl.getContextAttributes();\n  var contextLost = gl.isContextLost();\n\n  var extensionState = createExtensionCache(gl, config);\n  if (!extensionState) {\n    return null;\n  }\n\n  var stringStore = createStringStore();\n  var stats$$1 = stats();\n  var extensions = extensionState.extensions;\n  var timer = createTimer(gl, extensions);\n\n  var START_TIME = clock();\n  var WIDTH = gl.drawingBufferWidth;\n  var HEIGHT = gl.drawingBufferHeight;\n\n  var contextState = {\n    tick: 0,\n    time: 0,\n    viewportWidth: WIDTH,\n    viewportHeight: HEIGHT,\n    framebufferWidth: WIDTH,\n    framebufferHeight: HEIGHT,\n    drawingBufferWidth: WIDTH,\n    drawingBufferHeight: HEIGHT,\n    pixelRatio: config.pixelRatio\n  };\n  var uniformState = {};\n  var drawState = {\n    elements: null,\n    primitive: 4, // GL_TRIANGLES\n    count: -1,\n    offset: 0,\n    instances: -1\n  };\n\n  var limits = wrapLimits(gl, extensions);\n  var attributeState = wrapAttributeState(gl, extensions, limits, stringStore);\n  var bufferState = wrapBufferState(gl, stats$$1, config, attributeState);\n  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);\n  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);\n  var textureState = createTextureSet(gl, extensions, limits, function () {\n    core.procs.poll();\n  }, contextState, stats$$1, config);\n  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);\n  var framebufferState = wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats$$1);\n  var core = reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config);\n  var readPixels = wrapReadPixels(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);\n\n  var nextState = core.next;\n  var canvas = gl.canvas;\n\n  var rafCallbacks = [];\n  var lossCallbacks = [];\n  var restoreCallbacks = [];\n  var destroyCallbacks = [config.onDestroy];\n\n  var activeRAF = null;\n  function handleRAF() {\n    if (rafCallbacks.length === 0) {\n      if (timer) {\n        timer.update();\n      }\n      activeRAF = null;\n      return;\n    }\n\n    // schedule next animation frame\n    activeRAF = raf.next(handleRAF);\n\n    // poll for changes\n    _poll();\n\n    // fire a callback for all pending rafs\n    for (var i = rafCallbacks.length - 1; i >= 0; --i) {\n      var cb = rafCallbacks[i];\n      if (cb) {\n        cb(contextState, null, 0);\n      }\n    }\n\n    // flush all pending webgl calls\n    gl.flush();\n\n    // poll GPU timers *after* gl.flush so we don't delay command dispatch\n    if (timer) {\n      timer.update();\n    }\n  }\n\n  function startRAF() {\n    if (!activeRAF && rafCallbacks.length > 0) {\n      activeRAF = raf.next(handleRAF);\n    }\n  }\n\n  function stopRAF() {\n    if (activeRAF) {\n      raf.cancel(handleRAF);\n      activeRAF = null;\n    }\n  }\n\n  function handleContextLoss(event) {\n    event.preventDefault();\n\n    // set context lost flag\n    contextLost = true;\n\n    // pause request animation frame\n    stopRAF();\n\n    // lose context\n    lossCallbacks.forEach(function (cb) {\n      cb();\n    });\n  }\n\n  function handleContextRestored(event) {\n    // clear error code\n    gl.getError();\n\n    // clear context lost flag\n    contextLost = false;\n\n    // refresh state\n    extensionState.restore();\n    shaderState.restore();\n    bufferState.restore();\n    textureState.restore();\n    renderbufferState.restore();\n    framebufferState.restore();\n    if (timer) {\n      timer.restore();\n    }\n\n    // refresh state\n    core.procs.refresh();\n\n    // restart RAF\n    startRAF();\n\n    // restore context\n    restoreCallbacks.forEach(function (cb) {\n      cb();\n    });\n  }\n\n  if (canvas) {\n    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);\n    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);\n  }\n\n  function destroy() {\n    rafCallbacks.length = 0;\n    stopRAF();\n\n    if (canvas) {\n      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);\n      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);\n    }\n\n    shaderState.clear();\n    framebufferState.clear();\n    renderbufferState.clear();\n    textureState.clear();\n    elementState.clear();\n    bufferState.clear();\n\n    if (timer) {\n      timer.clear();\n    }\n\n    destroyCallbacks.forEach(function (cb) {\n      cb();\n    });\n  }\n\n  function compileProcedure(options) {\n    check$1(!!options, 'invalid args to regl({...})');\n    check$1.type(options, 'object', 'invalid args to regl({...})');\n\n    function flattenNestedOptions(options) {\n      var result = extend({}, options);\n      delete result.uniforms;\n      delete result.attributes;\n      delete result.context;\n\n      if ('stencil' in result && result.stencil.op) {\n        result.stencil.opBack = result.stencil.opFront = result.stencil.op;\n        delete result.stencil.op;\n      }\n\n      function merge(name) {\n        if (name in result) {\n          var child = result[name];\n          delete result[name];\n          Object.keys(child).forEach(function (prop) {\n            result[name + '.' + prop] = child[prop];\n          });\n        }\n      }\n      merge('blend');\n      merge('depth');\n      merge('cull');\n      merge('stencil');\n      merge('polygonOffset');\n      merge('scissor');\n      merge('sample');\n\n      return result;\n    }\n\n    function separateDynamic(object) {\n      var staticItems = {};\n      var dynamicItems = {};\n      Object.keys(object).forEach(function (option) {\n        var value = object[option];\n        if (dynamic.isDynamic(value)) {\n          dynamicItems[option] = dynamic.unbox(value, option);\n        } else {\n          staticItems[option] = value;\n        }\n      });\n      return {\n        dynamic: dynamicItems,\n        static: staticItems\n      };\n    }\n\n    // Treat context variables separate from other dynamic variables\n    var context = separateDynamic(options.context || {});\n    var uniforms = separateDynamic(options.uniforms || {});\n    var attributes = separateDynamic(options.attributes || {});\n    var opts = separateDynamic(flattenNestedOptions(options));\n\n    var stats$$1 = {\n      gpuTime: 0.0,\n      cpuTime: 0.0,\n      count: 0\n    };\n\n    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);\n\n    var draw = compiled.draw;\n    var batch = compiled.batch;\n    var scope = compiled.scope;\n\n    // FIXME: we should modify code generation for batch commands so this\n    // isn't necessary\n    var EMPTY_ARRAY = [];\n    function reserve(count) {\n      while (EMPTY_ARRAY.length < count) {\n        EMPTY_ARRAY.push(null);\n      }\n      return EMPTY_ARRAY;\n    }\n\n    function REGLCommand(args, body) {\n      var i;\n      if (contextLost) {\n        check$1.raise('context lost');\n      }\n      if (typeof args === 'function') {\n        return scope.call(this, null, args, 0);\n      } else if (typeof body === 'function') {\n        if (typeof args === 'number') {\n          for (i = 0; i < args; ++i) {\n            scope.call(this, null, body, i);\n          }\n          return;\n        } else if (Array.isArray(args)) {\n          for (i = 0; i < args.length; ++i) {\n            scope.call(this, args[i], body, i);\n          }\n          return;\n        } else {\n          return scope.call(this, args, body, 0);\n        }\n      } else if (typeof args === 'number') {\n        if (args > 0) {\n          return batch.call(this, reserve(args | 0), args | 0);\n        }\n      } else if (Array.isArray(args)) {\n        if (args.length) {\n          return batch.call(this, args, args.length);\n        }\n      } else {\n        return draw.call(this, args);\n      }\n    }\n\n    return extend(REGLCommand, {\n      stats: stats$$1\n    });\n  }\n\n  var setFBO = framebufferState.setFBO = compileProcedure({\n    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')\n  });\n\n  function clearImpl(_, options) {\n    var clearFlags = 0;\n    core.procs.poll();\n\n    var c = options.color;\n    if (c) {\n      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);\n      clearFlags |= GL_COLOR_BUFFER_BIT;\n    }\n    if ('depth' in options) {\n      gl.clearDepth(+options.depth);\n      clearFlags |= GL_DEPTH_BUFFER_BIT;\n    }\n    if ('stencil' in options) {\n      gl.clearStencil(options.stencil | 0);\n      clearFlags |= GL_STENCIL_BUFFER_BIT;\n    }\n\n    check$1(!!clearFlags, 'called regl.clear with no buffer specified');\n    gl.clear(clearFlags);\n  }\n\n  function clear(options) {\n    check$1((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options, 'regl.clear() takes an object as input');\n    if ('framebuffer' in options) {\n      if (options.framebuffer && options.framebuffer_reglType === 'framebufferCube') {\n        for (var i = 0; i < 6; ++i) {\n          setFBO(extend({\n            framebuffer: options.framebuffer.faces[i]\n          }, options), clearImpl);\n        }\n      } else {\n        setFBO(options, clearImpl);\n      }\n    } else {\n      clearImpl(null, options);\n    }\n  }\n\n  function frame(cb) {\n    check$1.type(cb, 'function', 'regl.frame() callback must be a function');\n    rafCallbacks.push(cb);\n\n    function cancel() {\n      // FIXME:  should we check something other than equals cb here?\n      // what if a user calls frame twice with the same callback...\n      //\n      var i = find(rafCallbacks, cb);\n      check$1(i >= 0, 'cannot cancel a frame twice');\n      function pendingCancel() {\n        var index = find(rafCallbacks, pendingCancel);\n        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];\n        rafCallbacks.length -= 1;\n        if (rafCallbacks.length <= 0) {\n          stopRAF();\n        }\n      }\n      rafCallbacks[i] = pendingCancel;\n    }\n\n    startRAF();\n\n    return {\n      cancel: cancel\n    };\n  }\n\n  // poll viewport\n  function pollViewport() {\n    var viewport = nextState.viewport;\n    var scissorBox = nextState.scissor_box;\n    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;\n    contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;\n    contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;\n  }\n\n  function _poll() {\n    contextState.tick += 1;\n    contextState.time = now();\n    pollViewport();\n    core.procs.poll();\n  }\n\n  function refresh() {\n    pollViewport();\n    core.procs.refresh();\n    if (timer) {\n      timer.update();\n    }\n  }\n\n  function now() {\n    return (clock() - START_TIME) / 1000.0;\n  }\n\n  refresh();\n\n  function addListener(event, callback) {\n    check$1.type(callback, 'function', 'listener callback must be a function');\n\n    var callbacks;\n    switch (event) {\n      case 'frame':\n        return frame(callback);\n      case 'lost':\n        callbacks = lossCallbacks;\n        break;\n      case 'restore':\n        callbacks = restoreCallbacks;\n        break;\n      case 'destroy':\n        callbacks = destroyCallbacks;\n        break;\n      default:\n        check$1.raise('invalid event, must be one of frame,lost,restore,destroy');\n    }\n\n    callbacks.push(callback);\n    return {\n      cancel: function cancel() {\n        for (var i = 0; i < callbacks.length; ++i) {\n          if (callbacks[i] === callback) {\n            callbacks[i] = callbacks[callbacks.length - 1];\n            callbacks.pop();\n            return;\n          }\n        }\n      }\n    };\n  }\n\n  var regl = extend(compileProcedure, {\n    // Clear current FBO\n    clear: clear,\n\n    // Short cuts for dynamic variables\n    prop: dynamic.define.bind(null, DYN_PROP),\n    context: dynamic.define.bind(null, DYN_CONTEXT),\n    this: dynamic.define.bind(null, DYN_STATE),\n\n    // executes an empty draw command\n    draw: compileProcedure({}),\n\n    // Resources\n    buffer: function buffer(options) {\n      return bufferState.create(options, GL_ARRAY_BUFFER, false, false);\n    },\n    elements: function elements(options) {\n      return elementState.create(options, false);\n    },\n    texture: textureState.create2D,\n    cube: textureState.createCube,\n    renderbuffer: renderbufferState.create,\n    framebuffer: framebufferState.create,\n    framebufferCube: framebufferState.createCube,\n\n    // Expose context attributes\n    attributes: glAttributes,\n\n    // Frame rendering\n    frame: frame,\n    on: addListener,\n\n    // System limits\n    limits: limits,\n    hasExtension: function hasExtension(name) {\n      return limits.extensions.indexOf(name.toLowerCase()) >= 0;\n    },\n\n    // Read pixels\n    read: readPixels,\n\n    // Destroy regl and all associated resources\n    destroy: destroy,\n\n    // Direct GL state manipulation\n    _gl: gl,\n    _refresh: refresh,\n\n    poll: function poll() {\n      _poll();\n      if (timer) {\n        timer.update();\n      }\n    },\n\n    // Current time\n    now: now,\n\n    // regl Statistics Information\n    stats: stats$$1\n  });\n\n  config.onDone(null, regl);\n\n  return regl;\n}\n\nexports.regl = wrapREGL;\n//# sourceMappingURL=regl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/webgl/regl.js\n");

/***/ }),

/***/ "./src/webgl/wgl2di.js":
/*!*****************************!*\
  !*** ./src/webgl/wgl2di.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.WGL2DI = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _regl = __webpack_require__(/*! ./regl.js */ \"./src/webgl/regl.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WGL2DI = function () {\n\tfunction WGL2DI(div_id, width, height) {\n\t\t_classCallCheck(this, WGL2DI);\n\n\t\tthis.regl = null;\n\t\tthis.pick_buffer = null;\n\t\tthis.objects = [];\n\t\tthis.keys = {};\n\t\tthis.object_types = [];\n\t\tthis.objects_in_view = 0;\n\t\t//html elements\n\t\tthis.div_container = $(\"#\" + div_id);\n\t\tthis.canvas = null;\n\t\tthis.label_context;\n\t\tthis.label_context = null;\n\t\tthis.height = 0;\n\t\tthis.width = 0;\n\t\tthis._setUpDocument(width, height);\n\t\tthis.images_to_load = 0;\n\t\tthis.is_filtered = {};\n\t\tthis.is_hidden = {};\n\n\t\t//handlers\n\t\tthis.handlers = {\n\t\t\tobject_clicked: {},\n\t\t\tobject_over: {},\n\t\t\tobject_out: {},\n\t\t\tbrush_stopped: {}\n\t\t};\n\n\t\t//switches\n\t\tthis.draw_labels = false;\n\n\t\t//circle shapes\n\t\tthis.circle_properties = { \"position\": 1, \"color\": 1, \"pick_color\": 1, \"radius\": 1, \"start_angle\": 1, \"end_angle\": 1, \"opacity\": 1 };\n\t\tthis.circles_to_draw = {};\n\t\tthis.circles = {};\n\t\tfor (var prop in this.circle_properties) {\n\t\t\tthis.circles_to_draw[prop] = [];\n\t\t\tthis.circles[prop] = [];\n\t\t}\n\t\tthis.circles.count = 0;\n\t\tthis.object_types.push({ data: this.circles,\n\t\t\tdata_in_view: this.circles_to_draw,\n\t\t\tproperties: this.circle_properties,\n\t\t\tvertices: 1,\n\t\t\tprimitive: \"points\" });\n\n\t\t//line shapes\n\t\tthis.line_properties = { 'position': 2, \"color\": 2, \"pick_color\": 2 };\n\t\tthis.lines_to_draw = {};\n\t\tthis.lines = {};\n\t\tfor (var prop in this.line_properties) {\n\t\t\tvar list = [];\n\t\t\tthis.lines[prop] = list;\n\t\t\tthis.lines_to_draw[prop] = list;\n\t\t}\n\t\tthis.lines.count = 0;\n\t\tthis.object_types.push({ data: this.lines,\n\t\t\tdata_in_view: this.lines_to_draw,\n\t\t\tproperties: this.line_properties,\n\t\t\tvertices: 2,\n\t\t\tprimitive: \"lines\" });\n\n\t\t//rectangles\n\t\tthis.rect_properties = { 'position': 2, \"color\": 2, \"pick_color\": 2 };\n\t\tthis.rects_to_draw = {};\n\t\tthis.rects = {};\n\t\tfor (var prop in this.rect_properties) {\n\t\t\tthis.rects[prop] = [];\n\t\t\tthis.rects_to_draw[prop] = [];\n\t\t}\n\t\tthis.rects.count = 0;\n\n\t\tthis.object_types.push({ data: this.rects,\n\t\t\tdata_in_view: this.rects_to_draw,\n\t\t\tproperties: this.rect_properties,\n\t\t\tvertices: 6,\n\t\t\tprimitive: \"triangles\" });\n\n\t\t//squares\n\t\tthis.square_properties = { 'position': 2, \"color\": 2, \"pick_color\": 2, side_length: 2, \"right_clip\": 1, \"bottom_clip\": 1 };\n\t\tthis.squares_to_draw = {};\n\t\tthis.squares = {};\n\t\tfor (var prop in this.square_properties) {\n\t\t\tthis.squares[prop] = [];\n\t\t\tthis.squares_to_draw[prop] = [];\n\t\t}\n\t\tthis.squares.count = 0;\n\t\tthis.object_types.push({ data: this.squares,\n\t\t\tdata_in_view: this.squares_to_draw,\n\t\t\tproperties: this.square_properties,\n\t\t\tvertices: 1,\n\t\t\tprimitive: \"points\" });\n\n\t\tthis.scale = 1.0;\n\t\tthis.x_scale = 1.0;\n\t\tthis.y_scale = 1.0;\n\t\tthis.offset = [0, 0];\n\n\t\t//images\n\t\tthis.image_properties = { 'position': 2, \"pick_color\": 2, \"color\": 2 };\n\t\tthis.images_to_draw = {};\n\t\tthis.images = {};\n\t\tfor (var prop in this.image_properties) {\n\t\t\tthis.images[prop] = [];\n\t\t\tthis.images_to_draw[prop] = [];\n\t\t}\n\n\t\tthis.images.count = 0;\n\t\tthis.images.props = [];\n\t\tthis.images.globals = [this.offset[0], this.offset[1], this.x_scale, this.y_scale];\n\t\tthis.object_types.push({ data: this.images,\n\t\t\tdata_in_view: this.images_to_draw,\n\t\t\tproperties: this.image_properties,\n\t\t\tvertices: 6,\n\t\t\tprimitive: \"triangles\" });\n\t\tthis.images.display_as_image = true;\n\n\t\t//The last moose position recorded\n\t\tthis.mouse_position = null;\n\t\t//Was an object clicked\n\t\tthis.object_clicked = null;\n\t\t//an object was clicked\n\t\tthis.dragging = false;\n\t\t//object which mouse is over\n\t\tthis.object_mouse_over = null;\n\t\tthis.mouse_over_color = null; //[255,0,0];\n\n\t\tthis.zoom_amount = 0;\n\n\t\tvar self = this;\n\n\t\t(0, _regl.regl)({\n\t\t\tonDone: function onDone(err, regl) {\n\t\t\t\tself.regl = regl;\n\t\t\t\tself.pickbuffer = regl.framebuffer({ colorFormat: 'rgba', height: self.height, width: self.width });\n\t\t\t\tself._initDrawMethods();\n\t\t\t\tself._addHandlers();\n\t\t\t},\n\t\t\tcanvas: self.canvas[0]\n\n\t\t});\n\t}\n\n\t_createClass(WGL2DI, [{\n\t\tkey: \"remove\",\n\t\tvalue: function remove() {}\n\t}, {\n\t\tkey: \"_setUpDocument\",\n\t\tvalue: function _setUpDocument(width, height) {\n\t\t\tif (!height) {\n\t\t\t\theight = this.div_container.height();\n\t\t\t\twidth = this.div_container.width();\n\t\t\t} else {\n\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.div_container.height(height);\n\t\t\t\tthis.div_container.width(width);\n\t\t\t}\n\t\t\tthis.canvas = $(\"<canvas>\").attr({\n\t\t\t\theight: height,\n\t\t\t\twidth: width\n\t\t\t}).css({\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tleft: \"0px\",\n\t\t\t\tright: \"0px\"\n\t\t\t});\n\t\t\tthis.label_canvas = $(\"<canvas>\").attr({\n\t\t\t\theight: height,\n\t\t\t\twidth: width\n\t\t\t}).css({\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tleft: \"0px\",\n\t\t\t\tright: \"0px\"\n\t\t\t});\n\t\t\tthis.label_context = this.label_canvas[0].getContext(\"2d\");\n\t\t\tthis.div_container.append(this.canvas).append(this.label_canvas);\n\t\t}\n\t}, {\n\t\tkey: \"setSize\",\n\t\tvalue: function setSize(width, height) {\n\t\t\tvar self = this;\n\t\t\twidth = Math.round(width);\n\t\t\theight = Math.round(height);\n\t\t\tthis.height = height;\n\t\t\tthis.width = width;\n\t\t\tthis.div_container.height(height).width(width);\n\t\t\tthis.canvas.attr({ height: height, width: width });\n\t\t\tthis.label_canvas.attr({ height: height, width: width });\n\t\t\tthis.pickbuffer.destroy();\n\t\t\tthis.pickbuffer = this.regl.framebuffer({ colorFormat: 'rgba', height: height, width: width });\n\t\t\t//this is necessary, but I  don't know why?\n\t\t\tvar loop = this.regl.frame(function () {});\n\t\t\tsetTimeout(function () {\n\t\t\t\tself.refresh();\n\t\t\t\tloop.cancel();\n\t\t\t}, 100);\n\t\t}\n\t}, {\n\t\tkey: \"_getMousePosition\",\n\t\tvalue: function _getMousePosition(e) {\n\t\t\tvar rect = this.canvas[0].getBoundingClientRect();\n\t\t\treturn [e.originalEvent.clientX - rect.left, e.originalEvent.clientY - rect.top];\n\t\t}\n\t}, {\n\t\tkey: \"_getActualPosition\",\n\t\tvalue: function _getActualPosition(position) {\n\t\t\tvar x = position[0] / this.x_scale - this.offset[0];\n\t\t\tvar y = position[1] / this.y_scale - this.offset[1];\n\t\t\treturn [x, y];\n\t\t}\n\t}, {\n\t\tkey: \"_drawLabels\",\n\t\tvalue: function _drawLabels() {\n\t\t\tvar time = Date.now();\n\t\t\tif (this.objects_in_view > 5000) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.label_context.font = \"14px Arial\";\n\n\t\t\tfor (var i in this.object_types) {\n\t\t\t\tvar pos = this.object_types[i].data_in_view.position;\n\n\t\t\t\tfor (var ii = 0; ii < pos.length; ii++) {\n\n\t\t\t\t\tvar x = (pos[ii][0] + this.offset[0]) * this.x_scale;\n\t\t\t\t\tvar y = (pos[ii][1] + this.offset[1]) * this.y_scale;\n\n\t\t\t\t\tthis.label_context.fillText(\"H1\", x, y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"setObjectColor\",\n\t\tvalue: function setObjectColor(key, color) {\n\t\t\tvar obj = this.objects[this.keys[key]];\n\t\t\tvar obj_type = this.object_types[obj[1]];\n\t\t\tfor (var x = obj[0]; x < obj[0] + obj_type.vertices; x++) {\n\t\t\t\tobj_type.data.color[x][0] = color[0] / 255;\n\t\t\t\tobj_type.data.color[x][1] = color[1] / 255;\n\t\t\t\tobj_type.data.color[x][2] = color[2] / 255;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getObjectColor\",\n\t\tvalue: function getObjectColor(key) {\n\t\t\tvar obj = this.objects[this.keys[key]];\n\t\t\tvar obj_type = this.object_types[obj[1]];\n\t\t\tvar col = obj_type.data.color[obj[0]];\n\t\t\treturn [col[0] * 255, col[1] * 255, col[2] * 255];\n\t\t}\n\t}, {\n\t\tkey: \"addLine\",\n\t\tvalue: function addLine(positionTo, positionFrom, color, key) {\n\t\t\tvar index = this.objects.length;\n\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar line_index = this.lines.position.length;\n\t\t\tthis.lines.position.push(positionFrom);\n\t\t\tthis.lines.position.push(positionTo);\n\t\t\tthis.lines.color.push([color[0] / 255, color[1] / 255, color[2] / 255]);\n\t\t\tthis.lines.color.push([color[0] / 255, color[1] / 255, color[2] / 255]);\n\t\t\tthis.lines.pick_color.push(this._getRGBFromIndex(index + 1));\n\t\t\tthis.lines.pick_color.push(this._getRGBFromIndex(index + 1));\n\t\t\tthis.objects.push([line_index, 1, key]);\n\t\t\tthis.lines.count++;\n\t\t}\n\t}, {\n\t\tkey: \"addThickLine\",\n\t\tvalue: function addThickLine(positionTo, positionFrom, width, color, key) {\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar rect_index = this.rects.position.length;\n\t\t\tvar x_diff = positionTo[0] - positionFrom[0];\n\t\t\tvar y_diff = positionTo[1] - positionFrom[1];\n\t\t\tvar factor = 0.5 * width / Math.sqrt(x_diff * x_diff + y_diff * y_diff);\n\t\t\tvar x_offset = factor * y_diff;\n\t\t\tvar y_offset = factor * x_diff;\n\t\t\tthis.rects.position.push([positionTo[0] + x_offset, positionTo[1] - y_offset]); //TL\n\t\t\tthis.rects.position.push([positionFrom[0] + x_offset, positionFrom[1] - y_offset]); //BL\n\t\t\tthis.rects.position.push([positionFrom[0] - x_offset, positionFrom[1] + y_offset]); //BR\n\n\t\t\tthis.rects.position.push([positionFrom[0] - x_offset, positionFrom[1] + y_offset]); //BR\n\t\t\tthis.rects.position.push([positionTo[0] - x_offset, positionTo[1] + y_offset]); //TR\n\t\t\tthis.rects.position.push([positionTo[0] + x_offset, positionTo[1] - y_offset]); //TL\n\n\n\t\t\tvar c = [color[0] / 255, color[1] / 255, color[2] / 255];\n\t\t\tvar pc = this._getRGBFromIndex(index + 1);\n\t\t\tfor (var a = 0; a < 6; a++) {\n\t\t\t\tthis.rects.color.push(c);\n\t\t\t\tthis.rects.pick_color.push(pc);\n\t\t\t}\n\t\t\tthis.objects.push([rect_index, 2, key]);\n\t\t\tthis.iamges.count++;\n\t\t\treturn key;\n\t\t}\n\t}, {\n\t\tkey: \"addImage\",\n\t\tvalue: function addImage(position, height, width, image, key) {\n\t\t\tvar self = this;\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar x = position[0];\n\t\t\tvar y = position[1];\n\t\t\tvar image_index = this.images.position.length;\n\t\t\tthis.images.position.push([x, y]);\n\t\t\tthis.images.position.push([x, y + height]);\n\t\t\tthis.images.position.push([x + width, y + height]), this.images.position.push([x + width, y + height]);\n\t\t\tthis.images.position.push([x + width, y]);\n\t\t\tthis.images.position.push([x, y]);\n\t\t\tthis.image_position = [[-1, 1], [-1, 0], [0, 0], [0, 0], [0, 1], [-1.0]];\n\t\t\tvar pc = this._getRGBFromIndex(index + 1);\n\t\t\tfor (var a = 0; a < 6; a++) {\n\t\t\t\tthis.images.pick_color.push(pc);\n\t\t\t\tthis.images.color.push([0.1, 0.7, 0.1]);\n\t\t\t}\n\t\t\tvar i_index = this.images.props.length;\n\t\t\tthis.images.props.push({ count: 6, is_buffer: 0, x_y: [x, y], w_h: [width, height],\n\t\t\t\ttext: this.loading_image, position: this.images.position.slice(image_index, image_index + 6), globals: this.images.globals, color: this.images.color.slice(image_index, image_index + 6) });\n\t\t\tvar im = new Image();\n\t\t\tim.src = image;\n\t\t\tthis.images_to_load++;\n\t\t\tim.onload = function () {\n\t\t\t\tself.images.props[i_index].text = self.regl.texture({ data: im, min: \"linear\" });\n\t\t\t\tself.images_to_load--;\n\t\t\t};\n\t\t\tthis.images.count++;\n\n\t\t\tthis.objects.push([image_index, 4, key]);\n\t\t}\n\t}, {\n\t\tkey: \"addRectangle\",\n\t\tvalue: function addRectangle(position, height, width, color, key) {\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar rect_index = this.rects.position.length;\n\t\t\tthis.rects.position.push(position);\n\t\t\tthis.rects.position.push([position[0], position[1] + height]);\n\t\t\tthis.rects.position.push([position[0] + width, position[1] + height]);\n\n\t\t\tthis.rects.position.push([position[0] + width, position[1] + height]);\n\t\t\tthis.rects.position.push([position[0] + width, position[1]]);\n\t\t\tthis.rects.position.push([position[0], position[1]]);\n\n\t\t\tvar c = [color[0] / 255, color[1] / 255, color[2] / 255];\n\t\t\tvar pc = this._getRGBFromIndex(index + 1);\n\t\t\tfor (var a = 0; a < 6; a++) {\n\t\t\t\tthis.rects.color.push(c);\n\t\t\t\tthis.rects.pick_color.push(pc);\n\t\t\t}\n\t\t\tthis.objects.push([rect_index, 2, key]);\n\t\t\tthis.rects.count++;\n\t\t\treturn key;\n\t\t}\n\t}, {\n\t\tkey: \"addArc\",\n\t\tvalue: function addArc(position, radius, color, start_angle, end_angle, key) {\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar circ_index = this.circles.position.length;\n\t\t\tthis.circles.position.push(position);\n\t\t\tthis.circles.radius.push(radius);\n\t\t\tthis.circles.color.push([color[0] / 255, color[1] / 255, color[2] / 255]);\n\t\t\tthis.circles.pick_color.push(this._getRGBFromIndex(index + 1));\n\t\t\tthis.circles.start_angle.push(start_angle);\n\t\t\tthis.circles.end_angle.push(end_angle);\n\t\t\tthis.objects.push([circ_index, 0, key]);\n\t\t\tthis.circles.count++;\n\t\t}\n\t}, {\n\t\tkey: \"addCircle\",\n\t\tvalue: function addCircle(position, radius, color, key) {\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\t\t\tvar circ_index = this.circles.position.length;\n\t\t\tthis.circles.position.push(position);\n\t\t\tthis.circles.radius.push(radius);\n\t\t\tthis.circles.opacity.push(1);\n\t\t\tthis.circles.color.push([color[0] / 255, color[1] / 255, color[2] / 255]);\n\t\t\tthis.circles.pick_color.push(this._getRGBFromIndex(index + 1));\n\t\t\tthis.circles.start_angle.push(10);\n\t\t\tthis.circles.end_angle.push(0);\n\t\t\tthis.objects.push([circ_index, 0, key]);\n\t\t\tthis.circles.count++;\n\t\t}\n\t}, {\n\t\tkey: \"addPointRectangle\",\n\t\tvalue: function addPointRectangle(position, height, width, color, key) {\n\t\t\tvar side_length = height > width ? height : width;\n\t\t\tvar index = this.objects.length;\n\t\t\tif (key && !this.keys[key]) {\n\t\t\t\tthis.keys[key] = index;\n\t\t\t} else {\n\t\t\t\tkey = index;\n\t\t\t\tthis.keys[index] = index;\n\t\t\t}\n\n\t\t\tvar square_index = this.squares.position.length;\n\t\t\tthis.squares.position.push([position[0] + side_length / 2, position[1] + side_length / 2]);\n\t\t\tthis.squares.color.push([color[0] / 255, color[1] / 255, color[2] / 255]);\n\t\t\tthis.squares.side_length.push(side_length);\n\t\t\tthis.squares.right_clip.push(width / side_length);\n\t\t\tthis.squares.bottom_clip.push(height / side_length);\n\t\t\tthis.squares.pick_color.push(this._getRGBFromIndex(index + 1));\n\t\t\tthis.objects.push([square_index, 3, key]);\n\t\t\tthis.squares.count++;\n\t\t}\n\t}, {\n\t\tkey: \"_getRGBFromIndex\",\n\t\tvalue: function _getRGBFromIndex(index) {\n\t\t\tvar b = Math.floor(index / 65536);\n\t\t\tvar temp = index % 65536;\n\t\t\tvar g = Math.floor(temp / 256);\n\t\t\tvar r = temp % 256;\n\t\t\treturn [r / 255, g / 255, b / 255];\n\t\t}\n\t}, {\n\t\tkey: \"_getIndexFromRGB\",\n\t\tvalue: function _getIndexFromRGB(rgb) {\n\t\t\treturn rgb[2] * 65536 + rgb[1] * 256 + rgb[0];\n\t\t}\n\t}, {\n\t\tkey: \"_drawPickBuffer\",\n\t\tvalue: function _drawPickBuffer(in_view) {\n\t\t\tthis.regl.clear({\n\t\t\t\tcolor: [0, 0, 0, 0],\n\t\t\t\tdepth: 1,\n\t\t\t\tframebuffer: this.pickbuffer\n\t\t\t});\n\t\t\tthis._drawObjects(true, in_view);\n\t\t}\n\t\t//refesh all \n\t\t//in_view only those in view\n\n\t}, {\n\t\tkey: \"refresh\",\n\t\tvalue: function refresh(in_view) {\n\t\t\tthis.label_context.clearRect(0, 0, this.width, this.height);\n\t\t\tthis._drawObjects(false, in_view);\n\t\t\tthis._drawPickBuffer(in_view);\n\t\t\tthis.label_context.font = \"30px Arial\";\n\t\t}\n\t}, {\n\t\tkey: \"zoom\",\n\t\tvalue: function zoom(amount) {\n\t\t\tthis.x_scale *= amount;\n\t\t\tthis.y_scale *= amount;\n\t\t\tthis._drawObjects(false);\n\t\t}\n\t}, {\n\t\tkey: \"_drawObject\",\n\t\tvalue: function _drawObject(object, color) {\n\n\t\t\tvar type = this.object_types[object[1]];\n\t\t\tvar obj = {\n\t\t\t\tstage_width: this.width,\n\t\t\t\tstage_height: this.height,\n\t\t\t\tx_scale: this.x_scale,\n\t\t\t\ty_scale: this.y_scale,\n\t\t\t\tbuffer: null,\n\t\t\t\toffset: this.offset,\n\t\t\t\tcount: type.vertices,\n\t\t\t\tprimitive: type.primitive,\n\t\t\t\tis_buffer: 0\n\n\t\t\t};\n\n\t\t\tfor (var prop in type.properties) {\n\t\t\t\tif (prop === 'pick_color') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tobj[prop] = [];\n\t\t\t\tvar st = object[0];\n\t\t\t\tvar en = st + type.vertices;\n\t\t\t\tfor (var pos = st; pos < en; pos++) {\n\t\t\t\t\tif (prop !== 'color') {\n\t\t\t\t\t\tobj[prop].push(type.data[prop][pos]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj[prop].push(color);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttype.method(obj);\n\t\t}\n\t}, {\n\t\tkey: \"_drawObjects\",\n\t\tvalue: function _drawObjects(buffer, in_view) {\n\t\t\t//dr\n\t\t\tthis.images.globals[0] = this.offset[0];\n\t\t\tthis.images.globals[1] = this.offset[1];\n\t\t\tthis.images.globals[2] = this.x_scale;\n\t\t\tthis.images.globals[3] = this.y_scale;\n\t\t\tif (this.images.display_as_image) {\n\t\t\t\tthis.__drawImages(this.images.props);\n\t\t\t}\n\n\t\t\tvar data_source = in_view ? \"data_in_view\" : \"data\";\n\t\t\tfor (var i in this.object_types) {\n\t\t\t\tvar type = this.object_types[i];\n\t\t\t\tif (type[data_source].count === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (buffer) {\n\t\t\t\t\tbuffer = this.pickbuffer;\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = null;\n\t\t\t\t}\n\t\t\t\t//don't draw images unless buffer\n\t\t\t\tif (!buffer && i == 4 && this.images.display_as_image) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar obj = {\n\t\t\t\t\tstage_width: this.width,\n\t\t\t\t\tstage_height: this.height,\n\t\t\t\t\tx_scale: this.x_scale,\n\t\t\t\t\ty_scale: this.y_scale,\n\t\t\t\t\tglobals: this.images.globals,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tcount: type[data_source].count * type.vertices,\n\t\t\t\t\tprimitive: type.primitive,\n\t\t\t\t\tis_buffer: buffer ? 1 : 0\n\n\t\t\t\t};\n\t\t\t\t//dummy values\n\t\t\t\tif (i == 4) {\n\t\t\t\t\tobj.w_h = [0, 0];\n\t\t\t\t\tobj.x_y = [0, 0];\n\t\t\t\t\tobj.text = this.loading_image;\n\t\t\t\t\tobj.is_buffer = 1;\n\t\t\t\t}\n\t\t\t\tfor (var prop in type.properties) {\n\n\t\t\t\t\tif (buffer) {\n\t\t\t\t\t\tif (prop === 'pick_color') {\n\t\t\t\t\t\t\tobj['color'] = type[data_source][prop];\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (prop === 'color') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj[prop] = type[data_source][prop];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (prop === 'pick_color') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj[prop] = type[data_source][prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttype.method(obj);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"filterObjects\",\n\t\tvalue: function filterObjects(keys, object_type) {\n\t\t\tif (!object_type) {\n\t\t\t\tobject_type = 0;\n\t\t\t}\n\t\t\t//this.is_filtered={};\n\n\t\t\tvar obj_type = this.object_types[object_type];\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = this.objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar obj = _step.value;\n\n\t\t\t\t\tvar key = obj[2];\n\t\t\t\t\tif (keys[key]) {\n\t\t\t\t\t\tobj_type.data.opacity[obj[0]] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//this.is_filtered[key]=true;\n\t\t\t\t\t\tobj_type.data.opacity[obj[0]] = 0.4;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.is_hidden[key]) {\n\t\t\t\t\t\tobj_type.data.opacity[obj[0]] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"hideObjects\",\n\t\tvalue: function hideObjects(keys, object_type) {\n\t\t\tif (!object_type) {\n\t\t\t\tobject_type = 0;\n\t\t\t}\n\t\t\tthis.is_hidden = {};\n\n\t\t\tvar obj_type = this.object_types[object_type];\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = this.objects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar obj = _step2.value;\n\n\t\t\t\t\tvar key = obj[2];\n\t\t\t\t\tif (keys[key]) {\n\n\t\t\t\t\t\tobj_type.data.opacity[obj[0]] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.is_hidden[key] = true;\n\t\t\t\t\t\tobj_type.data.opacity[obj[0]] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"initialise\",\n\t\tvalue: function initialise() {\n\t\t\tvar self = this;\n\n\t\t\tvar im = new Image();\n\n\t\t\tim.onload = function () {\n\t\t\t\tself.loading_image = self.regl.texture({ data: im, min: \"linear\" });\n\t\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\t\tvar _didIteratorError3 = false;\n\t\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator3 = self.images.props[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\t\tvar prop = _step3.value;\n\n\t\t\t\t\t\tif (!prop.text) {\n\t\t\t\t\t\t\tprop.text = self.loading_image;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t\t_iteratorError3 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tself.refresh();\n\t\t\t\tself._getObjectsInView();\n\t\t\t};\n\t\t\tim.src = \"tn13.png\";\n\t\t}\n\t}, {\n\t\tkey: \"_getObjectAtPosition\",\n\t\tvalue: function _getObjectAtPosition(position) {\n\t\t\tvar pixel = this.regl.read({\n\t\t\t\tx: position[0],\n\t\t\t\ty: this.height - position[1],\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1,\n\t\t\t\tdata: new Uint8Array(6),\n\t\t\t\tframebuffer: this.pickbuffer\n\t\t\t});\n\t\t\tvar index = this._getIndexFromRGB(pixel);\n\t\t\tif (index > 0) {\n\t\t\t\treturn this.objects[index - 1];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: \"checkImagesLoaded\",\n\t\tvalue: function checkImagesLoaded() {\n\t\t\tvar self = this;\n\n\t\t\tif (this.images_to_load > 0) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tself.refresh();\n\t\t\t\t\tself.checkImagesLoaded();\n\t\t\t\t}, 2000);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_getObjectsInView\",\n\t\tvalue: function _getObjectsInView() {\n\t\t\tvar time = Date.now();\n\t\t\tvar max = this.width * this.height * 4;\n\t\t\tvar pixels = this.regl.read({\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdata: new Uint8Array(max),\n\t\t\t\tframebuffer: this.pickbuffer\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tthis._clearObjectsInView();\n\t\t\tfor (var i = 0; i < max - 4; i += 4) {\n\t\t\t\tvar index = pixels[i + 2] * 65536 + pixels[i + 1] * 256 + pixels[i];\n\t\t\t\tif (index > 0) {\n\t\t\t\t\tif (!obj[index - 1]) {\n\t\t\t\t\t\tobj[index - 1] = true;\n\t\t\t\t\t\tthis.objects_in_view++;\n\t\t\t\t\t\tif (this.objects_in_view > 100000) {\n\t\t\t\t\t\t\tfor (var t in this.object_types) {\n\t\t\t\t\t\t\t\tvar type = this.object_types[t];\n\t\t\t\t\t\t\t\tfor (var prop in type.properties) {\n\t\t\t\t\t\t\t\t\ttype.data_in_view[prop] = type.data[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype.data_in_view.count = type.data.count;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.objects_in_view = this.objects.length;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(\"objects in view old way \"+(Date.now()-time));\n\t\t\tvar l = -this.offset[0];\n\t\t\tvar r = l + this.width / this.x_scale;\n\t\t\tvar t = -this.offset[1];\n\t\t\tvar b = t + this.height / this.y_scale;\n\t\t\tvar old_count = 0;\n\t\t\tvar new_count = 0;\n\t\t\tfor (var i = 0; i < this.objects.length; i++) {\n\t\t\t\tif (obj[i]) {\n\t\t\t\t\tvar item = this.objects[i];\n\t\t\t\t\tvar type = this.object_types[item[1]];\n\t\t\t\t\tnew_count++;\n\n\t\t\t\t\tvar st = item[0];\n\t\t\t\t\tvar en = st + type.vertices;\n\t\t\t\t\tfor (var prop in type.properties) {\n\t\t\t\t\t\tfor (var pos = st; pos < en; pos++) {\n\t\t\t\t\t\t\ttype.data_in_view[prop].push(type.data[prop][pos]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttype.data_in_view.count++;\n\t\t\t\t} else {\n\n\t\t\t\t\tvar item = this.objects[i];\n\t\t\t\t\tvar type = this.object_types[item[1]];\n\t\t\t\t\tvar act_pos = this.object_types[item[1]].data.position[item[0]];\n\t\t\t\t\tif (act_pos[0] > l && act_pos[0] < r && act_pos[1] > t && act_pos[1] < b) {\n\t\t\t\t\t\told_count++;\n\t\t\t\t\t\tvar st = item[0];\n\t\t\t\t\t\tvar en = st + type.vertices;\n\t\t\t\t\t\tfor (var prop in type.properties) {\n\t\t\t\t\t\t\tfor (var pos = st; pos < en; pos++) {\n\t\t\t\t\t\t\t\ttype.data_in_view[prop].push(type.data[prop][pos]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype.data_in_view.count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"In view:\" + this.objects.length + \":\" + new_count + \":\" + old_count);\n\n\t\t\tconsole.log(\"time to get objects in view \" + (Date.now() - time));\n\t\t}\n\t}, {\n\t\tkey: \"_clearObjectsInView\",\n\t\tvalue: function _clearObjectsInView() {\n\t\t\tthis.objects_in_view = 0;\n\t\t\tfor (var i in this.object_types) {\n\t\t\t\tvar obj = this.object_types[i];\n\n\t\t\t\tfor (var prop in obj.properties) {\n\t\t\t\t\tobj.data_in_view[prop] = [];\n\t\t\t\t}\n\n\t\t\t\tobj.data_in_view.count = 0;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"addHandler\",\n\t\tvalue: function addHandler(handler_type, handler, name) {\n\t\t\tvar handler_dict = this.handlers[handler_type];\n\t\t\tif (!handler_dict) {\n\t\t\t\tthrow \"Handler Not Supported\";\n\t\t\t}\n\t\t\tif (!name) {\n\t\t\t\tname = Object.keys(handler_dict).length;\n\t\t\t}\n\t\t\thandler_dict[name] = handler;\n\t\t\treturn name;\n\t\t}\n\t}, {\n\t\tkey: \"removeHandler\",\n\t\tvalue: function removeHandler(handler_type, name) {\n\t\t\tvar handler_dict = this.handlers[handler_type];\n\t\t\tif (!handler_dict) {\n\t\t\t\tthrow \"Handler Not Supported\";\n\t\t\t}\n\t\t\tdelete handler_dict['name'];\n\t\t}\n\t}, {\n\t\tkey: \"_setUpBrush\",\n\t\tvalue: function _setUpBrush(origin) {\n\t\t\tvar self = this;\n\t\t\tvar div = $(\"<div>\").css({ position: \"absolute\", left: origin[0],\n\t\t\t\ttop: origin[1], height: \"0px\", width: \"0px\",\n\t\t\t\t\"background-color\": \"gray\", opacity: 0.2 }).appendTo(this.div_container);\n\n\t\t\tdiv.draggable({\n\t\t\t\tstart: function start(ev, ui) {\n\t\t\t\t\tself.brush.moving = true;\n\t\t\t\t},\n\t\t\t\tstop: function stop(ev, ui) {\n\t\t\t\t\tself._brushingStopped();\n\t\t\t\t}\n\n\t\t\t}).resizable({\n\t\t\t\thandles: \"all\",\n\t\t\t\tstart: function start(ev, ui) {\n\t\t\t\t\tself.brush.moving = true;\n\t\t\t\t},\n\t\t\t\tstop: function stop(ev, ui) {\n\t\t\t\t\tself._brushingStopped();\n\t\t\t\t}\n\n\t\t\t});\n\t\t\tthis.brush = { origin: origin, div: div, resizing: true };\n\t\t}\n\t}, {\n\t\tkey: \"clearBrush\",\n\t\tvalue: function clearBrush() {\n\t\t\tif (this.brush) {\n\t\t\t\tthis.brush.div.remove();\n\t\t\t\tthis.brush = null;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_brushingStopped\",\n\t\tvalue: function _brushingStopped() {\n\t\t\tthis.brush.resizing = false;\n\t\t\tvar pos = this.brush.div.position();\n\t\t\tvar lt = this._getActualPosition([pos.left, pos.top]);\n\t\t\tvar br = this._getActualPosition([pos.left + this.brush.div.width(), pos.top + this.brush.div.height()]);\n\t\t\tvar info = { x_min: lt[0], x_max: br[0], y_min: lt[1], y_max: br[1] };\n\t\t\tfor (var i in this.handlers.brush_stopped) {\n\t\t\t\tthis.handlers.brush_stopped[i](info);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_addHandlers\",\n\t\tvalue: function _addHandlers() {\n\t\t\tvar self = this;\n\t\t\tthis.div_container.mousemove(function (e) {\n\t\t\t\tif (self.brush) {\n\t\t\t\t\tif (self.brush.resizing) {\n\t\t\t\t\t\tvar origin = self.brush.origin;\n\t\t\t\t\t\tvar now = self._getMousePosition(e);\n\t\t\t\t\t\tvar left = Math.round(origin[0] < now[0] ? origin[0] : now[0]) + \"px\";\n\t\t\t\t\t\tvar top = Math.round(origin[1] < now[1] ? origin[1] : now[1]) + \"px\";\n\t\t\t\t\t\tvar width = Math.abs(origin[0] - now[0]) + \"px\";\n\t\t\t\t\t\tvar height = Math.abs(origin[1] - now[1]) + \"px\";\n\t\t\t\t\t\tself.brush.div.css({ top: top, left: left, height: height, width: width });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (self.brush.moving) {\n\t\t\t\t\t\tself.dragging = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//is this a drag or just a click without the mouse moving\n\t\t\t\tif (self.mouse_position && !self.dragging) {\n\t\t\t\t\tvar x_amount = (e.pageX - self.mouse_position[0]) / self.x_scale;\n\t\t\t\t\tvar y_amount = (e.pageY - self.mouse_position[1]) / self.y_scale;\n\t\t\t\t\tif (Math.abs(x_amount) > 3 || Math.abs(y_amount) > 3) {\n\t\t\t\t\t\tself.dragging = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (self.dragging) {\n\t\t\t\t\tvar x_amount = (e.pageX - self.mouse_position[0]) / self.x_scale;\n\t\t\t\t\tvar y_amount = (e.pageY - self.mouse_position[1]) / self.y_scale;\n\t\t\t\t\tif (self.object_clicked) {\n\n\t\t\t\t\t\tvar type = self.object_types[self.object_clicked[1]];\n\t\t\t\t\t\tvar start = self.object_clicked[0];\n\t\t\t\t\t\tvar end = start + type.vertices;\n\n\t\t\t\t\t\tfor (var index = start; index < end; index++) {\n\t\t\t\t\t\t\ttype.data.position[index][0] += x_amount;\n\t\t\t\t\t\t\ttype.data.position[index][1] += y_amount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.object_clicked[1] == 4) {\n\t\t\t\t\t\t\tvar p_index = start / 6;\n\t\t\t\t\t\t\tself.images.props[p_index].x_y = [type.data.position[start][0], type.data.position[start][1]];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t\t//self._drawLabels();\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tself.offset[0] += x_amount;\n\t\t\t\t\t\tself.offset[1] += y_amount;\n\t\t\t\t\t\tself._drawObjects(false);\n\t\t\t\t\t}\n\t\t\t\t\tself.mouse_position[1] = e.pageY;\n\t\t\t\t\tself.mouse_position[0] = e.pageX;\n\t\t\t\t}\n\t\t\t\t//no drag event going on call any listners if mouse over/out an object\n\t\t\t\telse {\n\t\t\t\t\t\tvar position = self._getMousePosition(e);\n\t\t\t\t\t\tvar obj = self._getObjectAtPosition(position);\n\t\t\t\t\t\tif (obj && !self.object_mouse_over) {\n\t\t\t\t\t\t\tfor (var i in self.handlers['object_over']) {\n\t\t\t\t\t\t\t\tself.handlers.object_over[i](obj[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.object_mouse_over = obj;\n\t\t\t\t\t\t\tif (self.mouse_over_color) {\n\t\t\t\t\t\t\t\tself.object_temp_color = self.getObjectColor(obj[2]);\n\t\t\t\t\t\t\t\tself.setObjectColor(obj[2], self.mouse_over_color);\n\t\t\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!obj && self.object_mouse_over) {\n\t\t\t\t\t\t\tfor (var i in self.handlers['object_out']) {\n\t\t\t\t\t\t\t\tself.handlers.object_out[i](self.object_mouse_over[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (self.mouse_over_color) {\n\t\t\t\t\t\t\t\tself.setObjectColor(self.object_mouse_over[2], self.object_temp_color);\n\t\t\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.object_mouse_over = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//move directly from one object to another\n\t\t\t\t\t\telse if (obj && obj[2] !== self.object_mouse_over[2]) {\n\t\t\t\t\t\t\t\tfor (var i in self.handlers['object_over']) {\n\t\t\t\t\t\t\t\t\tself.handlers.object_over[i](obj[2]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var i in self.handlers['object_out']) {\n\t\t\t\t\t\t\t\t\tself.handlers.object_out[i](self.object_mouse_over[2]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (self.mouse_over_color) {\n\t\t\t\t\t\t\t\t\tself.setObjectColor(self.object_mouse_over[2], self.object_temp_color);\n\t\t\t\t\t\t\t\t\tself.object_temp_color = self.getObjectColor(obj[2]);\n\t\t\t\t\t\t\t\t\tself.setObjectColor(obj[2], self.mouse_over_color);\n\t\t\t\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.object_mouse_over = obj;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t});\n\t\t\tthis.div_container.mouseup(function (evt) {\n\t\t\t\t//just a click event - inform handlers\n\t\t\t\tif (self.brush && self.brush.resizing) {\n\t\t\t\t\tself._brushingStopped();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!self.dragging) {\n\t\t\t\t\tif (self.object_clicked) {\n\t\t\t\t\t\tvar position = self._getMousePosition(evt);\n\t\t\t\t\t\tvar obj = self._getObjectAtPosition(position);\n\t\t\t\t\t\tif (obj) {\n\t\t\t\t\t\t\tfor (var i in self.handlers.object_clicked) {\n\t\t\t\t\t\t\t\tself.handlers.object_clicked[i](obj[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//an object has finshed its drag\n\t\t\t\t\tif (self.object_clicked) {\n\t\t\t\t\t\tself.object_clicked = null;\n\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t}\n\t\t\t\t\t//update which objects are now in view\n\t\t\t\t\telse {\n\t\t\t\t\t\t\tself._drawPickBuffer();\n\t\t\t\t\t\t\tself._getObjectsInView();\n\t\t\t\t\t\t\tif (self.brush) {\n\t\t\t\t\t\t\t\tself._brushingStopped();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.refresh(true);\n\t\t\t\t\t\t}\n\t\t\t\t\tself.dragging = false;\n\t\t\t\t}\n\t\t\t\tself.object_clicked = null;\n\t\t\t\tself.mouse_position = null;\n\t\t\t});\n\n\t\t\tthis.div_container.bind('mousewheel DOMMouseScroll', function (event) {\n\t\t\t\tvar position = self._getActualPosition(self._getMousePosition(event));\n\t\t\t\tif (event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0) {\n\t\t\t\t\tself.zoom_amount += 0.05;\n\t\t\t\t} else {\n\t\t\t\t\tself.zoom_amount -= 0.05;\n\t\t\t\t}\n\n\t\t\t\tself.x_scale *= 1 + self.zoom_amount;\n\t\t\t\tself.y_scale *= 1 + self.zoom_amount;\n\n\t\t\t\t//self.images.display_as_image=self.x_scale>0.04;\n\n\t\t\t\tvar new_position = self._getActualPosition(self._getMousePosition(event));\n\t\t\t\tself.offset[0] += new_position[0] - position[0];\n\t\t\t\tself.offset[1] += new_position[1] - position[1];\n\t\t\t\tif (!self.loop) {\n\t\t\t\t\tself.loop = self.regl.frame(function () {\n\t\t\t\t\t\tself._drawObjects(false);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t//clear the timeout user has not finished zooming\n\t\t\t\tclearTimeout($.data(this, 'timer'));\n\t\t\t\t//when user finishes call the esxpensive methods;\n\t\t\t\t$.data(this, 'timer', setTimeout(function () {\n\t\t\t\t\tself.zoom_amount = 0;\n\t\t\t\t\tself.loop.cancel();\n\t\t\t\t\tself.loop = null;\n\t\t\t\t\tself._drawPickBuffer(false);\n\t\t\t\t\tself._getObjectsInView();\n\t\t\t\t\tif (self.brush) {}\n\t\t\t\t\tself.refresh(true);\n\t\t\t\t}, 350));\n\t\t\t});\n\t\t\tthis.div_container.mousedown(function (evt) {\n\t\t\t\tif (evt.which === 3) {}\n\t\t\t\t//add right click behaviour\n\n\t\t\t\t//create brush\n\t\t\t\tif (evt.shiftKey && !self.brush) {\n\t\t\t\t\tvar origin = self._getMousePosition(evt);\n\t\t\t\t\tself._setUpBrush(origin);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//get mouse position and work out if an object was clicked\n\t\t\t\tvar position = self._getMousePosition(evt);\n\t\t\t\tself.mouse_position = [evt.pageX, evt.pageY];\n\t\t\t\tvar obj = self._getObjectAtPosition(position);\n\n\t\t\t\tif (obj) {\n\t\t\t\t\tself.object_clicked = obj;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"_initDrawMethods\",\n\t\tvalue: function _initDrawMethods() {\n\t\t\tvar self = this;\n\n\t\t\t//loading images\n\n\n\t\t\tthis.__drawCircles = this.regl({\n\t\t\t\tfrag: 'precision highp float;\\n\\\n\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\tvarying float op;\\n\\\n\t\t\t\t\tvarying float s_angle;\\n\\\n\t\t\t\t\tvarying float e_angle;\\n\\\n\t\t\tvoid main(){\\n\\\n\t\t\t\t\t\t\tfloat r = 0.0;\\n\\\n\t\t\t\t\t\t\tvec2 cxy = 2.0 * gl_PointCoord - 1.0;\\n\\\n\t\t\t\t\t\t\tr = dot(cxy, cxy);\\n\\\n\t\t\t\t\t\t\tif (r > 1.0) {\\n\\\n\t\t\t\t\t\t\t\tdiscard;\\n\\\n\t\t\t\t\t\t\t\treturn;\\n\\\n\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\t\tif (s_angle != 10.0){\\n\\\n\t\t\t\t\t\t\t\t\tfloat angle=0.0;\\n\\\n\t\t\t\t\t\t\t\t\tangle =atan(cxy[1],cxy[0]);\\n\\\n\t\t\t\t\t\t\t\t\tif (angle>s_angle && angle < e_angle){\\n\\\n\t\t\t\t\t\t\t\t\t\tif(r>0.75){\\n\\\n\t\t\t\t\t\t\t\t\t\t\tgl_FragColor=vec4(0.1,0.1,0.1,op);\\n\\\n\t\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = vec4(fragColor,op);\\n\\\n\t\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\t\t\t\tdiscard;\\n\\\n\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\t\t\tif(r>0.75){\\n\\\n\t\t\t\t\t\t\t\t\t\tgl_FragColor=vec4(0.1,0.1,0.1,op);\\n\\\n\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\t\t\t\tgl_FragColor = vec4(fragColor,op);\\n\\\n\t\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t}\\n',\n\n\t\t\t\tvert: 'attribute vec2 position;\\n\\\n\t\t\tattribute vec3 color;\\n\\\n\t\t\tattribute float opacity;\\n\\\n\t\t\t\t\tattribute mat4 segments1;\\n\\\n\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\tvarying float op;\\n\\\n\t\t\t\t\tattribute float start_angle;\\n\\\n\t\t\t\t\tvarying float s_angle;\\n\\\n\t\t\t\t\tvarying float e_angle;\\n\\\n\t\t\t\t\tattribute float end_angle;\\n\\\n\t\t\tattribute float radius;\\n\\\n\t\t\t\t\tuniform float x_scale;\\n\\\n\t\t\t\t\tuniform float y_scale;\\n\\\n\t\t\t\t\tuniform vec2 offset;\\n\\\n\t\t\t\t\tuniform float stage_height;\\n\\\n\t\t\t\t\tuniform float stage_width;\\n\\\n\t\t\tvec2 normalizeCoords(vec2 position){\\n\\\n\t\t\t\t\t\t\tfloat x = (position[0]+offset[0])*x_scale;\\n\\\n\t\t\t\t\t\t\tfloat y = (position[1]+offset[1])*y_scale;\\n\\\n\t\t\t\treturn vec2(2.0 * ((x / stage_width) - 0.5),-(2.0 * ((y / stage_height) - 0.5)));\\n\\\n\t\t\t\t\t}\\n\\\n\t\t\tvoid main() {\\n\\\n\t\t\t   if (opacity==0.0){\\n\\\n\t\t\t         return;\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\tgl_PointSize = radius*x_scale;\\n\\\n\t\t\t\t\t\t\tfragColor = color;\\n\\\n\t\t\t\t\t\t\top=opacity;\\n\\\n\t\t\t\t\t\t\ts_angle=start_angle;\\n\\\n\t\t\t\t\t\t\te_angle = end_angle;\\n\\\n\t\t\t\t\t\t\tvec2 real_position = normalizeCoords(position);\\n\\\n\t\t\t\t\t\t\tgl_Position = vec4(real_position, 0.0, 1.0);\\n\\\n\t\t\t}\\n',\n\n\t\t\t\tattributes: {\n\t\t\t\t\tposition: self.regl.prop('position'),\n\t\t\t\t\tcolor: self.regl.prop('color'),\n\t\t\t\t\tradius: self.regl.prop('radius'),\n\t\t\t\t\tstart_angle: self.regl.prop('start_angle'),\n\t\t\t\t\tend_angle: self.regl.prop(\"end_angle\"),\n\t\t\t\t\topacity: self.regl.prop(\"opacity\")\n\n\t\t\t\t},\n\n\t\t\t\tuniforms: {\n\t\t\t\t\tx_scale: self.regl.prop('x_scale'),\n\t\t\t\t\ty_scale: self.regl.prop('y_scale'),\n\t\t\t\t\tstage_width: self.regl.prop('stage_width'),\n\t\t\t\t\tstage_height: self.regl.prop('stage_height'),\n\t\t\t\t\toffset: self.regl.prop(\"offset\")\n\t\t\t\t},\n\n\t\t\t\tcount: self.regl.prop('count'),\n\t\t\t\tprimitive: self.regl.prop('primitive'),\n\t\t\t\tframebuffer: self.regl.prop(\"buffer\")\n\t\t\t});\n\t\t\tthis.object_types[0]['method'] = this.__drawCircles;\n\n\t\t\tthis.__drawLines = this.regl({\n\n\t\t\t\t// fragment shader\n\t\t\t\tfrag: ' precision highp float;\\n\\\n\t\t\t\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\t\t\t\tvoid main () {\\n\\\n\t\t\t\t\t\t\t gl_FragColor = vec4(fragColor,1);\\n\\\n\t\t\t\t\t\t}\\n',\n\n\t\t\t\tvert: '\\\n\t\t\t\t\t\tattribute vec2 position;\\n\\\n\t\t\t\t\t\tattribute vec3 color;\\n\\\n\t\t\t\t\t\tuniform float x_scale;\\n\\\n\t\t\t\t\t\tuniform float y_scale;\\n\\\n\t\t\t\t\t\tuniform vec2 offset;\\n\\\n\t\t\t\t\t\tuniform float stage_height;\\n\\\n\t\t\t\t\t\tuniform float stage_width;\\n\\\n\t\t\t\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\t\t\t\tvec2 normalizeCoords(vec2 position){\\n\\\n\t\t\t\t\t\t\tfloat x = (position[0]+offset[0])*x_scale;\\n\\\n\t\t\t\t\t\t\tfloat y = (position[1]+offset[1])*y_scale;\\n\\\n\t\t\t\treturn vec2(2.0 * ((x / stage_width) - 0.5),-(2.0 * ((y / stage_height) - 0.5)));\\n\\\n\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\tvoid main () {\\n\\\n\t\t\t\t\t\t\tfragColor=color;\\n\\\n\t\t\t\t\t\t\tvec2 norm_pos =normalizeCoords(position);\\n\\\n\t\t\t\t\t\t\tgl_Position = vec4(norm_pos, 0.0, 1.0);\\n\\\n\t\t\t\t\t\t}\\n',\n\n\t\t\t\tattributes: {\n\t\t\t\t\tposition: self.regl.prop(\"position\"),\n\t\t\t\t\tcolor: self.regl.prop(\"color\")\n\n\t\t\t\t},\n\n\t\t\t\tuniforms: {\n\t\t\t\t\tx_scale: self.regl.prop('x_scale'),\n\t\t\t\t\ty_scale: self.regl.prop('y_scale'),\n\t\t\t\t\tstage_width: self.regl.prop('stage_width'),\n\t\t\t\t\tstage_height: self.regl.prop('stage_height'),\n\t\t\t\t\toffset: self.regl.prop(\"offset\")\n\t\t\t\t},\n\t\t\t\tprimitive: self.regl.prop(\"primitive\"),\n\t\t\t\tframebuffer: self.regl.prop(\"buffer\"),\n\t\t\t\tcount: self.regl.prop(\"count\")\n\n\t\t\t});\n\t\t\tthis.object_types[1]['method'] = this.__drawLines;\n\t\t\tthis.object_types[2]['method'] = this.__drawLines;\n\t\t\tthis.__drawSquares = this.regl({\n\t\t\t\tfrag: 'precision highp float;\\n\\\n\t\t\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\t\t\tvarying float r_clip;\\n\\\n\t\t\t\t\tvarying float b_clip;\\n\\\n\t\t\t\t\tuniform int is_buffer; \\n\\\n\t\t\tvoid main(){\\n\\\n\t\t\t\t\t\tif (gl_PointCoord[0]>r_clip || gl_PointCoord[1]>b_clip){\\n\\\n\t\t\t\t\t\t\tdiscard;\\n\\\n\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\tfloat r_border=b_clip*0.02;\\n\\\n\t\t\t\t\t\tfloat b_border=b_clip*0.02;\\n\\\n\t\t\t\t\t\tif (is_buffer==0  && (gl_PointCoord[0]<r_border || gl_PointCoord[0]>r_clip-r_border || gl_PointCoord[1]<b_border || gl_PointCoord[1]>b_clip-b_border)){\\n\\\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.1,0.1,0.1,1);\\n\\\n\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t\telse{\\n\\\n\t\t\t\t\t\t\tgl_FragColor = vec4(fragColor,1);\\n\\\n\t\t\t\t\t\t}\\n\\\n\t\t\t\t\t}\\n',\n\n\t\t\t\tvert: 'attribute vec2 position;\\n\\\n\t\t\t\t\tattribute float side_length;\\n\\\n\t\t\t\t\tattribute vec3 color;\\n\\\n\t\t\t\t\tattribute float right_clip;\\n\\\n\t\t\t\t\tattribute float bottom_clip;\\n\\\n\t\t\t\t\tvarying float r_clip;\\n\\\n\t\t\t\t\tvarying float b_clip;\\n\\\n\t\t\t\t\tuniform float x_scale;\\n\\\n\t\t\t\t\tuniform float y_scale;\\n\\\n\t\t\t\t\tuniform vec2 offset;\\n\\\n\t\t\t\t\tuniform float stage_height;\\n\\\n\t\t\t\t\tuniform float stage_width;\\n\\\n\t\t\t\t\tvarying vec3 fragColor;\\n\\\n\t\t\tvec2 normalizeCoords(vec2 position){\\n\\\n\t\t\t\t\t\t\tfloat x = (position[0]+offset[0])*x_scale;\\n\\\n\t\t\t\t\t\t\tfloat y = (position[1]+offset[1])*y_scale;\\n\\\n\t\t\t\treturn vec2(2.0 * ((x / stage_width) - 0.5),-(2.0 * ((y / stage_height) - 0.5)));\\n\\\n\t\t\t\t\t}\\n\\\n\t\t\tvoid main() {\\n\\\n\t\t\t\tgl_PointSize = side_length*x_scale;\\n\\\n\t\t\t\t\t\t\tfragColor = color;\\n\\\n\t\t\t\t\t\t\tr_clip=right_clip;\\n\\\n\t\t\t\t\t\t\tb_clip=bottom_clip;\\n\\\n\t\t\t\t\t\t\tvec2 real_position = normalizeCoords(position);\\n\\\n\t\t\t\t\t\t\tgl_Position = vec4(real_position, 0.0, 1.0);\\n\\\n\t\t\t}\\n',\n\n\t\t\t\tattributes: {\n\t\t\t\t\tposition: self.regl.prop('position'),\n\t\t\t\t\tcolor: self.regl.prop('color'),\n\t\t\t\t\tside_length: self.regl.prop('side_length'),\n\t\t\t\t\tright_clip: self.regl.prop(\"right_clip\"),\n\t\t\t\t\tbottom_clip: self.regl.prop(\"bottom_clip\")\n\n\t\t\t\t},\n\n\t\t\t\tuniforms: {\n\t\t\t\t\tx_scale: self.regl.prop('x_scale'),\n\t\t\t\t\ty_scale: self.regl.prop('y_scale'),\n\t\t\t\t\tstage_width: self.regl.prop('stage_width'),\n\t\t\t\t\tstage_height: self.regl.prop('stage_height'),\n\t\t\t\t\toffset: self.regl.prop(\"offset\"),\n\t\t\t\t\tis_buffer: self.regl.prop(\"is_buffer\")\n\t\t\t\t},\n\n\t\t\t\tcount: self.regl.prop('count'),\n\t\t\t\tprimitive: self.regl.prop('primitive'),\n\t\t\t\tframebuffer: self.regl.prop(\"buffer\")\n\t\t\t});\n\t\t\tthis.object_types[3]['method'] = this.__drawSquares;\n\n\t\t\tthis.__drawImages = this.regl({\n\t\t\t\tfrag: \"\\n\\t\\t\\t\\tprecision mediump float;\\n\\t\\t\\t\\tuniform sampler2D text;\\n\\t\\t\\t\\tvarying vec2 uv;\\n\\t\\t\\t\\tvarying vec3 fragColor;\\n\\t\\t\\t\\tvarying float is_buff;\\n\\t\\t\\t\\tvoid main () {\\n\\t\\t\\t\\t\\tif (is_buff==0.0){\\n\\t\\t\\t\\t\\t\\tgl_FragColor = vec4(fragColor,1)*texture2D(text, uv);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\t\\tgl_FragColor=vec4(fragColor,1.0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\",\n\n\t\t\t\tvert: \"\\n\\t\\t\\t\\tprecision mediump float;\\n\\t\\t\\t\\tattribute vec2 position;\\n\\t\\t\\t\\tattribute vec3 color;\\n\\t\\t\\t\\tuniform vec2 x_y;\\n\\t\\t\\t\\tuniform vec2 w_h;\\n\\t\\t\\t\\tuniform float stage_height;\\n\\t\\t\\t\\tuniform float stage_width;\\n\\t\\t\\t\\tuniform vec4 globals;\\n\\t\\t\\t\\tuniform float is_buffer;\\n\\n\\n\\t\\t\\t\\tvarying vec2 uv;\\n\\t\\t\\t\\tvarying vec3 fragColor;\\n\\t\\t\\t\\tvarying float is_buff;\\n\\t\\t\\t\\n\\n\\t\\t\\t\\tvec2 normalizeCoords(vec2 pos){\\n\\t\\t\\t\\t\\tfloat x = (pos[0]+globals[0])*globals[2];\\n\\t\\t\\t\\t\\tfloat y = (pos[1]+globals[1])*globals[3];\\n\\t\\t\\t\\t\\treturn vec2(2.0 * ((x / stage_width) - 0.5),-(2.0 * ((y / stage_height) - 0.5)));\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main () {\\n\\t\\t\\t\\t\\tvec2 new_pos=normalizeCoords(position);\\n\\t\\t\\t\\t\\tis_buff=is_buffer;\\n\\t\\t\\t\\t\\tfragColor = color;\\n\\t\\t\\t\\t\\n\\n\\t\\t\\t\\t\\tif (is_buffer==0.0){\\n\\n\\t\\t\\t\\t\\t\\tfloat x_factor = 1.0/(((w_h[0]*globals[2])/stage_width)*2.0);\\n\\t\\t\\t\\t\\t\\tfloat y_factor = 1.0/(((w_h[1]*globals[3])/stage_height)*2.0);\\n\\t\\t\\t\\t\\t\\n\\n\\t\\t\\t\\t\\t\\tfloat x_offset=(((x_y[0]+globals[0])*globals[2])/stage_width)*2.0*x_factor;\\n\\t\\t\\t\\t\\t\\tfloat y_offset=(((x_y[1]+globals[1])*globals[3])/stage_height)*2.0*y_factor;\\n\\t\\t\\t\\t\\t\\tuv = vec2((new_pos[0]*x_factor)+x_factor-x_offset,-(new_pos[1]*y_factor)+y_factor-y_offset);\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\n\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tgl_Position = vec4(new_pos, 0, 1);\\n\\n\\t\\t\\t\\t}\",\n\n\t\t\t\tattributes: {\n\t\t\t\t\tposition: self.regl.prop(\"position\"),\n\t\t\t\t\tcolor: self.regl.prop(\"color\")\n\t\t\t\t},\n\n\t\t\t\tuniforms: {\n\t\t\t\t\tstage_height: self.regl.context(\"viewportHeight\"),\n\t\t\t\t\tstage_width: self.regl.context(\"viewportWidth\"),\n\t\t\t\t\tw_h: self.regl.prop(\"w_h\"),\n\t\t\t\t\tx_y: self.regl.prop(\"x_y\"),\n\t\t\t\t\ttext: self.regl.prop(\"text\"),\n\t\t\t\t\tglobals: self.regl.prop(\"globals\"),\n\t\t\t\t\tis_buffer: self.regl.prop(\"is_buffer\")\n\n\t\t\t\t},\n\n\t\t\t\tcount: self.regl.prop(\"count\"),\n\t\t\t\tframebuffer: self.regl.prop(\"buffer\")\n\t\t\t});\n\n\t\t\tthis.object_types[4]['method'] = this.__drawImages;\n\t\t}\n\t}]);\n\n\treturn WGL2DI;\n}();\n\nexports.WGL2DI = WGL2DI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvd2ViZ2wvd2dsMmRpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy93ZWJnbC93Z2wyZGkuanM/ZTNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlZ2x9IGZyb20gXCIuL3JlZ2wuanNcIjtcblxuXG5jbGFzcyBXR0wyREl7XG5cdGNvbnN0cnVjdG9yKGRpdl9pZCx3aWR0aCxoZWlnaHQpe1xuICAgIFx0dGhpcy5yZWdsPW51bGw7XG5cdFx0dGhpcy5waWNrX2J1ZmZlcj1udWxsO1xuXHRcdHRoaXMub2JqZWN0cz1bXTtcblx0XHR0aGlzLmtleXM9e307XG5cdFx0dGhpcy5vYmplY3RfdHlwZXM9W107XG5cdFx0dGhpcy5vYmplY3RzX2luX3ZpZXc9MDtcblx0XHQvL2h0bWwgZWxlbWVudHNcblx0XHR0aGlzLmRpdl9jb250YWluZXI9JChcIiNcIitkaXZfaWQpO1xuXHRcdHRoaXMuY2FudmFzPW51bGw7XG5cdFx0dGhpcy5sYWJlbF9jb250ZXh0O1xuXHRcdHRoaXMubGFiZWxfY29udGV4dD1udWxsO1xuXHRcdHRoaXMuaGVpZ2h0PTA7XG5cdFx0dGhpcy53aWR0aD0wO1xuXHRcdHRoaXMuX3NldFVwRG9jdW1lbnQod2lkdGgsaGVpZ2h0KTtcblx0XHR0aGlzLmltYWdlc190b19sb2FkPTA7XG5cdFx0dGhpcy5pc19maWx0ZXJlZD17fTtcblx0XHR0aGlzLmlzX2hpZGRlbj17fTtcblxuICAgIFxuICAgIFxuXHRcdC8vaGFuZGxlcnNcblx0XHR0aGlzLmhhbmRsZXJzPXtcblx0XHRcdG9iamVjdF9jbGlja2VkOnt9LFxuXHRcdFx0b2JqZWN0X292ZXI6e30sXG5cdFx0XHRvYmplY3Rfb3V0Ont9LFxuXHRcdFx0YnJ1c2hfc3RvcHBlZDp7fVxuXHRcdH07XG5cblx0XHQvL3N3aXRjaGVzXG5cdFx0dGhpcy5kcmF3X2xhYmVscz1mYWxzZTtcblxuXG5cblxuXHRcdC8vY2lyY2xlIHNoYXBlc1xuXHRcdHRoaXMuY2lyY2xlX3Byb3BlcnRpZXM9e1wicG9zaXRpb25cIjoxLFwiY29sb3JcIjoxLFwicGlja19jb2xvclwiOjEsXCJyYWRpdXNcIjoxLFwic3RhcnRfYW5nbGVcIjoxLFwiZW5kX2FuZ2xlXCI6MSxcIm9wYWNpdHlcIjoxfTtcblx0XHR0aGlzLmNpcmNsZXNfdG9fZHJhdz17fTtcblx0XHR0aGlzLmNpcmNsZXM9e307XG5cdFx0Zm9yICh2YXIgcHJvcCBpbiB0aGlzLmNpcmNsZV9wcm9wZXJ0aWVzKXtcblx0XHRcdHRoaXMuY2lyY2xlc190b19kcmF3W3Byb3BdPVtdO1xuXHRcdFx0dGhpcy5jaXJjbGVzW3Byb3BdPVtdO1xuXHRcdH1cblx0XHR0aGlzLmNpcmNsZXMuY291bnQ9MDtcblx0XHR0aGlzLm9iamVjdF90eXBlcy5wdXNoKHtkYXRhOnRoaXMuY2lyY2xlcyxcblx0XHRcdFx0XHRcdFx0XHRkYXRhX2luX3ZpZXc6dGhpcy5jaXJjbGVzX3RvX2RyYXcsXG5cdFx0XHRcdFx0XHRcdFx0cHJvcGVydGllczp0aGlzLmNpcmNsZV9wcm9wZXJ0aWVzLFxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzOjEsXG5cdFx0XHRcdFx0XHRcdHByaW1pdGl2ZTpcInBvaW50c1wifSk7XG5cblxuXHRcdC8vbGluZSBzaGFwZXNcblx0XHR0aGlzLmxpbmVfcHJvcGVydGllcz17J3Bvc2l0aW9uJzoyLFwiY29sb3JcIjoyLFwicGlja19jb2xvclwiOjJ9O1xuXHRcdHRoaXMubGluZXNfdG9fZHJhdz17fTtcblx0XHR0aGlzLmxpbmVzPXt9O1xuXHRcdGZvciAodmFyIHByb3AgaW4gdGhpcy5saW5lX3Byb3BlcnRpZXMpe1xuXHRcdFx0dmFyIGxpc3Q9W107XG5cdFx0XHR0aGlzLmxpbmVzW3Byb3BdPWxpc3Q7ICAgXG5cdFx0XHR0aGlzLmxpbmVzX3RvX2RyYXdbcHJvcF09bGlzdDtcblx0XHR9XG5cdFx0dGhpcy5saW5lcy5jb3VudD0wO1xuXHRcdHRoaXMub2JqZWN0X3R5cGVzLnB1c2goe2RhdGE6dGhpcy5saW5lcyxcblx0XHRcdFx0XHRcdFx0XHRkYXRhX2luX3ZpZXc6dGhpcy5saW5lc190b19kcmF3LFxuXHRcdFx0XHRcdFx0XHRcdHByb3BlcnRpZXM6dGhpcy5saW5lX3Byb3BlcnRpZXMsXG5cdFx0XHRcdFx0XHRcdFx0dmVydGljZXM6Mixcblx0XHRcdFx0XHRcdFx0XHRwcmltaXRpdmU6XCJsaW5lc1wifSk7XG5cblx0XHQvL3JlY3RhbmdsZXNcblx0XHR0aGlzLnJlY3RfcHJvcGVydGllcz17J3Bvc2l0aW9uJzoyLFwiY29sb3JcIjoyLFwicGlja19jb2xvclwiOjJ9O1xuXHRcdHRoaXMucmVjdHNfdG9fZHJhdz17fTtcblx0XHR0aGlzLnJlY3RzPXt9O1xuXHRcdGZvciAodmFyIHByb3AgaW4gdGhpcy5yZWN0X3Byb3BlcnRpZXMpeyAgICAgXG5cdFx0XHR0aGlzLnJlY3RzW3Byb3BdPVtdOyAgIFxuXHRcdFx0dGhpcy5yZWN0c190b19kcmF3W3Byb3BdPVtdO1xuXHRcdH1cblx0XHR0aGlzLnJlY3RzLmNvdW50PTA7XG5cblx0XHR0aGlzLm9iamVjdF90eXBlcy5wdXNoKHtkYXRhOnRoaXMucmVjdHMsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YV9pbl92aWV3OnRoaXMucmVjdHNfdG9fZHJhdyxcblx0XHRcdFx0XHRcdFx0XHRwcm9wZXJ0aWVzOnRoaXMucmVjdF9wcm9wZXJ0aWVzLFxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzOjYsXG5cdFx0XHRcdFx0XHRcdFx0cHJpbWl0aXZlOlwidHJpYW5nbGVzXCJ9KTtcblxuXG5cdFx0Ly9zcXVhcmVzXG5cdFx0dGhpcy5zcXVhcmVfcHJvcGVydGllcz17J3Bvc2l0aW9uJzoyLFwiY29sb3JcIjoyLFwicGlja19jb2xvclwiOjIsc2lkZV9sZW5ndGg6MixcInJpZ2h0X2NsaXBcIjoxLFwiYm90dG9tX2NsaXBcIjoxfTtcblx0XHR0aGlzLnNxdWFyZXNfdG9fZHJhdz17fTtcblx0XHR0aGlzLnNxdWFyZXM9e307XG5cdFx0Zm9yICh2YXIgcHJvcCBpbiB0aGlzLnNxdWFyZV9wcm9wZXJ0aWVzKXsgICAgIFxuXHRcdFx0dGhpcy5zcXVhcmVzW3Byb3BdPVtdOyAgIFxuXHRcdFx0dGhpcy5zcXVhcmVzX3RvX2RyYXdbcHJvcF09W107XG5cdFx0fVxuXHRcdHRoaXMuc3F1YXJlcy5jb3VudD0wO1xuXHRcdHRoaXMub2JqZWN0X3R5cGVzLnB1c2goe2RhdGE6dGhpcy5zcXVhcmVzLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGFfaW5fdmlldzp0aGlzLnNxdWFyZXNfdG9fZHJhdyxcblx0XHRcdFx0XHRcdFx0XHRwcm9wZXJ0aWVzOnRoaXMuc3F1YXJlX3Byb3BlcnRpZXMsXG5cdFx0XHRcdFx0XHRcdFx0dmVydGljZXM6MSxcblx0XHRcdFx0XHRcdFx0XHRwcmltaXRpdmU6XCJwb2ludHNcIn0pO1xuXG5cblx0XHR0aGlzLnNjYWxlPTEuMDtcblx0XHR0aGlzLnhfc2NhbGU9MS4wO1xuXHRcdHRoaXMueV9zY2FsZT0xLjA7XG5cdFx0dGhpcy5vZmZzZXQ9WzAsMF07XG5cblxuXHRcdC8vaW1hZ2VzXG5cdFx0dGhpcy5pbWFnZV9wcm9wZXJ0aWVzPXsncG9zaXRpb24nOjIsXCJwaWNrX2NvbG9yXCI6MixcImNvbG9yXCI6Mn07XG5cdFx0dGhpcy5pbWFnZXNfdG9fZHJhdz17fTtcblx0XHR0aGlzLmltYWdlcz17fTtcblx0XHRmb3IgKHZhciBwcm9wIGluIHRoaXMuaW1hZ2VfcHJvcGVydGllcyl7ICAgICBcblx0XHRcdHRoaXMuaW1hZ2VzW3Byb3BdPVtdOyAgIFxuXHRcdFx0dGhpcy5pbWFnZXNfdG9fZHJhd1twcm9wXT1bXTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5pbWFnZXMuY291bnQ9MDtcblx0XHR0aGlzLmltYWdlcy5wcm9wcz1bXTtcblx0XHR0aGlzLmltYWdlcy5nbG9iYWxzPVt0aGlzLm9mZnNldFswXSx0aGlzLm9mZnNldFsxXSx0aGlzLnhfc2NhbGUsdGhpcy55X3NjYWxlXTtcblx0XHR0aGlzLm9iamVjdF90eXBlcy5wdXNoKHtkYXRhOnRoaXMuaW1hZ2VzLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGFfaW5fdmlldzp0aGlzLmltYWdlc190b19kcmF3LFxuXHRcdFx0XHRcdFx0XHRcdHByb3BlcnRpZXM6dGhpcy5pbWFnZV9wcm9wZXJ0aWVzLFxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzOjYsXG5cdFx0XHRcdFx0XHRcdFx0cHJpbWl0aXZlOlwidHJpYW5nbGVzXCJ9KTtcblx0ICAgIHRoaXMuaW1hZ2VzLmRpc3BsYXlfYXNfaW1hZ2U9dHJ1ZTtcblxuXG5cblxuXHRcdC8vVGhlIGxhc3QgbW9vc2UgcG9zaXRpb24gcmVjb3JkZWRcblx0XHR0aGlzLm1vdXNlX3Bvc2l0aW9uPW51bGw7XG5cdFx0Ly9XYXMgYW4gb2JqZWN0IGNsaWNrZWRcblx0XHR0aGlzLm9iamVjdF9jbGlja2VkPW51bGw7XG5cdFx0Ly9hbiBvYmplY3Qgd2FzIGNsaWNrZWRcblx0XHR0aGlzLmRyYWdnaW5nPWZhbHNlO1xuXHRcdC8vb2JqZWN0IHdoaWNoIG1vdXNlIGlzIG92ZXJcblx0XHR0aGlzLm9iamVjdF9tb3VzZV9vdmVyPW51bGw7XG5cdFx0dGhpcy5tb3VzZV9vdmVyX2NvbG9yPW51bGw7Ly9bMjU1LDAsMF07XG5cblx0XHR0aGlzLnpvb21fYW1vdW50PTA7XG5cblxuXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0cmVnbCh7XG5cdFx0XHRvbkRvbmU6IGZ1bmN0aW9uKGVycixyZWdsKXtcblx0XHRcdFx0c2VsZi5yZWdsPXJlZ2w7XG5cdFx0XHRcdHNlbGYucGlja2J1ZmZlciA9IHJlZ2wuZnJhbWVidWZmZXIoeyBjb2xvckZvcm1hdDogJ3JnYmEnLGhlaWdodDpzZWxmLmhlaWdodCx3aWR0aDpzZWxmLndpZHRofSk7XG5cdFx0XHRcdHNlbGYuX2luaXREcmF3TWV0aG9kcygpO1xuXHRcdFx0XHRzZWxmLl9hZGRIYW5kbGVycygpO1xuXHRcdFx0fSxcblx0XHRcdGNhbnZhczpzZWxmLmNhbnZhc1swXSxcblx0XHRcdFxuXG5cdFx0fSk7XG5cblx0fVxuXG5cdHJlbW92ZSgpe31cblxuXG5cdF9zZXRVcERvY3VtZW50KHdpZHRoLGhlaWdodCl7XG5cdFx0aWYgKCFoZWlnaHQpe1xuXHRcdFx0aGVpZ2h0PXRoaXMuZGl2X2NvbnRhaW5lci5oZWlnaHQoKTtcblx0XHRcdHdpZHRoPXRoaXMuZGl2X2NvbnRhaW5lci53aWR0aCgpO1xuXG5cdFx0fWVsc2V7XG5cblx0XHRcdHRoaXMuaGVpZ2h0PWhlaWdodDtcblx0XHRcdHRoaXMud2lkdGg9d2lkdGg7XG5cdFx0XHR0aGlzLmRpdl9jb250YWluZXIuaGVpZ2h0KGhlaWdodCk7XG5cdFx0XHR0aGlzLmRpdl9jb250YWluZXIud2lkdGgod2lkdGgpO1xuXHRcdH1cblx0XHR0aGlzLmNhbnZhcyA9JChcIjxjYW52YXM+XCIpXG5cdFx0LmF0dHIoe1xuXHRcdFx0aGVpZ2h0OmhlaWdodCxcblx0XHRcdHdpZHRoOndpZHRoICAgXG5cdFx0fSlcblx0XHQuY3NzKHtcblx0XHRcdHBvc2l0aW9uOlwiYWJzb2x1dGVcIixcblx0XHRcdGxlZnQ6XCIwcHhcIixcblx0XHRcdHJpZ2h0OlwiMHB4XCJcblx0XHR9KTtcblx0XHR0aGlzLmxhYmVsX2NhbnZhcz0kKFwiPGNhbnZhcz5cIilcblx0ICAgLmF0dHIoe1xuXHRcdFx0aGVpZ2h0OmhlaWdodCxcblx0XHRcdHdpZHRoOndpZHRoICAgXG5cdFx0fSlcblx0XHQuY3NzKHtcblx0XHRcdHBvc2l0aW9uOlwiYWJzb2x1dGVcIixcblx0XHRcdGxlZnQ6XCIwcHhcIixcblx0XHRcdHJpZ2h0OlwiMHB4XCJcblx0XHR9KTtcblx0XHR0aGlzLmxhYmVsX2NvbnRleHQ9dGhpcy5sYWJlbF9jYW52YXNbMF0uZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5hcHBlbmQodGhpcy5jYW52YXMpLmFwcGVuZCh0aGlzLmxhYmVsX2NhbnZhcyk7XG5cdH1cblxuXHRzZXRTaXplKHdpZHRoLGhlaWdodCl7XG5cdFx0bGV0IHNlbGY9dGhpcztcblx0XHR3aWR0aD1NYXRoLnJvdW5kKHdpZHRoKTtcblx0XHRoZWlnaHQ9TWF0aC5yb3VuZChoZWlnaHQpO1xuXHRcdHRoaXMuaGVpZ2h0PWhlaWdodDtcblx0XHR0aGlzLndpZHRoPXdpZHRoO1xuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5oZWlnaHQoaGVpZ2h0KS53aWR0aCh3aWR0aCk7XG5cdFx0dGhpcy5jYW52YXMuYXR0cih7aGVpZ2h0OmhlaWdodCx3aWR0aDp3aWR0aH0pO1xuXHRcdHRoaXMubGFiZWxfY2FudmFzLmF0dHIoe2hlaWdodDpoZWlnaHQsd2lkdGg6d2lkdGh9KTtcblx0XHR0aGlzLnBpY2tidWZmZXIuZGVzdHJveSgpXG5cdFx0dGhpcy5waWNrYnVmZmVyID0gdGhpcy5yZWdsLmZyYW1lYnVmZmVyKHsgY29sb3JGb3JtYXQ6ICdyZ2JhJyxoZWlnaHQ6aGVpZ2h0LHdpZHRoOndpZHRofSk7XG5cdFx0Ly90aGlzIGlzIG5lY2Vzc2FyeSwgYnV0IEkgIGRvbid0IGtub3cgd2h5P1xuXHRcdGxldCBsb29wID10aGlzLnJlZ2wuZnJhbWUoZnVuY3Rpb24oKXtcblx0XHRcdFxuXHRcdH0pO1xuXHRcdHNldFRpbWVvdXQoKCk9Pntcblx0XHRcdHNlbGYucmVmcmVzaCgpO1xuXHRcdFx0bG9vcC5jYW5jZWwoKTtcblxuXHRcdFx0fSwxMDApO1xuXHRcdFxuXG5cblx0fVxuXG5cdF9nZXRNb3VzZVBvc2l0aW9uKGUpe1xuICAgIFx0dmFyIHJlY3QgPSB0aGlzLmNhbnZhc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBcdHJldHVybiBbZS5vcmlnaW5hbEV2ZW50LmNsaWVudFgtcmVjdC5sZWZ0LGUub3JpZ2luYWxFdmVudC5jbGllbnRZLXJlY3QudG9wXTtcblx0fVxuXG5cdF9nZXRBY3R1YWxQb3NpdGlvbihwb3NpdGlvbil7XG4gICAgXHR2YXIgeCA9IChwb3NpdGlvblswXS90aGlzLnhfc2NhbGUpIC0gdGhpcy5vZmZzZXRbMF07XG4gICAgXHR2YXIgeSA9IChwb3NpdGlvblsxXS90aGlzLnlfc2NhbGUpIC0gdGhpcy5vZmZzZXRbMV07XG4gICAgXHRyZXR1cm4gW3gseV07XG5cdH1cblxuXHRfZHJhd0xhYmVscygpe1xuICAgIFx0dmFyIHRpbWUgPURhdGUubm93KCk7XG4gICAgXHRpZiAodGhpcy5vYmplY3RzX2luX3ZpZXc+NTAwMCl7XG4gICAgICAgIFx0cmV0dXJuO1xuICAgIFx0fVxuICAgIFx0dGhpcy5sYWJlbF9jb250ZXh0LmZvbnQgPSBcIjE0cHggQXJpYWxcIjtcbiAgIFxuICAgIFx0Zm9yKHZhciBpIGluIHRoaXMub2JqZWN0X3R5cGVzKXtcbiAgICAgICAgXHR2YXIgcG9zID10aGlzLm9iamVjdF90eXBlc1tpXS5kYXRhX2luX3ZpZXcucG9zaXRpb247XG4gICAgICAgIFxuICAgICAgICBcdGZvciAodmFyIGlpPTA7aWk8cG9zLmxlbmd0aDtpaSsrKXtcbiAgICAgICBcbiAgICAgICAgICBcdFx0dmFyIHg9KHBvc1tpaV1bMF0rdGhpcy5vZmZzZXRbMF0pKnRoaXMueF9zY2FsZTtcbiAgICAgICAgICBcdFx0dmFyIHk9KHBvc1tpaV1bMV0rdGhpcy5vZmZzZXRbMV0pKnRoaXMueV9zY2FsZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICBcdHRoaXMubGFiZWxfY29udGV4dC5maWxsVGV4dChcIkgxXCIseCx5KTtcbiAgICAgICAgICAgXG4gICAgICAgIFx0fVxuICAgIFx0fSAgICBcblx0fVxuXG5cdHNldE9iamVjdENvbG9yKGtleSxjb2xvcil7XG5cdFx0dmFyIG9iaiA9IHRoaXMub2JqZWN0c1t0aGlzLmtleXNba2V5XV07XG5cdFx0dmFyIG9ial90eXBlPSB0aGlzLm9iamVjdF90eXBlc1tvYmpbMV1dO1xuXHRcdGZvciAodmFyIHg9b2JqWzBdO3g8b2JqWzBdK29ial90eXBlLnZlcnRpY2VzO3grKyl7XG5cdFx0XHRvYmpfdHlwZS5kYXRhLmNvbG9yW3hdWzBdPWNvbG9yWzBdLzI1NTtcblx0XHRcdG9ial90eXBlLmRhdGEuY29sb3JbeF1bMV09Y29sb3JbMV0vMjU1O1xuXHRcdFx0b2JqX3R5cGUuZGF0YS5jb2xvclt4XVsyXT1jb2xvclsyXS8yNTU7XG5cdFx0fVxuXHR9XG5cblxuXHRnZXRPYmplY3RDb2xvcihrZXkpe1xuXHRcdHZhciBvYmogPSB0aGlzLm9iamVjdHNbdGhpcy5rZXlzW2tleV1dO1xuXHRcdHZhciBvYmpfdHlwZT0gdGhpcy5vYmplY3RfdHlwZXNbb2JqWzFdXTtcblx0XHR2YXIgY29sPSBvYmpfdHlwZS5kYXRhLmNvbG9yW29ialswXV07XG5cdFx0cmV0dXJuIFtjb2xbMF0qMjU1LGNvbFsxXSoyNTUsY29sWzJdKjI1NV07XG5cblx0fVxuXG5cblxuXG5cdGFkZExpbmUocG9zaXRpb25Ubyxwb3NpdGlvbkZyb20sY29sb3Isa2V5KXtcbiAgICBcdHZhciBpbmRleCA9IHRoaXMub2JqZWN0cy5sZW5ndGg7XG4gICAgXG4gICAgIFx0aWYgKGtleSAmJiAhIHRoaXMua2V5c1trZXldKXtcbiAgICAgICAgXHR0aGlzLmtleXNba2V5XT1pbmRleDtcbiAgICBcdH1cbiAgICBcdGVsc2V7XG4gICAgICAgIFx0a2V5PWluZGV4O1xuICAgICAgICBcdHRoaXMua2V5c1tpbmRleF09aW5kZXg7XG4gICAgXHR9XG5cdFx0dmFyIGxpbmVfaW5kZXg9dGhpcy5saW5lcy5wb3NpdGlvbi5sZW5ndGg7XG5cdFx0dGhpcy5saW5lcy5wb3NpdGlvbi5wdXNoKHBvc2l0aW9uRnJvbSk7XG5cdFx0dGhpcy5saW5lcy5wb3NpdGlvbi5wdXNoKHBvc2l0aW9uVG8pO1xuXHRcdHRoaXMubGluZXMuY29sb3IucHVzaChbY29sb3JbMF0vMjU1LGNvbG9yWzFdLzI1NSxjb2xvclsyXS8yNTVdKTtcblx0XHR0aGlzLmxpbmVzLmNvbG9yLnB1c2goW2NvbG9yWzBdLzI1NSxjb2xvclsxXS8yNTUsY29sb3JbMl0vMjU1XSk7XG5cdFx0dGhpcy5saW5lcy5waWNrX2NvbG9yLnB1c2godGhpcy5fZ2V0UkdCRnJvbUluZGV4KGluZGV4KzEpKTtcblx0XHR0aGlzLmxpbmVzLnBpY2tfY29sb3IucHVzaCh0aGlzLl9nZXRSR0JGcm9tSW5kZXgoaW5kZXgrMSkpO1xuXHRcdHRoaXMub2JqZWN0cy5wdXNoKFtsaW5lX2luZGV4LDEsa2V5XSk7XG5cdFx0dGhpcy5saW5lcy5jb3VudCsrO1xuXHR9XG5cblx0YWRkVGhpY2tMaW5lKHBvc2l0aW9uVG8scG9zaXRpb25Gcm9tLHdpZHRoLGNvbG9yLGtleSl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5vYmplY3RzLmxlbmd0aDtcblx0XHRpZiAoa2V5ICYmICEgdGhpcy5rZXlzW2tleV0pe1xuXHRcdFx0dGhpcy5rZXlzW2tleV09aW5kZXg7XG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRrZXk9aW5kZXg7XG5cdFx0XHR0aGlzLmtleXNbaW5kZXhdPWluZGV4O1xuXHRcdH1cblx0XHR2YXIgcmVjdF9pbmRleD10aGlzLnJlY3RzLnBvc2l0aW9uLmxlbmd0aDtcblx0XHR2YXIgeF9kaWZmPSBwb3NpdGlvblRvWzBdLXBvc2l0aW9uRnJvbVswXTtcblx0XHR2YXIgeV9kaWZmID0gcG9zaXRpb25Ub1sxXS1wb3NpdGlvbkZyb21bMV07XG5cdFx0dmFyIGZhY3RvciA9ICgwLjUqd2lkdGgpL01hdGguc3FydCgoeF9kaWZmKnhfZGlmZikrKHlfZGlmZip5X2RpZmYpKTtcblx0XHR2YXIgeF9vZmZzZXQ9IGZhY3Rvcip5X2RpZmY7XG5cdFx0dmFyIHlfb2Zmc2V0PSBmYWN0b3IqeF9kaWZmO1xuXHRcdHRoaXMucmVjdHMucG9zaXRpb24ucHVzaChbcG9zaXRpb25Ub1swXSt4X29mZnNldCxwb3NpdGlvblRvWzFdLXlfb2Zmc2V0XSk7IC8vVExcblx0XHR0aGlzLnJlY3RzLnBvc2l0aW9uLnB1c2goW3Bvc2l0aW9uRnJvbVswXSt4X29mZnNldCxwb3NpdGlvbkZyb21bMV0teV9vZmZzZXRdKTsgLy9CTFxuXHRcdHRoaXMucmVjdHMucG9zaXRpb24ucHVzaChbcG9zaXRpb25Gcm9tWzBdLXhfb2Zmc2V0LHBvc2l0aW9uRnJvbVsxXSt5X29mZnNldF0pOyAvL0JSXG5cblx0XHR0aGlzLnJlY3RzLnBvc2l0aW9uLnB1c2goW3Bvc2l0aW9uRnJvbVswXS14X29mZnNldCxwb3NpdGlvbkZyb21bMV0reV9vZmZzZXRdKTsgLy9CUlxuXHRcdHRoaXMucmVjdHMucG9zaXRpb24ucHVzaChbcG9zaXRpb25Ub1swXS14X29mZnNldCxwb3NpdGlvblRvWzFdK3lfb2Zmc2V0XSk7IC8vVFJcblx0XHR0aGlzLnJlY3RzLnBvc2l0aW9uLnB1c2goW3Bvc2l0aW9uVG9bMF0reF9vZmZzZXQscG9zaXRpb25Ub1sxXS15X29mZnNldF0pOyAvL1RMXG5cblxuXHRcdHZhciBjICA9IFtjb2xvclswXS8yNTUsY29sb3JbMV0vMjU1LGNvbG9yWzJdLzI1NV07XG5cdFx0dmFyIHBjID0gdGhpcy5fZ2V0UkdCRnJvbUluZGV4KGluZGV4KzEpO1xuXHRcdGZvciAodmFyIGE9MDthPDY7YSsrKXtcblx0XHRcdCB0aGlzLnJlY3RzLmNvbG9yLnB1c2goYyk7XG5cdFx0XHQgdGhpcy5yZWN0cy5waWNrX2NvbG9yLnB1c2gocGMpO1xuXHRcdH1cblx0XHR0aGlzLm9iamVjdHMucHVzaChbcmVjdF9pbmRleCwyLGtleV0pO1xuXHRcdHRoaXMuaWFtZ2VzLmNvdW50Kys7XG5cdFx0cmV0dXJuIGtleTtcblx0fVxuXG5cblx0YWRkSW1hZ2UocG9zaXRpb24saGVpZ2h0LHdpZHRoLGltYWdlLGtleSl7XG5cdFx0bGV0IHNlbGYgPXRoaXM7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5vYmplY3RzLmxlbmd0aDtcblx0XHRpZiAoa2V5ICYmICEgdGhpcy5rZXlzW2tleV0pe1xuXHRcdFx0dGhpcy5rZXlzW2tleV09aW5kZXg7XG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRrZXk9aW5kZXg7XG5cdFx0XHR0aGlzLmtleXNbaW5kZXhdPWluZGV4O1xuXHRcdH1cblx0XHRsZXQgeCA9IHBvc2l0aW9uWzBdO1xuXHRcdGxldCB5ID0gcG9zaXRpb25bMV07XG5cdFx0dmFyIGltYWdlX2luZGV4PXRoaXMuaW1hZ2VzLnBvc2l0aW9uLmxlbmd0aDtcblx0XHR0aGlzLmltYWdlcy5wb3NpdGlvbi5wdXNoKFt4LHldKTtcblx0XHR0aGlzLmltYWdlcy5wb3NpdGlvbi5wdXNoKFt4LHkraGVpZ2h0XSk7XG5cdFx0dGhpcy5pbWFnZXMucG9zaXRpb24ucHVzaChbeCt3aWR0aCx5K2hlaWdodF0pLFxuXHRcdHRoaXMuaW1hZ2VzLnBvc2l0aW9uLnB1c2goW3grd2lkdGgseStoZWlnaHRdKTtcblx0XHR0aGlzLmltYWdlcy5wb3NpdGlvbi5wdXNoKFt4K3dpZHRoLHldKTtcblx0XHR0aGlzLmltYWdlcy5wb3NpdGlvbi5wdXNoKFt4LHldKTtcblx0XHR0aGlzLmltYWdlX3Bvc2l0aW9uPVtbLTEsMV0sWy0xLDBdLFswLDBdLFswLDBdLFswLDFdLFstMS4wXV07XG5cdFx0dmFyIHBjID0gdGhpcy5fZ2V0UkdCRnJvbUluZGV4KGluZGV4KzEpO1xuXHRcdGZvciAodmFyIGE9MDthPDY7YSsrKXtcblx0XHRcdCB0aGlzLmltYWdlcy5waWNrX2NvbG9yLnB1c2gocGMpO1xuXHRcdFx0IHRoaXMuaW1hZ2VzLmNvbG9yLnB1c2goWzAuMSwwLjcsMC4xXSk7XG5cdFx0fVxuXHRcdGxldCBpX2luZGV4PXRoaXMuaW1hZ2VzLnByb3BzLmxlbmd0aDtcblx0XHR0aGlzLmltYWdlcy5wcm9wcy5wdXNoKHtjb3VudDo2LGlzX2J1ZmZlcjowLHhfeTpbeCx5XSx3X2g6W3dpZHRoLGhlaWdodF0sXG5cdFx0dGV4dDp0aGlzLmxvYWRpbmdfaW1hZ2UscG9zaXRpb246dGhpcy5pbWFnZXMucG9zaXRpb24uc2xpY2UoaW1hZ2VfaW5kZXgsaW1hZ2VfaW5kZXgrNiksZ2xvYmFsczp0aGlzLmltYWdlcy5nbG9iYWxzLGNvbG9yOnRoaXMuaW1hZ2VzLmNvbG9yLnNsaWNlKGltYWdlX2luZGV4LGltYWdlX2luZGV4KzYpfSk7XG5cdFx0dmFyIGltID0gbmV3IEltYWdlKClcbiAgICAgICAgaW0uc3JjID0gaW1hZ2U7XG4gICAgICAgIHRoaXMuaW1hZ2VzX3RvX2xvYWQrKztcbiAgICAgICAgaW0ub25sb2FkPWZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHNlbGYuaW1hZ2VzLnByb3BzW2lfaW5kZXhdLnRleHQ9c2VsZi5yZWdsLnRleHR1cmUoe2RhdGE6aW0sbWluOlwibGluZWFyXCJ9KTtcbiAgICAgICAgICAgICAgc2VsZi5pbWFnZXNfdG9fbG9hZC0tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW1hZ2VzLmNvdW50Kys7XG5cblxuXHRcdHRoaXMub2JqZWN0cy5wdXNoKFtpbWFnZV9pbmRleCw0LGtleV0pO1xuXG5cblx0fVxuXG5cdGFkZFJlY3RhbmdsZShwb3NpdGlvbixoZWlnaHQsd2lkdGgsY29sb3Isa2V5KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLm9iamVjdHMubGVuZ3RoO1xuXHRcdGlmIChrZXkgJiYgISB0aGlzLmtleXNba2V5XSl7XG5cdFx0XHR0aGlzLmtleXNba2V5XT1pbmRleDtcblx0XHR9XG5cdFx0ZWxzZXtcblx0XHRcdGtleT1pbmRleDtcblx0XHRcdHRoaXMua2V5c1tpbmRleF09aW5kZXg7XG5cdFx0fVxuXHRcdHZhciByZWN0X2luZGV4PXRoaXMucmVjdHMucG9zaXRpb24ubGVuZ3RoO1xuXHRcdHRoaXMucmVjdHMucG9zaXRpb24ucHVzaChwb3NpdGlvbik7XG5cdFx0dGhpcy5yZWN0cy5wb3NpdGlvbi5wdXNoKFtwb3NpdGlvblswXSxwb3NpdGlvblsxXStoZWlnaHRdKTtcblx0XHR0aGlzLnJlY3RzLnBvc2l0aW9uLnB1c2goW3Bvc2l0aW9uWzBdK3dpZHRoLHBvc2l0aW9uWzFdK2hlaWdodF0pO1xuXG5cdFx0dGhpcy5yZWN0cy5wb3NpdGlvbi5wdXNoKFtwb3NpdGlvblswXSt3aWR0aCxwb3NpdGlvblsxXStoZWlnaHRdKTtcblx0XHR0aGlzLnJlY3RzLnBvc2l0aW9uLnB1c2goW3Bvc2l0aW9uWzBdK3dpZHRoLHBvc2l0aW9uWzFdXSk7XG5cdFx0dGhpcy5yZWN0cy5wb3NpdGlvbi5wdXNoKFtwb3NpdGlvblswXSxwb3NpdGlvblsxXV0pO1xuXG5cblx0XHR2YXIgYyAgPSBbY29sb3JbMF0vMjU1LGNvbG9yWzFdLzI1NSxjb2xvclsyXS8yNTVdO1xuXHRcdHZhciBwYyA9IHRoaXMuX2dldFJHQkZyb21JbmRleChpbmRleCsxKTtcblx0XHRmb3IgKHZhciBhPTA7YTw2O2ErKyl7XG5cdFx0XHQgdGhpcy5yZWN0cy5jb2xvci5wdXNoKGMpO1xuXHRcdFx0IHRoaXMucmVjdHMucGlja19jb2xvci5wdXNoKHBjKTtcblx0XHR9XG5cdFx0dGhpcy5vYmplY3RzLnB1c2goW3JlY3RfaW5kZXgsMixrZXldKTtcblx0XHR0aGlzLnJlY3RzLmNvdW50Kys7XG5cdFx0cmV0dXJuIGtleTtcblx0fVx0XG5cblx0YWRkQXJjKHBvc2l0aW9uLHJhZGl1cyxjb2xvcixzdGFydF9hbmdsZSxlbmRfYW5nbGUsa2V5KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLm9iamVjdHMubGVuZ3RoO1xuXHRcdCBpZiAoa2V5ICYmICEgdGhpcy5rZXlzW2tleV0pe1xuXHRcdFx0dGhpcy5rZXlzW2tleV09aW5kZXg7XG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRrZXk9aW5kZXg7XG5cdFx0XHR0aGlzLmtleXNbaW5kZXhdPWluZGV4O1xuXHRcdH1cblx0XHR2YXIgY2lyY19pbmRleD10aGlzLmNpcmNsZXMucG9zaXRpb24ubGVuZ3RoO1xuXHRcdHRoaXMuY2lyY2xlcy5wb3NpdGlvbi5wdXNoKHBvc2l0aW9uKTtcblx0XHR0aGlzLmNpcmNsZXMucmFkaXVzLnB1c2gocmFkaXVzKTtcblx0XHR0aGlzLmNpcmNsZXMuY29sb3IucHVzaChbY29sb3JbMF0vMjU1LGNvbG9yWzFdLzI1NSxjb2xvclsyXS8yNTVdKTtcblx0XHR0aGlzLmNpcmNsZXMucGlja19jb2xvci5wdXNoKHRoaXMuX2dldFJHQkZyb21JbmRleChpbmRleCsxKSk7XG5cdFx0dGhpcy5jaXJjbGVzLnN0YXJ0X2FuZ2xlLnB1c2goc3RhcnRfYW5nbGUpO1xuXHRcdHRoaXMuY2lyY2xlcy5lbmRfYW5nbGUucHVzaChlbmRfYW5nbGUpO1xuXHRcdHRoaXMub2JqZWN0cy5wdXNoKFtjaXJjX2luZGV4LDAsa2V5XSk7XG5cdFx0dGhpcy5jaXJjbGVzLmNvdW50Kys7XG5cdH1cblxuXG5cdGFkZENpcmNsZShwb3NpdGlvbixyYWRpdXMsY29sb3Isa2V5KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLm9iamVjdHMubGVuZ3RoO1xuXHRcdCBpZiAoa2V5ICYmICEgdGhpcy5rZXlzW2tleV0pe1xuXHRcdFx0dGhpcy5rZXlzW2tleV09aW5kZXg7XG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRrZXk9aW5kZXg7XG5cdFx0XHR0aGlzLmtleXNbaW5kZXhdPWluZGV4O1xuXHRcdH1cblx0XHR2YXIgY2lyY19pbmRleD10aGlzLmNpcmNsZXMucG9zaXRpb24ubGVuZ3RoO1xuXHRcdHRoaXMuY2lyY2xlcy5wb3NpdGlvbi5wdXNoKHBvc2l0aW9uKTtcblx0XHR0aGlzLmNpcmNsZXMucmFkaXVzLnB1c2gocmFkaXVzKTtcblx0XHR0aGlzLmNpcmNsZXMub3BhY2l0eS5wdXNoKDEpO1xuXHRcdHRoaXMuY2lyY2xlcy5jb2xvci5wdXNoKFtjb2xvclswXS8yNTUsY29sb3JbMV0vMjU1LGNvbG9yWzJdLzI1NV0pO1xuXHRcdHRoaXMuY2lyY2xlcy5waWNrX2NvbG9yLnB1c2godGhpcy5fZ2V0UkdCRnJvbUluZGV4KGluZGV4KzEpKTtcblx0XHR0aGlzLmNpcmNsZXMuc3RhcnRfYW5nbGUucHVzaCgxMCk7XG5cdFx0dGhpcy5jaXJjbGVzLmVuZF9hbmdsZS5wdXNoKDApO1xuXHRcdHRoaXMub2JqZWN0cy5wdXNoKFtjaXJjX2luZGV4LDAsa2V5XSk7XG5cdFx0dGhpcy5jaXJjbGVzLmNvdW50Kys7XG5cdH1cblxuXHRhZGRQb2ludFJlY3RhbmdsZShwb3NpdGlvbixoZWlnaHQsd2lkdGgsY29sb3Isa2V5KXtcblx0XHR2YXIgc2lkZV9sZW5ndGg9IGhlaWdodD53aWR0aD9oZWlnaHQ6d2lkdGg7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5vYmplY3RzLmxlbmd0aDtcblx0XHRpZiAoa2V5ICYmICEgdGhpcy5rZXlzW2tleV0pe1xuXHRcdFx0dGhpcy5rZXlzW2tleV09aW5kZXg7XG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRrZXk9aW5kZXg7XG5cdFx0XHR0aGlzLmtleXNbaW5kZXhdPWluZGV4O1xuXHRcdH1cblxuXHRcdHZhciBzcXVhcmVfaW5kZXg9dGhpcy5zcXVhcmVzLnBvc2l0aW9uLmxlbmd0aDtcblx0XHR0aGlzLnNxdWFyZXMucG9zaXRpb24ucHVzaChbcG9zaXRpb25bMF0rc2lkZV9sZW5ndGgvMixwb3NpdGlvblsxXStzaWRlX2xlbmd0aC8yXSk7XG5cdFx0dGhpcy5zcXVhcmVzLmNvbG9yLnB1c2goW2NvbG9yWzBdLzI1NSxjb2xvclsxXS8yNTUsY29sb3JbMl0vMjU1XSk7XG5cdFx0dGhpcy5zcXVhcmVzLnNpZGVfbGVuZ3RoLnB1c2goc2lkZV9sZW5ndGgpO1xuXHRcdHRoaXMuc3F1YXJlcy5yaWdodF9jbGlwLnB1c2god2lkdGgvc2lkZV9sZW5ndGgpO1xuXHRcdHRoaXMuc3F1YXJlcy5ib3R0b21fY2xpcC5wdXNoKGhlaWdodC9zaWRlX2xlbmd0aCk7XG5cdFx0dGhpcy5zcXVhcmVzLnBpY2tfY29sb3IucHVzaCh0aGlzLl9nZXRSR0JGcm9tSW5kZXgoaW5kZXgrMSkpO1xuXHRcdHRoaXMub2JqZWN0cy5wdXNoKFtzcXVhcmVfaW5kZXgsMyxrZXldKTtcblx0XHR0aGlzLnNxdWFyZXMuY291bnQrKztcblx0fVxuXG5cblxuXG5cdF9nZXRSR0JGcm9tSW5kZXgoaW5kZXgpe1xuXHRcdHZhciBiID0gTWF0aC5mbG9vcihpbmRleC82NTUzNik7XG5cdFx0dmFyIHRlbXAgPSBpbmRleCU2NTUzNjtcblx0XHR2YXIgZz0gTWF0aC5mbG9vcih0ZW1wLzI1Nik7XG5cdFx0dmFyIHIgPSB0ZW1wJTI1Njtcblx0XHRyZXR1cm4gW3IvMjU1LGcvMjU1LGIvMjU1XTtcbiAgICAgICAgICAgIFxuXHR9XG5cdF9nZXRJbmRleEZyb21SR0IocmdiKXtcbiAgICBcdHJldHVybiAocmdiWzJdKjY1NTM2KSsocmdiWzFdKjI1NikrcmdiWzBdOyAgICBcblx0fVxuXG5cdF9kcmF3UGlja0J1ZmZlcihpbl92aWV3KXtcbiAgICAgICBcdHRoaXMucmVnbC5jbGVhcih7XG4gICAgICAgIFx0Y29sb3I6IFswLCAwLCAwLCAwXSxcblx0XHRcdGRlcHRoOiAxLFxuICAgICAgICBcdGZyYW1lYnVmZmVyOnRoaXMucGlja2J1ZmZlclxuICAgIFx0fSk7XG4gICAgIFx0dGhpcy5fZHJhd09iamVjdHModHJ1ZSxpbl92aWV3KTtcbiAgICBcblx0fVxuXHQvL3JlZmVzaCBhbGwgXG5cdC8vaW5fdmlldyBvbmx5IHRob3NlIGluIHZpZXdcblx0cmVmcmVzaChpbl92aWV3KXtcbiAgICBcdHRoaXMubGFiZWxfY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIFx0dGhpcy5fZHJhd09iamVjdHMoZmFsc2UsaW5fdmlldyk7XG4gICAgXHR0aGlzLl9kcmF3UGlja0J1ZmZlcihpbl92aWV3KTtcbiAgICBcdHRoaXMubGFiZWxfY29udGV4dC5mb250ID0gXCIzMHB4IEFyaWFsXCI7XG4gICBcblx0fVxuXG5cdHpvb20oYW1vdW50KXtcbiAgICBcdHRoaXMueF9zY2FsZSo9YW1vdW50O1xuICAgIFx0dGhpcy55X3NjYWxlKj1hbW91bnQ7XG4gICBcdFx0dGhpcy5fZHJhd09iamVjdHMoZmFsc2UpO1xuXHR9XG5cblx0X2RyYXdPYmplY3Qob2JqZWN0LGNvbG9yKXtcbiAgICBcblx0XHR2YXIgdHlwZSA9dGhpcy5vYmplY3RfdHlwZXNbb2JqZWN0WzFdXTtcblx0XHR2YXIgb2JqPXtcblx0XHRcdHN0YWdlX3dpZHRoOnRoaXMud2lkdGgsXG5cdFx0XHRzdGFnZV9oZWlnaHQ6dGhpcy5oZWlnaHQsXG5cdFx0XHR4X3NjYWxlOnRoaXMueF9zY2FsZSxcblx0XHRcdHlfc2NhbGU6dGhpcy55X3NjYWxlLFxuXHRcdFx0YnVmZmVyOm51bGwsXG5cdFx0XHRvZmZzZXQ6dGhpcy5vZmZzZXQsXG5cdFx0XHRjb3VudDp0eXBlLnZlcnRpY2VzLFxuXHRcdFx0cHJpbWl0aXZlOnR5cGUucHJpbWl0aXZlLFxuXHRcdFx0aXNfYnVmZmVyOjBcblxuXHRcdH07XG5cdFxuXG5cdFx0Zm9yICh2YXIgcHJvcCBpbiB0eXBlLnByb3BlcnRpZXMpeyAgIFxuXHRcdFx0aWYgKHByb3A9PT0ncGlja19jb2xvcicpe1xuXHRcdFx0XHQgIGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0b2JqW3Byb3BdPVtdO1xuXHRcdFx0dmFyIHN0PSBvYmplY3RbMF07XG5cdFx0XHR2YXIgZW4gPXN0K3R5cGUudmVydGljZXM7XG5cdFx0XHRmb3IgKHZhciBwb3M9c3Q7cG9zPGVuO3BvcysrKXtcblx0XHRcdFx0aWYgKHByb3AhPT0nY29sb3InKXtcblx0XHRcdFx0XHRvYmpbcHJvcF0ucHVzaCh0eXBlLmRhdGFbcHJvcF1bcG9zXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRvYmpbcHJvcF0ucHVzaChjb2xvcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHR5cGUubWV0aG9kKG9iaik7XG5cdH1cblxuXG5cdF9kcmF3T2JqZWN0cyhidWZmZXIsaW5fdmlldyl7XG5cdFx0Ly9kclxuXHRcdHRoaXMuaW1hZ2VzLmdsb2JhbHNbMF09dGhpcy5vZmZzZXRbMF07XG5cdFx0dGhpcy5pbWFnZXMuZ2xvYmFsc1sxXT10aGlzLm9mZnNldFsxXVxuXHRcdHRoaXMuaW1hZ2VzLmdsb2JhbHNbMl09dGhpcy54X3NjYWxlO1xuXHRcdHRoaXMuaW1hZ2VzLmdsb2JhbHNbM109dGhpcy55X3NjYWxlO1xuXHRcdGlmICh0aGlzLmltYWdlcy5kaXNwbGF5X2FzX2ltYWdlKXtcblx0XHRcdHRoaXMuX19kcmF3SW1hZ2VzKHRoaXMuaW1hZ2VzLnByb3BzKTtcblx0XHR9XG5cdFx0XG5cblx0XHR2YXIgZGF0YV9zb3VyY2U9aW5fdmlldz9cImRhdGFfaW5fdmlld1wiOlwiZGF0YVwiO1xuXHRcdGZvciAodmFyIGkgaW4gdGhpcy5vYmplY3RfdHlwZXMpe1xuXHRcdFx0dmFyIHR5cGUgPXRoaXMub2JqZWN0X3R5cGVzW2ldO1xuXHRcdFx0aWYgKHR5cGVbZGF0YV9zb3VyY2VdLmNvdW50PT09MCl7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYnVmZmVyKXtcblx0XHRcdFx0YnVmZmVyPXRoaXMucGlja2J1ZmZlcjtcblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdGJ1ZmZlcj1udWxsO1xuXHRcdFx0fVxuXHRcdFx0Ly9kb24ndCBkcmF3IGltYWdlcyB1bmxlc3MgYnVmZmVyXG5cdFx0XHRpZiAoIShidWZmZXIpICYmIGk9PTQgJiYgdGhpcy5pbWFnZXMuZGlzcGxheV9hc19pbWFnZSl7XG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHR2YXIgb2JqPXtcblx0XHRcdCAgIHN0YWdlX3dpZHRoOnRoaXMud2lkdGgsXG5cdFx0XHQgICBzdGFnZV9oZWlnaHQ6dGhpcy5oZWlnaHQsXG5cdFx0XHQgICB4X3NjYWxlOnRoaXMueF9zY2FsZSxcblx0XHRcdCAgIHlfc2NhbGU6dGhpcy55X3NjYWxlLFxuXHRcdFx0ICAgZ2xvYmFsczp0aGlzLmltYWdlcy5nbG9iYWxzLFxuXHRcdFx0ICAgYnVmZmVyOmJ1ZmZlcixcblx0XHRcdCAgIG9mZnNldDp0aGlzLm9mZnNldCxcblx0XHRcdCAgIGNvdW50OnR5cGVbZGF0YV9zb3VyY2VdLmNvdW50ICogdHlwZS52ZXJ0aWNlcyxcblx0XHRcdCAgIHByaW1pdGl2ZTp0eXBlLnByaW1pdGl2ZSxcblx0XHRcdCAgIGlzX2J1ZmZlcjpidWZmZXI/MTowXG5cblxuXHRcdFx0fTtcblx0XHRcdC8vZHVtbXkgdmFsdWVzXG5cdFx0XHRpZiAoaT09NCl7XG5cdFx0XHRcdG9iai53X2g9WzAsMF07XG5cdFx0XHRcdG9iai54X3k9WzAsMF07XG5cdFx0XHRcdG9iai50ZXh0PXRoaXMubG9hZGluZ19pbWFnZTtcblx0XHRcdFx0b2JqLmlzX2J1ZmZlcj0xO1xuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcblxuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgcHJvcCBpbiB0eXBlLnByb3BlcnRpZXMpe1xuXG5cdFx0XHRcdGlmIChidWZmZXIpe1xuXHRcdFx0XHRcdGlmIChwcm9wPT09J3BpY2tfY29sb3InKXtcblx0XHRcdFx0XHRcdG9ialsnY29sb3InXT10eXBlW2RhdGFfc291cmNlXVtwcm9wXTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocHJvcD09PSdjb2xvcicpe1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG9ialtwcm9wXT10eXBlW2RhdGFfc291cmNlXVtwcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdGlmIChwcm9wPT09J3BpY2tfY29sb3InKXtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRvYmpbcHJvcF09dHlwZVtkYXRhX3NvdXJjZV1bcHJvcF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHR5cGUubWV0aG9kKG9iaik7XG5cdFx0fVxuXHR9XG5cblx0ZmlsdGVyT2JqZWN0cyhrZXlzLG9iamVjdF90eXBlKXtcblx0XHRpZiAoISBvYmplY3RfdHlwZSl7XG5cdFx0XHRvYmplY3RfdHlwZT0wO1xuXHRcdH1cblx0XHQvL3RoaXMuaXNfZmlsdGVyZWQ9e307XG5cdFx0XG5cdFx0bGV0IG9ial90eXBlPSB0aGlzLm9iamVjdF90eXBlc1tvYmplY3RfdHlwZV07XG5cdFx0Zm9yKGxldCBvYmogb2YgdGhpcy5vYmplY3RzKXtcdFxuXHRcdFx0bGV0IGtleSA9b2JqWzJdO1xuXHRcdFx0aWYgKGtleXNba2V5XSl7XG5cdFx0XHRcdG9ial90eXBlLmRhdGEub3BhY2l0eVtvYmpbMF1dPTE7XG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHQvL3RoaXMuaXNfZmlsdGVyZWRba2V5XT10cnVlO1xuXHRcdFx0XHRvYmpfdHlwZS5kYXRhLm9wYWNpdHlbb2JqWzBdXT0wLjQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5pc19oaWRkZW5ba2V5XSl7XG5cdFx0XHRcdG9ial90eXBlLmRhdGEub3BhY2l0eVtvYmpbMF1dPTA7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cdH1cblxuXHRoaWRlT2JqZWN0cyhrZXlzLG9iamVjdF90eXBlKXtcblx0XHRpZiAoISBvYmplY3RfdHlwZSl7XG5cdFx0XHRvYmplY3RfdHlwZT0wO1xuXHRcdH1cblx0XHR0aGlzLmlzX2hpZGRlbj17fTtcblx0XHRcblx0XHRsZXQgb2JqX3R5cGU9IHRoaXMub2JqZWN0X3R5cGVzW29iamVjdF90eXBlXTtcblx0XHRmb3IobGV0IG9iaiBvZiB0aGlzLm9iamVjdHMpe1x0XG5cdFx0XHRsZXQga2V5ID1vYmpbMl07XG5cdFx0XHRpZiAoa2V5c1trZXldKXtcblx0XHRcdFx0XG5cdFx0XHRcdFx0b2JqX3R5cGUuZGF0YS5vcGFjaXR5W29ialswXV09MVxuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdHRoaXMuaXNfaGlkZGVuW2tleV09dHJ1ZTtcblx0XHRcdFx0b2JqX3R5cGUuZGF0YS5vcGFjaXR5W29ialswXV09MDtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XG5cdFx0XHRcblx0XHR9XG5cdH1cblxuXG5cblx0aW5pdGlhbGlzZSgpe1xuXHRcdGxldCBzZWxmID0gdGhpcztcblxuXHRcdHZhciBpbSA9IG5ldyBJbWFnZSgpXG4gICAgICAgXG4gICAgICAgIGltLm9ubG9hZD1mdW5jdGlvbigpe1xuICAgICAgICAgICAgICBzZWxmLmxvYWRpbmdfaW1hZ2U9c2VsZi5yZWdsLnRleHR1cmUoe2RhdGE6aW0sbWluOlwibGluZWFyXCJ9KTtcbiAgICAgICAgICAgICAgZm9yIChsZXQgcHJvcCBvZiBzZWxmLmltYWdlcy5wcm9wcyl7XG4gICAgICAgICAgICAgIFx0aWYgKCFwcm9wLnRleHQpe1xuICAgICAgICAgICAgICBcdFx0cHJvcC50ZXh0PXNlbGYubG9hZGluZ19pbWFnZTtcbiAgICAgICAgICAgICAgXHR9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi5yZWZyZXNoKCk7XG4gICAgXHRcdCAgc2VsZi5fZ2V0T2JqZWN0c0luVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGltLnNyYyA9IFwidG4xMy5wbmdcIlxuICAgIFxuXHR9XG5cblx0X2dldE9iamVjdEF0UG9zaXRpb24ocG9zaXRpb24pe1xuXHRcdHZhciBwaXhlbCA9IHRoaXMucmVnbC5yZWFkKHtcblx0XHRcdHg6IHBvc2l0aW9uWzBdLFxuXHRcdFx0eTogdGhpcy5oZWlnaHQgLSBwb3NpdGlvblsxXSxcblx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0aGVpZ2h0OiAxLFxuXHRcdFx0ZGF0YTogbmV3IFVpbnQ4QXJyYXkoNiksXG5cdFx0XHRmcmFtZWJ1ZmZlcjogdGhpcy5waWNrYnVmZmVyXG5cdFx0fSk7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5fZ2V0SW5kZXhGcm9tUkdCKHBpeGVsKTtcblx0XHRpZiAoaW5kZXg+MCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5vYmplY3RzW2luZGV4LTFdO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGNoZWNrSW1hZ2VzTG9hZGVkKCl7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdFxuXHRcdGlmICh0aGlzLmltYWdlc190b19sb2FkPjApe1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRzZWxmLnJlZnJlc2goKTtcblx0XHRcdFx0c2VsZi5jaGVja0ltYWdlc0xvYWRlZCgpO1xuXHRcdFx0fSwyMDAwKVxuXHRcdH1cblx0fVxuXG5cdF9nZXRPYmplY3RzSW5WaWV3KCl7XG5cdFx0dmFyIHRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdHZhciBtYXggPSB0aGlzLndpZHRoKnRoaXMuaGVpZ2h0KjQ7XG5cdFx0dmFyIHBpeGVscyA9IHRoaXMucmVnbC5yZWFkKHtcblx0XHRcdHg6IDAsXG5cdFx0XHR5OiAwLFxuXHRcdFx0d2lkdGg6dGhpcy53aWR0aCxcblx0XHRcdGhlaWdodDogdGhpcy5oZWlnaHQsXG5cdFx0XHRkYXRhOiBuZXcgVWludDhBcnJheShtYXgpLFxuXHRcdFx0ZnJhbWVidWZmZXI6IHRoaXMucGlja2J1ZmZlclxuXHRcdH0pO1xuXHRcdHZhciBvYmo9e307XG5cdFx0dGhpcy5fY2xlYXJPYmplY3RzSW5WaWV3KCk7XG5cdFx0Zm9yICh2YXIgaT0wO2k8bWF4LTQ7aSs9NCl7XG5cdFx0XHR2YXIgIGluZGV4ID0gcGl4ZWxzW2krMl0qNjU1MzYrcGl4ZWxzW2krMV0qMjU2K3BpeGVsc1tpXTtcblx0XHRcdGlmIChpbmRleD4wKXtcblx0XHRcdFx0aWYoIW9ialtpbmRleC0xXSl7XG5cdFx0XHRcdFx0b2JqW2luZGV4LTFdPXRydWU7XG5cdFx0XHRcdFx0dGhpcy5vYmplY3RzX2luX3ZpZXcrKztcblx0XHRcdFx0XHRpZiAodGhpcy5vYmplY3RzX2luX3ZpZXc+MTAwMDAwKXtcblx0XHRcdFx0XHRcdGZvciAodmFyIHQgaW4gdGhpcy5vYmplY3RfdHlwZXMpe1xuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IHRoaXMub2JqZWN0X3R5cGVzW3RdO1xuXHRcdFx0XHRcdFx0XHRmb3IgKHZhciBwcm9wIGluIHR5cGUucHJvcGVydGllcyl7ICAgICBcblx0XHRcdFx0XHRcdFx0XHR0eXBlLmRhdGFfaW5fdmlld1twcm9wXT0odHlwZS5kYXRhW3Byb3BdKTsgICAgICAgXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dHlwZS5kYXRhX2luX3ZpZXcuY291bnQ9dHlwZS5kYXRhLmNvdW50O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR0aGlzLm9iamVjdHNfaW5fdmlldz10aGlzLm9iamVjdHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICAgICAgXG5cdFx0XHR9ICAgICAgIFxuXHRcdH1cblx0XHQgLy9jb25zb2xlLmxvZyhcIm9iamVjdHMgaW4gdmlldyBvbGQgd2F5IFwiKyhEYXRlLm5vdygpLXRpbWUpKTtcblx0XHR2YXIgbCA9ICAtdGhpcy5vZmZzZXRbMF07XG5cdFx0dmFyIHIgPSBsKyh0aGlzLndpZHRoL3RoaXMueF9zY2FsZSk7XG5cdFx0dmFyIHQgPSAgLXRoaXMub2Zmc2V0WzFdO1xuXHRcdHZhciBiID0gdCsodGhpcy5oZWlnaHQvdGhpcy55X3NjYWxlKTtcblx0XHR2YXIgb2xkX2NvdW50PTA7XG5cdFx0dmFyIG5ld19jb3VudD0wO1xuXHRcdGZvciAodmFyIGk9MDtpPHRoaXMub2JqZWN0cy5sZW5ndGg7aSsrKXtcblx0XHRcdGlmIChvYmpbaV0pe1xuXHRcdFx0XHR2YXIgaXRlbT0gdGhpcy5vYmplY3RzW2ldO1xuXHRcdFx0XHR2YXIgdHlwZSA9dGhpcy5vYmplY3RfdHlwZXNbaXRlbVsxXV07XG5cdFx0XHRcdG5ld19jb3VudCsrO1xuXG5cdFx0XHRcdHZhciBzdD0gaXRlbVswXTtcblx0XHRcdFx0dmFyIGVuID1zdCt0eXBlLnZlcnRpY2VzO1xuXHRcdFx0XHRmb3IgKHZhciBwcm9wIGluIHR5cGUucHJvcGVydGllcyl7ICAgIFxuXHRcdFx0XHRcdGZvciAodmFyIHBvcz1zdDtwb3M8ZW47cG9zKyspe1xuXHRcdFx0XHRcdFx0dHlwZS5kYXRhX2luX3ZpZXdbcHJvcF0ucHVzaCh0eXBlLmRhdGFbcHJvcF1bcG9zXSk7ICAgICAgIFxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cdFx0XHRcdHR5cGUuZGF0YV9pbl92aWV3LmNvdW50Kys7XG5cblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cblx0XHRcdFx0dmFyIGl0ZW09IHRoaXMub2JqZWN0c1tpXTtcblx0XHRcdFx0dmFyIHR5cGUgPXRoaXMub2JqZWN0X3R5cGVzW2l0ZW1bMV1dO1xuXHRcdFx0XHR2YXIgYWN0X3BvcyA9dGhpcy5vYmplY3RfdHlwZXNbaXRlbVsxXV0uZGF0YS5wb3NpdGlvbltpdGVtWzBdXTtcblx0XHRcdFx0aWYgKGFjdF9wb3NbMF0+bCAmJiBhY3RfcG9zWzBdPHIgJiYgYWN0X3Bvc1sxXSA+dCAmJiBhY3RfcG9zWzFdPGIpe1xuXHRcdFx0XHRcdCBvbGRfY291bnQrKztcblx0XHRcdFx0XHR2YXIgc3Q9IGl0ZW1bMF07XG5cdFx0XHRcdFx0dmFyIGVuID1zdCt0eXBlLnZlcnRpY2VzO1xuXHRcdFx0XHRcdGZvciAodmFyIHByb3AgaW4gdHlwZS5wcm9wZXJ0aWVzKXsgICAgXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBwb3M9c3Q7cG9zPGVuO3BvcysrKXtcblx0XHRcdFx0XHRcdFx0dHlwZS5kYXRhX2luX3ZpZXdbcHJvcF0ucHVzaCh0eXBlLmRhdGFbcHJvcF1bcG9zXSk7ICAgICAgIFxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHlwZS5kYXRhX2luX3ZpZXcuY291bnQrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cblxuXG5cblx0XHR9XG5cdFx0Y29uc29sZS5sb2coXCJJbiB2aWV3OlwiK3RoaXMub2JqZWN0cy5sZW5ndGgrXCI6XCIrbmV3X2NvdW50K1wiOlwiK29sZF9jb3VudCk7XG5cblx0XHRjb25zb2xlLmxvZyhcInRpbWUgdG8gZ2V0IG9iamVjdHMgaW4gdmlldyBcIisoRGF0ZS5ub3coKS10aW1lKSk7ICAgIFxuXHR9XG5cblx0X2NsZWFyT2JqZWN0c0luVmlldygpe1xuXHRcdHRoaXMub2JqZWN0c19pbl92aWV3PTA7XG5cdFx0Zm9yICh2YXIgaSBpbiB0aGlzLm9iamVjdF90eXBlcyl7XG5cdFx0XHR2YXIgb2JqID0gdGhpcy5vYmplY3RfdHlwZXNbaV07XG5cblx0XHRcdFx0Zm9yICh2YXIgcHJvcCBpbiBvYmoucHJvcGVydGllcyl7XG5cdFx0XHRcdFx0b2JqLmRhdGFfaW5fdmlld1twcm9wXT1bXTtcblx0XHRcdFx0fSAgICAgXG5cblx0XHRcdG9iai5kYXRhX2luX3ZpZXcuY291bnQ9MDtcblx0XHR9ICBcblx0fVxuXG5cdGFkZEhhbmRsZXIoaGFuZGxlcl90eXBlLGhhbmRsZXIsbmFtZSl7XG5cdFx0dmFyIGhhbmRsZXJfZGljdCA9IHRoaXMuaGFuZGxlcnNbaGFuZGxlcl90eXBlXTtcblx0XHRpZiAoIWhhbmRsZXJfZGljdCl7XG5cdFx0XHR0aHJvdyBcIkhhbmRsZXIgTm90IFN1cHBvcnRlZFwiO1xuXHRcdH1cblx0XHRpZiAoIW5hbWUpe1xuXHRcdFx0bmFtZSA9IE9iamVjdC5rZXlzKGhhbmRsZXJfZGljdCkubGVuZ3RoO1xuXHRcdH1cblx0XHRoYW5kbGVyX2RpY3RbbmFtZV09aGFuZGxlcjtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdHJlbW92ZUhhbmRsZXIoaGFuZGxlcl90eXBlLG5hbWUpe1xuXHRcdHZhciBoYW5kbGVyX2RpY3QgPSB0aGlzLmhhbmRsZXJzW2hhbmRsZXJfdHlwZV07XG5cdFx0aWYgKCFoYW5kbGVyX2RpY3Qpe1xuXHRcdFx0dGhyb3cgXCJIYW5kbGVyIE5vdCBTdXBwb3J0ZWRcIjtcblx0XHR9XG5cdFx0ZGVsZXRlIGhhbmRsZXJfZGljdFsnbmFtZSddO1xuXG5cblx0fVxuXG5cdF9zZXRVcEJydXNoKG9yaWdpbil7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBkaXYgPSQoXCI8ZGl2PlwiKS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIixsZWZ0Om9yaWdpblswXSxcblx0XHRcdFx0XHRcdFx0XHRcdHRvcDpvcmlnaW5bMV0saGVpZ2h0OlwiMHB4XCIsd2lkdGg6XCIwcHhcIixcblx0XHRcdFx0XHRcdFx0XHRcdFwiYmFja2dyb3VuZC1jb2xvclwiOlwiZ3JheVwiLG9wYWNpdHk6MC4yfSlcblx0XHRcdFx0XHRcdFx0XHQgIC5hcHBlbmRUbyh0aGlzLmRpdl9jb250YWluZXIpO1xuXG5cdFx0ZGl2LmRyYWdnYWJsZSh7XG5cdFx0XHRzdGFydDpmdW5jdGlvbihldix1aSl7XG5cdFx0XHRcdHNlbGYuYnJ1c2gubW92aW5nPXRydWU7XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDpmdW5jdGlvbiAoZXYsdWkpe1xuXHRcdFx0XHRzZWxmLl9icnVzaGluZ1N0b3BwZWQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSkucmVzaXphYmxlKHtcblx0XHRcdGhhbmRsZXM6XCJhbGxcIixcblx0XHRcdHN0YXJ0OmZ1bmN0aW9uKGV2LHVpKXtcblx0XHRcdFx0c2VsZi5icnVzaC5tb3Zpbmc9dHJ1ZTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOmZ1bmN0aW9uIChldix1aSl7XG5cdFx0XHRcdHNlbGYuX2JydXNoaW5nU3RvcHBlZCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9KTtcblx0XHR0aGlzLmJydXNoPXtvcmlnaW46b3JpZ2luLGRpdjpkaXYscmVzaXppbmc6dHJ1ZX07XG5cdH1cblxuXHRjbGVhckJydXNoKCl7XG5cdFx0aWYgKHRoaXMuYnJ1c2gpe1xuXHRcdFx0dGhpcy5icnVzaC5kaXYucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLmJydXNoPW51bGw7XG5cdFx0fVxuXHR9XG5cblx0X2JydXNoaW5nU3RvcHBlZCgpe1xuXHRcdHRoaXMuYnJ1c2gucmVzaXppbmc9ZmFsc2U7XG5cdFx0bGV0IHBvcyA9IHRoaXMuYnJ1c2guZGl2LnBvc2l0aW9uKCk7XG5cdFx0bGV0IGx0ID10aGlzLl9nZXRBY3R1YWxQb3NpdGlvbihbcG9zLmxlZnQscG9zLnRvcF0pO1xuXHRcdGxldCBiciA9IHRoaXMuX2dldEFjdHVhbFBvc2l0aW9uKFtwb3MubGVmdCt0aGlzLmJydXNoLmRpdi53aWR0aCgpLHBvcy50b3ArdGhpcy5icnVzaC5kaXYuaGVpZ2h0KCldKTtcblx0XHRsZXQgaW5mbyA9IHt4X21pbjpsdFswXSx4X21heDpiclswXSx5X21pbjpsdFsxXSx5X21heDpiclsxXX07XG5cdFx0Zm9yICh2YXIgaSBpbiB0aGlzLmhhbmRsZXJzLmJydXNoX3N0b3BwZWQpe1xuXHRcdFx0dGhpcy5oYW5kbGVycy5icnVzaF9zdG9wcGVkW2ldKGluZm8pO1xuXHRcdH1cblxuXHR9XG5cblxuXHRfYWRkSGFuZGxlcnMoKXtcblx0XHR2YXIgc2VsZj10aGlzO1xuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5tb3VzZW1vdmUoZnVuY3Rpb24oZSl7XG5cdFx0XHRpZiAoc2VsZi5icnVzaCl7XG5cdFx0XHRcdGlmIChzZWxmLmJydXNoLnJlc2l6aW5nKXtcblx0XHRcdFx0XHRsZXQgb3JpZ2luID1zZWxmLmJydXNoLm9yaWdpbjtcblx0XHRcdFx0XHRsZXQgbm93ID0gc2VsZi5fZ2V0TW91c2VQb3NpdGlvbihlKTtcblx0XHRcdFx0XHRsZXQgbGVmdCA9IE1hdGgucm91bmQoKG9yaWdpblswXTxub3dbMF0/b3JpZ2luWzBdOm5vd1swXSkpK1wicHhcIjtcblx0XHRcdFx0XHRsZXQgdG9wID1NYXRoLnJvdW5kKChvcmlnaW5bMV08bm93WzFdP29yaWdpblsxXTpub3dbMV0pKStcInB4XCI7XG5cdFx0XHRcdFx0bGV0IHdpZHRoID0gKE1hdGguYWJzKG9yaWdpblswXS1ub3dbMF0pKStcInB4XCI7XG5cdFx0XHRcdFx0bGV0IGhlaWdodD0gKE1hdGguYWJzKG9yaWdpblsxXS1ub3dbMV0pKStcInB4XCI7XG5cdFx0XHRcdFx0c2VsZi5icnVzaC5kaXYuY3NzKHt0b3A6dG9wLGxlZnQ6bGVmdCxoZWlnaHQ6aGVpZ2h0LHdpZHRoOndpZHRofSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKHNlbGYuYnJ1c2gubW92aW5nKXtcblx0XHRcdFx0XHRzZWxmLmRyYWdnaW5nPWZhbHNlO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0Ly9pcyB0aGlzIGEgZHJhZyBvciBqdXN0IGEgY2xpY2sgd2l0aG91dCB0aGUgbW91c2UgbW92aW5nXG5cdFx0XHRpZiAoc2VsZi5tb3VzZV9wb3NpdGlvbiAmJiAgISBzZWxmLmRyYWdnaW5nKXtcblx0XHRcdFx0dmFyIHhfYW1vdW50PSAoZS5wYWdlWC1zZWxmLm1vdXNlX3Bvc2l0aW9uWzBdKS9zZWxmLnhfc2NhbGU7XG5cdFx0XHRcdHZhciB5X2Ftb3VudCA9IChlLnBhZ2VZLXNlbGYubW91c2VfcG9zaXRpb25bMV0pL3NlbGYueV9zY2FsZTtcblx0XHRcdFx0aWYgKE1hdGguYWJzKHhfYW1vdW50KSA+IDMgfHwgTWF0aC5hYnMoeV9hbW91bnQpPjMpe1xuXHRcdFx0XHRcdHNlbGYuZHJhZ2dpbmcgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzZWxmLmRyYWdnaW5nKXtcblx0XHRcdFx0dmFyIHhfYW1vdW50PSAoZS5wYWdlWC1zZWxmLm1vdXNlX3Bvc2l0aW9uWzBdKS9zZWxmLnhfc2NhbGU7XG5cdFx0XHRcdHZhciB5X2Ftb3VudCA9IChlLnBhZ2VZLXNlbGYubW91c2VfcG9zaXRpb25bMV0pL3NlbGYueV9zY2FsZTtcblx0XHRcdFx0aWYgKHNlbGYub2JqZWN0X2NsaWNrZWQpe1xuXG5cdFx0XHRcdFx0dmFyIHR5cGUgPXNlbGYub2JqZWN0X3R5cGVzW3NlbGYub2JqZWN0X2NsaWNrZWRbMV1dO1xuXHRcdFx0XHRcdHZhciBzdGFydCA9IHNlbGYub2JqZWN0X2NsaWNrZWRbMF07XG5cdFx0XHRcdFx0dmFyIGVuZCA9IHN0YXJ0K3R5cGUudmVydGljZXM7XG5cblx0XHRcdFx0XHRmb3IgKHZhciBpbmRleD1zdGFydDtpbmRleDxlbmQ7aW5kZXgrKyl7XG5cdFx0XHRcdFx0XHR0eXBlLmRhdGEucG9zaXRpb25baW5kZXhdWzBdKz14X2Ftb3VudDtcblx0XHRcdFx0XHRcdHR5cGUuZGF0YS5wb3NpdGlvbltpbmRleF1bMV0rPXlfYW1vdW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5vYmplY3RfY2xpY2tlZFsxXT09NCl7XG5cdFx0XHRcdFx0XHRsZXQgcF9pbmRleCA9IHN0YXJ0LzY7XG5cdFx0XHRcdFx0XHRzZWxmLmltYWdlcy5wcm9wc1twX2luZGV4XS54X3k9W3R5cGUuZGF0YS5wb3NpdGlvbltzdGFydF1bMF0sdHlwZS5kYXRhLnBvc2l0aW9uW3N0YXJ0XVsxXV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYucmVmcmVzaCh0cnVlKTtcblx0XHRcdFx0XHQvL3NlbGYuX2RyYXdMYWJlbHMoKTtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2V7XG5cblx0XHRcdFx0XHRzZWxmLm9mZnNldFswXSs9eF9hbW91bnQ7XG5cdFx0XHRcdFx0c2VsZi5vZmZzZXRbMV0rPXlfYW1vdW50O1xuXHRcdFx0XHRcdHNlbGYuX2RyYXdPYmplY3RzKGZhbHNlKTsgIFxuXG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5tb3VzZV9wb3NpdGlvblsxXT1lLnBhZ2VZO1xuXHRcdFx0XHRzZWxmLm1vdXNlX3Bvc2l0aW9uWzBdPWUucGFnZVg7ICAgICAgXG5cdFx0XHR9XG5cdFx0XHQvL25vIGRyYWcgZXZlbnQgZ29pbmcgb24gY2FsbCBhbnkgbGlzdG5lcnMgaWYgbW91c2Ugb3Zlci9vdXQgYW4gb2JqZWN0XG5cdFx0XHRlbHNle1xuXHRcdFx0XHR2YXIgcG9zaXRpb24gPXNlbGYuX2dldE1vdXNlUG9zaXRpb24oZSk7XG5cdFx0XHRcdHZhciBvYmogPSBzZWxmLl9nZXRPYmplY3RBdFBvc2l0aW9uKHBvc2l0aW9uKTtcblx0XHRcdFx0aWYgKG9iaiAmJiAhc2VsZi5vYmplY3RfbW91c2Vfb3Zlcil7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSBpbiBzZWxmLmhhbmRsZXJzWydvYmplY3Rfb3ZlciddKXtcblx0XHRcdFx0XHRcdHNlbGYuaGFuZGxlcnMub2JqZWN0X292ZXJbaV0ob2JqWzJdKTsgICAgICAgICAgICAgICAgICBcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5vYmplY3RfbW91c2Vfb3Zlcj1vYmo7XG5cdFx0XHRcdFx0aWYgKHNlbGYubW91c2Vfb3Zlcl9jb2xvcil7XG5cdFx0XHRcdFx0XHRzZWxmLm9iamVjdF90ZW1wX2NvbG9yPXNlbGYuZ2V0T2JqZWN0Q29sb3Iob2JqWzJdKTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0T2JqZWN0Q29sb3Iob2JqWzJdLHNlbGYubW91c2Vfb3Zlcl9jb2xvcik7XG5cdFx0XHRcdFx0XHRzZWxmLnJlZnJlc2godHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCFvYmogJiYgc2VsZi5vYmplY3RfbW91c2Vfb3Zlcil7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSBpbiBzZWxmLmhhbmRsZXJzWydvYmplY3Rfb3V0J10pe1xuXHRcdFx0XHRcdFx0c2VsZi5oYW5kbGVycy5vYmplY3Rfb3V0W2ldKHNlbGYub2JqZWN0X21vdXNlX292ZXJbMl0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5tb3VzZV9vdmVyX2NvbG9yKXtcblx0XHRcdFx0XHRcdHNlbGYuc2V0T2JqZWN0Q29sb3Ioc2VsZi5vYmplY3RfbW91c2Vfb3ZlclsyXSxzZWxmLm9iamVjdF90ZW1wX2NvbG9yKTtcblx0XHRcdFx0XHRcdHNlbGYucmVmcmVzaCh0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5vYmplY3RfbW91c2Vfb3Zlcj1udWxsO1xuXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9tb3ZlIGRpcmVjdGx5IGZyb20gb25lIG9iamVjdCB0byBhbm90aGVyXG5cdFx0XHRcdGVsc2UgaWYob2JqICYmIChvYmpbMl0hPT1zZWxmLm9iamVjdF9tb3VzZV9vdmVyWzJdKSl7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSBpbiBzZWxmLmhhbmRsZXJzWydvYmplY3Rfb3ZlciddKXsgICAgXG5cdFx0XHRcdFx0XHRzZWxmLmhhbmRsZXJzLm9iamVjdF9vdmVyW2ldKG9ialsyXSk7ICBcblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdGZvciAodmFyIGkgaW4gc2VsZi5oYW5kbGVyc1snb2JqZWN0X291dCddKXtcblx0XHRcdFx0XHRcdHNlbGYuaGFuZGxlcnMub2JqZWN0X291dFtpXShzZWxmLm9iamVjdF9tb3VzZV9vdmVyWzJdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNlbGYubW91c2Vfb3Zlcl9jb2xvcil7XG5cdFx0XHRcdFx0XHRzZWxmLnNldE9iamVjdENvbG9yKHNlbGYub2JqZWN0X21vdXNlX292ZXJbMl0sc2VsZi5vYmplY3RfdGVtcF9jb2xvcik7XG5cdFx0XHRcdFx0XHRzZWxmLm9iamVjdF90ZW1wX2NvbG9yPXNlbGYuZ2V0T2JqZWN0Q29sb3Iob2JqWzJdKTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0T2JqZWN0Q29sb3Iob2JqWzJdLHNlbGYubW91c2Vfb3Zlcl9jb2xvcik7XG5cdFx0XHRcdFx0XHRzZWxmLnJlZnJlc2godHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYub2JqZWN0X21vdXNlX292ZXI9b2JqO1xuXG5cblxuXG5cblx0XHRcdFx0fSAgICAgICAgIFxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5tb3VzZXVwKGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHQvL2p1c3QgYSBjbGljayBldmVudCAtIGluZm9ybSBoYW5kbGVyc1xuXHRcdFx0aWYgKHNlbGYuYnJ1c2ggJiYgc2VsZi5icnVzaC5yZXNpemluZyl7XG5cdFx0XHRcdHNlbGYuX2JydXNoaW5nU3RvcHBlZCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXNlbGYuZHJhZ2dpbmcpe1xuXHRcdFx0XHRpZiAoc2VsZi5vYmplY3RfY2xpY2tlZCl7XG5cdFx0XHRcdFx0dmFyIHBvc2l0aW9uID1zZWxmLl9nZXRNb3VzZVBvc2l0aW9uKGV2dCk7XG5cdFx0XHRcdFx0dmFyIG9iaiA9IHNlbGYuX2dldE9iamVjdEF0UG9zaXRpb24ocG9zaXRpb24pO1xuXHRcdFx0XHRcdGlmIChvYmope1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSBpbiBzZWxmLmhhbmRsZXJzLm9iamVjdF9jbGlja2VkKXtcblx0XHRcdFx0XHRcdFx0c2VsZi5oYW5kbGVycy5vYmplY3RfY2xpY2tlZFtpXShvYmpbMl0pO1xuXHRcdFx0XHRcdFx0fSAgXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gICAgICAgIFxuXHRcdFx0ZWxzZXtcblx0XHRcdFx0Ly9hbiBvYmplY3QgaGFzIGZpbnNoZWQgaXRzIGRyYWdcblx0XHRcdFx0aWYgKHNlbGYub2JqZWN0X2NsaWNrZWQpe1xuXHRcdFx0XHRcdHNlbGYub2JqZWN0X2NsaWNrZWQ9bnVsbDtcblx0XHRcdFx0XHRzZWxmLnJlZnJlc2godHJ1ZSk7ICAgICAgICAgICAgICBcblx0XHRcdFx0fVxuXHRcdFx0XHQvL3VwZGF0ZSB3aGljaCBvYmplY3RzIGFyZSBub3cgaW4gdmlld1xuXHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdHNlbGYuX2RyYXdQaWNrQnVmZmVyKCk7XG5cdFx0XHRcdFx0c2VsZi5fZ2V0T2JqZWN0c0luVmlldygpO1xuXHRcdFx0XHRcdGlmIChzZWxmLmJydXNoKXtcblx0XHRcdFx0XHRcdHNlbGYuX2JydXNoaW5nU3RvcHBlZCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0ICAgc2VsZi5yZWZyZXNoKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZHJhZ2dpbmc9ZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRzZWxmLm9iamVjdF9jbGlja2VkPW51bGw7XG5cdFx0XHRzZWxmLm1vdXNlX3Bvc2l0aW9uPW51bGw7ICAgXG5cdFx0fSk7ICBcblxuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5iaW5kKCdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJywgZnVuY3Rpb24oZXZlbnQpe1xuXHRcdFx0dmFyIHBvc2l0aW9uID1zZWxmLl9nZXRBY3R1YWxQb3NpdGlvbihzZWxmLl9nZXRNb3VzZVBvc2l0aW9uKGV2ZW50KSk7XG5cdFx0aWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSA+IDAgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5kZXRhaWwgPCAwKSB7XG5cdFx0XHRcdHNlbGYuem9vbV9hbW91bnQrPTAuMDU7XG5cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRcdHNlbGYuem9vbV9hbW91bnQtPTAuMDU7XG5cblx0XHRcdH1cblxuXHRcdFx0c2VsZi54X3NjYWxlKj0oMStzZWxmLnpvb21fYW1vdW50KTtcblx0XHRcdHNlbGYueV9zY2FsZSo9KDErc2VsZi56b29tX2Ftb3VudCk7XG5cdFx0XHRcblx0XHRcdC8vc2VsZi5pbWFnZXMuZGlzcGxheV9hc19pbWFnZT1zZWxmLnhfc2NhbGU+MC4wNDtcblx0XHRcdFxuXHRcdFx0dmFyIG5ld19wb3NpdGlvbj1zZWxmLl9nZXRBY3R1YWxQb3NpdGlvbihzZWxmLl9nZXRNb3VzZVBvc2l0aW9uKGV2ZW50KSk7XG5cdFx0XHRzZWxmLm9mZnNldFswXSs9bmV3X3Bvc2l0aW9uWzBdLXBvc2l0aW9uWzBdO1xuXHRcdFx0c2VsZi5vZmZzZXRbMV0rPW5ld19wb3NpdGlvblsxXS1wb3NpdGlvblsxXTtcblx0XHRcdGlmICghc2VsZi5sb29wKXtcblx0XHRcdFx0c2VsZi5sb29wID0gc2VsZi5yZWdsLmZyYW1lKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHNlbGYuX2RyYXdPYmplY3RzKGZhbHNlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblxuXHRcdFx0XG5cdFx0XHQvL2NsZWFyIHRoZSB0aW1lb3V0IHVzZXIgaGFzIG5vdCBmaW5pc2hlZCB6b29taW5nXG5cdFx0XHRjbGVhclRpbWVvdXQoJC5kYXRhKHRoaXMsICd0aW1lcicpKTtcblx0XHRcdC8vd2hlbiB1c2VyIGZpbmlzaGVzIGNhbGwgdGhlIGVzeHBlbnNpdmUgbWV0aG9kcztcblx0XHRcdCQuZGF0YSh0aGlzLCAndGltZXInLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLnpvb21fYW1vdW50PTA7XG5cdFx0XHRcdHNlbGYubG9vcC5jYW5jZWwoKTtcblx0XHRcdFx0c2VsZi5sb29wPW51bGw7XG5cdFx0XHRcdHNlbGYuX2RyYXdQaWNrQnVmZmVyKGZhbHNlKTtcblx0XHRcdFx0c2VsZi5fZ2V0T2JqZWN0c0luVmlldygpO1xuXHRcdFx0XHRpZiAoc2VsZi5icnVzaCl7XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJlZnJlc2godHJ1ZSk7XG5cdFx0XHR9LCAzNTApKTtcblxuXHRcdH0pO1xuXHRcdHRoaXMuZGl2X2NvbnRhaW5lci5tb3VzZWRvd24oZnVuY3Rpb24gKGV2dCl7XG5cdFx0XHRpZiAoZXZ0LndoaWNoPT09Myl7XG5cdFx0XHRcdC8vYWRkIHJpZ2h0IGNsaWNrIGJlaGF2aW91clxuXHRcdFx0fVxuXHRcdFx0Ly9jcmVhdGUgYnJ1c2hcblx0XHRcdGlmIChldnQuc2hpZnRLZXkgJiYgIShzZWxmLmJydXNoKSl7XG5cdFx0XHRcdGxldCBvcmlnaW4gPXNlbGYuX2dldE1vdXNlUG9zaXRpb24oZXZ0KTtcblx0XHRcdFx0c2VsZi5fc2V0VXBCcnVzaChvcmlnaW4pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0Ly9nZXQgbW91c2UgcG9zaXRpb24gYW5kIHdvcmsgb3V0IGlmIGFuIG9iamVjdCB3YXMgY2xpY2tlZFxuXHRcdFx0dmFyIHBvc2l0aW9uID1zZWxmLl9nZXRNb3VzZVBvc2l0aW9uKGV2dCk7XG5cdFx0XHRzZWxmLm1vdXNlX3Bvc2l0aW9uPSBbZXZ0LnBhZ2VYLCBldnQucGFnZVldO1xuXHRcdFx0dmFyIG9iaiA9IHNlbGYuX2dldE9iamVjdEF0UG9zaXRpb24ocG9zaXRpb24pO1xuXHRcdFx0XG5cdFx0XHRpZiAob2JqKXtcblx0XHRcdFx0c2VsZi5vYmplY3RfY2xpY2tlZD0gb2JqO1xuXHRcdFx0fVxuXG5cdFx0fSk7XG5cblx0fVxuXG5cblx0X2luaXREcmF3TWV0aG9kcygpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vbG9hZGluZyBpbWFnZXNcblx0XHRcblxuXG5cdFx0dGhpcy5fX2RyYXdDaXJjbGVzID0gdGhpcy5yZWdsKHtcblx0XHRcdGZyYWc6IFxuXHRcdFx0XHQgJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXFxuXHRcdFx0dmFyeWluZyB2ZWMzIGZyYWdDb2xvcjtcXG5cXFxuXHRcdFx0dmFyeWluZyBmbG9hdCBvcDtcXG5cXFxuXHRcdFx0XHRcdHZhcnlpbmcgZmxvYXQgc19hbmdsZTtcXG5cXFxuXHRcdFx0XHRcdHZhcnlpbmcgZmxvYXQgZV9hbmdsZTtcXG5cXFxuXHRcdFx0dm9pZCBtYWluKCl7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZmxvYXQgciA9IDAuMDtcXG5cXFxuXHRcdFx0XHRcdFx0XHR2ZWMyIGN4eSA9IDIuMCAqIGdsX1BvaW50Q29vcmQgLSAxLjA7XFxuXFxcblx0XHRcdFx0XHRcdFx0ciA9IGRvdChjeHksIGN4eSk7XFxuXFxcblx0XHRcdFx0XHRcdFx0aWYgKHIgPiAxLjApIHtcXG5cXFxuXHRcdFx0XHRcdFx0XHRcdGRpc2NhcmQ7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XFxuXFxcblx0XHRcdFx0XHRcdFx0fVxcblxcXG5cdFx0XHRcdFx0XHRcdGVsc2V7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRpZiAoc19hbmdsZSAhPSAxMC4wKXtcXG5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0ZmxvYXQgYW5nbGU9MC4wO1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRhbmdsZSA9YXRhbihjeHlbMV0sY3h5WzBdKTtcXG5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFuZ2xlPnNfYW5nbGUgJiYgYW5nbGUgPCBlX2FuZ2xlKXtcXG5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZihyPjAuNzUpe1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yPXZlYzQoMC4xLDAuMSwwLjEsb3ApO1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbHNle1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChmcmFnQ29sb3Isb3ApO1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0fVxcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRlbHNle1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRpc2NhcmQ7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0XHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0XHRcdFx0XHRcdGVsc2V7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRcdGlmKHI+MC43NSl7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yPXZlYzQoMC4xLDAuMSwwLjEsb3ApO1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRcdGVsc2V7XFxuXFxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChmcmFnQ29sb3Isb3ApO1xcblxcXG5cdFx0XHRcdFx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0XHRcdFx0fVxcblxcXG5cdFx0XHRcdFx0fVxcbidcblxuXHRcdFx0XHRcdCxcblx0XHRcdHZlcnQ6IFxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcblxcXG5cdFx0XHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcXG5cXFxuXHRcdFx0YXR0cmlidXRlIGZsb2F0IG9wYWNpdHk7XFxuXFxcblx0XHRcdFx0XHRhdHRyaWJ1dGUgbWF0NCBzZWdtZW50czE7XFxuXFxcblx0XHRcdHZhcnlpbmcgdmVjMyBmcmFnQ29sb3I7XFxuXFxcblx0XHRcdHZhcnlpbmcgZmxvYXQgb3A7XFxuXFxcblx0XHRcdFx0XHRhdHRyaWJ1dGUgZmxvYXQgc3RhcnRfYW5nbGU7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHNfYW5nbGU7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIGZsb2F0IGVfYW5nbGU7XFxuXFxcblx0XHRcdFx0XHRhdHRyaWJ1dGUgZmxvYXQgZW5kX2FuZ2xlO1xcblxcXG5cdFx0XHRhdHRyaWJ1dGUgZmxvYXQgcmFkaXVzO1xcblxcXG5cdFx0XHRcdFx0dW5pZm9ybSBmbG9hdCB4X3NjYWxlO1xcblxcXG5cdFx0XHRcdFx0dW5pZm9ybSBmbG9hdCB5X3NjYWxlO1xcblxcXG5cdFx0XHRcdFx0dW5pZm9ybSB2ZWMyIG9mZnNldDtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3RhZ2VfaGVpZ2h0O1xcblxcXG5cdFx0XHRcdFx0dW5pZm9ybSBmbG9hdCBzdGFnZV93aWR0aDtcXG5cXFxuXHRcdFx0dmVjMiBub3JtYWxpemVDb29yZHModmVjMiBwb3NpdGlvbil7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZmxvYXQgeCA9IChwb3NpdGlvblswXStvZmZzZXRbMF0pKnhfc2NhbGU7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZmxvYXQgeSA9IChwb3NpdGlvblsxXStvZmZzZXRbMV0pKnlfc2NhbGU7XFxuXFxcblx0XHRcdFx0cmV0dXJuIHZlYzIoMi4wICogKCh4IC8gc3RhZ2Vfd2lkdGgpIC0gMC41KSwtKDIuMCAqICgoeSAvIHN0YWdlX2hlaWdodCkgLSAwLjUpKSk7XFxuXFxcblx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdHZvaWQgbWFpbigpIHtcXG5cXFxuXHRcdFx0ICAgaWYgKG9wYWNpdHk9PTAuMCl7XFxuXFxcblx0XHRcdCAgICAgICAgIHJldHVybjtcXG5cXFxuXHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0Z2xfUG9pbnRTaXplID0gcmFkaXVzKnhfc2NhbGU7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZnJhZ0NvbG9yID0gY29sb3I7XFxuXFxcblx0XHRcdFx0XHRcdFx0b3A9b3BhY2l0eTtcXG5cXFxuXHRcdFx0XHRcdFx0XHRzX2FuZ2xlPXN0YXJ0X2FuZ2xlO1xcblxcXG5cdFx0XHRcdFx0XHRcdGVfYW5nbGUgPSBlbmRfYW5nbGU7XFxuXFxcblx0XHRcdFx0XHRcdFx0dmVjMiByZWFsX3Bvc2l0aW9uID0gbm9ybWFsaXplQ29vcmRzKHBvc2l0aW9uKTtcXG5cXFxuXHRcdFx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQocmVhbF9wb3NpdGlvbiwgMC4wLCAxLjApO1xcblxcXG5cdFx0XHR9XFxuJ1xuXHRcdFx0LFxuXG5cdFx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRcdHBvc2l0aW9uOiBzZWxmLnJlZ2wucHJvcCgncG9zaXRpb24nKSxcblx0XHRcdFx0Y29sb3I6IHNlbGYucmVnbC5wcm9wKCdjb2xvcicpLFxuXHRcdFx0XHRcdFx0XHRyYWRpdXM6c2VsZi5yZWdsLnByb3AoJ3JhZGl1cycpLFxuXHRcdFx0XHRcdFx0XHRzdGFydF9hbmdsZTpzZWxmLnJlZ2wucHJvcCgnc3RhcnRfYW5nbGUnKSxcblx0XHRcdFx0XHRcdFx0ZW5kX2FuZ2xlOnNlbGYucmVnbC5wcm9wKFwiZW5kX2FuZ2xlXCIpLFxuXHRcdFx0XHRcdFx0XHRvcGFjaXR5OnNlbGYucmVnbC5wcm9wKFwib3BhY2l0eVwiKVxuXG5cdFx0XHR9LFxuXG5cdFx0XG5cblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdFx0XHRcdCAgeF9zY2FsZTpzZWxmLnJlZ2wucHJvcCgneF9zY2FsZScpLFxuXHRcdFx0XHRcdFx0XHQgIHlfc2NhbGU6c2VsZi5yZWdsLnByb3AoJ3lfc2NhbGUnKSxcblx0XHRcdFx0XHRcdFx0ICBzdGFnZV93aWR0aDogc2VsZi5yZWdsLnByb3AoJ3N0YWdlX3dpZHRoJyksXG5cdFx0XHRcdFx0XHRcdCAgc3RhZ2VfaGVpZ2h0OiBzZWxmLnJlZ2wucHJvcCgnc3RhZ2VfaGVpZ2h0JyksXG5cdFx0XHRcdFx0XHRcdCAgb2Zmc2V0OnNlbGYucmVnbC5wcm9wKFwib2Zmc2V0XCIpXG5cdFx0XHRcdFx0XHQgIH0sXG5cblx0XHRcdGNvdW50OiAgc2VsZi5yZWdsLnByb3AoJ2NvdW50JyksXG5cdFx0XHRwcmltaXRpdmU6IHNlbGYucmVnbC5wcm9wKCdwcmltaXRpdmUnKSxcblx0XHRcdFx0XHRmcmFtZWJ1ZmZlcjpzZWxmLnJlZ2wucHJvcChcImJ1ZmZlclwiKVxuXHRcdH0pO1xuXHRcdHRoaXMub2JqZWN0X3R5cGVzWzBdWydtZXRob2QnXT10aGlzLl9fZHJhd0NpcmNsZXM7XG5cblx0XHR0aGlzLl9fZHJhd0xpbmVzID0gdGhpcy5yZWdsKHtcblxuXHRcdFx0XHQvLyBmcmFnbWVudCBzaGFkZXJcblx0XHRcdFx0ZnJhZzogJyBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxcblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMyBmcmFnQ29sb3I7XFxuXFxcblx0XHRcdFx0XHRcdHZvaWQgbWFpbiAoKSB7XFxuXFxcblx0XHRcdFx0XHRcdFx0IGdsX0ZyYWdDb2xvciA9IHZlYzQoZnJhZ0NvbG9yLDEpO1xcblxcXG5cdFx0XHRcdFx0XHR9XFxuJyxcblxuXG5cdFx0XHRcdHZlcnQ6ICdcXFxuXHRcdFx0XHRcdFx0YXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuXFxcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xcblxcXG5cdFx0XHRcdFx0XHR1bmlmb3JtIGZsb2F0IHhfc2NhbGU7XFxuXFxcblx0XHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgeV9zY2FsZTtcXG5cXFxuXHRcdFx0XHRcdFx0dW5pZm9ybSB2ZWMyIG9mZnNldDtcXG5cXFxuXHRcdFx0XHRcdFx0dW5pZm9ybSBmbG9hdCBzdGFnZV9oZWlnaHQ7XFxuXFxcblx0XHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3RhZ2Vfd2lkdGg7XFxuXFxcblx0XHRcdFx0XHRcdHZhcnlpbmcgdmVjMyBmcmFnQ29sb3I7XFxuXFxcblx0XHRcdFx0XHRcdHZlYzIgbm9ybWFsaXplQ29vcmRzKHZlYzIgcG9zaXRpb24pe1xcblxcXG5cdFx0XHRcdFx0XHRcdGZsb2F0IHggPSAocG9zaXRpb25bMF0rb2Zmc2V0WzBdKSp4X3NjYWxlO1xcblxcXG5cdFx0XHRcdFx0XHRcdGZsb2F0IHkgPSAocG9zaXRpb25bMV0rb2Zmc2V0WzFdKSp5X3NjYWxlO1xcblxcXG5cdFx0XHRcdHJldHVybiB2ZWMyKDIuMCAqICgoeCAvIHN0YWdlX3dpZHRoKSAtIDAuNSksLSgyLjAgKiAoKHkgLyBzdGFnZV9oZWlnaHQpIC0gMC41KSkpO1xcblxcXG5cdFx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0XHRcdHZvaWQgbWFpbiAoKSB7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZnJhZ0NvbG9yPWNvbG9yO1xcblxcXG5cdFx0XHRcdFx0XHRcdHZlYzIgbm9ybV9wb3MgPW5vcm1hbGl6ZUNvb3Jkcyhwb3NpdGlvbik7XFxuXFxcblx0XHRcdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KG5vcm1fcG9zLCAwLjAsIDEuMCk7XFxuXFxcblx0XHRcdFx0XHRcdH1cXG4nLFxuXG5cblx0XHRcdFx0YXR0cmlidXRlczoge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiBzZWxmLnJlZ2wucHJvcChcInBvc2l0aW9uXCIpLFxuXHRcdFx0XHRcdGNvbG9yOnNlbGYucmVnbC5wcm9wKFwiY29sb3JcIilcblxuXG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHQgIHhfc2NhbGU6c2VsZi5yZWdsLnByb3AoJ3hfc2NhbGUnKSxcblx0XHRcdFx0XHQgIHlfc2NhbGU6c2VsZi5yZWdsLnByb3AoJ3lfc2NhbGUnKSxcblx0XHRcdFx0XHQgIHN0YWdlX3dpZHRoOiBzZWxmLnJlZ2wucHJvcCgnc3RhZ2Vfd2lkdGgnKSxcblx0XHRcdFx0XHQgIHN0YWdlX2hlaWdodDogc2VsZi5yZWdsLnByb3AoJ3N0YWdlX2hlaWdodCcpLFxuXHRcdFx0XHRcdCAgb2Zmc2V0OnNlbGYucmVnbC5wcm9wKFwib2Zmc2V0XCIpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHByaW1pdGl2ZTpzZWxmLnJlZ2wucHJvcChcInByaW1pdGl2ZVwiKSxcblx0XHRcdFx0ZnJhbWVidWZmZXI6c2VsZi5yZWdsLnByb3AoXCJidWZmZXJcIiksXG5cdFx0XHRcdGNvdW50OnNlbGYucmVnbC5wcm9wKFwiY291bnRcIilcblxuXG5cblx0XHRcdH0pO1xuXHRcdHRoaXMub2JqZWN0X3R5cGVzWzFdWydtZXRob2QnXT10aGlzLl9fZHJhd0xpbmVzO1xuXHRcdHRoaXMub2JqZWN0X3R5cGVzWzJdWydtZXRob2QnXT10aGlzLl9fZHJhd0xpbmVzO1xuXHRcdHRoaXMuX19kcmF3U3F1YXJlcyA9IHRoaXMucmVnbCh7XG5cdFx0XHRmcmFnOiBcblx0XHRcdFx0ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIHZlYzMgZnJhZ0NvbG9yO1xcblxcXG5cdFx0XHRcdFx0dmFyeWluZyBmbG9hdCByX2NsaXA7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIGZsb2F0IGJfY2xpcDtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gaW50IGlzX2J1ZmZlcjsgXFxuXFxcblx0XHRcdHZvaWQgbWFpbigpe1xcblxcXG5cdFx0XHRcdFx0XHRpZiAoZ2xfUG9pbnRDb29yZFswXT5yX2NsaXAgfHwgZ2xfUG9pbnRDb29yZFsxXT5iX2NsaXApe1xcblxcXG5cdFx0XHRcdFx0XHRcdGRpc2NhcmQ7XFxuXFxcblx0XHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0XHRcdFx0ZmxvYXQgcl9ib3JkZXI9Yl9jbGlwKjAuMDI7XFxuXFxcblx0XHRcdFx0XHRcdGZsb2F0IGJfYm9yZGVyPWJfY2xpcCowLjAyO1xcblxcXG5cdFx0XHRcdFx0XHRpZiAoaXNfYnVmZmVyPT0wICAmJiAoZ2xfUG9pbnRDb29yZFswXTxyX2JvcmRlciB8fCBnbF9Qb2ludENvb3JkWzBdPnJfY2xpcC1yX2JvcmRlciB8fCBnbF9Qb2ludENvb3JkWzFdPGJfYm9yZGVyIHx8IGdsX1BvaW50Q29vcmRbMV0+Yl9jbGlwLWJfYm9yZGVyKSl7XFxuXFxcblx0XHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCgwLjEsMC4xLDAuMSwxKTtcXG5cXFxuXHRcdFx0XHRcdFx0fVxcblxcXG5cdFx0XHRcdFx0XHRlbHNle1xcblxcXG5cdFx0XHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoZnJhZ0NvbG9yLDEpO1xcblxcXG5cdFx0XHRcdFx0XHR9XFxuXFxcblx0XHRcdFx0XHR9XFxuJ1xuXG5cdFx0XHRcdFx0LFxuXHRcdFx0dmVydDogXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuXFxcblx0XHRcdFx0XHRhdHRyaWJ1dGUgZmxvYXQgc2lkZV9sZW5ndGg7XFxuXFxcblx0XHRcdFx0XHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcXG5cXFxuXHRcdFx0XHRcdGF0dHJpYnV0ZSBmbG9hdCByaWdodF9jbGlwO1xcblxcXG5cdFx0XHRcdFx0YXR0cmlidXRlIGZsb2F0IGJvdHRvbV9jbGlwO1xcblxcXG5cdFx0XHRcdFx0dmFyeWluZyBmbG9hdCByX2NsaXA7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIGZsb2F0IGJfY2xpcDtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgeF9zY2FsZTtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgeV9zY2FsZTtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gdmVjMiBvZmZzZXQ7XFxuXFxcblx0XHRcdFx0XHR1bmlmb3JtIGZsb2F0IHN0YWdlX2hlaWdodDtcXG5cXFxuXHRcdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3RhZ2Vfd2lkdGg7XFxuXFxcblx0XHRcdFx0XHR2YXJ5aW5nIHZlYzMgZnJhZ0NvbG9yO1xcblxcXG5cdFx0XHR2ZWMyIG5vcm1hbGl6ZUNvb3Jkcyh2ZWMyIHBvc2l0aW9uKXtcXG5cXFxuXHRcdFx0XHRcdFx0XHRmbG9hdCB4ID0gKHBvc2l0aW9uWzBdK29mZnNldFswXSkqeF9zY2FsZTtcXG5cXFxuXHRcdFx0XHRcdFx0XHRmbG9hdCB5ID0gKHBvc2l0aW9uWzFdK29mZnNldFsxXSkqeV9zY2FsZTtcXG5cXFxuXHRcdFx0XHRyZXR1cm4gdmVjMigyLjAgKiAoKHggLyBzdGFnZV93aWR0aCkgLSAwLjUpLC0oMi4wICogKCh5IC8gc3RhZ2VfaGVpZ2h0KSAtIDAuNSkpKTtcXG5cXFxuXHRcdFx0XHRcdH1cXG5cXFxuXHRcdFx0dm9pZCBtYWluKCkge1xcblxcXG5cdFx0XHRcdGdsX1BvaW50U2l6ZSA9IHNpZGVfbGVuZ3RoKnhfc2NhbGU7XFxuXFxcblx0XHRcdFx0XHRcdFx0ZnJhZ0NvbG9yID0gY29sb3I7XFxuXFxcblx0XHRcdFx0XHRcdFx0cl9jbGlwPXJpZ2h0X2NsaXA7XFxuXFxcblx0XHRcdFx0XHRcdFx0Yl9jbGlwPWJvdHRvbV9jbGlwO1xcblxcXG5cdFx0XHRcdFx0XHRcdHZlYzIgcmVhbF9wb3NpdGlvbiA9IG5vcm1hbGl6ZUNvb3Jkcyhwb3NpdGlvbik7XFxuXFxcblx0XHRcdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KHJlYWxfcG9zaXRpb24sIDAuMCwgMS4wKTtcXG5cXFxuXHRcdFx0fVxcbidcblx0XHRcdCxcblxuXHRcdFx0YXR0cmlidXRlczoge1xuXHRcdFx0XHRwb3NpdGlvbjogc2VsZi5yZWdsLnByb3AoJ3Bvc2l0aW9uJyksXG5cdFx0XHRcdGNvbG9yOiBzZWxmLnJlZ2wucHJvcCgnY29sb3InKSxcblx0XHRcdFx0XHRcdFx0c2lkZV9sZW5ndGg6c2VsZi5yZWdsLnByb3AoJ3NpZGVfbGVuZ3RoJyksXG5cdFx0XHRcdFx0XHRcdHJpZ2h0X2NsaXA6c2VsZi5yZWdsLnByb3AoXCJyaWdodF9jbGlwXCIpLFxuXHRcdFx0XHRcdFx0XHRib3R0b21fY2xpcDpzZWxmLnJlZ2wucHJvcChcImJvdHRvbV9jbGlwXCIpXG5cblx0XHRcdH0sXG5cblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdFx0XHRcdCAgeF9zY2FsZTpzZWxmLnJlZ2wucHJvcCgneF9zY2FsZScpLFxuXHRcdFx0XHRcdFx0XHQgIHlfc2NhbGU6c2VsZi5yZWdsLnByb3AoJ3lfc2NhbGUnKSxcblx0XHRcdFx0XHRcdFx0ICBzdGFnZV93aWR0aDogc2VsZi5yZWdsLnByb3AoJ3N0YWdlX3dpZHRoJyksXG5cdFx0XHRcdFx0XHRcdCAgc3RhZ2VfaGVpZ2h0OiBzZWxmLnJlZ2wucHJvcCgnc3RhZ2VfaGVpZ2h0JyksXG5cdFx0XHRcdFx0XHRcdCAgb2Zmc2V0OnNlbGYucmVnbC5wcm9wKFwib2Zmc2V0XCIpLFxuXHRcdFx0XHRcdFx0XHQgIGlzX2J1ZmZlcjpzZWxmLnJlZ2wucHJvcChcImlzX2J1ZmZlclwiKVxuXHRcdFx0XHRcdFx0ICB9LFxuXG5cdFx0XHRjb3VudDogIHNlbGYucmVnbC5wcm9wKCdjb3VudCcpLFxuXHRcdFx0cHJpbWl0aXZlOiBzZWxmLnJlZ2wucHJvcCgncHJpbWl0aXZlJyksXG5cdFx0XHRcdFx0ZnJhbWVidWZmZXI6c2VsZi5yZWdsLnByb3AoXCJidWZmZXJcIilcblx0XHR9KTtcblx0XHR0aGlzLm9iamVjdF90eXBlc1szXVsnbWV0aG9kJ109dGhpcy5fX2RyYXdTcXVhcmVzO1xuXG5cdFx0dGhpcy5fX2RyYXdJbWFnZXMgPSB0aGlzLnJlZ2woe1xuXHRcdFx0ZnJhZzogYFxuXHRcdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgdGV4dDtcblx0XHRcdFx0dmFyeWluZyB2ZWMyIHV2O1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgZnJhZ0NvbG9yO1xuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IGlzX2J1ZmY7XG5cdFx0XHRcdHZvaWQgbWFpbiAoKSB7XG5cdFx0XHRcdFx0aWYgKGlzX2J1ZmY9PTAuMCl7XG5cdFx0XHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGZyYWdDb2xvciwxKSp0ZXh0dXJlMkQodGV4dCwgdXYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yPXZlYzQoZnJhZ0NvbG9yLDEuMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9YCxcblxuIFx0XHRcdHZlcnQ6IGBcblx0XHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cdFx0XHRcdGF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xuXHRcdFx0XHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcblx0XHRcdFx0dW5pZm9ybSB2ZWMyIHhfeTtcblx0XHRcdFx0dW5pZm9ybSB2ZWMyIHdfaDtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBzdGFnZV9oZWlnaHQ7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3RhZ2Vfd2lkdGg7XG5cdFx0XHRcdHVuaWZvcm0gdmVjNCBnbG9iYWxzO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IGlzX2J1ZmZlcjtcblxuXG5cdFx0XHRcdHZhcnlpbmcgdmVjMiB1djtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIGZyYWdDb2xvcjtcblx0XHRcdFx0dmFyeWluZyBmbG9hdCBpc19idWZmO1xuXHRcdFx0XG5cblx0XHRcdFx0dmVjMiBub3JtYWxpemVDb29yZHModmVjMiBwb3Mpe1xuXHRcdFx0XHRcdGZsb2F0IHggPSAocG9zWzBdK2dsb2JhbHNbMF0pKmdsb2JhbHNbMl07XG5cdFx0XHRcdFx0ZmxvYXQgeSA9IChwb3NbMV0rZ2xvYmFsc1sxXSkqZ2xvYmFsc1szXTtcblx0XHRcdFx0XHRyZXR1cm4gdmVjMigyLjAgKiAoKHggLyBzdGFnZV93aWR0aCkgLSAwLjUpLC0oMi4wICogKCh5IC8gc3RhZ2VfaGVpZ2h0KSAtIDAuNSkpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZvaWQgbWFpbiAoKSB7XG5cdFx0XHRcdFx0dmVjMiBuZXdfcG9zPW5vcm1hbGl6ZUNvb3Jkcyhwb3NpdGlvbik7XG5cdFx0XHRcdFx0aXNfYnVmZj1pc19idWZmZXI7XG5cdFx0XHRcdFx0ZnJhZ0NvbG9yID0gY29sb3I7XG5cdFx0XHRcdFxuXG5cdFx0XHRcdFx0aWYgKGlzX2J1ZmZlcj09MC4wKXtcblxuXHRcdFx0XHRcdFx0ZmxvYXQgeF9mYWN0b3IgPSAxLjAvKCgod19oWzBdKmdsb2JhbHNbMl0pL3N0YWdlX3dpZHRoKSoyLjApO1xuXHRcdFx0XHRcdFx0ZmxvYXQgeV9mYWN0b3IgPSAxLjAvKCgod19oWzFdKmdsb2JhbHNbM10pL3N0YWdlX2hlaWdodCkqMi4wKTtcblx0XHRcdFx0XHRcblxuXHRcdFx0XHRcdFx0ZmxvYXQgeF9vZmZzZXQ9KCgoeF95WzBdK2dsb2JhbHNbMF0pKmdsb2JhbHNbMl0pL3N0YWdlX3dpZHRoKSoyLjAqeF9mYWN0b3I7XG5cdFx0XHRcdFx0XHRmbG9hdCB5X29mZnNldD0oKCh4X3lbMV0rZ2xvYmFsc1sxXSkqZ2xvYmFsc1szXSkvc3RhZ2VfaGVpZ2h0KSoyLjAqeV9mYWN0b3I7XG5cdFx0XHRcdFx0XHR1diA9IHZlYzIoKG5ld19wb3NbMF0qeF9mYWN0b3IpK3hfZmFjdG9yLXhfb2Zmc2V0LC0obmV3X3Bvc1sxXSp5X2ZhY3RvcikreV9mYWN0b3IteV9vZmZzZXQpO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFxuXG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KG5ld19wb3MsIDAsIDEpO1xuXG5cdFx0XHRcdH1gLFxuXG5cdFx0XHRhdHRyaWJ1dGVzOiB7XG4gICAgXHRcdFx0cG9zaXRpb246c2VsZi5yZWdsLnByb3AoXCJwb3NpdGlvblwiKSxcbiAgICBcdFx0XHRjb2xvcjpzZWxmLnJlZ2wucHJvcChcImNvbG9yXCIpXG4gICBcdFx0XHR9LFxuXG4gIFx0XHRcdHVuaWZvcm1zOiB7XG4gICAgXHRcdFx0c3RhZ2VfaGVpZ2h0OnNlbGYucmVnbC5jb250ZXh0KFwidmlld3BvcnRIZWlnaHRcIiksXG4gICAgXHRcdFx0c3RhZ2Vfd2lkdGg6c2VsZi5yZWdsLmNvbnRleHQoXCJ2aWV3cG9ydFdpZHRoXCIpLFxuICAgIFx0XHRcdHdfaDpzZWxmLnJlZ2wucHJvcChcIndfaFwiKSxcbiAgICBcdFx0XHR4X3k6c2VsZi5yZWdsLnByb3AoXCJ4X3lcIiksXG4gICAgXHRcdFx0dGV4dDpzZWxmLnJlZ2wucHJvcChcInRleHRcIiksXG4gICAgXHRcdFx0Z2xvYmFsczpzZWxmLnJlZ2wucHJvcChcImdsb2JhbHNcIiksXG5cdFx0XHRcdGlzX2J1ZmZlcjpzZWxmLnJlZ2wucHJvcChcImlzX2J1ZmZlclwiKSxcblxuICBcdFx0XHR9LFxuXG4gIFx0XHRcdGNvdW50OiBzZWxmLnJlZ2wucHJvcChcImNvdW50XCIpLFxuICBcdFx0XHRmcmFtZWJ1ZmZlcjpzZWxmLnJlZ2wucHJvcChcImJ1ZmZlclwiKVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5vYmplY3RfdHlwZXNbNF1bJ21ldGhvZCddPXRoaXMuX19kcmF3SW1hZ2VzXG5cdH1cbn1cblxuXG5leHBvcnQge1dHTDJESX07XG5cblxuXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFZQTtBQUNBOzs7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFPQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBcEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFxQkE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQU9BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFHQTtBQXJCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBc0JBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVJBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVRBO0FBV0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQS9CQTtBQWlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBWEE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFEQTtBQUNBO0FBMENBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTNDQTtBQUNBO0FBOEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQXJHQTtBQXVHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFIQTtBQUNBO0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVZBO0FBQ0E7QUE4QkE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQWhEQTtBQW9EQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFEQTtBQUNBO0FBcUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdEJBO0FBQ0E7QUFrREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBdkVBO0FBeUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFjQTtBQUNBO0FBZ0RBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUNBO0FBVUE7QUFDQTtBQWxGQTtBQUNBO0FBb0ZBO0FBQ0E7Ozs7OztBQUlBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/webgl/wgl2di.js\n");

/***/ })

/******/ });